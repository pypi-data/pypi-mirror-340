{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Structures in Python","text":"<p>Welcome to the documentation for custom implementations of core data structures in Python.</p>"},{"location":"#included-structures","title":"Included Structures","text":"<ul> <li>Array</li> <li>Singly and Doubly Linked List</li> <li>Stack</li> <li>Queue</li> <li>Binary Tree</li> </ul>"},{"location":"array/","title":"MyArray Class","text":"<p>The <code>MyArray</code> class is a custom implementation of an array that wraps around Python\u2019s list, providing basic array operations such as adding, removing, updating elements, checking if the array is empty, and displaying the array's contents.</p>"},{"location":"array/#features","title":"Features","text":"<ul> <li>Add Element: Add an element to the array.</li> <li>Remove Element: Remove the first occurrence of an item in the array.</li> <li>Update Element: Update the value of an element at a specified index.</li> <li>Check if Empty: Check if the array is empty.</li> <li>Get Size: Get the number of elements in the array.</li> <li>Display: Print the contents of the array.</li> </ul>"},{"location":"array/#methods","title":"Methods","text":""},{"location":"array/#__init__self","title":"<code>__init__(self)</code>","text":"<p>Initializes an empty <code>MyArray</code> instance.</p>"},{"location":"array/#add_elementself-newelement","title":"<code>add_element(self, newElement)</code>","text":"<p>Adds a new element to the end of the array.</p> <p>Arguments: - <code>newElement</code>: The element to be added to the array.</p> <p>Example:</p> <pre><code>my_array = MyArray()\nmy_array.add_element(10)\nmy_array.display()  # Output: [10]\n</code></pre>"},{"location":"array/#remove_atself-item","title":"<code>remove_at(self, item)</code>","text":"<p>Removes the first occurrence of the specified item from the array.</p> <p>Arguments: - <code>item</code>: The item to be removed from the array.</p> <p>Returns: - <code>None</code> if the removal is successful.  - Raises a <code>ValueError</code> if the item is not found in the array.</p> <p>Example:</p> <pre><code>my_array = MyArray()\nmy_array.add_element(10)\nmy_array.add_element(20)\nmy_array.remove_at(10)\nmy_array.display()  # Output: [20]\n</code></pre>"},{"location":"array/#updateself-item-index","title":"<code>update(self, item, index)</code>","text":"<p>Updates the element at the specified index with a new value.</p> <p>Arguments: - <code>item</code>: The new value to place at the specified index. - <code>index</code>: The index position to be updated.</p> <p>Returns: - <code>\"index out of bound\"</code> if the index is out of bounds. - <code>None</code> if the update is successful.</p> <p>Example:</p> <pre><code>my_array = MyArray()\nmy_array.add_element(10)\nmy_array.add_element(20)\nmy_array.update(30, 1)\nmy_array.display()  # Output: [10, 30]\n</code></pre>"},{"location":"array/#isemptyself","title":"<code>isEmpty(self)</code>","text":"<p>Checks if the array is empty.</p> <p>Returns: - <code>True</code> if the array is empty. - <code>False</code> if the array is not empty.</p> <p>Example:</p> <pre><code>my_array = MyArray()\nprint(my_array.isEmpty())  # Output: True\nmy_array.add_element(10)\nprint(my_array.isEmpty())  # Output: False\n</code></pre>"},{"location":"array/#sizeself","title":"<code>size(self)</code>","text":"<p>Returns the current size (number of elements) of the array.</p> <p>Returns: - <code>int</code>: The number of elements in the array.</p> <p>Example:</p> <pre><code>my_array = MyArray()\nmy_array.add_element(10)\nmy_array.add_element(20)\nprint(my_array.size())  # Output: 2\n</code></pre>"},{"location":"array/#displayself","title":"<code>display(self)</code>","text":"<p>Displays the contents of the array.</p> <p>Example:</p> <pre><code>my_array = MyArray()\nmy_array.add_element(10)\nmy_array.add_element(20)\nmy_array.display()  # Output: [10, 20]\n</code></pre>"},{"location":"array/#example-usage","title":"Example Usage","text":"<p>Here\u2019s an example demonstrating how to use the <code>MyArray</code> class:</p> <pre><code># Create an instance of MyArray\nmy_array = MyArray()\n\n# Add elements\nmy_array.add_element(10)\nmy_array.add_element(20)\nmy_array.add_element(30)\n\n# Display the array\nmy_array.display()  # Output: [10, 20, 30]\n\n# Remove an element\nmy_array.remove_at(20)\nmy_array.display()  # Output: [10, 30]\n\n# Update an element\nmy_array.update(25, 1)\nmy_array.display()  # Output: [10, 25]\n\n# Check if the array is empty\nprint(my_array.isEmpty())  # Output: False\n\n# Get the size of the array\nprint(my_array.size())  # Output: 2\n</code></pre>"},{"location":"binary_tree/","title":"Binary Tree","text":""},{"location":"binary_tree/#docsbinary_treemd","title":"<code>docs/binary_tree.md</code>","text":"<pre><code># Binary Tree\n</code></pre> <p>A binary search tree (BST) implementation in Python.</p>"},{"location":"binary_tree/#features","title":"Features","text":"<ul> <li>Insert</li> <li>Delete</li> <li>Search</li> <li>In-order Traversal</li> <li>Pre-order Traversal</li> <li>Post-order Traversal</li> <li>Level-order Traversal</li> </ul>"},{"location":"binary_tree/#class-overview","title":"Class Overview","text":"<pre><code>class BinaryTree:\n    def __init__(self):\n        self.root = None\n    ...\n</code></pre>"},{"location":"linked_list/","title":"Singly Linked List","text":"<p>A simple implementation of a singly linked list with common operations like insert, delete, sort, and search.</p>"},{"location":"linked_list/#features","title":"Features","text":"<ul> <li>Insertion (beginning, end, after index)</li> <li>Deletion by index</li> <li>Bubble sort</li> <li>Reversal</li> <li>Search</li> <li>Display</li> </ul>"},{"location":"linked_list/#class-overview","title":"Class Overview","text":"<pre><code>class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    ...\n</code></pre>"},{"location":"linked_list/#docsdoubly_linked_listmd","title":"<code>docs/doubly_linked_list.md</code>","text":"<pre><code># Doubly Linked List\n</code></pre> <p>A doubly linked list where each node points to both the next and the previous node.</p>"},{"location":"linked_list/#features_1","title":"Features","text":"<ul> <li>Insertion (beginning, at index, end, after a node)</li> <li>Deletion by index</li> <li>Display</li> <li>Search</li> <li>Update</li> <li>Reverse</li> <li>Sort</li> </ul>"},{"location":"linked_list/#class-overview_1","title":"Class Overview","text":"<pre><code>class DoublyNode:\n    def __init__(self, item):\n        self.data = item\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    ...\n\n---\n</code></pre>"},{"location":"queue/","title":"Queue","text":""},{"location":"queue/#docsqueuemd","title":"<code>docs/queue.md</code>","text":"<pre><code># Queue\n</code></pre> <p>A custom queue with a fixed maximum size.</p>"},{"location":"queue/#features","title":"Features","text":"<ul> <li>Enqueue</li> <li>Dequeue</li> <li>Peek (front and rear)</li> <li>Check full</li> <li>Check empty</li> <li>Display</li> </ul>"},{"location":"queue/#class-overview","title":"Class Overview","text":"<pre><code>class MyQueue:\n    def __init__(self, size, queue=[]):\n        self.queue = queue\n        self.size = size\n    ...\n</code></pre>"},{"location":"stack/","title":"Stack","text":""},{"location":"stack/#docsstackmd","title":"<code>docs/stack.md</code>","text":"<pre><code># Stack\n</code></pre> <p>A basic stack implementation using a Python list.</p>"},{"location":"stack/#features","title":"Features","text":"<ul> <li>Push</li> <li>Pop</li> <li>Peek (top)</li> <li>Check empty</li> <li>Size</li> <li>Display</li> </ul>"},{"location":"stack/#class-overview","title":"Class Overview","text":"<pre><code>class Stack:\n    def __init__(self, para=[]):\n        self.stack = para\n    ...\n</code></pre>"}]}