name: Test, build and release
on:
  #pull_request: # Pull request events (default: open, synchronized, reopened) in any branch triggers the workflow.
  push:
    branches:
      - feature/uv

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Installing UV
        uses: astral-sh/setup-uv@v5

      - name: Installing Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
          
      - name: Verifying dependencies
        id: lock
        run: uv lock --check
        
      - name: Installing dependencies
        id: sync
        run: uv sync --dev

      - name: Running pytest
        id: test
        run: uv run pytest

      - name: Running linter
        id: lint
        run: uv run ruff check src --output-format=github
             
      - name: Running formatter
        id: format
        run: uv run ruff format src --diff
            
      # - name: Running type checker
      #   id: type
      #   run: uv run mypy src

      - name: Parsing info
        shell: bash
        run: |
          echo "RELEASE_NAME=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")" >> $GITHUB_ENV

      - name: Build package
        id: build
        run: uv build
        if: steps.lock.outcome == 'success' && steps.sync.outcome == 'success' && steps.test.outcome == 'success' && steps.lint.outcome == 'success' && steps.format.outcome == 'success'
        
      - name: Publish package
        run: uv publish --token ${{ secrets.PYPI_API_TOKEN }}
        if: steps.build.outcome == 'success'

      - name: Publish artifacts
        uses: actions/upload-artifact@v4
        if: steps.build.outcome == 'success'
        with:
          name: ${{ env.RELEASE_NAME }}
          path: dist/*

    outputs:
      RELEASE_NAME: ${{ env.RELEASE_NAME }}
      RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      PASSED_BUILD: ${{ steps.build.outcome }}


  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/feature/uv'
    steps:
      - name: Collect artifacts
        uses: actions/download-artifact@v4
        id: collect
        if: ${{ needs.build.outputs.PASSED_BUILD }} == 'success'

      - name: Upload artifacts 
        uses: softprops/action-gh-release@v2
        if: steps.collect.outcome == 'success'
        with:
          files: ${{ needs.build.outputs.RELEASE_NAME }}/*
          tag_name: ${{ needs.build.outputs.RELEASE_VERSION }}
          generate_release_notes: true
          prerelease: true