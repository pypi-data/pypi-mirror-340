# coding: utf-8

"""
    Chino.io :: Scriba API

    An API to create and search immutable, legally-validated Audit Logs.<br>Provided by Chino.io - https://www.chino.io  # noqa: E501

    OpenAPI spec version: v1
    Contact: tech-support@chino.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from chinoscriba.api_client import ApiClient


class BlocksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def exported_list(self, **kwargs):  # noqa: E501
        """List exportable Blocks  # noqa: E501

        List all the exportable blocks of a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exported_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exported_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.exported_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def exported_list_with_http_info(self, **kwargs):  # noqa: E501
        """List exportable Blocks  # noqa: E501

        List all the exportable blocks of a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exported_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exported_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'InternalToken']  # noqa: E501

        return self.api_client.call_api(
            '/exported/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exported_read(self, block_id, **kwargs):  # noqa: E501
        """Export a Block  # noqa: E501

        Download a zip which holds the log data in json format plus the metadata of the block itself.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exported_read(block_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exported_read_with_http_info(block_id, **kwargs)  # noqa: E501
        else:
            (data) = self.exported_read_with_http_info(block_id, **kwargs)  # noqa: E501
            return data

    def exported_read_with_http_info(self, block_id, **kwargs):  # noqa: E501
        """Export a Block  # noqa: E501

        Download a zip which holds the log data in json format plus the metadata of the block itself.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exported_read_with_http_info(block_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['block_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exported_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'block_id' is set
        if ('block_id' not in params or
                params['block_id'] is None):
            raise ValueError("Missing the required parameter `block_id` when calling `exported_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'block_id' in params:
            path_params['block_id'] = params['block_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'InternalToken']  # noqa: E501

        return self.api_client.call_api(
            '/exported/{block_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_create(self, body, **kwargs):  # noqa: E501
        """Validate downloaded Block  # noqa: E501

        The API facilitates hash recalculation for blocks through the provision of metadata and log data. This process enables manual verification, ensuring the integrity of the hash chain.  Users can retrieve their blocks from our console, packaged within compressed zip files. Each package includes essential metadata containing parameters like prev-hash, start-time, and end-time, alongside a comprehensive log file corresponding to the block.  Metadata encapsulates critical block parameters necessary for hash recalculations, while the log file contains individual logs arranged in a line-by-line format. Note that the API expects log data in an array format (`[]`), necessitating a conversion to meet this requirement.  Upon hash recalculation, the resulting hash can be manually cross-verified with hash data within the metadata file or with the subsequent block's prev-hash. Validation includes cross-referencing the root-hash with the metadata's root-hash to confirm the sequential presence and order of logs. Any deviation in the root-hash invalidates the block hash, thereby negating the validation. The prev-hash value can be sourced from the metadata file or computed from the preceding block. Chain validation commences from the genesis block, marked by a prev-hash of `0000000000000000000000000000000000000000000000000000000000000000` - a string of sixty-four zeros, to substantiate the entire chain's correctness.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValidateBlock body: (required)
        :return: ValidateBlockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def validate_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Validate downloaded Block  # noqa: E501

        The API facilitates hash recalculation for blocks through the provision of metadata and log data. This process enables manual verification, ensuring the integrity of the hash chain.  Users can retrieve their blocks from our console, packaged within compressed zip files. Each package includes essential metadata containing parameters like prev-hash, start-time, and end-time, alongside a comprehensive log file corresponding to the block.  Metadata encapsulates critical block parameters necessary for hash recalculations, while the log file contains individual logs arranged in a line-by-line format. Note that the API expects log data in an array format (`[]`), necessitating a conversion to meet this requirement.  Upon hash recalculation, the resulting hash can be manually cross-verified with hash data within the metadata file or with the subsequent block's prev-hash. Validation includes cross-referencing the root-hash with the metadata's root-hash to confirm the sequential presence and order of logs. Any deviation in the root-hash invalidates the block hash, thereby negating the validation. The prev-hash value can be sourced from the metadata file or computed from the preceding block. Chain validation commences from the genesis block, marked by a prev-hash of `0000000000000000000000000000000000000000000000000000000000000000` - a string of sixty-four zeros, to substantiate the entire chain's correctness.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ValidateBlock body: (required)
        :return: ValidateBlockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `validate_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic', 'InternalToken']  # noqa: E501

        return self.api_client.call_api(
            '/validate/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ValidateBlockResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
