# coding: utf-8

"""
    Chino.io :: Scriba API

    An API to create and search immutable, legally-validated Audit Logs.<br>Provided by Chino.io - https://www.chino.io  # noqa: E501

    OpenAPI spec version: v1
    Contact: tech-support@chino.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidateBlockResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_hash': 'str',
        'tree_root': 'str'
    }

    attribute_map = {
        'block_hash': 'block_hash',
        'tree_root': 'tree_root'
    }

    def __init__(self, block_hash=None, tree_root=None):  # noqa: E501
        """ValidateBlockResponse - a model defined in Swagger"""  # noqa: E501
        self._block_hash = None
        self._tree_root = None
        self.discriminator = None
        self.block_hash = block_hash
        self.tree_root = tree_root

    @property
    def block_hash(self):
        """Gets the block_hash of this ValidateBlockResponse.  # noqa: E501

        Hash of the Block - generated from the hash of the logs and some Block metadata.  # noqa: E501

        :return: The block_hash of this ValidateBlockResponse.  # noqa: E501
        :rtype: str
        """
        return self._block_hash

    @block_hash.setter
    def block_hash(self, block_hash):
        """Sets the block_hash of this ValidateBlockResponse.

        Hash of the Block - generated from the hash of the logs and some Block metadata.  # noqa: E501

        :param block_hash: The block_hash of this ValidateBlockResponse.  # noqa: E501
        :type: str
        """
        if block_hash is None:
            raise ValueError("Invalid value for `block_hash`, must not be `None`")  # noqa: E501

        self._block_hash = block_hash

    @property
    def tree_root(self):
        """Gets the tree_root of this ValidateBlockResponse.  # noqa: E501

        Hash of the logs - from the root of the Merkle tree.  # noqa: E501

        :return: The tree_root of this ValidateBlockResponse.  # noqa: E501
        :rtype: str
        """
        return self._tree_root

    @tree_root.setter
    def tree_root(self, tree_root):
        """Sets the tree_root of this ValidateBlockResponse.

        Hash of the logs - from the root of the Merkle tree.  # noqa: E501

        :param tree_root: The tree_root of this ValidateBlockResponse.  # noqa: E501
        :type: str
        """
        if tree_root is None:
            raise ValueError("Invalid value for `tree_root`, must not be `None`")  # noqa: E501

        self._tree_root = tree_root

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidateBlockResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidateBlockResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
