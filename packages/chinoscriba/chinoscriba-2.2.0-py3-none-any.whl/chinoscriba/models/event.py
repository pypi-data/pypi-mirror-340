# coding: utf-8

"""
    Chino.io :: Scriba API

    An API to create and search immutable, legally-validated Audit Logs.<br>Provided by Chino.io - https://www.chino.io  # noqa: E501

    OpenAPI spec version: v1
    Contact: tech-support@chino.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_id': 'str',
        'name': 'str',
        'crontab': 'str',
        'query': 'object',
        'last_run': 'datetime',
        'action': 'object',
        'active': 'bool'
    }

    attribute_map = {
        'event_id': 'event_id',
        'name': 'name',
        'crontab': 'crontab',
        'query': 'query',
        'last_run': 'last_run',
        'action': 'action',
        'active': 'active'
    }

    def __init__(self, event_id=None, name=None, crontab=None, query=None, last_run=None, action=None, active=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._event_id = None
        self._name = None
        self._crontab = None
        self._query = None
        self._last_run = None
        self._action = None
        self._active = None
        self.discriminator = None
        if event_id is not None:
            self.event_id = event_id
        self.name = name
        self.crontab = crontab
        self.query = query
        if last_run is not None:
            self.last_run = last_run
        self.action = action
        if active is not None:
            self.active = active

    @property
    def event_id(self):
        """Gets the event_id of this Event.  # noqa: E501


        :return: The event_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Event.


        :param event_id: The event_id of this Event.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    @property
    def name(self):
        """Gets the name of this Event.  # noqa: E501


        :return: The name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def crontab(self):
        """Gets the crontab of this Event.  # noqa: E501


        :return: The crontab of this Event.  # noqa: E501
        :rtype: str
        """
        return self._crontab

    @crontab.setter
    def crontab(self, crontab):
        """Sets the crontab of this Event.


        :param crontab: The crontab of this Event.  # noqa: E501
        :type: str
        """
        if crontab is None:
            raise ValueError("Invalid value for `crontab`, must not be `None`")  # noqa: E501

        self._crontab = crontab

    @property
    def query(self):
        """Gets the query of this Event.  # noqa: E501


        :return: The query of this Event.  # noqa: E501
        :rtype: object
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Event.


        :param query: The query of this Event.  # noqa: E501
        :type: object
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def last_run(self):
        """Gets the last_run of this Event.  # noqa: E501


        :return: The last_run of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this Event.


        :param last_run: The last_run of this Event.  # noqa: E501
        :type: datetime
        """

        self._last_run = last_run

    @property
    def action(self):
        """Gets the action of this Event.  # noqa: E501


        :return: The action of this Event.  # noqa: E501
        :rtype: object
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Event.


        :param action: The action of this Event.  # noqa: E501
        :type: object
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def active(self):
        """Gets the active of this Event.  # noqa: E501


        :return: The active of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Event.


        :param active: The active of this Event.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
