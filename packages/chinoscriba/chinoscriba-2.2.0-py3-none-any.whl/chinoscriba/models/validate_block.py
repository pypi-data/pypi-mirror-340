# coding: utf-8

"""
    Chino.io :: Scriba API

    An API to create and search immutable, legally-validated Audit Logs.<br>Provided by Chino.io - https://www.chino.io  # noqa: E501

    OpenAPI spec version: v1
    Contact: tech-support@chino.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidateBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prev_hash': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'log_data': 'list[object]'
    }

    attribute_map = {
        'prev_hash': 'prev_hash',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'log_data': 'log_data'
    }

    def __init__(self, prev_hash=None, start_time=None, end_time=None, log_data=None):  # noqa: E501
        """ValidateBlock - a model defined in Swagger"""  # noqa: E501
        self._prev_hash = None
        self._start_time = None
        self._end_time = None
        self._log_data = None
        self.discriminator = None
        self.prev_hash = prev_hash
        self.start_time = start_time
        self.end_time = end_time
        self.log_data = log_data

    @property
    def prev_hash(self):
        """Gets the prev_hash of this ValidateBlock.  # noqa: E501

        `prev_hash` hash of the previous block.  # noqa: E501

        :return: The prev_hash of this ValidateBlock.  # noqa: E501
        :rtype: str
        """
        return self._prev_hash

    @prev_hash.setter
    def prev_hash(self, prev_hash):
        """Sets the prev_hash of this ValidateBlock.

        `prev_hash` hash of the previous block.  # noqa: E501

        :param prev_hash: The prev_hash of this ValidateBlock.  # noqa: E501
        :type: str
        """
        if prev_hash is None:
            raise ValueError("Invalid value for `prev_hash`, must not be `None`")  # noqa: E501

        self._prev_hash = prev_hash

    @property
    def start_time(self):
        """Gets the start_time of this ValidateBlock.  # noqa: E501

        `start_time` from the Block metadata  # noqa: E501

        :return: The start_time of this ValidateBlock.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ValidateBlock.

        `start_time` from the Block metadata  # noqa: E501

        :param start_time: The start_time of this ValidateBlock.  # noqa: E501
        :type: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ValidateBlock.  # noqa: E501

        `end_time` from the Block metadata  # noqa: E501

        :return: The end_time of this ValidateBlock.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ValidateBlock.

        `end_time` from the Block metadata  # noqa: E501

        :param end_time: The end_time of this ValidateBlock.  # noqa: E501
        :type: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def log_data(self):
        """Gets the log_data of this ValidateBlock.  # noqa: E501

        Array of the logs to be validated.  # noqa: E501

        :return: The log_data of this ValidateBlock.  # noqa: E501
        :rtype: list[object]
        """
        return self._log_data

    @log_data.setter
    def log_data(self, log_data):
        """Sets the log_data of this ValidateBlock.

        Array of the logs to be validated.  # noqa: E501

        :param log_data: The log_data of this ValidateBlock.  # noqa: E501
        :type: list[object]
        """
        if log_data is None:
            raise ValueError("Invalid value for `log_data`, must not be `None`")  # noqa: E501

        self._log_data = log_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidateBlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidateBlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
