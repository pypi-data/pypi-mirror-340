name: file_path_demo
model: openai/gpt-4o
enable_temporal: false
enable_logging: true
show_flock_banner: true
agents:
  greeter:
    name: greeter
    model: openai/gpt-4o
    input: 'name: str'
    output: 'greeting: str, mobile_number: str'
    use_cache: true
    evaluator:
      name: default
      config:
        model: openai/gpt-4o
        use_cache: true
        temperature: 0.0
        max_tokens: 4096
      type: DeclarativeEvaluator
    modules:
      output:
        name: output
        config:
          enabled: true
          theme: abernathy
          render_table: false
          max_length: 1000
          wait_for_input: false
          write_to_file: false
          output_dir: output/
          truncate_long_values: true
          show_metadata: true
          format_code_blocks: true
          custom_formatters: {}
          no_output: false
          print_context: false
        type: OutputModule
      metrics:
        name: metrics
        config:
          enabled: true
          collect_timing: true
          collect_memory: true
          collect_token_usage: true
          collect_cpu: true
          storage_type: json
          metrics_dir: metrics/
          aggregation_interval: 1h
          retention_days: 30
          alert_on_high_latency: true
          latency_threshold_ms: 30000
        type: MetricsModule
      greeting_module:
        name: greeting_module
        config:
          enabled: true
          language: es
        greetings: {}
        type: GreetingModule
    tools:
    - get_mobile_number
  person_creator:
    name: person_creator
    model: openai/gpt-4o
    input: 'name: str, age: int, languages: list[str]'
    output: 'person: Person'
    use_cache: true
    evaluator:
      name: default
      config:
        model: openai/gpt-4o
        use_cache: true
        temperature: 0.0
        max_tokens: 4096
      type: DeclarativeEvaluator
    modules:
      output:
        name: output
        config:
          enabled: true
          theme: abernathy
          render_table: false
          max_length: 1000
          wait_for_input: false
          write_to_file: false
          output_dir: output/
          truncate_long_values: true
          show_metadata: true
          format_code_blocks: true
          custom_formatters: {}
          no_output: false
          print_context: false
        type: OutputModule
      metrics:
        name: metrics
        config:
          enabled: true
          collect_timing: true
          collect_memory: true
          collect_token_usage: true
          collect_cpu: true
          storage_type: json
          metrics_dir: metrics/
          aggregation_interval: 1h
          retention_days: 30
          alert_on_high_latency: true
          latency_threshold_ms: 30000
        type: MetricsModule
types:
  Person:
    module_path: __main__
    type: pydantic.BaseModel
    schema:
      description: A simple person model.
      properties:
        name:
          description: The name of the person IN ALL CAPS
          title: Name
          type: string
        age:
          title: Age
          type: integer
        languages:
          items:
            type: string
          title: Languages
          type: array
      required:
      - name
      - age
      type: object
components:
  DeclarativeEvaluator:
    type: flock_component
    module_path: flock.evaluators.declarative.declarative_evaluator
    file_path: src/flock/evaluators/declarative/declarative_evaluator.py
    description: Evaluator that uses DSPy for generation.
  OutputModule:
    type: flock_component
    module_path: flock.modules.output.output_module
    file_path: src/flock/modules/output/output_module.py
    description: Module that handles output formatting and display.
  MetricsModule:
    type: flock_component
    module_path: flock.modules.performance.metrics_module
    file_path: src/flock/modules/performance/metrics_module.py
    description: Module for collecting and analyzing agent performance metrics.
  GreetingModule:
    type: flock_component
    module_path: __main__
    file_path: examples/01_introduction/08a_serialization.py
    description: A simple module that generates greetings.
  get_mobile_number:
    type: flock_callable
    module_path: __main__
    file_path: examples/01_introduction/08a_serialization.py
    description: A tool that returns a mobile number to a name.
dependencies:
- pydantic>=2.0.0
- flock-core>=0.4.0
metadata:
  path_type: relative
  flock_version: 0.4.0
