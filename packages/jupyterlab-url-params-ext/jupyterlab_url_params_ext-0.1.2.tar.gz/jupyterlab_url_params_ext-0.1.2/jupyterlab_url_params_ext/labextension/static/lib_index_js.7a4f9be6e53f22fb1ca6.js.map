{"version":3,"file":"lib_index_js.7a4f9be6e53f22fb1ca6.js","mappings":"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","sources":["webpack://jupyterlab_url_params_ext/./src/index.ts"],"sourcesContent":["import {\r\n  JupyterFrontEnd,\r\n  JupyterFrontEndPlugin\r\n} from '@jupyterlab/application';\r\nimport { ISessionContext, ISessionContextDialogs } from '@jupyterlab/apputils';\r\nimport {\r\n  INotebookTracker,\r\n  Notebook,\r\n  NotebookActions\r\n} from '@jupyterlab/notebook';\r\nimport { ITranslator } from '@jupyterlab/translation';\r\n\r\n/** A marker that defines the cell where parameters will be inserted. */\r\nconst PARAMETERS_MARKER = '# Parameters:';\r\n\r\n/** A record type for notebook parameters, where each key is a string and the value is also a string. */\r\ntype NotebookParameters = Record<string, string>;\r\n\r\n/**\r\n * A universal function that tries to extract URLSearchParams from the given URL string.\r\n */\r\nfunction getSearchParamsFromUrl(urlString: string): URLSearchParams {\r\n  try {\r\n    const url = new URL(urlString);\r\n    return url.searchParams;\r\n  } catch {\r\n    // If the string is invalid as a URL\r\n    return new URLSearchParams();\r\n  }\r\n}\r\n\r\n/**\r\n * Attempts to collect parameters from multiple sources:\r\n * 1) Current URL (window.location.href)\r\n * 2) document.referrer\r\n * 3) sessionStorage\r\n * 4) Manual parsing (fallback) for any remaining possibilities\r\n */\r\nfunction getAllPossibleParams(): URLSearchParams {\r\n  let searchParams = getSearchParamsFromUrl(window.location.href);\r\n\r\n  // 1. Attempt referrer, if nothing found in the current URL\r\n  if (searchParams.size === 0 && document.referrer) {\r\n    console.log('notebookparams: trying referrer URL', document.referrer);\r\n    const referrerParams = getSearchParamsFromUrl(document.referrer);\r\n\r\n    if (referrerParams.size > 0) {\r\n      searchParams = referrerParams;\r\n    } else {\r\n      // We also try to extract 'next' from the referrer if it has that parameter\r\n      const referrerUrl = new URL(document.referrer);\r\n      const referrerNextParam = referrerUrl.searchParams.get('next');\r\n      if (referrerNextParam && referrerNextParam.includes('%3F')) {\r\n        try {\r\n          const decodedNext = decodeURIComponent(referrerNextParam);\r\n          if (decodedNext.includes('?')) {\r\n            const queryPart = decodedNext.split('?')[1];\r\n            const extractedFromNext = new URLSearchParams(queryPart);\r\n            if (extractedFromNext.size > 0) {\r\n              console.log(\r\n                'notebookparams: extracted params from referrer next parameter',\r\n                extractedFromNext\r\n              );\r\n              searchParams = extractedFromNext;\r\n            }\r\n          }\r\n        } catch (e) {\r\n          console.error(\r\n            'notebookparams: error parsing referrer next parameter',\r\n            e\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // 2. If still nothing, check sessionStorage\r\n  if (searchParams.size === 0) {\r\n    try {\r\n      const storedParams = sessionStorage.getItem('jupyterlab_url_params');\r\n      if (storedParams) {\r\n        console.log('notebookparams: found stored parameters', storedParams);\r\n        searchParams = new URLSearchParams(storedParams);\r\n      }\r\n    } catch (e) {\r\n      console.error('notebookparams: error reading sessionStorage', e);\r\n    }\r\n  }\r\n\r\n  // 3. If still empty, do a fallback manual parsing on possible URLs\r\n  if (searchParams.size === 0) {\r\n    const fallbackUrls = [\r\n      window.location.href,\r\n      document.referrer,\r\n      window.location.search\r\n    ].filter(Boolean);\r\n\r\n    for (const urlString of fallbackUrls) {\r\n      if (!urlString.includes('?')) {\r\n        continue;\r\n      }\r\n      const queryString = urlString.split('?')[1];\r\n      if (!queryString) {\r\n        continue;\r\n      }\r\n      const extractedParams = new URLSearchParams();\r\n      queryString.split('&').forEach(param => {\r\n        const [key, value] = param.split('=');\r\n        if (key && value) {\r\n          extractedParams.append(key, decodeURIComponent(value));\r\n        }\r\n      });\r\n\r\n      if (extractedParams.size > 0) {\r\n        console.log(\r\n          'notebookparams: extracted params manually',\r\n          extractedParams\r\n        );\r\n        searchParams = extractedParams;\r\n        // Store for future reloads\r\n        try {\r\n          sessionStorage.setItem(\r\n            'jupyterlab_url_params',\r\n            searchParams.toString()\r\n          );\r\n        } catch (e) {\r\n          console.error('notebookparams: error storing in sessionStorage', e);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return searchParams;\r\n}\r\n\r\n/**\r\n * Parses the 'next' parameter value (e.g. '...next=...') and merges any discovered key-value pairs\r\n * into the existing params object.\r\n */\r\nfunction processNextParameter(params: NotebookParameters, nextValue: string) {\r\n  try {\r\n    const decodedNext = decodeURIComponent(nextValue);\r\n    if (decodedNext.includes('?')) {\r\n      const queryPart = decodedNext.split('?')[1];\r\n      queryPart.split('&').forEach(param => {\r\n        const [key, value] = param.split('=');\r\n        if (key && value) {\r\n          params[key] = decodeURIComponent(value);\r\n        }\r\n      });\r\n    }\r\n  } catch (e) {\r\n    console.error('notebookparams: error parsing next parameter', e);\r\n  }\r\n}\r\n\r\n/**\r\n * Builds a dictionary (object) of all parameters, skipping or merging special cases like 'next'.\r\n */\r\nfunction buildParamsFromSearchParams(\r\n  searchParams: URLSearchParams\r\n): NotebookParameters {\r\n  const params: NotebookParameters = {};\r\n\r\n  searchParams.forEach((rawValue, rawKey) => {\r\n    const key = rawKey.trim();\r\n    const value = decodeURIComponent(rawValue.trim());\r\n\r\n    if (key === 'filepath') {\r\n      // We skip 'filepath' from insertion\r\n      return;\r\n    }\r\n    if (key === 'next' && rawValue.includes('?')) {\r\n      // If it's a 'next' param that itself contains query parameters, parse them\r\n      processNextParameter(params, rawValue);\r\n    } else {\r\n      // Otherwise, just store directly\r\n      params[key] = value;\r\n    }\r\n  });\r\n\r\n  return params;\r\n}\r\n\r\n/**\r\n * Converts a dictionary of parameters into a Python dictionary string that can be inserted into the parameters cell.\r\n * E.g. { a: \"1\", b: \"2\" } -> \"params = {\"a\": 1, \"b\": 2}\"\r\n */\r\nfunction createParameterCellText(params: NotebookParameters): string {\r\n  // Create Python dictionary entries\r\n  const entries: string[] = [];\r\n  for (const [key, value] of Object.entries(params)) {\r\n    // Try to determine if value is numeric or boolean to avoid unnecessary quotes\r\n    let formattedValue: string;\r\n    if (value === 'true' || value === 'false') {\r\n      // Convert JavaScript boolean strings to Python booleans\r\n      formattedValue = value === 'true' ? 'True' : 'False';\r\n    } else if (!isNaN(Number(value)) && value.trim() !== '') {\r\n      // It's a valid number, use as is without quotes\r\n      formattedValue = value;\r\n    } else {\r\n      // It's a string, add quotes\r\n      formattedValue = `\"${value.replace(/\"/g, '\\\\\"')}\"`;\r\n    }\r\n    entries.push(`\"${key}\": ${formattedValue}`);\r\n  }\r\n\r\n  // Create a Python dictionary\r\n  return `params = {${entries.join(', ')}}`;\r\n}\r\n\r\n/**\r\n * Inserts parameters into the notebook's PARAMETERS_MARKER cell (if found).\r\n * Returns the full parameter dictionary.\r\n */\r\nfunction fillParametersFromUrl(notebookContent: Notebook): NotebookParameters {\r\n  if (!notebookContent.model) {\r\n    return {};\r\n  }\r\n\r\n  // 1. Get the full set of searchParams\r\n  const searchParams = getAllPossibleParams();\r\n  if (searchParams.size === 0) {\r\n    console.log('notebookparams: no parameters found in any source');\r\n    return {};\r\n  }\r\n\r\n  // 2. Build a dictionary of all parameters\r\n  const params = buildParamsFromSearchParams(searchParams);\r\n\r\n  // 3. Find the cell with PARAMETERS_MARKER and insert the parameter text\r\n  const parameterCellText = createParameterCellText(params);\r\n  if (parameterCellText) {\r\n    const cells = notebookContent.model.cells;\r\n    for (let i = 0; i < cells.length; i++) {\r\n      const sharedModel = cells.get(i).sharedModel;\r\n      if (sharedModel.source.startsWith(PARAMETERS_MARKER)) {\r\n        sharedModel.setSource(`${PARAMETERS_MARKER}\\n${parameterCellText}`);\r\n        console.log(`notebookparams: parameters set in cell ${i}`);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return params;\r\n}\r\n\r\n/**\r\n * Executes all cells in the notebook (top to bottom).\r\n * If needed, you can adjust the logic to run only cells from the active cell downwards.\r\n */\r\nfunction runAllCells(\r\n  notebook: Notebook,\r\n  sessionContext?: ISessionContext,\r\n  sessionDialogs?: ISessionContextDialogs,\r\n  translator?: ITranslator\r\n): Promise<boolean> {\r\n  if (!notebook.model) {\r\n    return Promise.resolve(false);\r\n  }\r\n  return NotebookActions.runAll(\r\n    notebook,\r\n    sessionContext,\r\n    sessionDialogs,\r\n    translator\r\n  );\r\n}\r\n\r\n/**\r\n * Executes all cells if 'autorun' in parameters is set to 'true', waiting for the kernel to be idle.\r\n */\r\nfunction handleAutorun(\r\n  params: NotebookParameters,\r\n  notebook: Notebook,\r\n  sessionContext: ISessionContext\r\n): void {\r\n  // Check if autorun is enabled\r\n  if (!params.autorun || params.autorun.toLowerCase() !== 'true') {\r\n    return;\r\n  }\r\n\r\n  const kernelStatus = sessionContext.session?.kernel?.status;\r\n  if (kernelStatus === 'idle') {\r\n    runAllCells(notebook, sessionContext);\r\n  } else {\r\n    const onStatusChanged = () => {\r\n      if (sessionContext.session?.kernel?.status === 'idle') {\r\n        runAllCells(notebook, sessionContext);\r\n        sessionContext.statusChanged.disconnect(onStatusChanged);\r\n      }\r\n    };\r\n    sessionContext.statusChanged.connect(onStatusChanged);\r\n  }\r\n}\r\n\r\n/**\r\n * The main function to process the notebook: insert parameters and (optionally) run.\r\n */\r\nfunction processNotebook(\r\n  notebookContent: Notebook,\r\n  sessionContext: ISessionContext\r\n): void {\r\n  const params = fillParametersFromUrl(notebookContent);\r\n  // If 'autorun' is enabled, run the notebook\r\n  handleAutorun(params, notebookContent, sessionContext);\r\n}\r\n\r\n/**\r\n * Sets up handlers for a specific notebook:\r\n * - When the notebook model is loaded\r\n * - When the session connection status changes\r\n */\r\nfunction setupNotebookHandlers(\r\n  notebook: {\r\n    content: Notebook;\r\n    context: { sessionContext: ISessionContext };\r\n  } | null\r\n): void {\r\n  if (!notebook) {\r\n    return;\r\n  }\r\n\r\n  const { content, context } = notebook;\r\n  if (content.model) {\r\n    processNotebook(content, context.sessionContext);\r\n  }\r\n\r\n  content.modelChanged.connect(() =>\r\n    processNotebook(content, context.sessionContext)\r\n  );\r\n  context.sessionContext.connectionStatusChanged.connect(() =>\r\n    processNotebook(content, context.sessionContext)\r\n  );\r\n}\r\n\r\n/**\r\n * A JupyterLab plugin that automatically extracts parameters from the URL/referrer,\r\n * writes them to the cell with the \"# Parameters:\" marker,\r\n * and optionally runs all notebook cells if 'autorun' is set.\r\n */\r\nconst plugin: JupyterFrontEndPlugin<void> = {\r\n  id: 'jupyterlab-open-url-params-extension',\r\n  autoStart: true,\r\n  requires: [INotebookTracker],\r\n\r\n  activate: (app: JupyterFrontEnd, tracker: INotebookTracker) => {\r\n    console.log('JupyterLab extension jupyterlab_url_params_ext is activated!');\r\n    // Listen for changes to the currently active notebook\r\n    tracker.currentChanged.connect((_, notebook) => {\r\n      setupNotebookHandlers(notebook);\r\n    });\r\n  }\r\n};\r\n\r\nexport default plugin;\r\n"],"names":[],"sourceRoot":""}