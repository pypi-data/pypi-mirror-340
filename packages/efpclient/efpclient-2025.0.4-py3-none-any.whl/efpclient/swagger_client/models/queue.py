# coding: utf-8

"""
    EF Portal REST API

    # Introduction to EF Portal REST API  Welcome to the documentation for the EF Portal REST API, which provides powerful endpoints to manage `GRID`, `MONITOR`, and `SYSTEM` operations.  This comprehensive guide will help you navigate and utilize our API effectively. ## Access Methods  You can interact with the EF Portal through two primary methods:  1. **Web UI**: <a href=\"swagger.html\" target=\"_blank\">Swagger UI</a> to submit commands. **ReDoc** is for documentation purposes.  1. **Command Line Interface**: A Python-based client for programmatic access. - <a href=\"https://pypi.org/project/efpclient/\" target=\"_blank\">EF Portal Client</a> hosted on `PyPi.org`.  Both the Web UI and Python client support all API endpoints described in this documentation. ## API Structure  Our API is organized into three distinct categories for easy navigation and use:  1. **Grid**: Manage hosts, queues, jobs, and clusters. 1. **Monitor**: Access user information and manage licenses (admin-only operations). 1. **System**: Handle services, spoolers, and file operations.  ## Key Operations  ### Grid Operations  - Host and queue management - Job control (find, list, delete, resume, suspend) - Cluster information  ### Monitor Operations (**_Admin Only_**)  - User session management - License control and usage monitoring  ### System Operations  - Service management (list, describe, submit) - Spooler control (list, delete) - File handling (list, upload)  ## OpenAPI Version  You can find the version of OpenAPI spec from the `version` object  ```yaml openapi: 3.0.1   info:   version: '1.0'   title: EF Portal REST API   ...   ```  ## Authentication    The EF Portal REST API uses **token-based** authentication:  - **EF Token**: Your personal access token for API authentication.  ## Getting Started To begin using the API, ensure you have your EF Token ready. Refer to the specific endpoint documentation for detailed usage instructions and examples.   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@ni-sp-software.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Queue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'manager': 'str',
        'status': 'str',
        'total_jobs': 'int',
        'running_jobs': 'int',
        'pending_jobs': 'int',
        'suspended_jobs': 'int'
    }

    attribute_map = {
        'name': 'name',
        'manager': 'manager',
        'status': 'status',
        'total_jobs': 'totalJobs',
        'running_jobs': 'runningJobs',
        'pending_jobs': 'pendingJobs',
        'suspended_jobs': 'suspendedJobs'
    }

    def __init__(self, name=None, manager=None, status=None, total_jobs=None, running_jobs=None, pending_jobs=None, suspended_jobs=None):  # noqa: E501
        """Queue - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._manager = None
        self._status = None
        self._total_jobs = None
        self._running_jobs = None
        self._pending_jobs = None
        self._suspended_jobs = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if manager is not None:
            self.manager = manager
        if status is not None:
            self.status = status
        if total_jobs is not None:
            self.total_jobs = total_jobs
        if running_jobs is not None:
            self.running_jobs = running_jobs
        if pending_jobs is not None:
            self.pending_jobs = pending_jobs
        if suspended_jobs is not None:
            self.suspended_jobs = suspended_jobs

    @property
    def name(self):
        """Gets the name of this Queue.  # noqa: E501


        :return: The name of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Queue.


        :param name: The name of this Queue.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def manager(self):
        """Gets the manager of this Queue.  # noqa: E501


        :return: The manager of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """Sets the manager of this Queue.


        :param manager: The manager of this Queue.  # noqa: E501
        :type: str
        """

        self._manager = manager

    @property
    def status(self):
        """Gets the status of this Queue.  # noqa: E501


        :return: The status of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Queue.


        :param status: The status of this Queue.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def total_jobs(self):
        """Gets the total_jobs of this Queue.  # noqa: E501


        :return: The total_jobs of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._total_jobs

    @total_jobs.setter
    def total_jobs(self, total_jobs):
        """Sets the total_jobs of this Queue.


        :param total_jobs: The total_jobs of this Queue.  # noqa: E501
        :type: int
        """

        self._total_jobs = total_jobs

    @property
    def running_jobs(self):
        """Gets the running_jobs of this Queue.  # noqa: E501


        :return: The running_jobs of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._running_jobs

    @running_jobs.setter
    def running_jobs(self, running_jobs):
        """Sets the running_jobs of this Queue.


        :param running_jobs: The running_jobs of this Queue.  # noqa: E501
        :type: int
        """

        self._running_jobs = running_jobs

    @property
    def pending_jobs(self):
        """Gets the pending_jobs of this Queue.  # noqa: E501


        :return: The pending_jobs of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._pending_jobs

    @pending_jobs.setter
    def pending_jobs(self, pending_jobs):
        """Sets the pending_jobs of this Queue.


        :param pending_jobs: The pending_jobs of this Queue.  # noqa: E501
        :type: int
        """

        self._pending_jobs = pending_jobs

    @property
    def suspended_jobs(self):
        """Gets the suspended_jobs of this Queue.  # noqa: E501


        :return: The suspended_jobs of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._suspended_jobs

    @suspended_jobs.setter
    def suspended_jobs(self, suspended_jobs):
        """Sets the suspended_jobs of this Queue.


        :param suspended_jobs: The suspended_jobs of this Queue.  # noqa: E501
        :type: int
        """

        self._suspended_jobs = suspended_jobs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Queue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Queue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
