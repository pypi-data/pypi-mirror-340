# coding: utf-8

"""
    EF Portal REST API

    # Introduction to EF Portal REST API  Welcome to the documentation for the EF Portal REST API, which provides powerful endpoints to manage `GRID`, `MONITOR`, and `SYSTEM` operations.  This comprehensive guide will help you navigate and utilize our API effectively. ## Access Methods  You can interact with the EF Portal through two primary methods:  1. **Web UI**: <a href=\"swagger.html\" target=\"_blank\">Swagger UI</a> to submit commands. **ReDoc** is for documentation purposes.  1. **Command Line Interface**: A Python-based client for programmatic access. - <a href=\"https://pypi.org/project/efpclient/\" target=\"_blank\">EF Portal Client</a> hosted on `PyPi.org`.  Both the Web UI and Python client support all API endpoints described in this documentation. ## API Structure  Our API is organized into three distinct categories for easy navigation and use:  1. **Grid**: Manage hosts, queues, jobs, and clusters. 1. **Monitor**: Access user information and manage licenses (admin-only operations). 1. **System**: Handle services, spoolers, and file operations.  ## Key Operations  ### Grid Operations  - Host and queue management - Job control (find, list, delete, resume, suspend) - Cluster information  ### Monitor Operations (**_Admin Only_**)  - User session management - License control and usage monitoring  ### System Operations  - Service management (list, describe, submit) - Spooler control (list, delete) - File handling (list, upload)  ## OpenAPI Version  You can find the version of OpenAPI spec from the `version` object  ```yaml openapi: 3.0.1   info:   version: '1.0'   title: EF Portal REST API   ...   ```  ## Authentication    The EF Portal REST API uses **token-based** authentication:  - **EF Token**: Your personal access token for API authentication.  ## Getting Started To begin using the API, ensure you have your EF Token ready. Refer to the specific endpoint documentation for detailed usage instructions and examples.   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@ni-sp-software.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class License(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'component': 'str',
        'expiration': 'str',
        'hosts_preemption': 'bool',
        'ip': 'str',
        'license_hosts': 'bool',
        'licensee': 'str',
        'product': 'str',
        'type': 'str',
        'units_per_user': 'int',
        'vendor': 'str',
        'total_tokens': 'int',
        'used_tokens': 'int',
        'owners': 'list[LicenseOwner]'
    }

    attribute_map = {
        'component': 'component',
        'expiration': 'expiration',
        'hosts_preemption': 'hosts-preemption',
        'ip': 'ip',
        'license_hosts': 'license-hosts',
        'licensee': 'licensee',
        'product': 'product',
        'type': 'type',
        'units_per_user': 'units-per-user',
        'vendor': 'vendor',
        'total_tokens': 'total-tokens',
        'used_tokens': 'used-tokens',
        'owners': 'owners'
    }

    def __init__(self, component=None, expiration=None, hosts_preemption=None, ip=None, license_hosts=None, licensee=None, product=None, type=None, units_per_user=None, vendor=None, total_tokens=None, used_tokens=None, owners=None):  # noqa: E501
        """License - a model defined in Swagger"""  # noqa: E501
        self._component = None
        self._expiration = None
        self._hosts_preemption = None
        self._ip = None
        self._license_hosts = None
        self._licensee = None
        self._product = None
        self._type = None
        self._units_per_user = None
        self._vendor = None
        self._total_tokens = None
        self._used_tokens = None
        self._owners = None
        self.discriminator = None
        if component is not None:
            self.component = component
        if expiration is not None:
            self.expiration = expiration
        if hosts_preemption is not None:
            self.hosts_preemption = hosts_preemption
        if ip is not None:
            self.ip = ip
        if license_hosts is not None:
            self.license_hosts = license_hosts
        if licensee is not None:
            self.licensee = licensee
        if product is not None:
            self.product = product
        if type is not None:
            self.type = type
        if units_per_user is not None:
            self.units_per_user = units_per_user
        if vendor is not None:
            self.vendor = vendor
        if total_tokens is not None:
            self.total_tokens = total_tokens
        if used_tokens is not None:
            self.used_tokens = used_tokens
        if owners is not None:
            self.owners = owners

    @property
    def component(self):
        """Gets the component of this License.  # noqa: E501


        :return: The component of this License.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this License.


        :param component: The component of this License.  # noqa: E501
        :type: str
        """

        self._component = component

    @property
    def expiration(self):
        """Gets the expiration of this License.  # noqa: E501


        :return: The expiration of this License.  # noqa: E501
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this License.


        :param expiration: The expiration of this License.  # noqa: E501
        :type: str
        """

        self._expiration = expiration

    @property
    def hosts_preemption(self):
        """Gets the hosts_preemption of this License.  # noqa: E501


        :return: The hosts_preemption of this License.  # noqa: E501
        :rtype: bool
        """
        return self._hosts_preemption

    @hosts_preemption.setter
    def hosts_preemption(self, hosts_preemption):
        """Sets the hosts_preemption of this License.


        :param hosts_preemption: The hosts_preemption of this License.  # noqa: E501
        :type: bool
        """

        self._hosts_preemption = hosts_preemption

    @property
    def ip(self):
        """Gets the ip of this License.  # noqa: E501


        :return: The ip of this License.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this License.


        :param ip: The ip of this License.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def license_hosts(self):
        """Gets the license_hosts of this License.  # noqa: E501


        :return: The license_hosts of this License.  # noqa: E501
        :rtype: bool
        """
        return self._license_hosts

    @license_hosts.setter
    def license_hosts(self, license_hosts):
        """Sets the license_hosts of this License.


        :param license_hosts: The license_hosts of this License.  # noqa: E501
        :type: bool
        """

        self._license_hosts = license_hosts

    @property
    def licensee(self):
        """Gets the licensee of this License.  # noqa: E501


        :return: The licensee of this License.  # noqa: E501
        :rtype: str
        """
        return self._licensee

    @licensee.setter
    def licensee(self, licensee):
        """Sets the licensee of this License.


        :param licensee: The licensee of this License.  # noqa: E501
        :type: str
        """

        self._licensee = licensee

    @property
    def product(self):
        """Gets the product of this License.  # noqa: E501


        :return: The product of this License.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this License.


        :param product: The product of this License.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def type(self):
        """Gets the type of this License.  # noqa: E501


        :return: The type of this License.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this License.


        :param type: The type of this License.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def units_per_user(self):
        """Gets the units_per_user of this License.  # noqa: E501


        :return: The units_per_user of this License.  # noqa: E501
        :rtype: int
        """
        return self._units_per_user

    @units_per_user.setter
    def units_per_user(self, units_per_user):
        """Sets the units_per_user of this License.


        :param units_per_user: The units_per_user of this License.  # noqa: E501
        :type: int
        """

        self._units_per_user = units_per_user

    @property
    def vendor(self):
        """Gets the vendor of this License.  # noqa: E501


        :return: The vendor of this License.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this License.


        :param vendor: The vendor of this License.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def total_tokens(self):
        """Gets the total_tokens of this License.  # noqa: E501


        :return: The total_tokens of this License.  # noqa: E501
        :rtype: int
        """
        return self._total_tokens

    @total_tokens.setter
    def total_tokens(self, total_tokens):
        """Sets the total_tokens of this License.


        :param total_tokens: The total_tokens of this License.  # noqa: E501
        :type: int
        """

        self._total_tokens = total_tokens

    @property
    def used_tokens(self):
        """Gets the used_tokens of this License.  # noqa: E501


        :return: The used_tokens of this License.  # noqa: E501
        :rtype: int
        """
        return self._used_tokens

    @used_tokens.setter
    def used_tokens(self, used_tokens):
        """Sets the used_tokens of this License.


        :param used_tokens: The used_tokens of this License.  # noqa: E501
        :type: int
        """

        self._used_tokens = used_tokens

    @property
    def owners(self):
        """Gets the owners of this License.  # noqa: E501


        :return: The owners of this License.  # noqa: E501
        :rtype: list[LicenseOwner]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this License.


        :param owners: The owners of this License.  # noqa: E501
        :type: list[LicenseOwner]
        """

        self._owners = owners

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(License, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, License):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
