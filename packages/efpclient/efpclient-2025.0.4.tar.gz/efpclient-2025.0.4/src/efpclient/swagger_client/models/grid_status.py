# coding: utf-8

"""
    EF Portal REST API

    # Introduction to EF Portal REST API  Welcome to the documentation for the EF Portal REST API, which provides powerful endpoints to manage `GRID`, `MONITOR`, and `SYSTEM` operations.  This comprehensive guide will help you navigate and utilize our API effectively. ## Access Methods  You can interact with the EF Portal through two primary methods:  1. **Web UI**: <a href=\"swagger.html\" target=\"_blank\">Swagger UI</a> to submit commands. **ReDoc** is for documentation purposes.  1. **Command Line Interface**: A Python-based client for programmatic access. - <a href=\"https://pypi.org/project/efpclient/\" target=\"_blank\">EF Portal Client</a> hosted on `PyPi.org`.  Both the Web UI and Python client support all API endpoints described in this documentation. ## API Structure  Our API is organized into three distinct categories for easy navigation and use:  1. **Grid**: Manage hosts, queues, jobs, and clusters. 1. **Monitor**: Access user information and manage licenses (admin-only operations). 1. **System**: Handle services, spoolers, and file operations.  ## Key Operations  ### Grid Operations  - Host and queue management - Job control (find, list, delete, resume, suspend) - Cluster information  ### Monitor Operations (**_Admin Only_**)  - User session management - License control and usage monitoring  ### System Operations  - Service management (list, describe, submit) - Spooler control (list, delete) - File handling (list, upload)  ## OpenAPI Version  You can find the version of OpenAPI spec from the `version` object  ```yaml openapi: 3.0.1   info:   version: '1.0'   title: EF Portal REST API   ...   ```  ## Authentication    The EF Portal REST API uses **token-based** authentication:  - **EF Token**: Your personal access token for API authentication.  ## Getting Started To begin using the API, ensure you have your EF Token ready. Refer to the specific endpoint documentation for detailed usage instructions and examples.   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@ni-sp-software.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GridStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base': 'str',
        'batch': 'str',
        'ef': 'str',
        'grid': 'str',
        'value': 'str'
    }

    attribute_map = {
        'base': 'base',
        'batch': 'batch',
        'ef': 'ef',
        'grid': 'grid',
        'value': 'value'
    }

    def __init__(self, base=None, batch=None, ef=None, grid=None, value=None):  # noqa: E501
        """GridStatus - a model defined in Swagger"""  # noqa: E501
        self._base = None
        self._batch = None
        self._ef = None
        self._grid = None
        self._value = None
        self.discriminator = None
        if base is not None:
            self.base = base
        if batch is not None:
            self.batch = batch
        if ef is not None:
            self.ef = ef
        if grid is not None:
            self.grid = grid
        if value is not None:
            self.value = value

    @property
    def base(self):
        """Gets the base of this GridStatus.  # noqa: E501


        :return: The base of this GridStatus.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this GridStatus.


        :param base: The base of this GridStatus.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def batch(self):
        """Gets the batch of this GridStatus.  # noqa: E501


        :return: The batch of this GridStatus.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this GridStatus.


        :param batch: The batch of this GridStatus.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def ef(self):
        """Gets the ef of this GridStatus.  # noqa: E501


        :return: The ef of this GridStatus.  # noqa: E501
        :rtype: str
        """
        return self._ef

    @ef.setter
    def ef(self, ef):
        """Sets the ef of this GridStatus.


        :param ef: The ef of this GridStatus.  # noqa: E501
        :type: str
        """

        self._ef = ef

    @property
    def grid(self):
        """Gets the grid of this GridStatus.  # noqa: E501


        :return: The grid of this GridStatus.  # noqa: E501
        :rtype: str
        """
        return self._grid

    @grid.setter
    def grid(self, grid):
        """Sets the grid of this GridStatus.


        :param grid: The grid of this GridStatus.  # noqa: E501
        :type: str
        """

        self._grid = grid

    @property
    def value(self):
        """Gets the value of this GridStatus.  # noqa: E501


        :return: The value of this GridStatus.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GridStatus.


        :param value: The value of this GridStatus.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GridStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
