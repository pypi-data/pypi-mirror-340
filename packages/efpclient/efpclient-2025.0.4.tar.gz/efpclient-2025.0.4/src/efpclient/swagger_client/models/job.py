# coding: utf-8

"""
    EF Portal REST API

    # Introduction to EF Portal REST API  Welcome to the documentation for the EF Portal REST API, which provides powerful endpoints to manage `GRID`, `MONITOR`, and `SYSTEM` operations.  This comprehensive guide will help you navigate and utilize our API effectively. ## Access Methods  You can interact with the EF Portal through two primary methods:  1. **Web UI**: <a href=\"swagger.html\" target=\"_blank\">Swagger UI</a> to submit commands. **ReDoc** is for documentation purposes.  1. **Command Line Interface**: A Python-based client for programmatic access. - <a href=\"https://pypi.org/project/efpclient/\" target=\"_blank\">EF Portal Client</a> hosted on `PyPi.org`.  Both the Web UI and Python client support all API endpoints described in this documentation. ## API Structure  Our API is organized into three distinct categories for easy navigation and use:  1. **Grid**: Manage hosts, queues, jobs, and clusters. 1. **Monitor**: Access user information and manage licenses (admin-only operations). 1. **System**: Handle services, spoolers, and file operations.  ## Key Operations  ### Grid Operations  - Host and queue management - Job control (find, list, delete, resume, suspend) - Cluster information  ### Monitor Operations (**_Admin Only_**)  - User session management - License control and usage monitoring  ### System Operations  - Service management (list, describe, submit) - Spooler control (list, delete) - File handling (list, upload)  ## OpenAPI Version  You can find the version of OpenAPI spec from the `version` object  ```yaml openapi: 3.0.1   info:   version: '1.0'   title: EF Portal REST API   ...   ```  ## Authentication    The EF Portal REST API uses **token-based** authentication:  - **EF Token**: Your personal access token for API authentication.  ## Getting Started To begin using the API, ensure you have your EF Token ready. Refer to the specific endpoint documentation for detailed usage instructions and examples.   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@ni-sp-software.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'manager': 'str',
        'id': 'str',
        'name': 'str',
        'account': 'str',
        'owner': 'str',
        'queue': 'str',
        'total_cpu_usage': 'str',
        'memory_usage': 'str',
        'swap_usage': 'str',
        'execution_hosts': 'str',
        'submission_time': 'str',
        'execution_time': 'str',
        'execution_directory': 'str',
        'nice': 'str',
        'reasons': 'list[Reason]',
        'status': 'GridStatus'
    }

    attribute_map = {
        'manager': 'manager',
        'id': 'id',
        'name': 'name',
        'account': 'account',
        'owner': 'owner',
        'queue': 'queue',
        'total_cpu_usage': 'totalCpuUsage',
        'memory_usage': 'memoryUsage',
        'swap_usage': 'swapUsage',
        'execution_hosts': 'executionHosts',
        'submission_time': 'submissionTime',
        'execution_time': 'executionTime',
        'execution_directory': 'executionDirectory',
        'nice': 'nice',
        'reasons': 'reasons',
        'status': 'status'
    }

    def __init__(self, manager=None, id=None, name=None, account=None, owner=None, queue=None, total_cpu_usage=None, memory_usage=None, swap_usage=None, execution_hosts=None, submission_time=None, execution_time=None, execution_directory=None, nice=None, reasons=None, status=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        self._manager = None
        self._id = None
        self._name = None
        self._account = None
        self._owner = None
        self._queue = None
        self._total_cpu_usage = None
        self._memory_usage = None
        self._swap_usage = None
        self._execution_hosts = None
        self._submission_time = None
        self._execution_time = None
        self._execution_directory = None
        self._nice = None
        self._reasons = None
        self._status = None
        self.discriminator = None
        if manager is not None:
            self.manager = manager
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if account is not None:
            self.account = account
        if owner is not None:
            self.owner = owner
        if queue is not None:
            self.queue = queue
        if total_cpu_usage is not None:
            self.total_cpu_usage = total_cpu_usage
        if memory_usage is not None:
            self.memory_usage = memory_usage
        if swap_usage is not None:
            self.swap_usage = swap_usage
        if execution_hosts is not None:
            self.execution_hosts = execution_hosts
        if submission_time is not None:
            self.submission_time = submission_time
        if execution_time is not None:
            self.execution_time = execution_time
        if execution_directory is not None:
            self.execution_directory = execution_directory
        if nice is not None:
            self.nice = nice
        if reasons is not None:
            self.reasons = reasons
        if status is not None:
            self.status = status

    @property
    def manager(self):
        """Gets the manager of this Job.  # noqa: E501


        :return: The manager of this Job.  # noqa: E501
        :rtype: str
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """Sets the manager of this Job.


        :param manager: The manager of this Job.  # noqa: E501
        :type: str
        """

        self._manager = manager

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501


        :return: The id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.


        :param id: The id of this Job.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Job.  # noqa: E501


        :return: The name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.


        :param name: The name of this Job.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def account(self):
        """Gets the account of this Job.  # noqa: E501


        :return: The account of this Job.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Job.


        :param account: The account of this Job.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def owner(self):
        """Gets the owner of this Job.  # noqa: E501


        :return: The owner of this Job.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Job.


        :param owner: The owner of this Job.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def queue(self):
        """Gets the queue of this Job.  # noqa: E501


        :return: The queue of this Job.  # noqa: E501
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this Job.


        :param queue: The queue of this Job.  # noqa: E501
        :type: str
        """

        self._queue = queue

    @property
    def total_cpu_usage(self):
        """Gets the total_cpu_usage of this Job.  # noqa: E501


        :return: The total_cpu_usage of this Job.  # noqa: E501
        :rtype: str
        """
        return self._total_cpu_usage

    @total_cpu_usage.setter
    def total_cpu_usage(self, total_cpu_usage):
        """Sets the total_cpu_usage of this Job.


        :param total_cpu_usage: The total_cpu_usage of this Job.  # noqa: E501
        :type: str
        """

        self._total_cpu_usage = total_cpu_usage

    @property
    def memory_usage(self):
        """Gets the memory_usage of this Job.  # noqa: E501


        :return: The memory_usage of this Job.  # noqa: E501
        :rtype: str
        """
        return self._memory_usage

    @memory_usage.setter
    def memory_usage(self, memory_usage):
        """Sets the memory_usage of this Job.


        :param memory_usage: The memory_usage of this Job.  # noqa: E501
        :type: str
        """

        self._memory_usage = memory_usage

    @property
    def swap_usage(self):
        """Gets the swap_usage of this Job.  # noqa: E501


        :return: The swap_usage of this Job.  # noqa: E501
        :rtype: str
        """
        return self._swap_usage

    @swap_usage.setter
    def swap_usage(self, swap_usage):
        """Sets the swap_usage of this Job.


        :param swap_usage: The swap_usage of this Job.  # noqa: E501
        :type: str
        """

        self._swap_usage = swap_usage

    @property
    def execution_hosts(self):
        """Gets the execution_hosts of this Job.  # noqa: E501


        :return: The execution_hosts of this Job.  # noqa: E501
        :rtype: str
        """
        return self._execution_hosts

    @execution_hosts.setter
    def execution_hosts(self, execution_hosts):
        """Sets the execution_hosts of this Job.


        :param execution_hosts: The execution_hosts of this Job.  # noqa: E501
        :type: str
        """

        self._execution_hosts = execution_hosts

    @property
    def submission_time(self):
        """Gets the submission_time of this Job.  # noqa: E501


        :return: The submission_time of this Job.  # noqa: E501
        :rtype: str
        """
        return self._submission_time

    @submission_time.setter
    def submission_time(self, submission_time):
        """Sets the submission_time of this Job.


        :param submission_time: The submission_time of this Job.  # noqa: E501
        :type: str
        """

        self._submission_time = submission_time

    @property
    def execution_time(self):
        """Gets the execution_time of this Job.  # noqa: E501


        :return: The execution_time of this Job.  # noqa: E501
        :rtype: str
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time):
        """Sets the execution_time of this Job.


        :param execution_time: The execution_time of this Job.  # noqa: E501
        :type: str
        """

        self._execution_time = execution_time

    @property
    def execution_directory(self):
        """Gets the execution_directory of this Job.  # noqa: E501


        :return: The execution_directory of this Job.  # noqa: E501
        :rtype: str
        """
        return self._execution_directory

    @execution_directory.setter
    def execution_directory(self, execution_directory):
        """Sets the execution_directory of this Job.


        :param execution_directory: The execution_directory of this Job.  # noqa: E501
        :type: str
        """

        self._execution_directory = execution_directory

    @property
    def nice(self):
        """Gets the nice of this Job.  # noqa: E501


        :return: The nice of this Job.  # noqa: E501
        :rtype: str
        """
        return self._nice

    @nice.setter
    def nice(self, nice):
        """Sets the nice of this Job.


        :param nice: The nice of this Job.  # noqa: E501
        :type: str
        """

        self._nice = nice

    @property
    def reasons(self):
        """Gets the reasons of this Job.  # noqa: E501


        :return: The reasons of this Job.  # noqa: E501
        :rtype: list[Reason]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this Job.


        :param reasons: The reasons of this Job.  # noqa: E501
        :type: list[Reason]
        """

        self._reasons = reasons

    @property
    def status(self):
        """Gets the status of this Job.  # noqa: E501


        :return: The status of this Job.  # noqa: E501
        :rtype: GridStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.  # noqa: E501
        :type: GridStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
