# This file was auto-generated by Fern from our API Definition.

from .row_base import RowBase
import typing
from ...conversation.types.conversation_field import ConversationField
from .field_value import FieldValue
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ConversationRow(RowBase):
    identifier: typing.Dict[ConversationField, FieldValue] = pydantic.Field()
    """
    A unique identifier for each row, consisting of field names mapped to their respective values.
    This includes time groupings and any specified field groupings.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
