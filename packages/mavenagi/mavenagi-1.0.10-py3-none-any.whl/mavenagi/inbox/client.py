# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..commons.types.inbox_item_status import InboxItemStatus
from ..commons.types.inbox_item_type import InboxItemType
import datetime as dt
from ..core.request_options import RequestOptions
from .types.inbox_search_response import InboxSearchResponse
from ..core.pydantic_utilities import parse_obj_as
from ..commons.errors.not_found_error import NotFoundError
from ..commons.types.error_message import ErrorMessage
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.errors.server_error import ServerError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..commons.types.inbox_item import InboxItem
from ..core.jsonable_encoder import jsonable_encoder
from ..commons.types.inbox_item_fix import InboxItemFix
from .types.add_document_fix_request import AddDocumentFixRequest
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InboxClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def search(
        self,
        *,
        statuses: typing.Optional[typing.Sequence[InboxItemStatus]] = OMIT,
        type: typing.Optional[typing.Sequence[InboxItemType]] = OMIT,
        created_after: typing.Optional[dt.datetime] = OMIT,
        created_before: typing.Optional[dt.datetime] = OMIT,
        page: typing.Optional[int] = OMIT,
        size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InboxSearchResponse:
        """
        Retrieve a paginated list of inbox items for an agent.

        Parameters
        ----------
        statuses : typing.Optional[typing.Sequence[InboxItemStatus]]
            List of inbox item statuses to filter by.

        type : typing.Optional[typing.Sequence[InboxItemType]]
            List of inbox item types to filter by.

        created_after : typing.Optional[dt.datetime]
            Filter for items created after this timestamp.

        created_before : typing.Optional[dt.datetime]
            Filter for items created before this timestamp.

        page : typing.Optional[int]
            Page number to return, defaults to 0

        size : typing.Optional[int]
            The size of the page to return, defaults to 20

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InboxSearchResponse

        Examples
        --------
        from mavenagi import MavenAGI

        client = MavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )
        client.inbox.search()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/inbox/search",
            method="POST",
            json={
                "statuses": statuses,
                "type": type,
                "createdAfter": created_after,
                "createdBefore": created_before,
                "page": page,
                "size": size,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    InboxSearchResponse,
                    parse_obj_as(
                        type_=InboxSearchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise ServerError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, inbox_item_id: str, *, app_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> InboxItem:
        """
        Retrieve details of a specific inbox item by its ID.

        Parameters
        ----------
        inbox_item_id : str
            The ID of the inbox item to get. All other entity ID fields are inferred from the request.

        app_id : str
            The App ID of the inbox item to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InboxItem
            Details of the specified inbox item.

        Examples
        --------
        from mavenagi import MavenAGI

        client = MavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )
        client.inbox.get(
            inbox_item_id="inboxItemId",
            app_id="appId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/inbox/{jsonable_encoder(inbox_item_id)}",
            method="GET",
            params={
                "appId": app_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    InboxItem,
                    parse_obj_as(
                        type_=InboxItem,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise ServerError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_fix(
        self, inbox_item_fix_id: str, *, app_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> InboxItemFix:
        """
        Retrieve a suggested fix. Includes document information if the fix is a Missing Knowledge suggestion.

        Parameters
        ----------
        inbox_item_fix_id : str
            Unique identifier for the inbox fix.

        app_id : str
            The App ID of the inbox item fix to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InboxItemFix
            Details of the specified inbox item fix.

        Examples
        --------
        from mavenagi import MavenAGI

        client = MavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )
        client.inbox.get_fix(
            inbox_item_fix_id="inboxItemFixId",
            app_id="appId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/inbox/fix/{jsonable_encoder(inbox_item_fix_id)}",
            method="GET",
            params={
                "appId": app_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    InboxItemFix,
                    parse_obj_as(
                        type_=InboxItemFix,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise ServerError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def apply_fix(
        self,
        inbox_item_fix_id: str,
        *,
        app_id: str,
        add_document_request: typing.Optional[AddDocumentFixRequest] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Apply a fix to an inbox item with a specific document.

        Parameters
        ----------
        inbox_item_fix_id : str
            Unique identifier for the inbox fix.

        app_id : str

        add_document_request : typing.Optional[AddDocumentFixRequest]
            Content for Add Document fixes

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mavenagi import MavenAGI

        client = MavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )
        client.inbox.apply_fix(
            inbox_item_fix_id="inboxItemFixId",
            app_id="appId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/inbox/fix/{jsonable_encoder(inbox_item_fix_id)}/apply",
            method="POST",
            json={
                "appId": app_id,
                "addDocumentRequest": convert_and_respect_annotation_metadata(
                    object_=add_document_request, annotation=AddDocumentFixRequest, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise ServerError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def ignore(
        self, inbox_item_id: str, *, app_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Ignore a specific inbox item by its ID.

        Parameters
        ----------
        inbox_item_id : str
            Unique identifier for the inbox item.

        app_id : str
            The App ID of the inbox item fix to ignore

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mavenagi import MavenAGI

        client = MavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )
        client.inbox.ignore(
            inbox_item_id="inboxItemId",
            app_id="appId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/inbox/{jsonable_encoder(inbox_item_id)}/ignore",
            method="POST",
            params={
                "appId": app_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise ServerError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncInboxClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def search(
        self,
        *,
        statuses: typing.Optional[typing.Sequence[InboxItemStatus]] = OMIT,
        type: typing.Optional[typing.Sequence[InboxItemType]] = OMIT,
        created_after: typing.Optional[dt.datetime] = OMIT,
        created_before: typing.Optional[dt.datetime] = OMIT,
        page: typing.Optional[int] = OMIT,
        size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InboxSearchResponse:
        """
        Retrieve a paginated list of inbox items for an agent.

        Parameters
        ----------
        statuses : typing.Optional[typing.Sequence[InboxItemStatus]]
            List of inbox item statuses to filter by.

        type : typing.Optional[typing.Sequence[InboxItemType]]
            List of inbox item types to filter by.

        created_after : typing.Optional[dt.datetime]
            Filter for items created after this timestamp.

        created_before : typing.Optional[dt.datetime]
            Filter for items created before this timestamp.

        page : typing.Optional[int]
            Page number to return, defaults to 0

        size : typing.Optional[int]
            The size of the page to return, defaults to 20

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InboxSearchResponse

        Examples
        --------
        import asyncio

        from mavenagi import AsyncMavenAGI

        client = AsyncMavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )


        async def main() -> None:
            await client.inbox.search()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/inbox/search",
            method="POST",
            json={
                "statuses": statuses,
                "type": type,
                "createdAfter": created_after,
                "createdBefore": created_before,
                "page": page,
                "size": size,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    InboxSearchResponse,
                    parse_obj_as(
                        type_=InboxSearchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise ServerError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, inbox_item_id: str, *, app_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> InboxItem:
        """
        Retrieve details of a specific inbox item by its ID.

        Parameters
        ----------
        inbox_item_id : str
            The ID of the inbox item to get. All other entity ID fields are inferred from the request.

        app_id : str
            The App ID of the inbox item to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InboxItem
            Details of the specified inbox item.

        Examples
        --------
        import asyncio

        from mavenagi import AsyncMavenAGI

        client = AsyncMavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )


        async def main() -> None:
            await client.inbox.get(
                inbox_item_id="inboxItemId",
                app_id="appId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/inbox/{jsonable_encoder(inbox_item_id)}",
            method="GET",
            params={
                "appId": app_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    InboxItem,
                    parse_obj_as(
                        type_=InboxItem,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise ServerError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_fix(
        self, inbox_item_fix_id: str, *, app_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> InboxItemFix:
        """
        Retrieve a suggested fix. Includes document information if the fix is a Missing Knowledge suggestion.

        Parameters
        ----------
        inbox_item_fix_id : str
            Unique identifier for the inbox fix.

        app_id : str
            The App ID of the inbox item fix to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InboxItemFix
            Details of the specified inbox item fix.

        Examples
        --------
        import asyncio

        from mavenagi import AsyncMavenAGI

        client = AsyncMavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )


        async def main() -> None:
            await client.inbox.get_fix(
                inbox_item_fix_id="inboxItemFixId",
                app_id="appId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/inbox/fix/{jsonable_encoder(inbox_item_fix_id)}",
            method="GET",
            params={
                "appId": app_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    InboxItemFix,
                    parse_obj_as(
                        type_=InboxItemFix,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise ServerError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def apply_fix(
        self,
        inbox_item_fix_id: str,
        *,
        app_id: str,
        add_document_request: typing.Optional[AddDocumentFixRequest] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Apply a fix to an inbox item with a specific document.

        Parameters
        ----------
        inbox_item_fix_id : str
            Unique identifier for the inbox fix.

        app_id : str

        add_document_request : typing.Optional[AddDocumentFixRequest]
            Content for Add Document fixes

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mavenagi import AsyncMavenAGI

        client = AsyncMavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )


        async def main() -> None:
            await client.inbox.apply_fix(
                inbox_item_fix_id="inboxItemFixId",
                app_id="appId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/inbox/fix/{jsonable_encoder(inbox_item_fix_id)}/apply",
            method="POST",
            json={
                "appId": app_id,
                "addDocumentRequest": convert_and_respect_annotation_metadata(
                    object_=add_document_request, annotation=AddDocumentFixRequest, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise ServerError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def ignore(
        self, inbox_item_id: str, *, app_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Ignore a specific inbox item by its ID.

        Parameters
        ----------
        inbox_item_id : str
            Unique identifier for the inbox item.

        app_id : str
            The App ID of the inbox item fix to ignore

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mavenagi import AsyncMavenAGI

        client = AsyncMavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )


        async def main() -> None:
            await client.inbox.ignore(
                inbox_item_id="inboxItemId",
                app_id="appId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/inbox/{jsonable_encoder(inbox_item_id)}/ignore",
            method="POST",
            params={
                "appId": app_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise ServerError(
                    typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
