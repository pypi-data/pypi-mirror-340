{"version":3,"file":"static/chunks/558.98496586f595f77c.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/runs/usePaginatedRunsTableRuns.tsx","webpack://_N_E/../ui-core/src/instance/InstanceConcurrencyKeyInfo.tsx"],"sourcesContent":["import {RUN_TABLE_RUN_FRAGMENT} from './RunTableRunFragment';\nimport {RunsRootQuery, RunsRootQueryVariables} from './types/usePaginatedRunsTableRuns.types';\nimport {useCursorPaginatedQuery} from './useCursorPaginatedQuery';\nimport {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RunsFilter} from '../graphql/types';\n\nexport function usePaginatedRunsTableRuns(filter: RunsFilter, pageSize: number) {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    RunsRootQuery,\n    RunsRootQueryVariables\n  >({\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[pageSize - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    variables: {\n      filter,\n    },\n    query: RUNS_ROOT_QUERY,\n    pageSize,\n  });\n  return {queryResult, paginationProps};\n}\n\nexport const RUNS_ROOT_QUERY = gql`\n  query RunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Alert,\n  Box,\n  Button,\n  Caption,\n  Colors,\n  CursorHistoryControls,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Heading,\n  Icon,\n  Menu,\n  MenuItem,\n  MetadataTableWIP,\n  Mono,\n  NonIdealState,\n  Popover,\n  Spinner,\n  SpinnerWithText,\n  Subheading,\n  Table,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link, useHistory} from 'react-router-dom';\n\nimport {gql, useMutation, useQuery} from '../apollo-client';\nimport {POOL_DETAILS_QUERY} from './PoolDetailsQuery';\nimport {\n  SetConcurrencyLimitMutation,\n  SetConcurrencyLimitMutationVariables,\n} from './types/InstanceConcurrency.types';\nimport {\n  DeleteConcurrencyLimitMutation,\n  DeleteConcurrencyLimitMutationVariables,\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n  RunsForConcurrencyKeyQuery,\n  RunsForConcurrencyKeyQueryVariables,\n} from './types/InstanceConcurrencyKeyInfo.types';\nimport {\n  ConcurrencyLimitFragment,\n  ConcurrencyStepFragment,\n  PoolDetailsQuery,\n  PoolDetailsQueryVariables,\n} from './types/PoolDetailsQuery.types';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RunStatusDot} from '../runs/RunStatusDots';\nimport {failedStatuses, inProgressStatuses, queuedStatuses} from '../runs/RunStatuses';\nimport {RunTable} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {titleForRun} from '../runs/RunUtils';\nimport {TimeElapsed} from '../runs/TimeElapsed';\nimport {usePaginatedRunsTableRuns} from '../runs/usePaginatedRunsTableRuns';\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 1000;\n\nexport const InstanceConcurrencyKeyInfo = ({concurrencyKey}: {concurrencyKey: string}) => {\n  useTrackPageView();\n  useDocumentTitle(`Pool: ${concurrencyKey}`);\n  const [showEdit, setShowEdit] = React.useState<boolean>();\n  const [showDelete, setShowDelete] = React.useState<boolean>(false);\n  const queryResult = useQuery<PoolDetailsQuery, PoolDetailsQueryVariables>(POOL_DETAILS_QUERY, {\n    variables: {pool: concurrencyKey},\n  });\n  const {data, refetch} = queryResult;\n  const concurrencyLimit = data?.instance.concurrencyLimit;\n  const hasRunQueue = data?.instance.runQueuingSupported;\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const history = useHistory();\n  const onDelete = () => {\n    history.push('/deployment/concurrency');\n    showSharedToaster({\n      icon: 'trash',\n      intent: 'success',\n      message: 'Deleted pool limit',\n    });\n  };\n  const granularity = data?.instance.poolConfig?.poolGranularity;\n  return (\n    <>\n      <div style={{overflowY: 'auto'}}>\n        {concurrencyLimit ? (\n          <Box>\n            <Box\n              padding={{vertical: 16, horizontal: 24}}\n              flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n              border=\"bottom\"\n            >\n              <Heading>\n                <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                  <div>\n                    <Link to=\"/deployment/concurrency\">Pools</Link>\n                  </div>\n                  <div>/</div>\n                  <div>{concurrencyKey}</div>\n                </Box>\n              </Heading>\n              <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                <QueryRefreshCountdown refreshState={refreshState} />\n                <Popover\n                  position=\"bottom-right\"\n                  content={\n                    <Menu>\n                      <MenuItem\n                        icon=\"delete\"\n                        text=\"Delete\"\n                        intent=\"danger\"\n                        onClick={() => setShowDelete(true)}\n                      />\n                    </Menu>\n                  }\n                >\n                  <Button icon={<Icon name=\"expand_more\" />} />\n                </Popover>\n              </Box>\n            </Box>\n            <Box padding={{vertical: 16, horizontal: 24}}>\n              <Subheading>Pool info</Subheading>\n            </Box>\n            {!hasRunQueue && granularity !== 'op' ? (\n              <Box margin={{horizontal: 20, bottom: 20}}>\n                <Alert\n                  intent=\"warning\"\n                  title=\"Run granularity for pools not supported\"\n                  description={\n                    <>\n                      The pool granularity is set to <Mono>run</Mono>, but run-level concurrency is\n                      not supported with this run coordinator. To enable run granularity for pools,\n                      configure your instance to use the default <Mono>QueuedRunCoordinator</Mono>{' '}\n                      in your <Mono>dagster.yaml</Mono>. See the{' '}\n                      <a\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        href=\"https://docs.dagster.io/deployment/dagster-instance#queuedruncoordinator\"\n                      >\n                        QueuedRunCoordinator documentation\n                      </a>{' '}\n                      for more information.\n                    </>\n                  }\n                />\n              </Box>\n            ) : null}\n            <Box padding={{bottom: 24}}>\n              <MetadataTableWIP style={{marginLeft: -1}}>\n                <tbody>\n                  <tr>\n                    <td style={{verticalAlign: 'middle'}}>Granularity</td>\n                    <td>{granularity === 'run' ? 'Run' : 'Op'}</td>\n                  </tr>\n                  <tr>\n                    <td style={{verticalAlign: 'middle'}}>Limit</td>\n                    <td>\n                      <Box flex={{justifyContent: 'space-between', alignItems: 'center'}}>\n                        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                          <div>\n                            {concurrencyLimit.slotCount ? (\n                              concurrencyLimit.slotCount\n                            ) : concurrencyLimit.limit === null ? (\n                              <>&mdash;</>\n                            ) : (\n                              concurrencyLimit.limit\n                            )}\n                          </div>\n                          {concurrencyLimit.usingDefaultLimit ? (\n                            <Caption color={Colors.textLighter()}>(default)</Caption>\n                          ) : null}\n                        </Box>\n                        <Button icon={<Icon name=\"edit\" />} onClick={() => setShowEdit(true)}>\n                          Edit limit\n                        </Button>\n                      </Box>\n                    </td>\n                  </tr>\n                </tbody>\n              </MetadataTableWIP>\n            </Box>\n            {data?.instance.poolConfig?.poolGranularity !== 'run' ? (\n              <>\n                <Box\n                  padding={{vertical: 16, horizontal: 24}}\n                  flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n                >\n                  <Subheading>In progress steps</Subheading>\n                </Box>\n                <Box style={{marginLeft: -1}}>\n                  <PendingStepsTable keyInfo={concurrencyLimit} refresh={refetch} />\n                </Box>\n                <Box\n                  padding={{vertical: 16, horizontal: 24}}\n                  flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n                >\n                  <Subheading>Queued runs</Subheading>\n                </Box>\n                <PoolRunsTable pool={concurrencyKey} runStatuses={queuedStatuses} />\n              </>\n            ) : (\n              <>\n                <Box\n                  padding={{vertical: 16, horizontal: 24}}\n                  flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n                >\n                  <Subheading>In progress</Subheading>\n                </Box>\n                <PoolRunsTable pool={concurrencyKey} runStatuses={inProgressStatuses} />\n                <Box\n                  padding={{vertical: 16, horizontal: 24}}\n                  flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n                >\n                  <Subheading>Queued</Subheading>\n                </Box>\n                <PoolRunsTable pool={concurrencyKey} runStatuses={queuedStatuses} />\n              </>\n            )}\n          </Box>\n        ) : (\n          <Box flex={{direction: 'column', alignItems: 'center'}} padding={{vertical: 64}}>\n            <SpinnerWithText label=\"Loading…\" />\n          </Box>\n        )}\n      </div>\n      <EditConcurrencyLimitDialog\n        concurrencyKey={concurrencyKey}\n        open={!!showEdit}\n        onClose={() => setShowEdit(false)}\n        onComplete={refetch}\n        minValue={data?.instance.minConcurrencyLimitValue || DEFAULT_MIN_VALUE}\n        maxValue={data?.instance.maxConcurrencyLimitValue || DEFAULT_MAX_VALUE}\n      />\n      <DeleteConcurrencyLimitDialog\n        concurrencyKey={concurrencyKey}\n        open={!!showDelete}\n        onClose={() => setShowDelete(false)}\n        onComplete={onDelete}\n      />\n    </>\n  );\n};\n\nexport const isValidLimit = (\n  concurrencyLimit?: string,\n  minLimitValue: number = DEFAULT_MIN_VALUE,\n  maxLimitValue: number = DEFAULT_MAX_VALUE,\n) => {\n  if (!concurrencyLimit) {\n    return false;\n  }\n  const value = parseInt(concurrencyLimit);\n  if (isNaN(value)) {\n    return false;\n  }\n  if (String(value) !== concurrencyLimit.trim()) {\n    return false;\n  }\n  return value >= minLimitValue && value <= maxLimitValue;\n};\n\nconst EditConcurrencyLimitDialog = ({\n  concurrencyKey,\n  open,\n  onClose,\n  onComplete,\n  minValue,\n  maxValue,\n}: {\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n  minValue: number;\n  maxValue: number;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: parseInt(limitInput!.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  return (\n    <Dialog\n      isOpen={open}\n      title={\n        <span>\n          Edit <Mono>{concurrencyKey}</Mono>\n        </span>\n      }\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Pool:</Box>\n        <Box margin={{bottom: 16}}>\n          <strong>{concurrencyKey}</strong>\n        </Box>\n        <Box margin={{bottom: 4}}>\n          Pool limit ({minValue}-{maxValue}):\n        </Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder={`${minValue} - ${maxValue}`}\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"primary\" disabled>\n            Updating…\n          </Button>\n        ) : (\n          <Button\n            intent=\"primary\"\n            onClick={save}\n            disabled={!isValidLimit(limitInput.trim(), minValue, maxValue)}\n          >\n            Update limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst DeleteConcurrencyLimitDialog = ({\n  concurrencyKey,\n  open,\n  onClose,\n  onComplete,\n}: {\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const [deleteConcurrencyLimit] = useMutation<\n    DeleteConcurrencyLimitMutation,\n    DeleteConcurrencyLimitMutationVariables\n  >(DELETE_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await deleteConcurrencyLimit({variables: {concurrencyKey}});\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Delete <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        Delete concurrency limit&nbsp;<strong>{concurrencyKey}</strong>?\n      </DialogBody>\n      <DialogFooter>\n        <Button onClick={onClose}>Close</Button>\n        <Button intent=\"danger\" disabled={isSubmitting} onClick={save}>\n          {isSubmitting ? 'Deleting…' : 'Delete limit'}\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ConcurrencyActionMenu = ({\n  pendingStep,\n  onUpdate,\n}: {\n  pendingStep: ConcurrencyStepFragment;\n  onUpdate: () => void;\n}) => {\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem\n            key=\"free-concurrency-slots-step\"\n            icon=\"status\"\n            text=\"Free concurrency slot for step\"\n            onClick={async () => {\n              const resp = await freeSlots({\n                variables: {runId: pendingStep.runId, stepKey: pendingStep.stepKey},\n              });\n              if (resp.data?.freeConcurrencySlots) {\n                onUpdate();\n                await showSharedToaster({\n                  intent: 'success',\n                  icon: 'copy_to_clipboard_done',\n                  message: 'Freed concurrency slot',\n                });\n              }\n            }}\n          />\n          <MenuItem\n            key=\"free-concurrency-slots-run\"\n            icon=\"status\"\n            text=\"Free all concurrency slots for run\"\n            onClick={async () => {\n              await showSharedToaster({\n                intent: 'primary',\n                message: 'Freeing concurrency slots...',\n              });\n              const resp = await freeSlots({variables: {runId: pendingStep.runId}});\n              if (resp.data?.freeConcurrencySlots) {\n                onUpdate();\n                await showSharedToaster({\n                  intent: 'success',\n                  icon: 'copy_to_clipboard_done',\n                  message: 'Freed concurrency slots',\n                });\n              }\n            }}\n          />\n        </Menu>\n      }\n      position=\"bottom-right\"\n    >\n      <Button rightIcon={<Icon name=\"expand_more\" />}>Actions</Button>\n    </Popover>\n  );\n};\n\nconst PoolRunsTable = ({pool, runStatuses}: {pool: string; runStatuses: Set<RunStatus>}) => {\n  const filter = {\n    statuses: Array.from(runStatuses),\n    tags: [{key: `${DagsterTag.PoolTagPrefix}/${pool}`, value: 'true'}],\n  };\n  const {queryResult, paginationProps} = usePaginatedRunsTableRuns(filter, 10);\n  const pipelineRunsOrError =\n    queryResult.data?.pipelineRunsOrError || queryResult.previousData?.pipelineRunsOrError;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 15000);\n\n  if (!pipelineRunsOrError) {\n    return (\n      <Box padding={{vertical: 48}}>\n        <Spinner purpose=\"page\" />\n      </Box>\n    );\n  }\n  if (pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState icon=\"error\" title=\"Query error\" description={pipelineRunsOrError.message} />\n      </Box>\n    );\n  }\n  if (!pipelineRunsOrError.results.length) {\n    return (\n      <Box\n        padding={{vertical: 24}}\n        border=\"top-and-bottom\"\n        flex={{direction: 'column', alignItems: 'center'}}\n      >\n        {runStatuses.has(RunStatus.STARTED)\n          ? 'No matching runs in progress.'\n          : 'No matching runs in queue.'}\n      </Box>\n    );\n  }\n  return (\n    <>\n      <div style={{position: 'absolute', right: 16, top: -32}}>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </div>\n      <RunTable runs={pipelineRunsOrError.results} loading={queryResult.loading} />\n      {pipelineRunsOrError.results.length > 0 ? (\n        <Box margin={{vertical: 16}}>\n          <CursorHistoryControls {...paginationProps} />\n        </Box>\n      ) : null}\n    </>\n  );\n};\n\nconst PendingStepsTable = ({\n  keyInfo,\n  refresh,\n}: {\n  keyInfo: ConcurrencyLimitFragment;\n  refresh: () => void;\n}) => {\n  const runIds = [...new Set(keyInfo.pendingSteps.map((step) => step.runId))];\n  const queryResult = useQuery<RunsForConcurrencyKeyQuery, RunsForConcurrencyKeyQueryVariables>(\n    RUNS_FOR_CONCURRENCY_KEY_QUERY,\n    {\n      variables: {\n        filter: {runIds},\n      },\n      skip: !keyInfo.pendingSteps.length,\n    },\n  );\n  const statusByRunId: {[id: string]: RunStatus} = {};\n  const runs =\n    queryResult.data?.pipelineRunsOrError.__typename === 'Runs'\n      ? queryResult.data.pipelineRunsOrError.results\n      : [];\n  runs.forEach((run) => {\n    statusByRunId[run.id] = run.status;\n  });\n\n  const steps = [...keyInfo.pendingSteps];\n  steps.sort((a, b) => {\n    if (a.priority && b.priority && a.priority !== b.priority) {\n      return a.priority - b.priority;\n    }\n    return a.enqueuedTimestamp - b.enqueuedTimestamp;\n  });\n  const assignedSteps = steps.filter((step) => !!step.assignedTimestamp);\n  const pendingSteps = steps.filter((step) => !step.assignedTimestamp);\n\n  const tableHeader = (\n    <thead>\n      <tr>\n        <th>Run ID</th>\n        <th>Step key</th>\n        <th>Assigned</th>\n        <th>Queued</th>\n        <th>\n          <Box flex={{alignItems: 'center', direction: 'row', gap: 4}}>\n            Priority\n            <Tooltip\n              placement=\"top\"\n              content=\"Priority can be set on each op/asset using the 'dagster/priority' tag. Higher priority steps will be assigned slots first.\"\n            >\n              <Icon name=\"info\" color={Colors.accentGray()} />\n            </Tooltip>\n          </Box>\n        </th>\n        <th></th>\n      </tr>\n    </thead>\n  );\n\n  const emptyErrorMessage = 'There are no active or pending steps for this pool.';\n  if (!steps.length) {\n    return (\n      <NonIdealState icon=\"no-results\" title=\"No active steps\" description={emptyErrorMessage} />\n    );\n  }\n\n  return (\n    <Table>\n      {tableHeader}\n      <tbody style={{backgroundColor: Colors.backgroundYellow()}}>\n        {assignedSteps.map((step) => (\n          <PendingStepRow\n            key={step.runId + step.stepKey}\n            step={step}\n            statusByRunId={statusByRunId}\n            onUpdate={refresh}\n          />\n        ))}\n      </tbody>\n      <tbody>\n        {pendingSteps.map((step) => (\n          <PendingStepRow\n            key={step.runId + step.stepKey}\n            step={step}\n            statusByRunId={statusByRunId}\n            onUpdate={refresh}\n          />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst PendingStepRow = ({\n  step,\n  statusByRunId,\n  onUpdate,\n}: {\n  step: ConcurrencyStepFragment;\n  statusByRunId: {[id: string]: RunStatus};\n  onUpdate: () => void;\n}) => {\n  const runStatus = statusByRunId[step.runId];\n  return (\n    <tr>\n      <td>\n        {runStatus ? (\n          <Link to={`/runs/${step.runId}`}>\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <RunStatusDot status={runStatus} size={10} />\n              <Mono>{titleForRun({id: step.runId})}</Mono>\n              {failedStatuses.has(runStatus) ? (\n                <Tooltip\n                  placement=\"top\"\n                  content=\"Slots for canceled / failed runs can automatically be freed by configuring a run monitoring setting.\"\n                >\n                  <Icon name=\"info\" color={Colors.accentGray()} />\n                </Tooltip>\n              ) : null}\n            </Box>\n          </Link>\n        ) : (\n          <Mono>{titleForRun({id: step.runId})}</Mono>\n        )}\n      </td>\n      <td>\n        <Mono>{step.stepKey}</Mono>\n      </td>\n      <td>\n        {step.assignedTimestamp ? (\n          <TimeElapsed startUnix={step.assignedTimestamp} endUnix={null} />\n        ) : (\n          '-'\n        )}\n      </td>\n      <td>\n        {step.enqueuedTimestamp ? (\n          <TimeElapsed startUnix={step.enqueuedTimestamp} endUnix={null} />\n        ) : (\n          '-'\n        )}\n      </td>\n      <td>{step.priority}</td>\n      <td>\n        <ConcurrencyActionMenu pendingStep={step} onUpdate={onUpdate} />\n      </td>\n    </tr>\n  );\n};\n\nconst SET_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation SetConcurrencyLimit($concurrencyKey: String!, $limit: Int!) {\n    setConcurrencyLimit(concurrencyKey: $concurrencyKey, limit: $limit)\n  }\n`;\n\nconst DELETE_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation DeleteConcurrencyLimit($concurrencyKey: String!) {\n    deleteConcurrencyLimit(concurrencyKey: $concurrencyKey)\n  }\n`;\n\nexport const FREE_CONCURRENCY_SLOTS_MUTATION = gql`\n  mutation FreeConcurrencySlots($runId: String!, $stepKey: String) {\n    freeConcurrencySlots(runId: $runId, stepKey: $stepKey)\n  }\n`;\n\nconst RUNS_FOR_CONCURRENCY_KEY_QUERY = gql`\n  query RunsForConcurrencyKeyQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          status\n        }\n      }\n    }\n  }\n`;\n"],"names":["RUNS_ROOT_QUERY","gql","RUN_TABLE_RUN_FRAGMENT","PYTHON_ERROR_FRAGMENT","InstanceConcurrencyKeyInfo","data","concurrencyKey","param","useTrackPageView","useDocumentTitle","concat","showEdit","setShowEdit","React","showDelete","setShowDelete","queryResult","useQuery","POOL_DETAILS_QUERY","variables","pool","refetch","concurrencyLimit","instance","hasRunQueue","runQueuingSupported","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","history","useHistory","granularity","poolConfig","poolGranularity","jsx_runtime","jsxs","Fragment","jsx","div","style","overflowY","Box","padding","vertical","horizontal","flex","direction","alignItems","justifyContent","border","Heading","gap","Link","to","QueryRefreshCountdown","Popover","position","content","Menu","MenuItem","icon","text","intent","onClick","Button","Icon","name","Subheading","margin","bottom","Alert","title","description","Mono","a","target","rel","href","MetadataTableWIP","marginLeft","tbody","tr","td","verticalAlign","slotCount","limit","usingDefaultLimit","Caption","color","Colors","PendingStepsTable","keyInfo","refresh","PoolRunsTable","runStatuses","queuedStatuses","inProgressStatuses","SpinnerWithText","label","EditConcurrencyLimitDialog","open","onClose","onComplete","minValue","minConcurrencyLimitValue","maxValue","maxConcurrencyLimitValue","DeleteConcurrencyLimitDialog","push","showSharedToaster","message","isValidLimit","minLimitValue","maxLimitValue","value","parseInt","isNaN","String","trim","isSubmitting","setIsSubmitting","limitInput","setLimitInput","setConcurrencyLimit","useMutation","SET_CONCURRENCY_LIMIT_MUTATION","save","Dialog","isOpen","span","DialogBody","strong","TextInput","onChange","e","placeholder","DialogFooter","disabled","deleteConcurrencyLimit","DELETE_CONCURRENCY_LIMIT_MUTATION","ConcurrencyActionMenu","pendingStep","onUpdate","freeSlots","FREE_CONCURRENCY_SLOTS_MUTATION","resp","runId","stepKey","freeConcurrencySlots","rightIcon","paginationProps","usePaginatedRunsTableRuns","filter","pageSize","useCursorPaginatedQuery","nextCursorForResult","runs","pipelineRunsOrError","__typename","results","id","getResultArray","query","statuses","Array","from","tags","key","DagsterTag","PoolTagPrefix","previousData","NonIdealState","length","right","top","RunTable","loading","CursorHistoryControls","has","RunStatus","STARTED","Spinner","purpose","runIds","Set","pendingSteps","map","step","RUNS_FOR_CONCURRENCY_KEY_QUERY","skip","statusByRunId","forEach","run","status","steps","sort","b","priority","enqueuedTimestamp","assignedSteps","assignedTimestamp","tableHeader","thead","th","Tooltip","placement","Table","backgroundColor","PendingStepRow","runStatus","RunStatusDot","size","titleForRun","failedStatuses","TimeElapsed","startUnix","endUnix"],"sourceRoot":""}