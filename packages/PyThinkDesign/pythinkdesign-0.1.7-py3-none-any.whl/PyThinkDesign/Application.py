# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Application
else:
    import _Application

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Application(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Application.delete_Application

    def __init__(self, *args):
        _Application.Application_swiginit(self, _Application.new_Application(*args))

    def GetName(self):
        return _Application.Application_GetName(self)

    def GetFullName(self):
        return _Application.Application_GetFullName(self)

    def PutVisible(self, visible):
        return _Application.Application_PutVisible(self, visible)

    def PutInteractive(self, interactive):
        return _Application.Application_PutInteractive(self, interactive)

    def Quit(self):
        return _Application.Application_Quit(self)

    def GetActiveDocument(self):
        return _Application.Application_GetActiveDocument(self)

# Register Application in _Application:
_Application.Application_swigregister(Application)

def GetActiveApplication():
    return _Application.GetActiveApplication()

class Document(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Application.delete_Document

    def __init__(self, *args):
        _Application.Document_swiginit(self, _Application.new_Document(*args))

    def GetFullName(self):
        return _Application.Document_GetFullName(self)

    def GetCurveCreator(self):
        return _Application.Document_GetCurveCreator(self)

    def GetProfileCreator(self):
        return _Application.Document_GetProfileCreator(self)

    def GetSolidCreator(self):
        return _Application.Document_GetSolidCreator(self)

    def ListInfo(self):
        return _Application.Document_ListInfo(self)

    def SaveAs(self, filePath):
        return _Application.Document_SaveAs(self, filePath)

    def GetImpl(self):
        return _Application.Document_GetImpl(self)

# Register Document in _Application:
_Application.Document_swigregister(Document)
class CurveCreator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Application.CurveCreator_swiginit(self, _Application.new_CurveCreator())

    def AddLine(self, ptStart, ptEnd):
        return _Application.CurveCreator_AddLine(self, ptStart, ptEnd)

    def AddArc(self, pCenter, pXDir, pYDir, dRadius, startAng=0.0, endAng=360.0):
        return _Application.CurveCreator_AddArc(self, pCenter, pXDir, pYDir, dRadius, startAng, endAng)

    def AddChainOffset(self, vecCrv, dOffset, plnNormal, eType, nbCopies, associativeFlag, vecFailedTransitions, vecResults):
        return _Application.CurveCreator_AddChainOffset(self, vecCrv, dOffset, plnNormal, eType, nbCopies, associativeFlag, vecFailedTransitions, vecResults)

    def GetImpl(self):
        return _Application.CurveCreator_GetImpl(self)
    __swig_destroy__ = _Application.delete_CurveCreator

# Register CurveCreator in _Application:
_Application.CurveCreator_swigregister(CurveCreator)
class TDCvLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Application.TDCvLine_swiginit(self, _Application.new_TDCvLine())
    __swig_destroy__ = _Application.delete_TDCvLine

    def GetImpl(self):
        return _Application.TDCvLine_GetImpl(self)

    def ToTDCurve(self):
        return _Application.TDCvLine_ToTDCurve(self)

    def ToSmartId(self):
        return _Application.TDCvLine_ToSmartId(self)

    def ListInfo(self):
        return _Application.TDCvLine_ListInfo(self)

# Register TDCvLine in _Application:
_Application.TDCvLine_swigregister(TDCvLine)
class TDCvArc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Application.TDCvArc_swiginit(self, _Application.new_TDCvArc())
    __swig_destroy__ = _Application.delete_TDCvArc

    def GetImpl(self):
        return _Application.TDCvArc_GetImpl(self)

    def ToSmartId(self):
        return _Application.TDCvArc_ToSmartId(self)

    def ToTDCurve(self):
        return _Application.TDCvArc_ToTDCurve(self)

    def ListInfo(self):
        return _Application.TDCvArc_ListInfo(self)

# Register TDCvArc in _Application:
_Application.TDCvArc_swigregister(TDCvArc)
class TDCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Application.delete_TDCurve

    def __init__(self, *args):
        _Application.TDCurve_swiginit(self, _Application.new_TDCurve(*args))

    def ListInfo(self):
        return _Application.TDCurve_ListInfo(self)

    def GetImpl(self):
        return _Application.TDCurve_GetImpl(self)

# Register TDCurve in _Application:
_Application.TDCurve_swigregister(TDCurve)
class SmartId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Application.delete_SmartId

    def __init__(self, *args):
        _Application.SmartId_swiginit(self, _Application.new_SmartId(*args))

    def GetImpl(self):
        return _Application.SmartId_GetImpl(self)

# Register SmartId in _Application:
_Application.SmartId_swigregister(SmartId)

