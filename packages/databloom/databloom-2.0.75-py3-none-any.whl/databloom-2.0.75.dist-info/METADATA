Metadata-Version: 2.2
Name: databloom
Version: 2.0.75
Summary: A Python SDK for data integration with Nessie and Iceberg
Home-page: https://code.vng.vn/techcoe/rnd/databloom/data-bloom-sdk-client.git
Author: Nam Vu
Author-email: namvq@vng.com.vn
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Operating System :: OS Independent
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: pandas==2.2.3
Requires-Dist: psycopg2-binary>=2.9.10
Requires-Dist: sqlalchemy>=2.0.38
Requires-Dist: trino==0.333.0
Requires-Dist: pyspark==3.5.2
Requires-Dist: requests>=2.31.0
Requires-Dist: duckdb>=0.10.0
Requires-Dist: python-dotenv>=1.1.0
Requires-Dist: pymysql>=1.1.0
Provides-Extra: dev
Requires-Dist: pytest>=8.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: black>=24.0.0; extra == "dev"
Requires-Dist: isort>=5.13.0; extra == "dev"
Requires-Dist: flake8>=7.0.0; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# DataBloom SDK Client

A Python SDK client for data integration with PostgreSQL, MySQL, Nessie, and S3.

## Quick Start

```bash
# Setup environment
conda create -n data_bloom python=3.9
conda activate data_bloom

# Install
pip install -e ".[dev]"
```

## Configuration

Create `.env` file with your credentials:

## Testing

```bash
# Run all tests
make test
```

## Development

```bash
make format          # Format code
make lint           # Run linter
make doc            # Build docs
```

## License

VNG License
```sh
curl --location 'https://dev-sdk.ird.vng.vn/v1/sources' --header 'Authorization: Bearer 2cffb5e0-b42b-45a7-a965-8963b9f05d9e' | jq

curl --location 'https://dev-sdk.ird.vng.vn/v1/sources/detail' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer 2cffb5e0-b42b-45a7-a965-8963b9f05d9e' \
--data '{
    "code": "postgresql/PGIRD"
}' |jq



curl --location 'https://dev-sdk.ird.vng.vn/v1/sources/detail' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer 2cffb5e0-b42b-45a7-a965-8963b9f05d9e' \
--data '{
    "code": "mysql/MYSQLIRD"
}' |jq


```




```python

ctx.connector(source="postgresql/ird_gsheet", tablename="")



# TODO run in mysql
engine_mysql = create_sqlalchemy_engine(source="mysql/MYSQLIRD", database="mktvng")
df = pd.read_sql_table("actual_raw_data", con=engine_mysql)
print(df.head())

sql_stmt = """SELECT id, name, value FROM test.test_table_mysql;"""
df = pd.read_sql(sql_stmt, con=engine_mysql)
print(df.head())



```


