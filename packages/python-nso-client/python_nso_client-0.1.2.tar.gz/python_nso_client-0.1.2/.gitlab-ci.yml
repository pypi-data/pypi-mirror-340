# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- test
- build
- deploy

default:
  interruptible: true

include:
- template: Security/SAST.gitlab-ci.yml

# Rules snippets
.rules:
  # Only run pipeline in an MR or in a branch
  mr-pipeline:
    # Skip branch pipeline when there is an open MR
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # Run on MRs and feature branches that don't have MRs
    - if: $CI_PIPELINE_SOURCE == "push"
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success
  release:
    - if: '$CI_COMMIT_TAG'
      when: on_success
  release-test:
    - if: '$TEST_PYPI_RELEASE'
      when: on_success

# Override when semgrep-sast runs
semgrep-sast:
  stage: test
  rules:
    - !reference [.rules, mr-pipeline]
    - when: always

lint-ruff:
  stage: test
  image: ghcr.io/astral-sh/ruff:alpine
  rules:
    - !reference [.rules, mr-pipeline]
    - when: always
  script:
    - ruff check
    - ruff format --diff

test-pytest:
  stage: test
  image: ghcr.io/astral-sh/uv:alpine
  rules:
    - !reference [.rules, mr-pipeline]
    - when: always
  script:
    - uv sync
    - uv run pytest --showlocals
  artifacts:
    when: always
    paths:
      - report.xml
      - coverage.xml
      - htmlcov
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build:
  stage: build
  image: ghcr.io/astral-sh/uv:alpine
  rules:
    - !reference [.rules, mr-pipeline]
    - when: always
  needs: []
  script:
    - uv build
  artifacts:
    when: always
    paths:
      - dist/

# Trusted publisher used from:
# https://stefan.sofa-rockers.org/2024/11/14/gitlab-trusted-publisher/
.release-base:
  # Abstract base job for "release" jobs.
  # Extending jobs must define the following variables:
  # - PYPI_OIDC_AUD: Audience for the ID token that GitLab issues to the pipeline job
  # - PYPI_OIDC_URL: PyPI endpoint for retrieving a publish token with GitLabâ€™s ID token
  # - UV_PUBLISH_URL: PyPI endpoint for the actual upload
  image: ghcr.io/astral-sh/uv:alpine
  stage: 'deploy'
  dependencies:
    - lint-ruff
    - test-pytest
    - build
  id_tokens:
    PYPI_ID_TOKEN:
      aud: '$PYPI_OIDC_AUD'
  script:
    - publish_token=$(uv run --no-project --with httpx util/pypi-token.py)
    - 'uv publish --token "$publish_token"'
    - 'version="$(uv run --with hatch-vcs hatchling version)"'
    - 'echo -e "\033[34;1mPackage on PyPI:\033[0m ${CI_ENVIRONMENT_URL}${version}/"'

release-test:
  extends: '.release-base'
  rules:
    - !reference [.rules, release]
    - !reference [.rules, release-test]
  environment:
    name: 'release-test'
    url: 'https://test.pypi.org/project/python-nso-client/'
  variables:
    PYPI_OIDC_AUD: 'testpypi'
    PYPI_OIDC_URL: 'https://test.pypi.org/_/oidc/mint-token'
    UV_PUBLISH_URL: 'https://test.pypi.org/legacy/'

release:
  extends: '.release-base'
  rules:
    - !reference [.rules, release]
  environment:
    name: 'release'
    url: 'https://pypi.org/project/python-nso-client/'
  variables:
    PYPI_OIDC_AUD: 'pypi'
    PYPI_OIDC_URL: 'https://pypi.org/_/oidc/mint-token'
    UV_PUBLISH_URL: 'https://upload.pypi.org/legacy/'
