# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.Qt3DRender, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.Qt3DRender`

import PySide6.Qt3DRender
import PySide6.QtCore
import PySide6.QtGui
import PySide6.QtOpenGL
import PySide6.Qt3DCore

import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QIntList: ...


class Qt3DRender(Shiboken.Object):

    class API(enum.Enum):

        OpenGL                    = ...  # 0x0
        Vulkan                    = ...  # 0x1
        DirectX                   = ...  # 0x2
        Metal                     = ...  # 0x3
        RHI                       = ...  # 0x4
        Null                      = ...  # 0x5

    class PropertyReaderInterface(Shiboken.Object):

        def __init__(self, /) -> None: ...

        def readProperty(self, v: typing.Any, /) -> typing.Any: ...

    class PropertyReaderInterfacePtr(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, pointee: PySide6.Qt3DRender.Qt3DRender.PropertyReaderInterface, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def __dir__(self, /) -> collections.abc.Iterable[str]: ...
        def __repr__(self, /) -> str: ...
        def data(self, /) -> PySide6.Qt3DRender.Qt3DRender.PropertyReaderInterface: ...
        @typing.overload
        def reset(self, /) -> None: ...
        @typing.overload
        def reset(self, t: PySide6.Qt3DRender.Qt3DRender.PropertyReaderInterface, /) -> None: ...

    class QAbstractLight(PySide6.Qt3DCore.Qt3DCore.QComponent):

        colorChanged             : typing.ClassVar[Signal] = ... # colorChanged(QColor)
        intensityChanged         : typing.ClassVar[Signal] = ... # intensityChanged(float)

        class Type(enum.Enum):

            PointLight                = ...  # 0x0
            DirectionalLight          = ...  # 0x1
            SpotLight                 = ...  # 0x2


        @property
        def color(self, /) -> PySide6.QtGui.QColor: ...
        @color.setter
        def color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        @property
        def intensity(self, /) -> float: ...
        @intensity.setter
        def intensity(self, intensity: float, /) -> None: ...
        @property
        def type(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractLight.Type: ...

    class QAbstractRayCaster(PySide6.Qt3DCore.Qt3DCore.QComponent):

        filterModeChanged        : typing.ClassVar[Signal] = ... # filterModeChanged(Qt3DRender::QAbstractRayCaster::FilterMode)
        hitsChanged              : typing.ClassVar[Signal] = ... # hitsChanged(Qt3DRender::QAbstractRayCaster::Hits)
        runModeChanged           : typing.ClassVar[Signal] = ... # runModeChanged(Qt3DRender::QAbstractRayCaster::RunMode)

        class FilterMode(enum.Enum):

            AcceptAnyMatchingLayers   = ...  # 0x0
            AcceptAllMatchingLayers   = ...  # 0x1
            DiscardAnyMatchingLayers  = ...  # 0x2
            DiscardAllMatchingLayers  = ...  # 0x3

        class RunMode(enum.Enum):

            Continuous                = ...  # 0x0
            SingleShot                = ...  # 0x1


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, runMode: PySide6.Qt3DRender.Qt3DRender.QAbstractRayCaster.RunMode | None = ..., filterMode: PySide6.Qt3DRender.Qt3DRender.QAbstractRayCaster.FilterMode | None = ..., hits: collections.abc.Sequence[PySide6.Qt3DRender.Qt3DRender.QRayCasterHit] | None = ...) -> None: ...

        def addLayer(self, layer: PySide6.Qt3DRender.Qt3DRender.QLayer, /) -> None: ...
        @property
        def filterMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractRayCaster.FilterMode: ...
        @filterMode.setter
        def filterMode(self, filterMode: PySide6.Qt3DRender.Qt3DRender.QAbstractRayCaster.FilterMode, /) -> None: ...
        @property
        def hits(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QRayCasterHit]: ...
        def layers(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QLayer]: ...
        def removeLayer(self, layer: PySide6.Qt3DRender.Qt3DRender.QLayer, /) -> None: ...
        @property
        def runMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractRayCaster.RunMode: ...
        @runMode.setter
        def runMode(self, runMode: PySide6.Qt3DRender.Qt3DRender.QAbstractRayCaster.RunMode, /) -> None: ...

    class QAbstractTexture(PySide6.Qt3DCore.Qt3DCore.QNode):

        comparisonFunctionChanged: typing.ClassVar[Signal] = ... # comparisonFunctionChanged(ComparisonFunction)
        comparisonModeChanged    : typing.ClassVar[Signal] = ... # comparisonModeChanged(ComparisonMode)
        depthChanged             : typing.ClassVar[Signal] = ... # depthChanged(int)
        formatChanged            : typing.ClassVar[Signal] = ... # formatChanged(TextureFormat)
        generateMipMapsChanged   : typing.ClassVar[Signal] = ... # generateMipMapsChanged(bool)
        handleChanged            : typing.ClassVar[Signal] = ... # handleChanged(QVariant)
        handleTypeChanged        : typing.ClassVar[Signal] = ... # handleTypeChanged(HandleType)
        heightChanged            : typing.ClassVar[Signal] = ... # heightChanged(int)
        layersChanged            : typing.ClassVar[Signal] = ... # layersChanged(int)
        magnificationFilterChanged: typing.ClassVar[Signal] = ... # magnificationFilterChanged(Filter)
        maximumAnisotropyChanged : typing.ClassVar[Signal] = ... # maximumAnisotropyChanged(float)
        minificationFilterChanged: typing.ClassVar[Signal] = ... # minificationFilterChanged(Filter)
        mipLevelsChanged         : typing.ClassVar[Signal] = ... # mipLevelsChanged(int)
        samplesChanged           : typing.ClassVar[Signal] = ... # samplesChanged(int)
        statusChanged            : typing.ClassVar[Signal] = ... # statusChanged(Status)
        widthChanged             : typing.ClassVar[Signal] = ... # widthChanged(int)

        class ComparisonFunction(enum.Enum):

            CompareNever              = ...  # 0x200
            CompareLess               = ...  # 0x201
            CompareEqual              = ...  # 0x202
            CompareLessEqual          = ...  # 0x203
            CompareGreater            = ...  # 0x204
            CommpareNotEqual          = ...  # 0x205
            CompareGreaterEqual       = ...  # 0x206
            CompareAlways             = ...  # 0x207

        class ComparisonMode(enum.Enum):

            CompareNone               = ...  # 0x0
            CompareRefToTexture       = ...  # 0x884e

        class CubeMapFace(enum.Enum):

            CubeMapPositiveX          = ...  # 0x8515
            CubeMapNegativeX          = ...  # 0x8516
            CubeMapPositiveY          = ...  # 0x8517
            CubeMapNegativeY          = ...  # 0x8518
            CubeMapPositiveZ          = ...  # 0x8519
            CubeMapNegativeZ          = ...  # 0x851a
            AllFaces                  = ...  # 0x851b

        class Filter(enum.Enum):

            Nearest                   = ...  # 0x2600
            Linear                    = ...  # 0x2601
            NearestMipMapNearest      = ...  # 0x2700
            LinearMipMapNearest       = ...  # 0x2701
            NearestMipMapLinear       = ...  # 0x2702
            LinearMipMapLinear        = ...  # 0x2703

        class HandleType(enum.Enum):

            NoHandle                  = ...  # 0x0
            OpenGLTextureId           = ...  # 0x1
            RHITextureId              = ...  # 0x2

        class Status(enum.Enum):

            None_                     = ...  # 0x0
            Loading                   = ...  # 0x1
            Ready                     = ...  # 0x2
            Error                     = ...  # 0x3

        class Target(enum.Enum):

            TargetAutomatic           = ...  # 0x0
            Target1D                  = ...  # 0xde0
            Target2D                  = ...  # 0xde1
            Target3D                  = ...  # 0x806f
            TargetRectangle           = ...  # 0x84f5
            TargetCubeMap             = ...  # 0x8513
            Target1DArray             = ...  # 0x8c18
            Target2DArray             = ...  # 0x8c1a
            TargetBuffer              = ...  # 0x8c2a
            TargetCubeMapArray        = ...  # 0x9009
            Target2DMultisample       = ...  # 0x9100
            Target2DMultisampleArray  = ...  # 0x9102

        class TextureFormat(enum.Enum):

            NoFormat                  = ...  # 0x0
            Automatic                 = ...  # 0x1
            DepthFormat               = ...  # 0x1902
            AlphaFormat               = ...  # 0x1906
            RGBFormat                 = ...  # 0x1907
            RGBAFormat                = ...  # 0x1908
            LuminanceFormat           = ...  # 0x1909
            LuminanceAlphaFormat      = ...  # 0x190a
            RG3B2                     = ...  # 0x2a10
            RGB8_UNorm                = ...  # 0x8051
            RGB16_UNorm               = ...  # 0x8054
            RGBA4                     = ...  # 0x8056
            RGB5A1                    = ...  # 0x8057
            RGBA8_UNorm               = ...  # 0x8058
            RGB10A2                   = ...  # 0x8059
            RGBA16_UNorm              = ...  # 0x805b
            D16                       = ...  # 0x81a5
            D24                       = ...  # 0x81a6
            D32                       = ...  # 0x81a7
            R8_UNorm                  = ...  # 0x8229
            R16_UNorm                 = ...  # 0x822a
            RG8_UNorm                 = ...  # 0x822b
            RG16_UNorm                = ...  # 0x822c
            R16F                      = ...  # 0x822d
            R32F                      = ...  # 0x822e
            RG16F                     = ...  # 0x822f
            RG32F                     = ...  # 0x8230
            R8I                       = ...  # 0x8231
            R8U                       = ...  # 0x8232
            R16I                      = ...  # 0x8233
            R16U                      = ...  # 0x8234
            R32I                      = ...  # 0x8235
            R32U                      = ...  # 0x8236
            RG8I                      = ...  # 0x8237
            RG8U                      = ...  # 0x8238
            RG16I                     = ...  # 0x8239
            RG16U                     = ...  # 0x823a
            RG32I                     = ...  # 0x823b
            RG32U                     = ...  # 0x823c
            RGB_DXT1                  = ...  # 0x83f0
            RGBA_DXT1                 = ...  # 0x83f1
            RGBA_DXT3                 = ...  # 0x83f2
            RGBA_DXT5                 = ...  # 0x83f3
            RGBA32F                   = ...  # 0x8814
            RGB32F                    = ...  # 0x8815
            RGBA16F                   = ...  # 0x881a
            RGB16F                    = ...  # 0x881b
            D24S8                     = ...  # 0x88f0
            RG11B10F                  = ...  # 0x8c3a
            RGB9E5                    = ...  # 0x8c3d
            SRGB8                     = ...  # 0x8c41
            SRGB8_Alpha8              = ...  # 0x8c43
            SRGB_DXT1                 = ...  # 0x8c4c
            SRGB_Alpha_DXT1           = ...  # 0x8c4d
            SRGB_Alpha_DXT3           = ...  # 0x8c4e
            SRGB_Alpha_DXT5           = ...  # 0x8c4f
            D32F                      = ...  # 0x8cac
            D32FS8X24                 = ...  # 0x8cad
            R5G6B5                    = ...  # 0x8d62
            RGB8_ETC1                 = ...  # 0x8d64
            RGBA32U                   = ...  # 0x8d70
            RGB32U                    = ...  # 0x8d71
            RGBA16U                   = ...  # 0x8d76
            RGB16U                    = ...  # 0x8d77
            RGBA8U                    = ...  # 0x8d7c
            RGB8U                     = ...  # 0x8d7d
            RGBA32I                   = ...  # 0x8d82
            RGB32I                    = ...  # 0x8d83
            RGBA16I                   = ...  # 0x8d88
            RGB16I                    = ...  # 0x8d89
            RGBA8I                    = ...  # 0x8d8e
            RGB8I                     = ...  # 0x8d8f
            R_ATI1N_UNorm             = ...  # 0x8dbb
            R_ATI1N_SNorm             = ...  # 0x8dbc
            RG_ATI2N_UNorm            = ...  # 0x8dbd
            RG_ATI2N_SNorm            = ...  # 0x8dbe
            RGB_BP_UNorm              = ...  # 0x8e8c
            SRGB_BP_UNorm             = ...  # 0x8e8d
            RGB_BP_SIGNED_FLOAT       = ...  # 0x8e8e
            RGB_BP_UNSIGNED_FLOAT     = ...  # 0x8e8f
            R8_SNorm                  = ...  # 0x8f94
            RG8_SNorm                 = ...  # 0x8f95
            RGB8_SNorm                = ...  # 0x8f96
            RGBA8_SNorm               = ...  # 0x8f97
            R16_SNorm                 = ...  # 0x8f98
            RG16_SNorm                = ...  # 0x8f99
            RGB16_SNorm               = ...  # 0x8f9a
            RGBA16_SNorm              = ...  # 0x8f9b
            RGB10A2U                  = ...  # 0x906f
            R11_EAC_UNorm             = ...  # 0x9270
            R11_EAC_SNorm             = ...  # 0x9271
            RG11_EAC_UNorm            = ...  # 0x9272
            RG11_EAC_SNorm            = ...  # 0x9273
            RGB8_ETC2                 = ...  # 0x9274
            SRGB8_ETC2                = ...  # 0x9275
            RGB8_PunchThrough_Alpha1_ETC2 = ...  # 0x9276
            SRGB8_PunchThrough_Alpha1_ETC2 = ...  # 0x9277
            RGBA8_ETC2_EAC            = ...  # 0x9278
            SRGB8_Alpha8_ETC2_EAC     = ...  # 0x9279


        @typing.overload
        def __init__(self, target: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Target, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, format: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.TextureFormat | None = ..., generateMipMaps: bool | None = ..., wrapMode: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode | None = ..., status: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Status | None = ..., width: int | None = ..., height: int | None = ..., depth: int | None = ..., mipLevels: int | None = ..., magnificationFilter: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Filter | None = ..., minificationFilter: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Filter | None = ..., maximumAnisotropy: float | None = ..., comparisonFunction: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonFunction | None = ..., comparisonMode: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonMode | None = ..., layers: int | None = ..., samples: int | None = ..., handleType: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.HandleType | None = ..., handle: typing.Any | None = ...) -> None: ...
        @typing.overload
        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, target: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Target | None = ..., format: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.TextureFormat | None = ..., generateMipMaps: bool | None = ..., wrapMode: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode | None = ..., status: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Status | None = ..., width: int | None = ..., height: int | None = ..., depth: int | None = ..., mipLevels: int | None = ..., magnificationFilter: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Filter | None = ..., minificationFilter: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Filter | None = ..., maximumAnisotropy: float | None = ..., comparisonFunction: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonFunction | None = ..., comparisonMode: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonMode | None = ..., layers: int | None = ..., samples: int | None = ..., handleType: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.HandleType | None = ..., handle: typing.Any | None = ...) -> None: ...

        def addTextureImage(self, textureImage: PySide6.Qt3DRender.Qt3DRender.QAbstractTextureImage, /) -> None: ...
        @property
        def comparisonFunction(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonFunction: ...
        @comparisonFunction.setter
        def comparisonFunction(self, function: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonFunction, /) -> None: ...
        @property
        def comparisonMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonMode: ...
        @comparisonMode.setter
        def comparisonMode(self, mode: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonMode, /) -> None: ...
        @property
        def depth(self, /) -> int: ...
        @depth.setter
        def depth(self, depth: int, /) -> None: ...
        @property
        def format(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.TextureFormat: ...
        @format.setter
        def format(self, format: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.TextureFormat, /) -> None: ...
        @property
        def generateMipMaps(self, /) -> bool: ...
        @generateMipMaps.setter
        def generateMipMaps(self, gen: bool, /) -> None: ...
        @property
        def handle(self, /) -> typing.Any: ...
        @property
        def handleType(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.HandleType: ...
        @property
        def height(self, /) -> int: ...
        @height.setter
        def height(self, height: int, /) -> None: ...
        @property
        def layers(self, /) -> int: ...
        @layers.setter
        def layers(self, layers: int, /) -> None: ...
        @property
        def magnificationFilter(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Filter: ...
        @magnificationFilter.setter
        def magnificationFilter(self, f: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Filter, /) -> None: ...
        @property
        def maximumAnisotropy(self, /) -> float: ...
        @maximumAnisotropy.setter
        def maximumAnisotropy(self, anisotropy: float, /) -> None: ...
        @property
        def minificationFilter(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Filter: ...
        @minificationFilter.setter
        def minificationFilter(self, f: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Filter, /) -> None: ...
        @property
        def mipLevels(self, /) -> int: ...
        @mipLevels.setter
        def mipLevels(self, mipLevels: int, /) -> None: ...
        def removeTextureImage(self, textureImage: PySide6.Qt3DRender.Qt3DRender.QAbstractTextureImage, /) -> None: ...
        @property
        def samples(self, /) -> int: ...
        @samples.setter
        def samples(self, samples: int, /) -> None: ...
        def setHandle(self, handle: typing.Any, /) -> None: ...
        def setHandleType(self, type: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.HandleType, /) -> None: ...
        def setSize(self, width: int, /, height: int = ..., depth: int = ...) -> None: ...
        def setStatus(self, status: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Status, /) -> None: ...
        def setWrapMode(self, wrapMode: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode, /) -> None: ...
        @property
        def status(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Status: ...
        @property
        def target(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Target: ...
        def textureImages(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QAbstractTextureImage]: ...
        def updateData(self, update: PySide6.Qt3DRender.Qt3DRender.QTextureDataUpdate, /) -> None: ...
        @property
        def width(self, /) -> int: ...
        @width.setter
        def width(self, width: int, /) -> None: ...
        @property
        def wrapMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode: ...

    class QAbstractTextureImage(PySide6.Qt3DCore.Qt3DCore.QNode):

        faceChanged              : typing.ClassVar[Signal] = ... # faceChanged(QAbstractTexture::CubeMapFace)
        layerChanged             : typing.ClassVar[Signal] = ... # layerChanged(int)
        mipLevelChanged          : typing.ClassVar[Signal] = ... # mipLevelChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, mipLevel: int | None = ..., layer: int | None = ..., face: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.CubeMapFace | None = ...) -> None: ...

        def dataGenerator(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureImageDataGeneratorPtr: ...
        @property
        def face(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.CubeMapFace: ...
        @face.setter
        def face(self, face: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.CubeMapFace, /) -> None: ...
        @property
        def layer(self, /) -> int: ...
        @layer.setter
        def layer(self, layer: int, /) -> None: ...
        @property
        def mipLevel(self, /) -> int: ...
        @mipLevel.setter
        def mipLevel(self, level: int, /) -> None: ...
        def notifyDataGeneratorChanged(self, /) -> None: ...

    class QAlphaCoverage(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QAlphaTest(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        alphaFunctionChanged     : typing.ClassVar[Signal] = ... # alphaFunctionChanged(AlphaFunction)
        referenceValueChanged    : typing.ClassVar[Signal] = ... # referenceValueChanged(float)

        class AlphaFunction(enum.Enum):

            Never                     = ...  # 0x200
            Less                      = ...  # 0x201
            Equal                     = ...  # 0x202
            LessOrEqual               = ...  # 0x203
            Greater                   = ...  # 0x204
            NotEqual                  = ...  # 0x205
            GreaterOrEqual            = ...  # 0x206
            Always                    = ...  # 0x207


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, alphaFunction: PySide6.Qt3DRender.Qt3DRender.QAlphaTest.AlphaFunction | None = ..., referenceValue: float | None = ...) -> None: ...

        @property
        def alphaFunction(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAlphaTest.AlphaFunction: ...
        @alphaFunction.setter
        def alphaFunction(self, alphaFunction: PySide6.Qt3DRender.Qt3DRender.QAlphaTest.AlphaFunction, /) -> None: ...
        @property
        def referenceValue(self, /) -> float: ...
        @referenceValue.setter
        def referenceValue(self, referenceValue: float, /) -> None: ...

    class QBlendEquation(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        blendFunctionChanged     : typing.ClassVar[Signal] = ... # blendFunctionChanged(BlendFunction)

        class BlendFunction(enum.Enum):

            Add                       = ...  # 0x8006
            Min                       = ...  # 0x8007
            Max                       = ...  # 0x8008
            Subtract                  = ...  # 0x800a
            ReverseSubtract           = ...  # 0x800b


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, blendFunction: PySide6.Qt3DRender.Qt3DRender.QBlendEquation.BlendFunction | None = ...) -> None: ...

        @property
        def blendFunction(self, /) -> PySide6.Qt3DRender.Qt3DRender.QBlendEquation.BlendFunction: ...
        @blendFunction.setter
        def blendFunction(self, blendFunction: PySide6.Qt3DRender.Qt3DRender.QBlendEquation.BlendFunction, /) -> None: ...

    class QBlendEquationArguments(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        bufferIndexChanged       : typing.ClassVar[Signal] = ... # bufferIndexChanged(int)
        destinationAlphaChanged  : typing.ClassVar[Signal] = ... # destinationAlphaChanged(Blending)
        destinationRgbChanged    : typing.ClassVar[Signal] = ... # destinationRgbChanged(Blending)
        destinationRgbaChanged   : typing.ClassVar[Signal] = ... # destinationRgbaChanged(Blending)
        sourceAlphaChanged       : typing.ClassVar[Signal] = ... # sourceAlphaChanged(Blending)
        sourceRgbChanged         : typing.ClassVar[Signal] = ... # sourceRgbChanged(Blending)
        sourceRgbaChanged        : typing.ClassVar[Signal] = ... # sourceRgbaChanged(Blending)

        class Blending(enum.Enum):

            Zero                      = ...  # 0x0
            One                       = ...  # 0x1
            SourceColor               = ...  # 0x300
            OneMinusSourceColor       = ...  # 0x301
            SourceAlpha               = ...  # 0x302
            OneMinusSourceAlpha       = ...  # 0x303
            Source1Alpha              = ...  # 0x303
            DestinationAlpha          = ...  # 0x304
            Source1Color              = ...  # 0x304
            OneMinusDestinationAlpha  = ...  # 0x305
            DestinationColor          = ...  # 0x306
            OneMinusDestinationColor  = ...  # 0x307
            SourceAlphaSaturate       = ...  # 0x308
            ConstantColor             = ...  # 0x8001
            OneMinusConstantColor     = ...  # 0x8002
            ConstantAlpha             = ...  # 0x8003
            OneMinusConstantAlpha     = ...  # 0x8004
            OneMinusSource1Alpha      = ...  # 0x8005
            OneMinusSource1Color      = ...  # 0x8006
            OneMinusSource1Color0     = ...  # 0x8006


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, sourceRgb: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending | None = ..., sourceAlpha: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending | None = ..., destinationRgb: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending | None = ..., destinationAlpha: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending | None = ..., bufferIndex: int | None = ...) -> None: ...

        @property
        def bufferIndex(self, /) -> int: ...
        @bufferIndex.setter
        def bufferIndex(self, index: int, /) -> None: ...
        @property
        def destinationAlpha(self, /) -> PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending: ...
        @destinationAlpha.setter
        def destinationAlpha(self, destinationAlpha: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending, /) -> None: ...
        @property
        def destinationRgb(self, /) -> PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending: ...
        @destinationRgb.setter
        def destinationRgb(self, destinationRgb: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending, /) -> None: ...
        def setDestinationRgba(self, destinationRgba: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending, /) -> None: ...
        def setSourceRgba(self, sourceRgba: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending, /) -> None: ...
        @property
        def sourceAlpha(self, /) -> PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending: ...
        @sourceAlpha.setter
        def sourceAlpha(self, sourceAlpha: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending, /) -> None: ...
        @property
        def sourceRgb(self, /) -> PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending: ...
        @sourceRgb.setter
        def sourceRgb(self, sourceRgb: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending, /) -> None: ...

    class QBlitFramebuffer(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        destinationAttachmentPointChanged: typing.ClassVar[Signal] = ... # destinationAttachmentPointChanged()
        destinationChanged       : typing.ClassVar[Signal] = ... # destinationChanged()
        destinationRectChanged   : typing.ClassVar[Signal] = ... # destinationRectChanged()
        interpolationMethodChanged: typing.ClassVar[Signal] = ... # interpolationMethodChanged()
        sourceAttachmentPointChanged: typing.ClassVar[Signal] = ... # sourceAttachmentPointChanged()
        sourceChanged            : typing.ClassVar[Signal] = ... # sourceChanged()
        sourceRectChanged        : typing.ClassVar[Signal] = ... # sourceRectChanged()

        class InterpolationMethod(enum.Enum):

            Nearest                   = ...  # 0x0
            Linear                    = ...  # 0x1


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, source: PySide6.Qt3DRender.Qt3DRender.QRenderTarget | None = ..., destination: PySide6.Qt3DRender.Qt3DRender.QRenderTarget | None = ..., sourceRect: PySide6.QtCore.QRectF | None = ..., destinationRect: PySide6.QtCore.QRectF | None = ..., sourceAttachmentPoint: PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint | None = ..., destinationAttachmentPoint: PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint | None = ..., interpolationMethod: PySide6.Qt3DRender.Qt3DRender.QBlitFramebuffer.InterpolationMethod | None = ...) -> None: ...

        @property
        def destination(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderTarget: ...
        @destination.setter
        def destination(self, destination: PySide6.Qt3DRender.Qt3DRender.QRenderTarget, /) -> None: ...
        @property
        def destinationAttachmentPoint(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint: ...
        @destinationAttachmentPoint.setter
        def destinationAttachmentPoint(self, destinationAttachmentPoint: PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint, /) -> None: ...
        @property
        def destinationRect(self, /) -> PySide6.QtCore.QRectF: ...
        @destinationRect.setter
        def destinationRect(self, destinationRect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
        @property
        def interpolationMethod(self, /) -> PySide6.Qt3DRender.Qt3DRender.QBlitFramebuffer.InterpolationMethod: ...
        @interpolationMethod.setter
        def interpolationMethod(self, interpolationMethod: PySide6.Qt3DRender.Qt3DRender.QBlitFramebuffer.InterpolationMethod, /) -> None: ...
        @property
        def source(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderTarget: ...
        @source.setter
        def source(self, source: PySide6.Qt3DRender.Qt3DRender.QRenderTarget, /) -> None: ...
        @property
        def sourceAttachmentPoint(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint: ...
        @sourceAttachmentPoint.setter
        def sourceAttachmentPoint(self, sourceAttachmentPoint: PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint, /) -> None: ...
        @property
        def sourceRect(self, /) -> PySide6.QtCore.QRectF: ...
        @sourceRect.setter
        def sourceRect(self, sourceRect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...

    class QBufferCapture(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QCamera(PySide6.Qt3DCore.Qt3DCore.QEntity):

        aspectRatioChanged       : typing.ClassVar[Signal] = ... # aspectRatioChanged(float)
        bottomChanged            : typing.ClassVar[Signal] = ... # bottomChanged(float)
        exposureChanged          : typing.ClassVar[Signal] = ... # exposureChanged(float)
        farPlaneChanged          : typing.ClassVar[Signal] = ... # farPlaneChanged(float)
        fieldOfViewChanged       : typing.ClassVar[Signal] = ... # fieldOfViewChanged(float)
        leftChanged              : typing.ClassVar[Signal] = ... # leftChanged(float)
        nearPlaneChanged         : typing.ClassVar[Signal] = ... # nearPlaneChanged(float)
        positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(QVector3D)
        projectionMatrixChanged  : typing.ClassVar[Signal] = ... # projectionMatrixChanged(QMatrix4x4)
        projectionTypeChanged    : typing.ClassVar[Signal] = ... # projectionTypeChanged(QCameraLens::ProjectionType)
        rightChanged             : typing.ClassVar[Signal] = ... # rightChanged(float)
        topChanged               : typing.ClassVar[Signal] = ... # topChanged(float)
        upVectorChanged          : typing.ClassVar[Signal] = ... # upVectorChanged(QVector3D)
        viewCenterChanged        : typing.ClassVar[Signal] = ... # viewCenterChanged(QVector3D)
        viewMatrixChanged        : typing.ClassVar[Signal] = ... # viewMatrixChanged()
        viewVectorChanged        : typing.ClassVar[Signal] = ... # viewVectorChanged(QVector3D)

        class CameraTranslationOption(enum.Enum):

            TranslateViewCenter       = ...  # 0x0
            DontTranslateViewCenter   = ...  # 0x1


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, projectionType: PySide6.Qt3DRender.Qt3DRender.QCameraLens.ProjectionType | None = ..., nearPlane: float | None = ..., farPlane: float | None = ..., fieldOfView: float | None = ..., aspectRatio: float | None = ..., left: float | None = ..., right: float | None = ..., bottom: float | None = ..., top: float | None = ..., projectionMatrix: PySide6.QtGui.QMatrix4x4 | None = ..., exposure: float | None = ..., position: PySide6.QtGui.QVector3D | None = ..., upVector: PySide6.QtGui.QVector3D | None = ..., viewCenter: PySide6.QtGui.QVector3D | None = ..., viewVector: PySide6.QtGui.QVector3D | None = ..., viewMatrix: PySide6.QtGui.QMatrix4x4 | None = ..., lens: PySide6.Qt3DRender.Qt3DRender.QCameraLens | None = ..., transform: PySide6.Qt3DCore.Qt3DCore.QTransform | None = ...) -> None: ...

        @property
        def aspectRatio(self, /) -> float: ...
        @aspectRatio.setter
        def aspectRatio(self, aspectRatio: float, /) -> None: ...
        @property
        def bottom(self, /) -> float: ...
        @bottom.setter
        def bottom(self, bottom: float, /) -> None: ...
        @property
        def exposure(self, /) -> float: ...
        @exposure.setter
        def exposure(self, exposure: float, /) -> None: ...
        @property
        def farPlane(self, /) -> float: ...
        @farPlane.setter
        def farPlane(self, farPlane: float, /) -> None: ...
        @property
        def fieldOfView(self, /) -> float: ...
        @fieldOfView.setter
        def fieldOfView(self, fieldOfView: float, /) -> None: ...
        @property
        def left(self, /) -> float: ...
        @left.setter
        def left(self, left: float, /) -> None: ...
        @property
        def lens(self, /) -> PySide6.Qt3DRender.Qt3DRender.QCameraLens: ...
        @property
        def nearPlane(self, /) -> float: ...
        @nearPlane.setter
        def nearPlane(self, nearPlane: float, /) -> None: ...
        @typing.overload
        def pan(self, angle: float, /) -> None: ...
        @typing.overload
        def pan(self, angle: float, axis: PySide6.QtGui.QVector3D, /) -> None: ...
        @typing.overload
        def panAboutViewCenter(self, angle: float, /) -> None: ...
        @typing.overload
        def panAboutViewCenter(self, angle: float, axis: PySide6.QtGui.QVector3D, /) -> None: ...
        def panRotation(self, angle: float, /) -> PySide6.QtGui.QQuaternion: ...
        @property
        def position(self, /) -> PySide6.QtGui.QVector3D: ...
        @position.setter
        def position(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
        @property
        def projectionMatrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
        @projectionMatrix.setter
        def projectionMatrix(self, projectionMatrix: PySide6.QtGui.QMatrix4x4 | PySide6.QtGui.QTransform, /) -> None: ...
        @property
        def projectionType(self, /) -> PySide6.Qt3DRender.Qt3DRender.QCameraLens.ProjectionType: ...
        @projectionType.setter
        def projectionType(self, type: PySide6.Qt3DRender.Qt3DRender.QCameraLens.ProjectionType, /) -> None: ...
        @property
        def right(self, /) -> float: ...
        @right.setter
        def right(self, right: float, /) -> None: ...
        def roll(self, angle: float, /) -> None: ...
        def rollAboutViewCenter(self, angle: float, /) -> None: ...
        def rollRotation(self, angle: float, /) -> PySide6.QtGui.QQuaternion: ...
        def rotate(self, q: PySide6.QtGui.QQuaternion, /) -> None: ...
        def rotateAboutViewCenter(self, q: PySide6.QtGui.QQuaternion, /) -> None: ...
        def rotation(self, angle: float, axis: PySide6.QtGui.QVector3D, /) -> PySide6.QtGui.QQuaternion: ...
        def tilt(self, angle: float, /) -> None: ...
        def tiltAboutViewCenter(self, angle: float, /) -> None: ...
        def tiltRotation(self, angle: float, /) -> PySide6.QtGui.QQuaternion: ...
        @property
        def top(self, /) -> float: ...
        @top.setter
        def top(self, top: float, /) -> None: ...
        @property
        def transform(self, /) -> PySide6.Qt3DCore.Qt3DCore.QTransform: ...
        def translate(self, vLocal: PySide6.QtGui.QVector3D, /, option: PySide6.Qt3DRender.Qt3DRender.QCamera.CameraTranslationOption = ...) -> None: ...
        def translateWorld(self, vWorld: PySide6.QtGui.QVector3D, /, option: PySide6.Qt3DRender.Qt3DRender.QCamera.CameraTranslationOption = ...) -> None: ...
        @property
        def upVector(self, /) -> PySide6.QtGui.QVector3D: ...
        @upVector.setter
        def upVector(self, upVector: PySide6.QtGui.QVector3D, /) -> None: ...
        def viewAll(self, /) -> None: ...
        @property
        def viewCenter(self, /) -> PySide6.QtGui.QVector3D: ...
        @viewCenter.setter
        def viewCenter(self, viewCenter: PySide6.QtGui.QVector3D, /) -> None: ...
        def viewEntity(self, entity: PySide6.Qt3DCore.Qt3DCore.QEntity, /) -> None: ...
        @property
        def viewMatrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
        def viewSphere(self, center: PySide6.QtGui.QVector3D, radius: float, /) -> None: ...
        @property
        def viewVector(self, /) -> PySide6.QtGui.QVector3D: ...

    class QCameraLens(PySide6.Qt3DCore.Qt3DCore.QComponent):

        aspectRatioChanged       : typing.ClassVar[Signal] = ... # aspectRatioChanged(float)
        bottomChanged            : typing.ClassVar[Signal] = ... # bottomChanged(float)
        exposureChanged          : typing.ClassVar[Signal] = ... # exposureChanged(float)
        farPlaneChanged          : typing.ClassVar[Signal] = ... # farPlaneChanged(float)
        fieldOfViewChanged       : typing.ClassVar[Signal] = ... # fieldOfViewChanged(float)
        leftChanged              : typing.ClassVar[Signal] = ... # leftChanged(float)
        nearPlaneChanged         : typing.ClassVar[Signal] = ... # nearPlaneChanged(float)
        projectionMatrixChanged  : typing.ClassVar[Signal] = ... # projectionMatrixChanged(QMatrix4x4)
        projectionTypeChanged    : typing.ClassVar[Signal] = ... # projectionTypeChanged(QCameraLens::ProjectionType)
        rightChanged             : typing.ClassVar[Signal] = ... # rightChanged(float)
        topChanged               : typing.ClassVar[Signal] = ... # topChanged(float)
        viewSphere               : typing.ClassVar[Signal] = ... # viewSphere(QVector3D,float)

        class ProjectionType(enum.Enum):

            OrthographicProjection    = ...  # 0x0
            PerspectiveProjection     = ...  # 0x1
            FrustumProjection         = ...  # 0x2
            CustomProjection          = ...  # 0x3


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, projectionType: PySide6.Qt3DRender.Qt3DRender.QCameraLens.ProjectionType | None = ..., nearPlane: float | None = ..., farPlane: float | None = ..., fieldOfView: float | None = ..., aspectRatio: float | None = ..., left: float | None = ..., right: float | None = ..., bottom: float | None = ..., top: float | None = ..., projectionMatrix: PySide6.QtGui.QMatrix4x4 | None = ..., exposure: float | None = ...) -> None: ...

        @property
        def aspectRatio(self, /) -> float: ...
        @aspectRatio.setter
        def aspectRatio(self, aspectRatio: float, /) -> None: ...
        @property
        def bottom(self, /) -> float: ...
        @bottom.setter
        def bottom(self, bottom: float, /) -> None: ...
        @property
        def exposure(self, /) -> float: ...
        @exposure.setter
        def exposure(self, exposure: float, /) -> None: ...
        @property
        def farPlane(self, /) -> float: ...
        @farPlane.setter
        def farPlane(self, farPlane: float, /) -> None: ...
        @property
        def fieldOfView(self, /) -> float: ...
        @fieldOfView.setter
        def fieldOfView(self, fieldOfView: float, /) -> None: ...
        @property
        def left(self, /) -> float: ...
        @left.setter
        def left(self, left: float, /) -> None: ...
        @property
        def nearPlane(self, /) -> float: ...
        @nearPlane.setter
        def nearPlane(self, nearPlane: float, /) -> None: ...
        @property
        def projectionMatrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
        @projectionMatrix.setter
        def projectionMatrix(self, projectionMatrix: PySide6.QtGui.QMatrix4x4 | PySide6.QtGui.QTransform, /) -> None: ...
        @property
        def projectionType(self, /) -> PySide6.Qt3DRender.Qt3DRender.QCameraLens.ProjectionType: ...
        @projectionType.setter
        def projectionType(self, projectionType: PySide6.Qt3DRender.Qt3DRender.QCameraLens.ProjectionType, /) -> None: ...
        @property
        def right(self, /) -> float: ...
        @right.setter
        def right(self, right: float, /) -> None: ...
        def setFrustumProjection(self, left: float, right: float, bottom: float, top: float, nearPlane: float, farPlane: float, /) -> None: ...
        def setOrthographicProjection(self, left: float, right: float, bottom: float, top: float, nearPlane: float, farPlane: float, /) -> None: ...
        def setPerspectiveProjection(self, fieldOfView: float, aspect: float, nearPlane: float, farPlane: float, /) -> None: ...
        @property
        def top(self, /) -> float: ...
        @top.setter
        def top(self, top: float, /) -> None: ...
        def viewAll(self, cameraId: PySide6.Qt3DCore.Qt3DCore.QNodeId, /) -> None: ...
        def viewEntity(self, entityId: PySide6.Qt3DCore.Qt3DCore.QNodeId, cameraId: PySide6.Qt3DCore.Qt3DCore.QNodeId, /) -> None: ...

    class QCameraSelector(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        cameraChanged            : typing.ClassVar[Signal] = ... # cameraChanged(Qt3DCore::QEntity*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, camera: PySide6.Qt3DCore.Qt3DCore.QEntity | None = ...) -> None: ...

        @property
        def camera(self, /) -> PySide6.Qt3DCore.Qt3DCore.QEntity: ...
        @camera.setter
        def camera(self, camera: PySide6.Qt3DCore.Qt3DCore.QEntity, /) -> None: ...

    class QClearBuffers(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        buffersChanged           : typing.ClassVar[Signal] = ... # buffersChanged(BufferType)
        clearColorChanged        : typing.ClassVar[Signal] = ... # clearColorChanged(QColor)
        clearDepthValueChanged   : typing.ClassVar[Signal] = ... # clearDepthValueChanged(float)
        clearStencilValueChanged : typing.ClassVar[Signal] = ... # clearStencilValueChanged(int)
        colorBufferChanged       : typing.ClassVar[Signal] = ... # colorBufferChanged(QRenderTargetOutput*)

        class BufferType(enum.Flag):

            None_                     = ...  # 0x0
            ColorBuffer               = ...  # 0x1
            DepthBuffer               = ...  # 0x2
            ColorDepthBuffer          = ...  # 0x3
            StencilBuffer             = ...  # 0x4
            DepthStencilBuffer        = ...  # 0x6
            ColorDepthStencilBuffer   = ...  # 0x7
            AllBuffers                = ...  # 0xffffffff


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, buffers: PySide6.Qt3DRender.Qt3DRender.QClearBuffers.BufferType | None = ..., clearColor: PySide6.QtGui.QColor | None = ..., clearDepthValue: float | None = ..., clearStencilValue: int | None = ..., colorBuffer: PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput | None = ...) -> None: ...

        @property
        def buffers(self, /) -> PySide6.Qt3DRender.Qt3DRender.QClearBuffers.BufferType: ...
        @buffers.setter
        def buffers(self, buffers: PySide6.Qt3DRender.Qt3DRender.QClearBuffers.BufferType, /) -> None: ...
        @property
        def clearColor(self, /) -> PySide6.QtGui.QColor: ...
        @clearColor.setter
        def clearColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        @property
        def clearDepthValue(self, /) -> float: ...
        @clearDepthValue.setter
        def clearDepthValue(self, clearDepthValue: float, /) -> None: ...
        @property
        def clearStencilValue(self, /) -> int: ...
        @clearStencilValue.setter
        def clearStencilValue(self, clearStencilValue: int, /) -> None: ...
        @property
        def colorBuffer(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput: ...
        @colorBuffer.setter
        def colorBuffer(self, buffer: PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput, /) -> None: ...

    class QClipPlane(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        distanceChanged          : typing.ClassVar[Signal] = ... # distanceChanged(float)
        normalChanged            : typing.ClassVar[Signal] = ... # normalChanged(QVector3D)
        planeIndexChanged        : typing.ClassVar[Signal] = ... # planeIndexChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, planeIndex: int | None = ..., normal: PySide6.QtGui.QVector3D | None = ..., distance: float | None = ...) -> None: ...

        @property
        def distance(self, /) -> float: ...
        @distance.setter
        def distance(self, arg__1: float, /) -> None: ...
        @property
        def normal(self, /) -> PySide6.QtGui.QVector3D: ...
        @normal.setter
        def normal(self, arg__1: PySide6.QtGui.QVector3D, /) -> None: ...
        @property
        def planeIndex(self, /) -> int: ...
        @planeIndex.setter
        def planeIndex(self, arg__1: int, /) -> None: ...

    class QColorMask(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        alphaMaskedChanged       : typing.ClassVar[Signal] = ... # alphaMaskedChanged(bool)
        blueMaskedChanged        : typing.ClassVar[Signal] = ... # blueMaskedChanged(bool)
        greenMaskedChanged       : typing.ClassVar[Signal] = ... # greenMaskedChanged(bool)
        redMaskedChanged         : typing.ClassVar[Signal] = ... # redMaskedChanged(bool)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, redMasked: bool | None = ..., greenMasked: bool | None = ..., blueMasked: bool | None = ..., alphaMasked: bool | None = ...) -> None: ...

        @property
        def alphaMasked(self, /) -> bool: ...
        @alphaMasked.setter
        def alphaMasked(self, alphaMasked: bool, /) -> None: ...
        @property
        def blueMasked(self, /) -> bool: ...
        @blueMasked.setter
        def blueMasked(self, blueMasked: bool, /) -> None: ...
        @property
        def greenMasked(self, /) -> bool: ...
        @greenMasked.setter
        def greenMasked(self, greenMasked: bool, /) -> None: ...
        @property
        def redMasked(self, /) -> bool: ...
        @redMasked.setter
        def redMasked(self, redMasked: bool, /) -> None: ...

    class QComputeCommand(PySide6.Qt3DCore.Qt3DCore.QComponent):

        runTypeChanged           : typing.ClassVar[Signal] = ... # runTypeChanged()
        workGroupXChanged        : typing.ClassVar[Signal] = ... # workGroupXChanged()
        workGroupYChanged        : typing.ClassVar[Signal] = ... # workGroupYChanged()
        workGroupZChanged        : typing.ClassVar[Signal] = ... # workGroupZChanged()

        class RunType(enum.Enum):

            Continuous                = ...  # 0x0
            Manual                    = ...  # 0x1


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, workGroupX: int | None = ..., workGroupY: int | None = ..., workGroupZ: int | None = ..., runType: PySide6.Qt3DRender.Qt3DRender.QComputeCommand.RunType | None = ...) -> None: ...

        @property
        def runType(self, /) -> PySide6.Qt3DRender.Qt3DRender.QComputeCommand.RunType: ...
        @runType.setter
        def runType(self, runType: PySide6.Qt3DRender.Qt3DRender.QComputeCommand.RunType, /) -> None: ...
        @typing.overload
        def trigger(self, /, frameCount: int = ...) -> None: ...
        @typing.overload
        def trigger(self, workGroupX: int, workGroupY: int, workGroupZ: int, /, frameCount: int = ...) -> None: ...
        @property
        def workGroupX(self, /) -> int: ...
        @workGroupX.setter
        def workGroupX(self, workGroupX: int, /) -> None: ...
        @property
        def workGroupY(self, /) -> int: ...
        @workGroupY.setter
        def workGroupY(self, workGroupY: int, /) -> None: ...
        @property
        def workGroupZ(self, /) -> int: ...
        @workGroupZ.setter
        def workGroupZ(self, workGroupZ: int, /) -> None: ...

    class QCullFace(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        modeChanged              : typing.ClassVar[Signal] = ... # modeChanged(CullingMode)

        class CullingMode(enum.Enum):

            NoCulling                 = ...  # 0x0
            Front                     = ...  # 0x404
            Back                      = ...  # 0x405
            FrontAndBack              = ...  # 0x408


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, mode: PySide6.Qt3DRender.Qt3DRender.QCullFace.CullingMode | None = ...) -> None: ...

        @property
        def mode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QCullFace.CullingMode: ...
        @mode.setter
        def mode(self, mode: PySide6.Qt3DRender.Qt3DRender.QCullFace.CullingMode, /) -> None: ...

    class QDebugOverlay(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QDepthRange(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        farValueChanged          : typing.ClassVar[Signal] = ... # farValueChanged(double)
        nearValueChanged         : typing.ClassVar[Signal] = ... # nearValueChanged(double)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, nearValue: float | None = ..., farValue: float | None = ...) -> None: ...

        @property
        def farValue(self, /) -> float: ...
        @farValue.setter
        def farValue(self, value: float, /) -> None: ...
        @property
        def nearValue(self, /) -> float: ...
        @nearValue.setter
        def nearValue(self, value: float, /) -> None: ...

    class QDepthTest(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        depthFunctionChanged     : typing.ClassVar[Signal] = ... # depthFunctionChanged(DepthFunction)

        class DepthFunction(enum.Enum):

            Never                     = ...  # 0x200
            Less                      = ...  # 0x201
            Equal                     = ...  # 0x202
            LessOrEqual               = ...  # 0x203
            Greater                   = ...  # 0x204
            NotEqual                  = ...  # 0x205
            GreaterOrEqual            = ...  # 0x206
            Always                    = ...  # 0x207


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, depthFunction: PySide6.Qt3DRender.Qt3DRender.QDepthTest.DepthFunction | None = ...) -> None: ...

        @property
        def depthFunction(self, /) -> PySide6.Qt3DRender.Qt3DRender.QDepthTest.DepthFunction: ...
        @depthFunction.setter
        def depthFunction(self, depthFunction: PySide6.Qt3DRender.Qt3DRender.QDepthTest.DepthFunction, /) -> None: ...

    class QDirectionalLight(PySide6.Qt3DRender.Qt3DRender.QAbstractLight):

        worldDirectionChanged    : typing.ClassVar[Signal] = ... # worldDirectionChanged(QVector3D)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, worldDirection: PySide6.QtGui.QVector3D | None = ...) -> None: ...

        @property
        def worldDirection(self, /) -> PySide6.QtGui.QVector3D: ...
        @worldDirection.setter
        def worldDirection(self, worldDirection: PySide6.QtGui.QVector3D, /) -> None: ...

    class QDispatchCompute(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        workGroupXChanged        : typing.ClassVar[Signal] = ... # workGroupXChanged()
        workGroupYChanged        : typing.ClassVar[Signal] = ... # workGroupYChanged()
        workGroupZChanged        : typing.ClassVar[Signal] = ... # workGroupZChanged()

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, workGroupX: int | None = ..., workGroupY: int | None = ..., workGroupZ: int | None = ...) -> None: ...

        @property
        def workGroupX(self, /) -> int: ...
        @workGroupX.setter
        def workGroupX(self, workGroupX: int, /) -> None: ...
        @property
        def workGroupY(self, /) -> int: ...
        @workGroupY.setter
        def workGroupY(self, workGroupY: int, /) -> None: ...
        @property
        def workGroupZ(self, /) -> int: ...
        @workGroupZ.setter
        def workGroupZ(self, workGroupZ: int, /) -> None: ...

    class QDithering(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QEffect(PySide6.Qt3DCore.Qt3DCore.QNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...

        def addParameter(self, parameter: PySide6.Qt3DRender.Qt3DRender.QParameter, /) -> None: ...
        def addTechnique(self, t: PySide6.Qt3DRender.Qt3DRender.QTechnique, /) -> None: ...
        def parameters(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QParameter]: ...
        def removeParameter(self, parameter: PySide6.Qt3DRender.Qt3DRender.QParameter, /) -> None: ...
        def removeTechnique(self, t: PySide6.Qt3DRender.Qt3DRender.QTechnique, /) -> None: ...
        def techniques(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QTechnique]: ...

    class QEnvironmentLight(PySide6.Qt3DCore.Qt3DCore.QComponent):

        irradianceChanged        : typing.ClassVar[Signal] = ... # irradianceChanged(Qt3DRender::QAbstractTexture*)
        specularChanged          : typing.ClassVar[Signal] = ... # specularChanged(Qt3DRender::QAbstractTexture*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, irradiance: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ..., specular: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ...) -> None: ...

        @property
        def irradiance(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        @irradiance.setter
        def irradiance(self, irradiance: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...
        @property
        def specular(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        @specular.setter
        def specular(self, specular: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...

    class QFilterKey(PySide6.Qt3DCore.Qt3DCore.QNode):

        nameChanged              : typing.ClassVar[Signal] = ... # nameChanged(QString)
        valueChanged             : typing.ClassVar[Signal] = ... # valueChanged(QVariant)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, value: typing.Any | None = ..., name: str | None = ...) -> None: ...

        @property
        def name(self, /) -> str: ...
        @name.setter
        def name(self, customType: str, /) -> None: ...
        @property
        def value(self, /) -> typing.Any: ...
        @value.setter
        def value(self, value: typing.Any, /) -> None: ...

    class QFrameGraphNode(PySide6.Qt3DCore.Qt3DCore.QNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...

        def parentFrameGraphNode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode: ...

    class QFrontFace(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        directionChanged         : typing.ClassVar[Signal] = ... # directionChanged(WindingDirection)

        class WindingDirection(enum.Enum):

            ClockWise                 = ...  # 0x900
            CounterClockWise          = ...  # 0x901


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, direction: PySide6.Qt3DRender.Qt3DRender.QFrontFace.WindingDirection | None = ...) -> None: ...

        @property
        def direction(self, /) -> PySide6.Qt3DRender.Qt3DRender.QFrontFace.WindingDirection: ...
        @direction.setter
        def direction(self, direction: PySide6.Qt3DRender.Qt3DRender.QFrontFace.WindingDirection, /) -> None: ...

    class QFrustumCulling(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QGeometryRenderer(PySide6.Qt3DCore.Qt3DCore.QBoundingVolume):

        firstInstanceChanged     : typing.ClassVar[Signal] = ... # firstInstanceChanged(int)
        firstVertexChanged       : typing.ClassVar[Signal] = ... # firstVertexChanged(int)
        geometryChanged          : typing.ClassVar[Signal] = ... # geometryChanged(Qt3DCore::QGeometry*)
        indexBufferByteOffsetChanged: typing.ClassVar[Signal] = ... # indexBufferByteOffsetChanged(int)
        indexOffsetChanged       : typing.ClassVar[Signal] = ... # indexOffsetChanged(int)
        instanceCountChanged     : typing.ClassVar[Signal] = ... # instanceCountChanged(int)
        primitiveRestartEnabledChanged: typing.ClassVar[Signal] = ... # primitiveRestartEnabledChanged(bool)
        primitiveTypeChanged     : typing.ClassVar[Signal] = ... # primitiveTypeChanged(PrimitiveType)
        restartIndexValueChanged : typing.ClassVar[Signal] = ... # restartIndexValueChanged(int)
        sortIndexChanged         : typing.ClassVar[Signal] = ... # sortIndexChanged(float)
        vertexCountChanged       : typing.ClassVar[Signal] = ... # vertexCountChanged(int)
        verticesPerPatchChanged  : typing.ClassVar[Signal] = ... # verticesPerPatchChanged(int)

        class PrimitiveType(enum.Enum):

            Points                    = ...  # 0x0
            Lines                     = ...  # 0x1
            LineLoop                  = ...  # 0x2
            LineStrip                 = ...  # 0x3
            Triangles                 = ...  # 0x4
            TriangleStrip             = ...  # 0x5
            TriangleFan               = ...  # 0x6
            LinesAdjacency            = ...  # 0xa
            LineStripAdjacency        = ...  # 0xb
            TrianglesAdjacency        = ...  # 0xc
            TriangleStripAdjacency    = ...  # 0xd
            Patches                   = ...  # 0xe


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, instanceCount: int | None = ..., vertexCount: int | None = ..., indexOffset: int | None = ..., firstInstance: int | None = ..., firstVertex: int | None = ..., indexBufferByteOffset: int | None = ..., restartIndexValue: int | None = ..., verticesPerPatch: int | None = ..., primitiveRestartEnabled: bool | None = ..., geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry | None = ..., primitiveType: PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveType | None = ..., sortIndex: float | None = ...) -> None: ...

        @property
        def firstInstance(self, /) -> int: ...
        @firstInstance.setter
        def firstInstance(self, firstInstance: int, /) -> None: ...
        @property
        def firstVertex(self, /) -> int: ...
        @firstVertex.setter
        def firstVertex(self, firstVertex: int, /) -> None: ...
        @property
        def geometry(self, /) -> PySide6.Qt3DCore.Qt3DCore.QGeometry: ...
        @geometry.setter
        def geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        @property
        def indexBufferByteOffset(self, /) -> int: ...
        @indexBufferByteOffset.setter
        def indexBufferByteOffset(self, offset: int, /) -> None: ...
        @property
        def indexOffset(self, /) -> int: ...
        @indexOffset.setter
        def indexOffset(self, indexOffset: int, /) -> None: ...
        @property
        def instanceCount(self, /) -> int: ...
        @instanceCount.setter
        def instanceCount(self, instanceCount: int, /) -> None: ...
        @property
        def primitiveRestartEnabled(self, /) -> bool: ...
        @primitiveRestartEnabled.setter
        def primitiveRestartEnabled(self, enabled: bool, /) -> None: ...
        @property
        def primitiveType(self, /) -> PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveType: ...
        @primitiveType.setter
        def primitiveType(self, primitiveType: PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveType, /) -> None: ...
        @property
        def restartIndexValue(self, /) -> int: ...
        @restartIndexValue.setter
        def restartIndexValue(self, index: int, /) -> None: ...
        @property
        def sortIndex(self, /) -> float: ...
        @sortIndex.setter
        def sortIndex(self, sortIndex: float, /) -> None: ...
        @property
        def vertexCount(self, /) -> int: ...
        @vertexCount.setter
        def vertexCount(self, vertexCount: int, /) -> None: ...
        @property
        def verticesPerPatch(self, /) -> int: ...
        @verticesPerPatch.setter
        def verticesPerPatch(self, verticesPerPatch: int, /) -> None: ...

    class QGraphicsApiFilter(PySide6.QtCore.QObject):

        apiChanged               : typing.ClassVar[Signal] = ... # apiChanged(Qt3DRender::QGraphicsApiFilter::Api)
        extensionsChanged        : typing.ClassVar[Signal] = ... # extensionsChanged(QStringList)
        graphicsApiFilterChanged : typing.ClassVar[Signal] = ... # graphicsApiFilterChanged()
        majorVersionChanged      : typing.ClassVar[Signal] = ... # majorVersionChanged(int)
        minorVersionChanged      : typing.ClassVar[Signal] = ... # minorVersionChanged(int)
        profileChanged           : typing.ClassVar[Signal] = ... # profileChanged(Qt3DRender::QGraphicsApiFilter::OpenGLProfile)
        vendorChanged            : typing.ClassVar[Signal] = ... # vendorChanged(QString)

        class Api(enum.Enum):

            OpenGL                    = ...  # 0x1
            OpenGLES                  = ...  # 0x2
            Vulkan                    = ...  # 0x3
            DirectX                   = ...  # 0x4
            RHI                       = ...  # 0x5

        class OpenGLProfile(enum.Enum):

            NoProfile                 = ...  # 0x0
            CoreProfile               = ...  # 0x1
            CompatibilityProfile      = ...  # 0x2


        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, api: PySide6.Qt3DRender.Qt3DRender.QGraphicsApiFilter.Api | None = ..., profile: PySide6.Qt3DRender.Qt3DRender.QGraphicsApiFilter.OpenGLProfile | None = ..., minorVersion: int | None = ..., majorVersion: int | None = ..., extensions: collections.abc.Sequence[str] | None = ..., vendor: str | None = ...) -> None: ...

        @property
        def api(self, /) -> PySide6.Qt3DRender.Qt3DRender.QGraphicsApiFilter.Api: ...
        @api.setter
        def api(self, api: PySide6.Qt3DRender.Qt3DRender.QGraphicsApiFilter.Api, /) -> None: ...
        @property
        def extensions(self, /) -> typing.List[str]: ...
        @extensions.setter
        def extensions(self, extensions: collections.abc.Sequence[str], /) -> None: ...
        @property
        def majorVersion(self, /) -> int: ...
        @majorVersion.setter
        def majorVersion(self, majorVersion: int, /) -> None: ...
        @property
        def minorVersion(self, /) -> int: ...
        @minorVersion.setter
        def minorVersion(self, minorVersion: int, /) -> None: ...
        @property
        def profile(self, /) -> PySide6.Qt3DRender.Qt3DRender.QGraphicsApiFilter.OpenGLProfile: ...
        @profile.setter
        def profile(self, profile: PySide6.Qt3DRender.Qt3DRender.QGraphicsApiFilter.OpenGLProfile, /) -> None: ...
        @property
        def vendor(self, /) -> str: ...
        @vendor.setter
        def vendor(self, vendor: str, /) -> None: ...

    class QLayer(PySide6.Qt3DCore.Qt3DCore.QComponent):

        recursiveChanged         : typing.ClassVar[Signal] = ... # recursiveChanged()

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, recursive: bool | None = ...) -> None: ...

        @property
        def recursive(self, /) -> bool: ...
        @recursive.setter
        def recursive(self, recursive: bool, /) -> None: ...

    class QLayerFilter(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        filterModeChanged        : typing.ClassVar[Signal] = ... # filterModeChanged(FilterMode)

        class FilterMode(enum.Enum):

            AcceptAnyMatchingLayers   = ...  # 0x0
            AcceptAllMatchingLayers   = ...  # 0x1
            DiscardAnyMatchingLayers  = ...  # 0x2
            DiscardAllMatchingLayers  = ...  # 0x3


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, filterMode: PySide6.Qt3DRender.Qt3DRender.QLayerFilter.FilterMode | None = ...) -> None: ...

        def addLayer(self, layer: PySide6.Qt3DRender.Qt3DRender.QLayer, /) -> None: ...
        @property
        def filterMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QLayerFilter.FilterMode: ...
        @filterMode.setter
        def filterMode(self, filterMode: PySide6.Qt3DRender.Qt3DRender.QLayerFilter.FilterMode, /) -> None: ...
        def layers(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QLayer]: ...
        def removeLayer(self, layer: PySide6.Qt3DRender.Qt3DRender.QLayer, /) -> None: ...

    class QLevelOfDetail(PySide6.Qt3DCore.Qt3DCore.QComponent):

        cameraChanged            : typing.ClassVar[Signal] = ... # cameraChanged(QCamera*)
        currentIndexChanged      : typing.ClassVar[Signal] = ... # currentIndexChanged(int)
        thresholdTypeChanged     : typing.ClassVar[Signal] = ... # thresholdTypeChanged(ThresholdType)
        thresholdsChanged        : typing.ClassVar[Signal] = ... # thresholdsChanged(QList<qreal>)
        volumeOverrideChanged    : typing.ClassVar[Signal] = ... # volumeOverrideChanged(QLevelOfDetailBoundingSphere)

        class ThresholdType(enum.Enum):

            DistanceToCameraThreshold = ...  # 0x0
            ProjectedScreenPixelSizeThreshold = ...  # 0x1


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, camera: PySide6.Qt3DRender.Qt3DRender.QCamera | None = ..., currentIndex: int | None = ..., thresholdType: PySide6.Qt3DRender.Qt3DRender.QLevelOfDetail.ThresholdType | None = ..., thresholds: collections.abc.Sequence[float] | None = ..., volumeOverride: PySide6.Qt3DRender.Qt3DRender.QLevelOfDetailBoundingSphere | None = ...) -> None: ...

        @property
        def camera(self, /) -> PySide6.Qt3DRender.Qt3DRender.QCamera: ...
        @camera.setter
        def camera(self, camera: PySide6.Qt3DRender.Qt3DRender.QCamera, /) -> None: ...
        def createBoundingSphere(self, center: PySide6.QtGui.QVector3D, radius: float, /) -> PySide6.Qt3DRender.Qt3DRender.QLevelOfDetailBoundingSphere: ...
        @property
        def currentIndex(self, /) -> int: ...
        @currentIndex.setter
        def currentIndex(self, currentIndex: int, /) -> None: ...
        @property
        def thresholdType(self, /) -> PySide6.Qt3DRender.Qt3DRender.QLevelOfDetail.ThresholdType: ...
        @thresholdType.setter
        def thresholdType(self, thresholdType: PySide6.Qt3DRender.Qt3DRender.QLevelOfDetail.ThresholdType, /) -> None: ...
        @property
        def thresholds(self, /) -> typing.List[float]: ...
        @thresholds.setter
        def thresholds(self, thresholds: collections.abc.Sequence[float], /) -> None: ...
        @property
        def volumeOverride(self, /) -> PySide6.Qt3DRender.Qt3DRender.QLevelOfDetailBoundingSphere: ...
        @volumeOverride.setter
        def volumeOverride(self, volumeOverride: PySide6.Qt3DRender.Qt3DRender.QLevelOfDetailBoundingSphere, /) -> None: ...

    class QLevelOfDetailBoundingSphere(Shiboken.Object):

        @typing.overload
        def __init__(self, other: PySide6.Qt3DRender.Qt3DRender.QLevelOfDetailBoundingSphere, /, *, center: PySide6.QtGui.QVector3D | None = ..., radius: float | None = ...) -> None: ...
        @typing.overload
        def __init__(self, /, center: PySide6.QtGui.QVector3D = ..., radius: float = ...) -> None: ...

        def __eq__(self, other: PySide6.Qt3DRender.Qt3DRender.QLevelOfDetailBoundingSphere, /) -> bool: ...
        def __ne__(self, other: PySide6.Qt3DRender.Qt3DRender.QLevelOfDetailBoundingSphere, /) -> bool: ...
        @property
        def center(self, /) -> PySide6.QtGui.QVector3D: ...
        def isEmpty(self, /) -> bool: ...
        @property
        def radius(self, /) -> float: ...

    class QLevelOfDetailSwitch(PySide6.Qt3DRender.Qt3DRender.QLevelOfDetail):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QLineWidth(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        smoothChanged            : typing.ClassVar[Signal] = ... # smoothChanged(bool)
        valueChanged             : typing.ClassVar[Signal] = ... # valueChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, value: float | None = ..., smooth: bool | None = ...) -> None: ...

        @property
        def smooth(self, /) -> bool: ...
        @smooth.setter
        def smooth(self, enabled: bool, /) -> None: ...
        @property
        def value(self, /) -> float: ...
        @value.setter
        def value(self, value: float, /) -> None: ...

    class QMaterial(PySide6.Qt3DCore.Qt3DCore.QComponent):

        effectChanged            : typing.ClassVar[Signal] = ... # effectChanged(QEffect*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, effect: PySide6.Qt3DRender.Qt3DRender.QEffect | None = ...) -> None: ...

        def addParameter(self, parameter: PySide6.Qt3DRender.Qt3DRender.QParameter, /) -> None: ...
        @property
        def effect(self, /) -> PySide6.Qt3DRender.Qt3DRender.QEffect: ...
        @effect.setter
        def effect(self, effect: PySide6.Qt3DRender.Qt3DRender.QEffect, /) -> None: ...
        def parameters(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QParameter]: ...
        def removeParameter(self, parameter: PySide6.Qt3DRender.Qt3DRender.QParameter, /) -> None: ...

    class QMemoryBarrier(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        waitOperationsChanged    : typing.ClassVar[Signal] = ... # waitOperationsChanged(QMemoryBarrier::Operations)

        class Operation(enum.Flag):

            None_                     = ...  # 0x0
            VertexAttributeArray      = ...  # 0x1
            ElementArray              = ...  # 0x2
            Uniform                   = ...  # 0x4
            TextureFetch              = ...  # 0x8
            ShaderImageAccess         = ...  # 0x10
            Command                   = ...  # 0x20
            PixelBuffer               = ...  # 0x40
            TextureUpdate             = ...  # 0x80
            BufferUpdate              = ...  # 0x100
            FrameBuffer               = ...  # 0x200
            TransformFeedback         = ...  # 0x400
            AtomicCounter             = ...  # 0x800
            ShaderStorage             = ...  # 0x1000
            QueryBuffer               = ...  # 0x2000
            All                       = ...  # 0xffffffff


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...

        def setWaitOperations(self, operations: PySide6.Qt3DRender.Qt3DRender.QMemoryBarrier.Operation, /) -> None: ...
        def waitOperations(self, /) -> PySide6.Qt3DRender.Qt3DRender.QMemoryBarrier.Operation: ...

    class QMesh(PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer):

        meshNameChanged          : typing.ClassVar[Signal] = ... # meshNameChanged(QString)
        sourceChanged            : typing.ClassVar[Signal] = ... # sourceChanged(QUrl)
        statusChanged            : typing.ClassVar[Signal] = ... # statusChanged(Status)

        class Status(enum.Enum):

            None_                     = ...  # 0x0
            Loading                   = ...  # 0x1
            Ready                     = ...  # 0x2
            Error                     = ...  # 0x3


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, source: PySide6.QtCore.QUrl | None = ..., meshName: str | None = ..., status: PySide6.Qt3DRender.Qt3DRender.QMesh.Status | None = ...) -> None: ...

        @property
        def meshName(self, /) -> str: ...
        @meshName.setter
        def meshName(self, meshName: str, /) -> None: ...
        @property
        def source(self, /) -> PySide6.QtCore.QUrl: ...
        @source.setter
        def source(self, source: PySide6.QtCore.QUrl | str, /) -> None: ...
        @property
        def status(self, /) -> PySide6.Qt3DRender.Qt3DRender.QMesh.Status: ...

    class QMultiSampleAntiAliasing(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QNoDepthMask(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QNoDraw(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QNoPicking(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QObjectPicker(PySide6.Qt3DCore.Qt3DCore.QComponent):

        clicked                  : typing.ClassVar[Signal] = ... # clicked(Qt3DRender::QPickEvent*)
        containsMouseChanged     : typing.ClassVar[Signal] = ... # containsMouseChanged(bool)
        dragEnabledChanged       : typing.ClassVar[Signal] = ... # dragEnabledChanged(bool)
        entered                  : typing.ClassVar[Signal] = ... # entered()
        exited                   : typing.ClassVar[Signal] = ... # exited()
        hoverEnabledChanged      : typing.ClassVar[Signal] = ... # hoverEnabledChanged(bool)
        moved                    : typing.ClassVar[Signal] = ... # moved(Qt3DRender::QPickEvent*)
        pressedChanged           : typing.ClassVar[Signal] = ... # pressedChanged(bool)
        priorityChanged          : typing.ClassVar[Signal] = ... # priorityChanged(int)
        released                 : typing.ClassVar[Signal] = ... # released(Qt3DRender::QPickEvent*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, hoverEnabled: bool | None = ..., dragEnabled: bool | None = ..., pressed: bool | None = ..., containsMouse: bool | None = ..., priority: int | None = ...) -> None: ...

        @property
        def containsMouse(self, /) -> bool: ...
        @property
        def dragEnabled(self, /) -> bool: ...
        @dragEnabled.setter
        def dragEnabled(self, dragEnabled: bool, /) -> None: ...
        @property
        def hoverEnabled(self, /) -> bool: ...
        @hoverEnabled.setter
        def hoverEnabled(self, hoverEnabled: bool, /) -> None: ...
        @property
        def pressed(self, /) -> bool: ...
        @property
        def priority(self, /) -> int: ...
        @priority.setter
        def priority(self, priority: int, /) -> None: ...

    class QPaintedTextureImage(PySide6.Qt3DRender.Qt3DRender.QAbstractTextureImage):

        heightChanged            : typing.ClassVar[Signal] = ... # heightChanged(int)
        sizeChanged              : typing.ClassVar[Signal] = ... # sizeChanged(QSize)
        widthChanged             : typing.ClassVar[Signal] = ... # widthChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, width: int | None = ..., height: int | None = ..., size: PySide6.QtCore.QSize | None = ...) -> None: ...

        def dataGenerator(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureImageDataGeneratorPtr: ...
        @property
        def height(self, /) -> int: ...
        @height.setter
        def height(self, h: int, /) -> None: ...
        def paint(self, painter: PySide6.QtGui.QPainter, /) -> None: ...
        @property
        def size(self, /) -> PySide6.QtCore.QSize: ...
        @size.setter
        def size(self, size: PySide6.QtCore.QSize, /) -> None: ...
        def update(self, /, rect: PySide6.QtCore.QRect = ...) -> None: ...
        @property
        def width(self, /) -> int: ...
        @width.setter
        def width(self, w: int, /) -> None: ...

    class QParameter(PySide6.Qt3DCore.Qt3DCore.QNode):

        nameChanged              : typing.ClassVar[Signal] = ... # nameChanged(QString)
        valueChanged             : typing.ClassVar[Signal] = ... # valueChanged(QVariant)

        @typing.overload
        def __init__(self, name: str, texture: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, value: typing.Any | None = ...) -> None: ...
        @typing.overload
        def __init__(self, name: str, value: typing.Any, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...
        @typing.overload
        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, name: str | None = ..., value: typing.Any | None = ...) -> None: ...

        @property
        def name(self, /) -> str: ...
        @name.setter
        def name(self, name: str, /) -> None: ...
        @property
        def value(self, /) -> typing.Any: ...
        @value.setter
        def value(self, dv: typing.Any, /) -> None: ...

    class QPickEvent(PySide6.QtCore.QObject):

        acceptedChanged          : typing.ClassVar[Signal] = ... # acceptedChanged(bool)

        class Buttons(enum.Enum):

            NoButton                  = ...  # 0x0
            LeftButton                = ...  # 0x1
            RightButton               = ...  # 0x2
            MiddleButton              = ...  # 0x4
            BackButton                = ...  # 0x8

        class Modifiers(enum.Enum):

            NoModifier                = ...  # 0x0
            ShiftModifier             = ...  # 0x2000000
            ControlModifier           = ...  # 0x4000000
            AltModifier               = ...  # 0x8000000
            MetaModifier              = ...  # 0x10000000
            KeypadModifier            = ...  # 0x20000000


        @typing.overload
        def __init__(self, position: PySide6.QtCore.QPointF, worldIntersection: PySide6.QtGui.QVector3D, localIntersection: PySide6.QtGui.QVector3D, distance: float, button: PySide6.Qt3DRender.Qt3DRender.QPickEvent.Buttons, buttons: int, modifiers: int, /, *, accepted: bool | None = ..., viewport: PySide6.Qt3DRender.Qt3DRender.QViewport | None = ..., entity: PySide6.Qt3DCore.Qt3DCore.QEntity | None = ...) -> None: ...
        @typing.overload
        def __init__(self, position: PySide6.QtCore.QPointF, worldIntersection: PySide6.QtGui.QVector3D, localIntersection: PySide6.QtGui.QVector3D, distance: float, /, *, accepted: bool | None = ..., button: PySide6.Qt3DRender.Qt3DRender.QPickEvent.Buttons | None = ..., buttons: int | None = ..., modifiers: int | None = ..., viewport: PySide6.Qt3DRender.Qt3DRender.QViewport | None = ..., entity: PySide6.Qt3DCore.Qt3DCore.QEntity | None = ...) -> None: ...
        @typing.overload
        def __init__(self, /, *, accepted: bool | None = ..., position: PySide6.QtCore.QPointF | None = ..., distance: float | None = ..., localIntersection: PySide6.QtGui.QVector3D | None = ..., worldIntersection: PySide6.QtGui.QVector3D | None = ..., button: PySide6.Qt3DRender.Qt3DRender.QPickEvent.Buttons | None = ..., buttons: int | None = ..., modifiers: int | None = ..., viewport: PySide6.Qt3DRender.Qt3DRender.QViewport | None = ..., entity: PySide6.Qt3DCore.Qt3DCore.QEntity | None = ...) -> None: ...

        @property
        def accepted(self, /) -> bool: ...
        @accepted.setter
        def accepted(self, accepted: bool, /) -> None: ...
        @property
        def button(self, /) -> PySide6.Qt3DRender.Qt3DRender.QPickEvent.Buttons: ...
        @property
        def buttons(self, /) -> int: ...
        @property
        def distance(self, /) -> float: ...
        @property
        def entity(self, /) -> PySide6.Qt3DCore.Qt3DCore.QEntity: ...
        @property
        def localIntersection(self, /) -> PySide6.QtGui.QVector3D: ...
        @property
        def modifiers(self, /) -> int: ...
        @property
        def position(self, /) -> PySide6.QtCore.QPointF: ...
        @property
        def viewport(self, /) -> PySide6.Qt3DRender.Qt3DRender.QViewport: ...
        @property
        def worldIntersection(self, /) -> PySide6.QtGui.QVector3D: ...

    class QPickLineEvent(PySide6.Qt3DRender.Qt3DRender.QPickEvent):

        @typing.overload
        def __init__(self, position: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, worldIntersection: PySide6.QtGui.QVector3D, localIntersection: PySide6.QtGui.QVector3D, distance: float, edgeIndex: int, vertex1Index: int, vertex2Index: int, button: PySide6.Qt3DRender.Qt3DRender.QPickEvent.Buttons, buttons: int, modifiers: int, /) -> None: ...
        @typing.overload
        def __init__(self, /, *, edgeIndex: int | None = ..., vertex1Index: int | None = ..., vertex2Index: int | None = ...) -> None: ...

        @property
        def edgeIndex(self, /) -> int: ...
        @property
        def vertex1Index(self, /) -> int: ...
        @property
        def vertex2Index(self, /) -> int: ...

    class QPickPointEvent(PySide6.Qt3DRender.Qt3DRender.QPickEvent):

        @typing.overload
        def __init__(self, position: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, worldIntersection: PySide6.QtGui.QVector3D, localIntersection: PySide6.QtGui.QVector3D, distance: float, pointIndex: int, button: PySide6.Qt3DRender.Qt3DRender.QPickEvent.Buttons, buttons: int, modifiers: int, /) -> None: ...
        @typing.overload
        def __init__(self, /, *, pointIndex: int | None = ...) -> None: ...

        @property
        def pointIndex(self, /) -> int: ...

    class QPickTriangleEvent(PySide6.Qt3DRender.Qt3DRender.QPickEvent):

        @typing.overload
        def __init__(self, position: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, worldIntersection: PySide6.QtGui.QVector3D, localIntersection: PySide6.QtGui.QVector3D, distance: float, triangleIndex: int, vertex1Index: int, vertex2Index: int, vertex3Index: int, button: PySide6.Qt3DRender.Qt3DRender.QPickEvent.Buttons, buttons: int, modifiers: int, uvw: PySide6.QtGui.QVector3D, /) -> None: ...
        @typing.overload
        def __init__(self, position: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, worldIntersection: PySide6.QtGui.QVector3D, localIntersection: PySide6.QtGui.QVector3D, distance: float, triangleIndex: int, vertex1Index: int, vertex2Index: int, vertex3Index: int, /, *, uvw: PySide6.QtGui.QVector3D | None = ...) -> None: ...
        @typing.overload
        def __init__(self, /, *, triangleIndex: int | None = ..., vertex1Index: int | None = ..., vertex2Index: int | None = ..., vertex3Index: int | None = ..., uvw: PySide6.QtGui.QVector3D | None = ...) -> None: ...

        @property
        def triangleIndex(self, /) -> int: ...
        @property
        def uvw(self, /) -> PySide6.QtGui.QVector3D: ...
        @property
        def vertex1Index(self, /) -> int: ...
        @property
        def vertex2Index(self, /) -> int: ...
        @property
        def vertex3Index(self, /) -> int: ...

    class QPickingProxy(PySide6.Qt3DCore.Qt3DCore.QBoundingVolume):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QPickingSettings(PySide6.Qt3DCore.Qt3DCore.QNode):

        faceOrientationPickingModeChanged: typing.ClassVar[Signal] = ... # faceOrientationPickingModeChanged(QPickingSettings::FaceOrientationPickingMode)
        pickMethodChanged        : typing.ClassVar[Signal] = ... # pickMethodChanged(QPickingSettings::PickMethod)
        pickResultModeChanged    : typing.ClassVar[Signal] = ... # pickResultModeChanged(QPickingSettings::PickResultMode)
        worldSpaceToleranceChanged: typing.ClassVar[Signal] = ... # worldSpaceToleranceChanged(float)

        class FaceOrientationPickingMode(enum.Enum):

            FrontFace                 = ...  # 0x1
            BackFace                  = ...  # 0x2
            FrontAndBackFace          = ...  # 0x3

        class PickMethod(enum.Enum):

            BoundingVolumePicking     = ...  # 0x0
            TrianglePicking           = ...  # 0x1
            LinePicking               = ...  # 0x2
            PointPicking              = ...  # 0x4
            PrimitivePicking          = ...  # 0x7

        class PickResultMode(enum.Enum):

            NearestPick               = ...  # 0x0
            AllPicks                  = ...  # 0x1
            NearestPriorityPick       = ...  # 0x2


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, pickMethod: PySide6.Qt3DRender.Qt3DRender.QPickingSettings.PickMethod | None = ..., pickResultMode: PySide6.Qt3DRender.Qt3DRender.QPickingSettings.PickResultMode | None = ..., faceOrientationPickingMode: PySide6.Qt3DRender.Qt3DRender.QPickingSettings.FaceOrientationPickingMode | None = ..., worldSpaceTolerance: float | None = ...) -> None: ...

        @property
        def faceOrientationPickingMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QPickingSettings.FaceOrientationPickingMode: ...
        @faceOrientationPickingMode.setter
        def faceOrientationPickingMode(self, faceOrientationPickingMode: PySide6.Qt3DRender.Qt3DRender.QPickingSettings.FaceOrientationPickingMode, /) -> None: ...
        @property
        def pickMethod(self, /) -> PySide6.Qt3DRender.Qt3DRender.QPickingSettings.PickMethod: ...
        @pickMethod.setter
        def pickMethod(self, pickMethod: PySide6.Qt3DRender.Qt3DRender.QPickingSettings.PickMethod, /) -> None: ...
        @property
        def pickResultMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QPickingSettings.PickResultMode: ...
        @pickResultMode.setter
        def pickResultMode(self, pickResultMode: PySide6.Qt3DRender.Qt3DRender.QPickingSettings.PickResultMode, /) -> None: ...
        @property
        def worldSpaceTolerance(self, /) -> float: ...
        @worldSpaceTolerance.setter
        def worldSpaceTolerance(self, worldSpaceTolerance: float, /) -> None: ...

    class QPointLight(PySide6.Qt3DRender.Qt3DRender.QAbstractLight):

        constantAttenuationChanged: typing.ClassVar[Signal] = ... # constantAttenuationChanged(float)
        linearAttenuationChanged : typing.ClassVar[Signal] = ... # linearAttenuationChanged(float)
        quadraticAttenuationChanged: typing.ClassVar[Signal] = ... # quadraticAttenuationChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, constantAttenuation: float | None = ..., linearAttenuation: float | None = ..., quadraticAttenuation: float | None = ...) -> None: ...

        @property
        def constantAttenuation(self, /) -> float: ...
        @constantAttenuation.setter
        def constantAttenuation(self, value: float, /) -> None: ...
        @property
        def linearAttenuation(self, /) -> float: ...
        @linearAttenuation.setter
        def linearAttenuation(self, value: float, /) -> None: ...
        @property
        def quadraticAttenuation(self, /) -> float: ...
        @quadraticAttenuation.setter
        def quadraticAttenuation(self, value: float, /) -> None: ...

    class QPointSize(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        sizeModeChanged          : typing.ClassVar[Signal] = ... # sizeModeChanged(SizeMode)
        valueChanged             : typing.ClassVar[Signal] = ... # valueChanged(float)

        class SizeMode(enum.Enum):

            Fixed                     = ...  # 0x0
            Programmable              = ...  # 0x1


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, sizeMode: PySide6.Qt3DRender.Qt3DRender.QPointSize.SizeMode | None = ..., value: float | None = ...) -> None: ...

        @property
        def sizeMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QPointSize.SizeMode: ...
        @sizeMode.setter
        def sizeMode(self, sizeMode: PySide6.Qt3DRender.Qt3DRender.QPointSize.SizeMode, /) -> None: ...
        @property
        def value(self, /) -> float: ...
        @value.setter
        def value(self, value: float, /) -> None: ...

    class QPolygonOffset(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        depthStepsChanged        : typing.ClassVar[Signal] = ... # depthStepsChanged(float)
        scaleFactorChanged       : typing.ClassVar[Signal] = ... # scaleFactorChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, scaleFactor: float | None = ..., depthSteps: float | None = ...) -> None: ...

        @property
        def depthSteps(self, /) -> float: ...
        @depthSteps.setter
        def depthSteps(self, depthSteps: float, /) -> None: ...
        @property
        def scaleFactor(self, /) -> float: ...
        @scaleFactor.setter
        def scaleFactor(self, scaleFactor: float, /) -> None: ...

    class QProximityFilter(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        distanceThresholdChanged : typing.ClassVar[Signal] = ... # distanceThresholdChanged(float)
        entityChanged            : typing.ClassVar[Signal] = ... # entityChanged(Qt3DCore::QEntity*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, entity: PySide6.Qt3DCore.Qt3DCore.QEntity | None = ..., distanceThreshold: float | None = ...) -> None: ...

        @property
        def distanceThreshold(self, /) -> float: ...
        @distanceThreshold.setter
        def distanceThreshold(self, distanceThreshold: float, /) -> None: ...
        @property
        def entity(self, /) -> PySide6.Qt3DCore.Qt3DCore.QEntity: ...
        @entity.setter
        def entity(self, entity: PySide6.Qt3DCore.Qt3DCore.QEntity, /) -> None: ...

    class QRasterMode(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        faceModeChanged          : typing.ClassVar[Signal] = ... # faceModeChanged(FaceMode)
        rasterModeChanged        : typing.ClassVar[Signal] = ... # rasterModeChanged(RasterMode)

        class FaceMode(enum.Enum):

            Front                     = ...  # 0x404
            Back                      = ...  # 0x405
            FrontAndBack              = ...  # 0x408

        class RasterMode(enum.Enum):

            Points                    = ...  # 0x1b00
            Lines                     = ...  # 0x1b01
            Fill                      = ...  # 0x1b02


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rasterMode: PySide6.Qt3DRender.Qt3DRender.QRasterMode.RasterMode | None = ..., faceMode: PySide6.Qt3DRender.Qt3DRender.QRasterMode.FaceMode | None = ...) -> None: ...

        @property
        def faceMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRasterMode.FaceMode: ...
        @faceMode.setter
        def faceMode(self, faceMode: PySide6.Qt3DRender.Qt3DRender.QRasterMode.FaceMode, /) -> None: ...
        @property
        def rasterMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRasterMode.RasterMode: ...
        @rasterMode.setter
        def rasterMode(self, rasterMode: PySide6.Qt3DRender.Qt3DRender.QRasterMode.RasterMode, /) -> None: ...

    class QRayCaster(PySide6.Qt3DRender.Qt3DRender.QAbstractRayCaster):

        directionChanged         : typing.ClassVar[Signal] = ... # directionChanged(QVector3D)
        lengthChanged            : typing.ClassVar[Signal] = ... # lengthChanged(float)
        originChanged            : typing.ClassVar[Signal] = ... # originChanged(QVector3D)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, origin: PySide6.QtGui.QVector3D | None = ..., direction: PySide6.QtGui.QVector3D | None = ..., length: float | None = ...) -> None: ...

        @property
        def direction(self, /) -> PySide6.QtGui.QVector3D: ...
        @direction.setter
        def direction(self, direction: PySide6.QtGui.QVector3D, /) -> None: ...
        @property
        def length(self, /) -> float: ...
        @length.setter
        def length(self, length: float, /) -> None: ...
        @property
        def origin(self, /) -> PySide6.QtGui.QVector3D: ...
        @origin.setter
        def origin(self, origin: PySide6.QtGui.QVector3D, /) -> None: ...
        def pick(self, origin: PySide6.QtGui.QVector3D, direction: PySide6.QtGui.QVector3D, length: float, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QRayCasterHit]: ...
        @typing.overload
        def trigger(self, /) -> None: ...
        @typing.overload
        def trigger(self, origin: PySide6.QtGui.QVector3D, direction: PySide6.QtGui.QVector3D, length: float, /) -> None: ...

    class QRayCasterHit(Shiboken.Object):

        class HitType(enum.Enum):

            TriangleHit               = ...  # 0x0
            LineHit                   = ...  # 0x1
            PointHit                  = ...  # 0x2
            EntityHit                 = ...  # 0x3


        @typing.overload
        def __init__(self, type: PySide6.Qt3DRender.Qt3DRender.QRayCasterHit.HitType, id: PySide6.Qt3DCore.Qt3DCore.QNodeId, distance: float, localIntersect: PySide6.QtGui.QVector3D, worldIntersect: PySide6.QtGui.QVector3D, primitiveIndex: int, v1: int, v2: int, v3: int, /, *, entityId: PySide6.Qt3DCore.Qt3DCore.QNodeId | None = ..., entity: PySide6.Qt3DCore.Qt3DCore.QEntity | None = ..., localIntersection: PySide6.QtGui.QVector3D | None = ..., worldIntersection: PySide6.QtGui.QVector3D | None = ..., vertex1Index: int | None = ..., vertex2Index: int | None = ..., vertex3Index: int | None = ...) -> None: ...
        @typing.overload
        def __init__(self, other: PySide6.Qt3DRender.Qt3DRender.QRayCasterHit, /, *, type: PySide6.Qt3DRender.Qt3DRender.QRayCasterHit.HitType | None = ..., entityId: PySide6.Qt3DCore.Qt3DCore.QNodeId | None = ..., entity: PySide6.Qt3DCore.Qt3DCore.QEntity | None = ..., distance: float | None = ..., localIntersection: PySide6.QtGui.QVector3D | None = ..., worldIntersection: PySide6.QtGui.QVector3D | None = ..., primitiveIndex: int | None = ..., vertex1Index: int | None = ..., vertex2Index: int | None = ..., vertex3Index: int | None = ...) -> None: ...
        @typing.overload
        def __init__(self, /, *, type: PySide6.Qt3DRender.Qt3DRender.QRayCasterHit.HitType | None = ..., entityId: PySide6.Qt3DCore.Qt3DCore.QNodeId | None = ..., entity: PySide6.Qt3DCore.Qt3DCore.QEntity | None = ..., distance: float | None = ..., localIntersection: PySide6.QtGui.QVector3D | None = ..., worldIntersection: PySide6.QtGui.QVector3D | None = ..., primitiveIndex: int | None = ..., vertex1Index: int | None = ..., vertex2Index: int | None = ..., vertex3Index: int | None = ...) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        @property
        def distance(self, /) -> float: ...
        @property
        def entity(self, /) -> PySide6.Qt3DCore.Qt3DCore.QEntity: ...
        @property
        def entityId(self, /) -> PySide6.Qt3DCore.Qt3DCore.QNodeId: ...
        @property
        def localIntersection(self, /) -> PySide6.QtGui.QVector3D: ...
        @property
        def primitiveIndex(self, /) -> int: ...
        def toString(self, /) -> str: ...
        @property
        def type(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRayCasterHit.HitType: ...
        @property
        def vertex1Index(self, /) -> int: ...
        @property
        def vertex2Index(self, /) -> int: ...
        @property
        def vertex3Index(self, /) -> int: ...
        @property
        def worldIntersection(self, /) -> PySide6.QtGui.QVector3D: ...

    class QRenderAspect(PySide6.Qt3DCore.Qt3DCore.QAbstractAspect):

        class SubmissionType(enum.Enum):

            Automatic                 = ...  # 0x0
            Manual                    = ...  # 0x1


        @typing.overload
        def __init__(self, submissionType: PySide6.Qt3DRender.Qt3DRender.QRenderAspect.SubmissionType, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...
        @typing.overload
        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

        def dependencies(self, /) -> typing.List[str]: ...

    class QRenderCapabilities(PySide6.QtCore.QObject):

        class API(enum.Enum):

            OpenGL                    = ...  # 0x1
            OpenGLES                  = ...  # 0x2
            Vulkan                    = ...  # 0x3
            DirectX                   = ...  # 0x4
            RHI                       = ...  # 0x5

        class Profile(enum.Enum):

            NoProfile                 = ...  # 0x0
            CoreProfile               = ...  # 0x1
            CompatibilityProfile      = ...  # 0x2


        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, valid: bool | None = ..., api: PySide6.Qt3DRender.Qt3DRender.QRenderCapabilities.API | None = ..., profile: PySide6.Qt3DRender.Qt3DRender.QRenderCapabilities.Profile | None = ..., majorVersion: int | None = ..., minorVersion: int | None = ..., extensions: collections.abc.Sequence[str] | None = ..., vendor: str | None = ..., renderer: str | None = ..., driverVersion: str | None = ..., glslVersion: str | None = ..., maxSamples: int | None = ..., maxTextureSize: int | None = ..., maxTextureUnits: int | None = ..., maxTextureLayers: int | None = ..., supportsUBO: bool | None = ..., maxUBOSize: int | None = ..., maxUBOBindings: int | None = ..., supportsSSBO: bool | None = ..., maxSSBOSize: int | None = ..., maxSSBOBindings: int | None = ..., supportsImageStore: bool | None = ..., maxImageUnits: int | None = ..., supportsCompute: bool | None = ..., maxWorkGroupCountX: int | None = ..., maxWorkGroupCountY: int | None = ..., maxWorkGroupCountZ: int | None = ..., maxWorkGroupSizeX: int | None = ..., maxWorkGroupSizeY: int | None = ..., maxWorkGroupSizeZ: int | None = ..., maxComputeInvocations: int | None = ..., maxComputeSharedMemorySize: int | None = ...) -> None: ...

        @property
        def api(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderCapabilities.API: ...
        @property
        def driverVersion(self, /) -> str: ...
        @property
        def extensions(self, /) -> typing.List[str]: ...
        @property
        def glslVersion(self, /) -> str: ...
        @property
        def majorVersion(self, /) -> int: ...
        @property
        def maxComputeInvocations(self, /) -> int: ...
        @property
        def maxComputeSharedMemorySize(self, /) -> int: ...
        @property
        def maxImageUnits(self, /) -> int: ...
        @property
        def maxSSBOBindings(self, /) -> int: ...
        @property
        def maxSSBOSize(self, /) -> int: ...
        @property
        def maxSamples(self, /) -> int: ...
        @property
        def maxTextureLayers(self, /) -> int: ...
        @property
        def maxTextureSize(self, /) -> int: ...
        @property
        def maxTextureUnits(self, /) -> int: ...
        @property
        def maxUBOBindings(self, /) -> int: ...
        @property
        def maxUBOSize(self, /) -> int: ...
        @property
        def maxWorkGroupCountX(self, /) -> int: ...
        @property
        def maxWorkGroupCountY(self, /) -> int: ...
        @property
        def maxWorkGroupCountZ(self, /) -> int: ...
        @property
        def maxWorkGroupSizeX(self, /) -> int: ...
        @property
        def maxWorkGroupSizeY(self, /) -> int: ...
        @property
        def maxWorkGroupSizeZ(self, /) -> int: ...
        @property
        def minorVersion(self, /) -> int: ...
        @property
        def profile(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderCapabilities.Profile: ...
        @property
        def renderer(self, /) -> str: ...
        @property
        def supportsCompute(self, /) -> bool: ...
        @property
        def supportsImageStore(self, /) -> bool: ...
        @property
        def supportsSSBO(self, /) -> bool: ...
        @property
        def supportsUBO(self, /) -> bool: ...
        @property
        def valid(self, /) -> bool: ...
        @property
        def vendor(self, /) -> str: ...

    class QRenderCapture(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...

        @typing.overload
        def requestCapture(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderCaptureReply: ...
        @typing.overload
        def requestCapture(self, rect: PySide6.QtCore.QRect, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderCaptureReply: ...
        @typing.overload
        def requestCapture(self, captureId: int, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderCaptureReply: ...

    class QRenderCaptureReply(PySide6.QtCore.QObject):

        completed                : typing.ClassVar[Signal] = ... # completed()
        @property
        def captureId(self, /) -> int: ...
        @property
        def complete(self, /) -> bool: ...
        @property
        def image(self, /) -> PySide6.QtGui.QImage: ...
        def saveImage(self, fileName: str, /) -> bool: ...

    class QRenderPass(PySide6.Qt3DCore.Qt3DCore.QNode):

        shaderProgramChanged     : typing.ClassVar[Signal] = ... # shaderProgramChanged(QShaderProgram*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, shaderProgram: PySide6.Qt3DRender.Qt3DRender.QShaderProgram | None = ...) -> None: ...

        def addFilterKey(self, filterKey: PySide6.Qt3DRender.Qt3DRender.QFilterKey, /) -> None: ...
        def addParameter(self, p: PySide6.Qt3DRender.Qt3DRender.QParameter, /) -> None: ...
        def addRenderState(self, state: PySide6.Qt3DRender.Qt3DRender.QRenderState, /) -> None: ...
        def filterKeys(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QFilterKey]: ...
        def parameters(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QParameter]: ...
        def removeFilterKey(self, filterKey: PySide6.Qt3DRender.Qt3DRender.QFilterKey, /) -> None: ...
        def removeParameter(self, p: PySide6.Qt3DRender.Qt3DRender.QParameter, /) -> None: ...
        def removeRenderState(self, state: PySide6.Qt3DRender.Qt3DRender.QRenderState, /) -> None: ...
        def renderStates(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QRenderState]: ...
        @property
        def shaderProgram(self, /) -> PySide6.Qt3DRender.Qt3DRender.QShaderProgram: ...
        @shaderProgram.setter
        def shaderProgram(self, shaderProgram: PySide6.Qt3DRender.Qt3DRender.QShaderProgram, /) -> None: ...

    class QRenderPassFilter(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...

        def addMatch(self, filterKey: PySide6.Qt3DRender.Qt3DRender.QFilterKey, /) -> None: ...
        def addParameter(self, parameter: PySide6.Qt3DRender.Qt3DRender.QParameter, /) -> None: ...
        def matchAny(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QFilterKey]: ...
        def parameters(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QParameter]: ...
        def removeMatch(self, filterKey: PySide6.Qt3DRender.Qt3DRender.QFilterKey, /) -> None: ...
        def removeParameter(self, parameter: PySide6.Qt3DRender.Qt3DRender.QParameter, /) -> None: ...

    class QRenderSettings(PySide6.Qt3DCore.Qt3DCore.QComponent):

        activeFrameGraphChanged  : typing.ClassVar[Signal] = ... # activeFrameGraphChanged(QFrameGraphNode*)
        renderPolicyChanged      : typing.ClassVar[Signal] = ... # renderPolicyChanged(RenderPolicy)

        class RenderPolicy(enum.Enum):

            OnDemand                  = ...  # 0x0
            Always                    = ...  # 0x1


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, renderCapabilities: PySide6.Qt3DRender.Qt3DRender.QRenderCapabilities | None = ..., pickingSettings: PySide6.Qt3DRender.Qt3DRender.QPickingSettings | None = ..., renderPolicy: PySide6.Qt3DRender.Qt3DRender.QRenderSettings.RenderPolicy | None = ..., activeFrameGraph: PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode | None = ...) -> None: ...

        @property
        def activeFrameGraph(self, /) -> PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode: ...
        @activeFrameGraph.setter
        def activeFrameGraph(self, activeFrameGraph: PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode, /) -> None: ...
        @property
        def pickingSettings(self, /) -> PySide6.Qt3DRender.Qt3DRender.QPickingSettings: ...
        @property
        def renderCapabilities(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderCapabilities: ...
        @property
        def renderPolicy(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderSettings.RenderPolicy: ...
        @renderPolicy.setter
        def renderPolicy(self, renderPolicy: PySide6.Qt3DRender.Qt3DRender.QRenderSettings.RenderPolicy, /) -> None: ...

    class QRenderState(PySide6.Qt3DCore.Qt3DCore.QNode): ...

    class QRenderStateSet(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...

        def addRenderState(self, state: PySide6.Qt3DRender.Qt3DRender.QRenderState, /) -> None: ...
        def removeRenderState(self, state: PySide6.Qt3DRender.Qt3DRender.QRenderState, /) -> None: ...
        def renderStates(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QRenderState]: ...

    class QRenderSurfaceSelector(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        externalRenderTargetSizeChanged: typing.ClassVar[Signal] = ... # externalRenderTargetSizeChanged(QSize)
        surfaceChanged           : typing.ClassVar[Signal] = ... # surfaceChanged(QObject*)
        surfacePixelRatioChanged : typing.ClassVar[Signal] = ... # surfacePixelRatioChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, surface: PySide6.QtCore.QObject | None = ..., externalRenderTargetSize: PySide6.QtCore.QSize | None = ..., surfacePixelRatio: float | None = ...) -> None: ...

        @property
        def externalRenderTargetSize(self, /) -> PySide6.QtCore.QSize: ...
        @externalRenderTargetSize.setter
        def externalRenderTargetSize(self, size: PySide6.QtCore.QSize, /) -> None: ...
        @property
        def surface(self, /) -> PySide6.QtCore.QObject: ...
        @surface.setter
        def surface(self, surfaceObject: PySide6.QtCore.QObject, /) -> None: ...
        @property
        def surfacePixelRatio(self, /) -> float: ...
        @surfacePixelRatio.setter
        def surfacePixelRatio(self, ratio: float, /) -> None: ...

    class QRenderTarget(PySide6.Qt3DCore.Qt3DCore.QComponent):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...

        def addOutput(self, output: PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput, /) -> None: ...
        def outputs(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput]: ...
        def removeOutput(self, output: PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput, /) -> None: ...

    class QRenderTargetOutput(PySide6.Qt3DCore.Qt3DCore.QNode):

        attachmentPointChanged   : typing.ClassVar[Signal] = ... # attachmentPointChanged(AttachmentPoint)
        faceChanged              : typing.ClassVar[Signal] = ... # faceChanged(QAbstractTexture::CubeMapFace)
        layerChanged             : typing.ClassVar[Signal] = ... # layerChanged(int)
        mipLevelChanged          : typing.ClassVar[Signal] = ... # mipLevelChanged(int)
        textureChanged           : typing.ClassVar[Signal] = ... # textureChanged(QAbstractTexture*)

        class AttachmentPoint(enum.Enum):

            Color0                    = ...  # 0x0
            Color1                    = ...  # 0x1
            Color2                    = ...  # 0x2
            Color3                    = ...  # 0x3
            Color4                    = ...  # 0x4
            Color5                    = ...  # 0x5
            Color6                    = ...  # 0x6
            Color7                    = ...  # 0x7
            Color8                    = ...  # 0x8
            Color9                    = ...  # 0x9
            Color10                   = ...  # 0xa
            Color11                   = ...  # 0xb
            Color12                   = ...  # 0xc
            Color13                   = ...  # 0xd
            Color14                   = ...  # 0xe
            Color15                   = ...  # 0xf
            Depth                     = ...  # 0x10
            Stencil                   = ...  # 0x11
            DepthStencil              = ...  # 0x12
            Left                      = ...  # 0x13
            Right                     = ...  # 0x14


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, attachmentPoint: PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint | None = ..., texture: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ..., mipLevel: int | None = ..., layer: int | None = ..., face: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.CubeMapFace | None = ...) -> None: ...

        @property
        def attachmentPoint(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint: ...
        @attachmentPoint.setter
        def attachmentPoint(self, attachmentPoint: PySide6.Qt3DRender.Qt3DRender.QRenderTargetOutput.AttachmentPoint, /) -> None: ...
        @property
        def face(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.CubeMapFace: ...
        @face.setter
        def face(self, face: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.CubeMapFace, /) -> None: ...
        @property
        def layer(self, /) -> int: ...
        @layer.setter
        def layer(self, layer: int, /) -> None: ...
        @property
        def mipLevel(self, /) -> int: ...
        @mipLevel.setter
        def mipLevel(self, level: int, /) -> None: ...
        @property
        def texture(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        @texture.setter
        def texture(self, texture: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...

    class QRenderTargetSelector(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        targetChanged            : typing.ClassVar[Signal] = ... # targetChanged(QRenderTarget*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, target: PySide6.Qt3DRender.Qt3DRender.QRenderTarget | None = ...) -> None: ...

        @property
        def target(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderTarget: ...
        @target.setter
        def target(self, target: PySide6.Qt3DRender.Qt3DRender.QRenderTarget, /) -> None: ...

    class QSceneLoader(PySide6.Qt3DCore.Qt3DCore.QComponent):

        sourceChanged            : typing.ClassVar[Signal] = ... # sourceChanged(QUrl)
        statusChanged            : typing.ClassVar[Signal] = ... # statusChanged(Status)

        class ComponentType(enum.Enum):

            UnknownComponent          = ...  # 0x0
            GeometryRendererComponent = ...  # 0x1
            TransformComponent        = ...  # 0x2
            MaterialComponent         = ...  # 0x3
            LightComponent            = ...  # 0x4
            CameraLensComponent       = ...  # 0x5

        class Status(enum.Enum):

            None_                     = ...  # 0x0
            Loading                   = ...  # 0x1
            Ready                     = ...  # 0x2
            Error                     = ...  # 0x3


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, source: PySide6.QtCore.QUrl | None = ..., status: PySide6.Qt3DRender.Qt3DRender.QSceneLoader.Status | None = ...) -> None: ...

        def component(self, entityName: str, componentType: PySide6.Qt3DRender.Qt3DRender.QSceneLoader.ComponentType, /) -> PySide6.Qt3DCore.Qt3DCore.QComponent: ...
        def entity(self, entityName: str, /) -> PySide6.Qt3DCore.Qt3DCore.QEntity: ...
        def entityNames(self, /) -> typing.List[str]: ...
        @property
        def source(self, /) -> PySide6.QtCore.QUrl: ...
        @source.setter
        def source(self, arg: PySide6.QtCore.QUrl | str, /) -> None: ...
        @property
        def status(self, /) -> PySide6.Qt3DRender.Qt3DRender.QSceneLoader.Status: ...

    class QScissorTest(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        bottomChanged            : typing.ClassVar[Signal] = ... # bottomChanged(int)
        heightChanged            : typing.ClassVar[Signal] = ... # heightChanged(int)
        leftChanged              : typing.ClassVar[Signal] = ... # leftChanged(int)
        widthChanged             : typing.ClassVar[Signal] = ... # widthChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, left: int | None = ..., bottom: int | None = ..., width: int | None = ..., height: int | None = ...) -> None: ...

        @property
        def bottom(self, /) -> int: ...
        @bottom.setter
        def bottom(self, bottom: int, /) -> None: ...
        @property
        def height(self, /) -> int: ...
        @height.setter
        def height(self, height: int, /) -> None: ...
        @property
        def left(self, /) -> int: ...
        @left.setter
        def left(self, left: int, /) -> None: ...
        @property
        def width(self, /) -> int: ...
        @width.setter
        def width(self, width: int, /) -> None: ...

    class QScreenRayCaster(PySide6.Qt3DRender.Qt3DRender.QAbstractRayCaster):

        positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(QPoint)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, position: PySide6.QtCore.QPoint | None = ...) -> None: ...

        def pick(self, position: PySide6.QtCore.QPoint, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QRayCasterHit]: ...
        @property
        def position(self, /) -> PySide6.QtCore.QPoint: ...
        @position.setter
        def position(self, position: PySide6.QtCore.QPoint, /) -> None: ...
        @typing.overload
        def trigger(self, /) -> None: ...
        @typing.overload
        def trigger(self, position: PySide6.QtCore.QPoint, /) -> None: ...

    class QSeamlessCubemap(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QSetFence(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        handleChanged            : typing.ClassVar[Signal] = ... # handleChanged(QVariant)
        handleTypeChanged        : typing.ClassVar[Signal] = ... # handleTypeChanged(HandleType)

        class HandleType(enum.Enum):

            NoHandle                  = ...  # 0x0
            OpenGLFenceId             = ...  # 0x1


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, handleType: PySide6.Qt3DRender.Qt3DRender.QSetFence.HandleType | None = ..., handle: typing.Any | None = ...) -> None: ...

        @property
        def handle(self, /) -> typing.Any: ...
        @property
        def handleType(self, /) -> PySide6.Qt3DRender.Qt3DRender.QSetFence.HandleType: ...

    class QShaderData(PySide6.Qt3DCore.Qt3DCore.QComponent):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...

        def event(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
        def propertyReader(self, /) -> PySide6.Qt3DRender.Qt3DRender.PropertyReaderInterfacePtr: ...

    class QShaderImage(PySide6.Qt3DCore.Qt3DCore.QNode):

        accessChanged            : typing.ClassVar[Signal] = ... # accessChanged(Access)
        formatChanged            : typing.ClassVar[Signal] = ... # formatChanged(ImageFormat)
        layerChanged             : typing.ClassVar[Signal] = ... # layerChanged(int)
        layeredChanged           : typing.ClassVar[Signal] = ... # layeredChanged(bool)
        mipLevelChanged          : typing.ClassVar[Signal] = ... # mipLevelChanged(int)
        textureChanged           : typing.ClassVar[Signal] = ... # textureChanged(Qt3DRender::QAbstractTexture*)

        class Access(enum.Enum):

            ReadOnly                  = ...  # 0x0
            WriteOnly                 = ...  # 0x1
            ReadWrite                 = ...  # 0x2

        class ImageFormat(enum.Enum):

            NoFormat                  = ...  # 0x0
            Automatic                 = ...  # 0x1
            RGBA8_UNorm               = ...  # 0x8058
            RGB10A2                   = ...  # 0x8059
            RGBA16_UNorm              = ...  # 0x805b
            R8_UNorm                  = ...  # 0x8229
            R16_UNorm                 = ...  # 0x822a
            RG8_UNorm                 = ...  # 0x822b
            RG16_UNorm                = ...  # 0x822c
            R16F                      = ...  # 0x822d
            R32F                      = ...  # 0x822e
            RG16F                     = ...  # 0x822f
            RG32F                     = ...  # 0x8230
            R8I                       = ...  # 0x8231
            R8U                       = ...  # 0x8232
            R16I                      = ...  # 0x8233
            R16U                      = ...  # 0x8234
            R32I                      = ...  # 0x8235
            R32U                      = ...  # 0x8236
            RG8I                      = ...  # 0x8237
            RG8U                      = ...  # 0x8238
            RG16I                     = ...  # 0x8239
            RG16U                     = ...  # 0x823a
            RG32I                     = ...  # 0x823b
            RG32U                     = ...  # 0x823c
            RGBA32F                   = ...  # 0x8814
            RGBA16F                   = ...  # 0x881a
            RG11B10F                  = ...  # 0x8c3a
            RGBA32U                   = ...  # 0x8d70
            RGBA16U                   = ...  # 0x8d76
            RGBA8U                    = ...  # 0x8d7c
            RGBA32I                   = ...  # 0x8d82
            RGBA16I                   = ...  # 0x8d88
            RGBA8I                    = ...  # 0x8d8e
            R8_SNorm                  = ...  # 0x8f94
            RG8_SNorm                 = ...  # 0x8f95
            RGBA8_SNorm               = ...  # 0x8f97
            R16_SNorm                 = ...  # 0x8f98
            RG16_SNorm                = ...  # 0x8f99
            RGBA16_SNorm              = ...  # 0x8f9b
            RGB10A2U                  = ...  # 0x906f


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, texture: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ..., layered: bool | None = ..., mipLevel: int | None = ..., layer: int | None = ..., access: PySide6.Qt3DRender.Qt3DRender.QShaderImage.Access | None = ..., format: PySide6.Qt3DRender.Qt3DRender.QShaderImage.ImageFormat | None = ...) -> None: ...

        @property
        def access(self, /) -> PySide6.Qt3DRender.Qt3DRender.QShaderImage.Access: ...
        @access.setter
        def access(self, access: PySide6.Qt3DRender.Qt3DRender.QShaderImage.Access, /) -> None: ...
        @property
        def format(self, /) -> PySide6.Qt3DRender.Qt3DRender.QShaderImage.ImageFormat: ...
        @format.setter
        def format(self, format: PySide6.Qt3DRender.Qt3DRender.QShaderImage.ImageFormat, /) -> None: ...
        @property
        def layer(self, /) -> int: ...
        @layer.setter
        def layer(self, layer: int, /) -> None: ...
        @property
        def layered(self, /) -> bool: ...
        @layered.setter
        def layered(self, layered: bool, /) -> None: ...
        @property
        def mipLevel(self, /) -> int: ...
        @mipLevel.setter
        def mipLevel(self, mipLevel: int, /) -> None: ...
        @property
        def texture(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        @texture.setter
        def texture(self, texture: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...

    class QShaderProgram(PySide6.Qt3DCore.Qt3DCore.QNode):

        computeShaderCodeChanged : typing.ClassVar[Signal] = ... # computeShaderCodeChanged(QByteArray)
        formatChanged            : typing.ClassVar[Signal] = ... # formatChanged(Format)
        fragmentShaderCodeChanged: typing.ClassVar[Signal] = ... # fragmentShaderCodeChanged(QByteArray)
        geometryShaderCodeChanged: typing.ClassVar[Signal] = ... # geometryShaderCodeChanged(QByteArray)
        logChanged               : typing.ClassVar[Signal] = ... # logChanged(QString)
        statusChanged            : typing.ClassVar[Signal] = ... # statusChanged(Status)
        tessellationControlShaderCodeChanged: typing.ClassVar[Signal] = ... # tessellationControlShaderCodeChanged(QByteArray)
        tessellationEvaluationShaderCodeChanged: typing.ClassVar[Signal] = ... # tessellationEvaluationShaderCodeChanged(QByteArray)
        vertexShaderCodeChanged  : typing.ClassVar[Signal] = ... # vertexShaderCodeChanged(QByteArray)

        class Format(enum.Enum):

            GLSL                      = ...  # 0x0
            SPIRV                     = ...  # 0x1

        class ShaderType(enum.Enum):

            Vertex                    = ...  # 0x0
            Fragment                  = ...  # 0x1
            TessellationControl       = ...  # 0x2
            TessellationEvaluation    = ...  # 0x3
            Geometry                  = ...  # 0x4
            Compute                   = ...  # 0x5

        class Status(enum.Enum):

            NotReady                  = ...  # 0x0
            Ready                     = ...  # 0x1
            Error                     = ...  # 0x2


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, vertexShaderCode: PySide6.QtCore.QByteArray | None = ..., tessellationControlShaderCode: PySide6.QtCore.QByteArray | None = ..., tessellationEvaluationShaderCode: PySide6.QtCore.QByteArray | None = ..., geometryShaderCode: PySide6.QtCore.QByteArray | None = ..., fragmentShaderCode: PySide6.QtCore.QByteArray | None = ..., computeShaderCode: PySide6.QtCore.QByteArray | None = ..., log: str | None = ..., status: PySide6.Qt3DRender.Qt3DRender.QShaderProgram.Status | None = ..., format: PySide6.Qt3DRender.Qt3DRender.QShaderProgram.Format | None = ...) -> None: ...

        @property
        def computeShaderCode(self, /) -> PySide6.QtCore.QByteArray: ...
        @computeShaderCode.setter
        def computeShaderCode(self, computeShaderCode: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
        @property
        def format(self, /) -> PySide6.Qt3DRender.Qt3DRender.QShaderProgram.Format: ...
        @format.setter
        def format(self, format: PySide6.Qt3DRender.Qt3DRender.QShaderProgram.Format, /) -> None: ...
        @property
        def fragmentShaderCode(self, /) -> PySide6.QtCore.QByteArray: ...
        @fragmentShaderCode.setter
        def fragmentShaderCode(self, fragmentShaderCode: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
        @property
        def geometryShaderCode(self, /) -> PySide6.QtCore.QByteArray: ...
        @geometryShaderCode.setter
        def geometryShaderCode(self, geometryShaderCode: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
        @staticmethod
        def loadSource(sourceUrl: PySide6.QtCore.QUrl | str, /) -> PySide6.QtCore.QByteArray: ...
        @property
        def log(self, /) -> str: ...
        def setShaderCode(self, type: PySide6.Qt3DRender.Qt3DRender.QShaderProgram.ShaderType, shaderCode: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
        def shaderCode(self, type: PySide6.Qt3DRender.Qt3DRender.QShaderProgram.ShaderType, /) -> PySide6.QtCore.QByteArray: ...
        @property
        def status(self, /) -> PySide6.Qt3DRender.Qt3DRender.QShaderProgram.Status: ...
        @property
        def tessellationControlShaderCode(self, /) -> PySide6.QtCore.QByteArray: ...
        @tessellationControlShaderCode.setter
        def tessellationControlShaderCode(self, tessellationControlShaderCode: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
        @property
        def tessellationEvaluationShaderCode(self, /) -> PySide6.QtCore.QByteArray: ...
        @tessellationEvaluationShaderCode.setter
        def tessellationEvaluationShaderCode(self, tessellationEvaluationShaderCode: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
        @property
        def vertexShaderCode(self, /) -> PySide6.QtCore.QByteArray: ...
        @vertexShaderCode.setter
        def vertexShaderCode(self, vertexShaderCode: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...

    class QShaderProgramBuilder(PySide6.Qt3DCore.Qt3DCore.QNode):

        computeShaderCodeChanged : typing.ClassVar[Signal] = ... # computeShaderCodeChanged(QByteArray)
        computeShaderGraphChanged: typing.ClassVar[Signal] = ... # computeShaderGraphChanged(QUrl)
        enabledLayersChanged     : typing.ClassVar[Signal] = ... # enabledLayersChanged(QStringList)
        fragmentShaderCodeChanged: typing.ClassVar[Signal] = ... # fragmentShaderCodeChanged(QByteArray)
        fragmentShaderGraphChanged: typing.ClassVar[Signal] = ... # fragmentShaderGraphChanged(QUrl)
        geometryShaderCodeChanged: typing.ClassVar[Signal] = ... # geometryShaderCodeChanged(QByteArray)
        geometryShaderGraphChanged: typing.ClassVar[Signal] = ... # geometryShaderGraphChanged(QUrl)
        shaderProgramChanged     : typing.ClassVar[Signal] = ... # shaderProgramChanged(Qt3DRender::QShaderProgram*)
        tessellationControlShaderCodeChanged: typing.ClassVar[Signal] = ... # tessellationControlShaderCodeChanged(QByteArray)
        tessellationControlShaderGraphChanged: typing.ClassVar[Signal] = ... # tessellationControlShaderGraphChanged(QUrl)
        tessellationEvaluationShaderCodeChanged: typing.ClassVar[Signal] = ... # tessellationEvaluationShaderCodeChanged(QByteArray)
        tessellationEvaluationShaderGraphChanged: typing.ClassVar[Signal] = ... # tessellationEvaluationShaderGraphChanged(QUrl)
        vertexShaderCodeChanged  : typing.ClassVar[Signal] = ... # vertexShaderCodeChanged(QByteArray)
        vertexShaderGraphChanged : typing.ClassVar[Signal] = ... # vertexShaderGraphChanged(QUrl)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, shaderProgram: PySide6.Qt3DRender.Qt3DRender.QShaderProgram | None = ..., enabledLayers: collections.abc.Sequence[str] | None = ..., vertexShaderGraph: PySide6.QtCore.QUrl | None = ..., tessellationControlShaderGraph: PySide6.QtCore.QUrl | None = ..., tessellationEvaluationShaderGraph: PySide6.QtCore.QUrl | None = ..., geometryShaderGraph: PySide6.QtCore.QUrl | None = ..., fragmentShaderGraph: PySide6.QtCore.QUrl | None = ..., computeShaderGraph: PySide6.QtCore.QUrl | None = ..., vertexShaderCode: PySide6.QtCore.QByteArray | None = ..., tessellationControlShaderCode: PySide6.QtCore.QByteArray | None = ..., tessellationEvaluationShaderCode: PySide6.QtCore.QByteArray | None = ..., geometryShaderCode: PySide6.QtCore.QByteArray | None = ..., fragmentShaderCode: PySide6.QtCore.QByteArray | None = ..., computeShaderCode: PySide6.QtCore.QByteArray | None = ...) -> None: ...

        @property
        def computeShaderCode(self, /) -> PySide6.QtCore.QByteArray: ...
        @property
        def computeShaderGraph(self, /) -> PySide6.QtCore.QUrl: ...
        @computeShaderGraph.setter
        def computeShaderGraph(self, computeShaderGraph: PySide6.QtCore.QUrl | str, /) -> None: ...
        @property
        def enabledLayers(self, /) -> typing.List[str]: ...
        @enabledLayers.setter
        def enabledLayers(self, layers: collections.abc.Sequence[str], /) -> None: ...
        @property
        def fragmentShaderCode(self, /) -> PySide6.QtCore.QByteArray: ...
        @property
        def fragmentShaderGraph(self, /) -> PySide6.QtCore.QUrl: ...
        @fragmentShaderGraph.setter
        def fragmentShaderGraph(self, fragmentShaderGraph: PySide6.QtCore.QUrl | str, /) -> None: ...
        @property
        def geometryShaderCode(self, /) -> PySide6.QtCore.QByteArray: ...
        @property
        def geometryShaderGraph(self, /) -> PySide6.QtCore.QUrl: ...
        @geometryShaderGraph.setter
        def geometryShaderGraph(self, geometryShaderGraph: PySide6.QtCore.QUrl | str, /) -> None: ...
        @property
        def shaderProgram(self, /) -> PySide6.Qt3DRender.Qt3DRender.QShaderProgram: ...
        @shaderProgram.setter
        def shaderProgram(self, program: PySide6.Qt3DRender.Qt3DRender.QShaderProgram, /) -> None: ...
        @property
        def tessellationControlShaderCode(self, /) -> PySide6.QtCore.QByteArray: ...
        @property
        def tessellationControlShaderGraph(self, /) -> PySide6.QtCore.QUrl: ...
        @tessellationControlShaderGraph.setter
        def tessellationControlShaderGraph(self, tessellationControlShaderGraph: PySide6.QtCore.QUrl | str, /) -> None: ...
        @property
        def tessellationEvaluationShaderCode(self, /) -> PySide6.QtCore.QByteArray: ...
        @property
        def tessellationEvaluationShaderGraph(self, /) -> PySide6.QtCore.QUrl: ...
        @tessellationEvaluationShaderGraph.setter
        def tessellationEvaluationShaderGraph(self, tessellationEvaluationShaderGraph: PySide6.QtCore.QUrl | str, /) -> None: ...
        @property
        def vertexShaderCode(self, /) -> PySide6.QtCore.QByteArray: ...
        @property
        def vertexShaderGraph(self, /) -> PySide6.QtCore.QUrl: ...
        @vertexShaderGraph.setter
        def vertexShaderGraph(self, vertexShaderGraph: PySide6.QtCore.QUrl | str, /) -> None: ...

    class QSharedGLTexture(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        textureIdChanged         : typing.ClassVar[Signal] = ... # textureIdChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, textureId: int | None = ...) -> None: ...

        @property
        def textureId(self, /) -> int: ...
        @textureId.setter
        def textureId(self, id: int, /) -> None: ...

    class QSortPolicy(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        sortTypesChanged         : typing.ClassVar[Signal] = ... # sortTypesChanged(QList<SortType>); sortTypesChanged(QList<int>)

        class SortType(enum.Enum):

            StateChangeCost           = ...  # 0x1
            BackToFront               = ...  # 0x2
            Material                  = ...  # 0x4
            FrontToBack               = ...  # 0x8
            Texture                   = ...  # 0x10
            Uniform                   = ...  # 0x20


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, sortTypes: collections.abc.Sequence[int] | None = ...) -> None: ...

        @property
        def sortTypes(self, /) -> typing.List[int]: ...
        @typing.overload
        def sortTypes(self, sortTypes: collections.abc.Sequence[PySide6.Qt3DRender.Qt3DRender.QSortPolicy.SortType], /) -> None: ...
        @typing.overload
        def sortTypes(self, sortTypesInt: collections.abc.Sequence[int], /) -> None: ...

    class QSpotLight(PySide6.Qt3DRender.Qt3DRender.QAbstractLight):

        constantAttenuationChanged: typing.ClassVar[Signal] = ... # constantAttenuationChanged(float)
        cutOffAngleChanged       : typing.ClassVar[Signal] = ... # cutOffAngleChanged(float)
        linearAttenuationChanged : typing.ClassVar[Signal] = ... # linearAttenuationChanged(float)
        localDirectionChanged    : typing.ClassVar[Signal] = ... # localDirectionChanged(QVector3D)
        quadraticAttenuationChanged: typing.ClassVar[Signal] = ... # quadraticAttenuationChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, constantAttenuation: float | None = ..., linearAttenuation: float | None = ..., quadraticAttenuation: float | None = ..., localDirection: PySide6.QtGui.QVector3D | None = ..., cutOffAngle: float | None = ...) -> None: ...

        @property
        def constantAttenuation(self, /) -> float: ...
        @constantAttenuation.setter
        def constantAttenuation(self, value: float, /) -> None: ...
        @property
        def cutOffAngle(self, /) -> float: ...
        @cutOffAngle.setter
        def cutOffAngle(self, cutOffAngle: float, /) -> None: ...
        @property
        def linearAttenuation(self, /) -> float: ...
        @linearAttenuation.setter
        def linearAttenuation(self, value: float, /) -> None: ...
        @property
        def localDirection(self, /) -> PySide6.QtGui.QVector3D: ...
        @localDirection.setter
        def localDirection(self, localDirection: PySide6.QtGui.QVector3D, /) -> None: ...
        @property
        def quadraticAttenuation(self, /) -> float: ...
        @quadraticAttenuation.setter
        def quadraticAttenuation(self, value: float, /) -> None: ...

    class QStencilMask(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        backOutputMaskChanged    : typing.ClassVar[Signal] = ... # backOutputMaskChanged(uint)
        frontOutputMaskChanged   : typing.ClassVar[Signal] = ... # frontOutputMaskChanged(uint)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, frontOutputMask: int | None = ..., backOutputMask: int | None = ...) -> None: ...

        @property
        def backOutputMask(self, /) -> int: ...
        @backOutputMask.setter
        def backOutputMask(self, backOutputMask: int, /) -> None: ...
        @property
        def frontOutputMask(self, /) -> int: ...
        @frontOutputMask.setter
        def frontOutputMask(self, frontOutputMask: int, /) -> None: ...

    class QStencilOperation(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, front: PySide6.Qt3DRender.Qt3DRender.QStencilOperationArguments | None = ..., back: PySide6.Qt3DRender.Qt3DRender.QStencilOperationArguments | None = ...) -> None: ...

        @property
        def back(self, /) -> PySide6.Qt3DRender.Qt3DRender.QStencilOperationArguments: ...
        @property
        def front(self, /) -> PySide6.Qt3DRender.Qt3DRender.QStencilOperationArguments: ...

    class QStencilOperationArguments(PySide6.QtCore.QObject):

        allTestsPassOperationChanged: typing.ClassVar[Signal] = ... # allTestsPassOperationChanged(Operation)
        depthTestFailureOperationChanged: typing.ClassVar[Signal] = ... # depthTestFailureOperationChanged(Operation)
        faceModeChanged          : typing.ClassVar[Signal] = ... # faceModeChanged(FaceMode)
        stencilTestFailureOperationChanged: typing.ClassVar[Signal] = ... # stencilTestFailureOperationChanged(Operation)

        class FaceMode(enum.Enum):

            Front                     = ...  # 0x404
            Back                      = ...  # 0x405
            FrontAndBack              = ...  # 0x408

        class Operation(enum.Enum):

            Zero                      = ...  # 0x0
            Invert                    = ...  # 0x150a
            Keep                      = ...  # 0x1e00
            Replace                   = ...  # 0x1e01
            Increment                 = ...  # 0x1e02
            Decrement                 = ...  # 0x1e03
            IncrementWrap             = ...  # 0x8507
            DecrementWrap             = ...  # 0x8508


        @property
        def allTestsPassOperation(self, /) -> PySide6.Qt3DRender.Qt3DRender.QStencilOperationArguments.Operation: ...
        @allTestsPassOperation.setter
        def allTestsPassOperation(self, operation: PySide6.Qt3DRender.Qt3DRender.QStencilOperationArguments.Operation, /) -> None: ...
        @property
        def depthTestFailureOperation(self, /) -> PySide6.Qt3DRender.Qt3DRender.QStencilOperationArguments.Operation: ...
        @depthTestFailureOperation.setter
        def depthTestFailureOperation(self, operation: PySide6.Qt3DRender.Qt3DRender.QStencilOperationArguments.Operation, /) -> None: ...
        @property
        def faceMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QStencilOperationArguments.FaceMode: ...
        @property
        def stencilTestFailureOperation(self, /) -> PySide6.Qt3DRender.Qt3DRender.QStencilOperationArguments.Operation: ...
        @stencilTestFailureOperation.setter
        def stencilTestFailureOperation(self, operation: PySide6.Qt3DRender.Qt3DRender.QStencilOperationArguments.Operation, /) -> None: ...

    class QStencilTest(PySide6.Qt3DRender.Qt3DRender.QRenderState):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, front: PySide6.Qt3DRender.Qt3DRender.QStencilTestArguments | None = ..., back: PySide6.Qt3DRender.Qt3DRender.QStencilTestArguments | None = ...) -> None: ...

        @property
        def back(self, /) -> PySide6.Qt3DRender.Qt3DRender.QStencilTestArguments: ...
        @property
        def front(self, /) -> PySide6.Qt3DRender.Qt3DRender.QStencilTestArguments: ...

    class QStencilTestArguments(PySide6.QtCore.QObject):

        comparisonMaskChanged    : typing.ClassVar[Signal] = ... # comparisonMaskChanged(uint)
        faceModeChanged          : typing.ClassVar[Signal] = ... # faceModeChanged(StencilFaceMode)
        referenceValueChanged    : typing.ClassVar[Signal] = ... # referenceValueChanged(int)
        stencilFunctionChanged   : typing.ClassVar[Signal] = ... # stencilFunctionChanged(StencilFunction)

        class StencilFaceMode(enum.Enum):

            Front                     = ...  # 0x404
            Back                      = ...  # 0x405
            FrontAndBack              = ...  # 0x408

        class StencilFunction(enum.Enum):

            Never                     = ...  # 0x200
            Less                      = ...  # 0x201
            Equal                     = ...  # 0x202
            LessOrEqual               = ...  # 0x203
            Greater                   = ...  # 0x204
            NotEqual                  = ...  # 0x205
            GreaterOrEqual            = ...  # 0x206
            Always                    = ...  # 0x207


        @property
        def comparisonMask(self, /) -> int: ...
        @comparisonMask.setter
        def comparisonMask(self, comparisonMask: int, /) -> None: ...
        @property
        def faceMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QStencilTestArguments.StencilFaceMode: ...
        @property
        def referenceValue(self, /) -> int: ...
        @referenceValue.setter
        def referenceValue(self, referenceValue: int, /) -> None: ...
        @property
        def stencilFunction(self, /) -> PySide6.Qt3DRender.Qt3DRender.QStencilTestArguments.StencilFunction: ...
        @stencilFunction.setter
        def stencilFunction(self, stencilFunction: PySide6.Qt3DRender.Qt3DRender.QStencilTestArguments.StencilFunction, /) -> None: ...

    class QSubtreeEnabler(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        enablementChanged        : typing.ClassVar[Signal] = ... # enablementChanged(Qt3DRender::QSubtreeEnabler::Enablement)

        class Enablement(enum.Enum):

            Persistent                = ...  # 0x0
            SingleShot                = ...  # 0x1


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, enablement: PySide6.Qt3DRender.Qt3DRender.QSubtreeEnabler.Enablement | None = ...) -> None: ...

        @property
        def enablement(self, /) -> PySide6.Qt3DRender.Qt3DRender.QSubtreeEnabler.Enablement: ...
        @enablement.setter
        def enablement(self, enablement: PySide6.Qt3DRender.Qt3DRender.QSubtreeEnabler.Enablement, /) -> None: ...
        def requestUpdate(self, /) -> None: ...

    class QTechnique(PySide6.Qt3DCore.Qt3DCore.QNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, graphicsApiFilter: PySide6.Qt3DRender.Qt3DRender.QGraphicsApiFilter | None = ...) -> None: ...

        def addFilterKey(self, filterKey: PySide6.Qt3DRender.Qt3DRender.QFilterKey, /) -> None: ...
        def addParameter(self, p: PySide6.Qt3DRender.Qt3DRender.QParameter, /) -> None: ...
        def addRenderPass(self, pass_: PySide6.Qt3DRender.Qt3DRender.QRenderPass, /) -> None: ...
        def filterKeys(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QFilterKey]: ...
        @property
        def graphicsApiFilter(self, /) -> PySide6.Qt3DRender.Qt3DRender.QGraphicsApiFilter: ...
        def parameters(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QParameter]: ...
        def removeFilterKey(self, filterKey: PySide6.Qt3DRender.Qt3DRender.QFilterKey, /) -> None: ...
        def removeParameter(self, p: PySide6.Qt3DRender.Qt3DRender.QParameter, /) -> None: ...
        def removeRenderPass(self, pass_: PySide6.Qt3DRender.Qt3DRender.QRenderPass, /) -> None: ...
        def renderPasses(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QRenderPass]: ...

    class QTechniqueFilter(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...

        def addMatch(self, filterKey: PySide6.Qt3DRender.Qt3DRender.QFilterKey, /) -> None: ...
        def addParameter(self, p: PySide6.Qt3DRender.Qt3DRender.QParameter, /) -> None: ...
        def matchAll(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QFilterKey]: ...
        def parameters(self, /) -> typing.List[PySide6.Qt3DRender.Qt3DRender.QParameter]: ...
        def removeMatch(self, filterKey: PySide6.Qt3DRender.Qt3DRender.QFilterKey, /) -> None: ...
        def removeParameter(self, p: PySide6.Qt3DRender.Qt3DRender.QParameter, /) -> None: ...

    class QTexture1D(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QTexture1DArray(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QTexture2D(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QTexture2DArray(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QTexture2DMultisample(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QTexture2DMultisampleArray(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QTexture3D(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QTextureBuffer(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QTextureCubeMap(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QTextureCubeMapArray(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QTextureData(Shiboken.Object):

        def __init__(self, /) -> None: ...

        def addImageData(self, imageData: PySide6.Qt3DRender.Qt3DRender.QTextureImageDataPtr, /) -> None: ...
        def comparisonFunction(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonFunction: ...
        def comparisonMode(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonMode: ...
        def depth(self, /) -> int: ...
        def format(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.TextureFormat: ...
        def height(self, /) -> int: ...
        def imageData(self, /) -> typing.List[typing.Tuple[PySide6.Qt3DRender.Qt3DRender.QTextureImageData]]: ...
        def isAutoMipMapGenerationEnabled(self, /) -> bool: ...
        def layers(self, /) -> int: ...
        def magnificationFilter(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Filter: ...
        def maximumAnisotropy(self, /) -> float: ...
        def minificationFilter(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Filter: ...
        def setAutoMipMapGenerationEnabled(self, isAutoMipMapGenerationEnabled: bool, /) -> None: ...
        def setComparisonFunction(self, comparisonFunction: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonFunction, /) -> None: ...
        def setComparisonMode(self, comparisonMode: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.ComparisonMode, /) -> None: ...
        def setDepth(self, depth: int, /) -> None: ...
        def setFormat(self, arg__1: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.TextureFormat, /) -> None: ...
        def setHeight(self, height: int, /) -> None: ...
        def setLayers(self, layers: int, /) -> None: ...
        def setMagnificationFilter(self, filter: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Filter, /) -> None: ...
        def setMaximumAnisotropy(self, maximumAnisotropy: float, /) -> None: ...
        def setMinificationFilter(self, filter: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Filter, /) -> None: ...
        def setTarget(self, target: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Target, /) -> None: ...
        def setWidth(self, width: int, /) -> None: ...
        def setWrapModeX(self, wrapModeX: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode, /) -> None: ...
        def setWrapModeY(self, wrapModeY: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode, /) -> None: ...
        def setWrapModeZ(self, wrapModeZ: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode, /) -> None: ...
        def target(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.Target: ...
        def width(self, /) -> int: ...
        def wrapModeX(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode: ...
        def wrapModeY(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode: ...
        def wrapModeZ(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode: ...

    class QTextureDataUpdate(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, other: PySide6.Qt3DRender.Qt3DRender.QTextureDataUpdate, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def __eq__(self, rhs: PySide6.Qt3DRender.Qt3DRender.QTextureDataUpdate, /) -> bool: ...
        def __ne__(self, rhs: PySide6.Qt3DRender.Qt3DRender.QTextureDataUpdate, /) -> bool: ...
        def data(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureImageDataPtr: ...
        def face(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.CubeMapFace: ...
        def layer(self, /) -> int: ...
        def mipLevel(self, /) -> int: ...
        def setData(self, data: PySide6.Qt3DRender.Qt3DRender.QTextureImageDataPtr, /) -> None: ...
        def setFace(self, face: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture.CubeMapFace, /) -> None: ...
        def setLayer(self, layer: int, /) -> None: ...
        def setMipLevel(self, mipLevel: int, /) -> None: ...
        def setX(self, x: int, /) -> None: ...
        def setY(self, y: int, /) -> None: ...
        def setZ(self, z: int, /) -> None: ...
        def swap(self, other: PySide6.Qt3DRender.Qt3DRender.QTextureDataUpdate, /) -> None: ...
        def x(self, /) -> int: ...
        def y(self, /) -> int: ...
        def z(self, /) -> int: ...

    class QTextureImage(PySide6.Qt3DRender.Qt3DRender.QAbstractTextureImage):

        mirroredChanged          : typing.ClassVar[Signal] = ... # mirroredChanged(bool)
        sourceChanged            : typing.ClassVar[Signal] = ... # sourceChanged(QUrl)
        statusChanged            : typing.ClassVar[Signal] = ... # statusChanged(Status)

        class Status(enum.Enum):

            None_                     = ...  # 0x0
            Loading                   = ...  # 0x1
            Ready                     = ...  # 0x2
            Error                     = ...  # 0x3


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, source: PySide6.QtCore.QUrl | None = ..., status: PySide6.Qt3DRender.Qt3DRender.QTextureImage.Status | None = ..., mirrored: bool | None = ...) -> None: ...

        def dataGenerator(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureImageDataGeneratorPtr: ...
        @property
        def mirrored(self, /) -> bool: ...
        @mirrored.setter
        def mirrored(self, mirrored: bool, /) -> None: ...
        def setStatus(self, status: PySide6.Qt3DRender.Qt3DRender.QTextureImage.Status, /) -> None: ...
        @property
        def source(self, /) -> PySide6.QtCore.QUrl: ...
        @source.setter
        def source(self, source: PySide6.QtCore.QUrl | str, /) -> None: ...
        @property
        def status(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureImage.Status: ...

    class QTextureImageData(Shiboken.Object):

        def __init__(self, /) -> None: ...

        def alignment(self, /) -> int: ...
        def cleanup(self, /) -> None: ...
        def data(self, /, layer: int | None = ..., face: int | None = ..., mipmapLevel: int | None = ...) -> PySide6.QtCore.QByteArray: ...
        def depth(self, /) -> int: ...
        def faces(self, /) -> int: ...
        def format(self, /) -> PySide6.QtOpenGL.QOpenGLTexture.TextureFormat: ...
        def height(self, /) -> int: ...
        def isCompressed(self, /) -> bool: ...
        def layers(self, /) -> int: ...
        def mipLevels(self, /) -> int: ...
        def pixelFormat(self, /) -> PySide6.QtOpenGL.QOpenGLTexture.PixelFormat: ...
        def pixelType(self, /) -> PySide6.QtOpenGL.QOpenGLTexture.PixelType: ...
        def setAlignment(self, alignment: int, /) -> None: ...
        def setData(self, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, blockSize: int, /, isCompressed: bool = ...) -> None: ...
        def setDepth(self, depth: int, /) -> None: ...
        def setFaces(self, faces: int, /) -> None: ...
        def setFormat(self, format: PySide6.QtOpenGL.QOpenGLTexture.TextureFormat, /) -> None: ...
        def setHeight(self, height: int, /) -> None: ...
        def setImage(self, arg__1: PySide6.QtGui.QImage, /) -> None: ...
        def setLayers(self, layers: int, /) -> None: ...
        def setMipLevels(self, mipLevels: int, /) -> None: ...
        def setPixelFormat(self, pixelFormat: PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, /) -> None: ...
        def setPixelType(self, pixelType: PySide6.QtOpenGL.QOpenGLTexture.PixelType, /) -> None: ...
        def setTarget(self, target: PySide6.QtOpenGL.QOpenGLTexture.Target, /) -> None: ...
        def setWidth(self, width: int, /) -> None: ...
        def target(self, /) -> PySide6.QtOpenGL.QOpenGLTexture.Target: ...
        def width(self, /) -> int: ...

    class QTextureImageDataGenerator(PySide6.Qt3DCore.Qt3DCore.QAbstractFunctor):

        def __init__(self, /) -> None: ...

        def __call__(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureImageDataPtr: ...
        def __eq__(self, other: PySide6.Qt3DRender.Qt3DRender.QTextureImageDataGenerator, /) -> bool: ...

    class QTextureImageDataGeneratorPtr(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, pointee: PySide6.Qt3DRender.Qt3DRender.QTextureImageDataGenerator, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def __dir__(self, /) -> collections.abc.Iterable[str]: ...
        def __repr__(self, /) -> str: ...
        def data(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureImageDataGenerator: ...
        @typing.overload
        def reset(self, /) -> None: ...
        @typing.overload
        def reset(self, t: PySide6.Qt3DRender.Qt3DRender.QTextureImageDataGenerator, /) -> None: ...

    class QTextureImageDataPtr(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, pointee: PySide6.Qt3DRender.Qt3DRender.QTextureImageData, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def __dir__(self, /) -> collections.abc.Iterable[str]: ...
        def __repr__(self, /) -> str: ...
        def data(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureImageData: ...
        @typing.overload
        def reset(self, /) -> None: ...
        @typing.overload
        def reset(self, t: PySide6.Qt3DRender.Qt3DRender.QTextureImageData, /) -> None: ...

    class QTextureLoader(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        mirroredChanged          : typing.ClassVar[Signal] = ... # mirroredChanged(bool)
        sourceChanged            : typing.ClassVar[Signal] = ... # sourceChanged(QUrl)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, source: PySide6.QtCore.QUrl | None = ..., mirrored: bool | None = ...) -> None: ...

        @property
        def mirrored(self, /) -> bool: ...
        @mirrored.setter
        def mirrored(self, mirrored: bool, /) -> None: ...
        @property
        def source(self, /) -> PySide6.QtCore.QUrl: ...
        @source.setter
        def source(self, source: PySide6.QtCore.QUrl | str, /) -> None: ...

    class QTextureRectangle(PySide6.Qt3DRender.Qt3DRender.QAbstractTexture):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QTextureWrapMode(PySide6.QtCore.QObject):

        xChanged                 : typing.ClassVar[Signal] = ... # xChanged(WrapMode)
        yChanged                 : typing.ClassVar[Signal] = ... # yChanged(WrapMode)
        zChanged                 : typing.ClassVar[Signal] = ... # zChanged(WrapMode)

        class WrapMode(enum.Enum):

            Repeat                    = ...  # 0x2901
            ClampToBorder             = ...  # 0x812d
            ClampToEdge               = ...  # 0x812f
            MirroredRepeat            = ...  # 0x8370


        @typing.overload
        def __init__(self, x: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode, y: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode, z: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...
        @typing.overload
        def __init__(self, /, wrapMode: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode = ..., parent: PySide6.QtCore.QObject | None = ..., *, x: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode | None = ..., y: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode | None = ..., z: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode | None = ...) -> None: ...

        @property
        def x(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode: ...
        @x.setter
        def x(self, x: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode, /) -> None: ...
        @property
        def y(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode: ...
        @y.setter
        def y(self, y: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode, /) -> None: ...
        @property
        def z(self, /) -> PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode: ...
        @z.setter
        def z(self, z: PySide6.Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode, /) -> None: ...

    class QViewport(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        gammaChanged             : typing.ClassVar[Signal] = ... # gammaChanged(float)
        normalizedRectChanged    : typing.ClassVar[Signal] = ... # normalizedRectChanged(QRectF)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, normalizedRect: PySide6.QtCore.QRectF | None = ..., gamma: float | None = ...) -> None: ...

        @property
        def gamma(self, /) -> float: ...
        @gamma.setter
        def gamma(self, gamma: float, /) -> None: ...
        @property
        def normalizedRect(self, /) -> PySide6.QtCore.QRectF: ...
        @normalizedRect.setter
        def normalizedRect(self, normalizedRect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...

    class QWaitFence(PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode):

        handleChanged            : typing.ClassVar[Signal] = ... # handleChanged(QVariant)
        handleTypeChanged        : typing.ClassVar[Signal] = ... # handleTypeChanged(HandleType)
        timeoutChanged           : typing.ClassVar[Signal] = ... # timeoutChanged(qulonglong)
        waitOnCPUChanged         : typing.ClassVar[Signal] = ... # waitOnCPUChanged(bool)

        class HandleType(enum.Enum):

            NoHandle                  = ...  # 0x0
            OpenGLFenceId             = ...  # 0x1


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, handleType: PySide6.Qt3DRender.Qt3DRender.QWaitFence.HandleType | None = ..., handle: typing.Any | None = ..., waitOnCPU: bool | None = ..., timeout: int | None = ...) -> None: ...

        @property
        def handle(self, /) -> typing.Any: ...
        @handle.setter
        def handle(self, handle: typing.Any, /) -> None: ...
        @property
        def handleType(self, /) -> PySide6.Qt3DRender.Qt3DRender.QWaitFence.HandleType: ...
        @handleType.setter
        def handleType(self, type: PySide6.Qt3DRender.Qt3DRender.QWaitFence.HandleType, /) -> None: ...
        @property
        def timeout(self, /) -> int: ...
        @timeout.setter
        def timeout(self, timeout: int, /) -> None: ...
        @property
        def waitOnCPU(self, /) -> bool: ...
        @waitOnCPU.setter
        def waitOnCPU(self, waitOnCPU: bool, /) -> None: ...


    @staticmethod
    def swap(lhs: PySide6.Qt3DRender.Qt3DRender.QTextureDataUpdate, rhs: PySide6.Qt3DRender.Qt3DRender.QTextureDataUpdate, /) -> None: ...


# eof
