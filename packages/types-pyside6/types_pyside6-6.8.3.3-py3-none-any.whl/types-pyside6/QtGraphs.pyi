# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtGraphs, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtGraphs`

import PySide6.QtGraphs
import PySide6.QtCore
import PySide6.QtGui
import PySide6.QtQml
import PySide6.QtCharts
import PySide6.QtDataVisualization

import os
import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class Q3DScene(PySide6.QtCore.QObject):

    devicePixelRatioChanged  : typing.ClassVar[Signal] = ... # devicePixelRatioChanged(double)
    graphPositionQueryChanged: typing.ClassVar[Signal] = ... # graphPositionQueryChanged(QPoint)
    needRender               : typing.ClassVar[Signal] = ... # needRender()
    primarySubViewportChanged: typing.ClassVar[Signal] = ... # primarySubViewportChanged(QRect)
    secondarySubViewportChanged: typing.ClassVar[Signal] = ... # secondarySubViewportChanged(QRect)
    secondarySubviewOnTopChanged: typing.ClassVar[Signal] = ... # secondarySubviewOnTopChanged(bool)
    selectionQueryPositionChanged: typing.ClassVar[Signal] = ... # selectionQueryPositionChanged(QPoint)
    slicingActiveChanged     : typing.ClassVar[Signal] = ... # slicingActiveChanged(bool)
    viewportChanged          : typing.ClassVar[Signal] = ... # viewportChanged(QRect)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, viewport: PySide6.QtCore.QRect | None = ..., primarySubViewport: PySide6.QtCore.QRect | None = ..., secondarySubViewport: PySide6.QtCore.QRect | None = ..., selectionQueryPosition: PySide6.QtCore.QPoint | None = ..., secondarySubviewOnTop: bool | None = ..., slicingActive: bool | None = ..., devicePixelRatio: float | None = ..., graphPositionQuery: PySide6.QtCore.QPoint | None = ..., invalidSelectionPoint: PySide6.QtCore.QPoint | None = ...) -> None: ...

    @property
    def devicePixelRatio(self, /) -> float: ...
    @devicePixelRatio.setter
    def devicePixelRatio(self, pixelRatio: float, /) -> None: ...
    @property
    def graphPositionQuery(self, /) -> PySide6.QtCore.QPoint: ...
    @graphPositionQuery.setter
    def graphPositionQuery(self, point: PySide6.QtCore.QPoint, /) -> None: ...
    @property
    def invalidSelectionPoint(self, /) -> PySide6.QtCore.QPoint: ...
    def isPointInPrimarySubView(self, point: PySide6.QtCore.QPoint, /) -> bool: ...
    def isPointInSecondarySubView(self, point: PySide6.QtCore.QPoint, /) -> bool: ...
    @property
    def primarySubViewport(self, /) -> PySide6.QtCore.QRect: ...
    @primarySubViewport.setter
    def primarySubViewport(self, primarySubViewport: PySide6.QtCore.QRect, /) -> None: ...
    @property
    def secondarySubViewport(self, /) -> PySide6.QtCore.QRect: ...
    @secondarySubViewport.setter
    def secondarySubViewport(self, secondarySubViewport: PySide6.QtCore.QRect, /) -> None: ...
    @property
    def secondarySubviewOnTop(self, /) -> bool: ...
    @secondarySubviewOnTop.setter
    def secondarySubviewOnTop(self, isSecondaryOnTop: bool, /) -> None: ...
    @property
    def selectionQueryPosition(self, /) -> PySide6.QtCore.QPoint: ...
    @selectionQueryPosition.setter
    def selectionQueryPosition(self, point: PySide6.QtCore.QPoint, /) -> None: ...
    @property
    def slicingActive(self, /) -> bool: ...
    @slicingActive.setter
    def slicingActive(self, isSlicing: bool, /) -> None: ...
    @property
    def viewport(self, /) -> PySide6.QtCore.QRect: ...


class QAbstract3DAxis(PySide6.QtCore.QObject):

    autoAdjustRangeChanged   : typing.ClassVar[Signal] = ... # autoAdjustRangeChanged(bool)
    labelAutoAngleChanged    : typing.ClassVar[Signal] = ... # labelAutoAngleChanged(float)
    labelVisibleChanged      : typing.ClassVar[Signal] = ... # labelVisibleChanged(bool)
    labelsChanged            : typing.ClassVar[Signal] = ... # labelsChanged()
    maxChanged               : typing.ClassVar[Signal] = ... # maxChanged(float)
    minChanged               : typing.ClassVar[Signal] = ... # minChanged(float)
    orientationChanged       : typing.ClassVar[Signal] = ... # orientationChanged(QAbstract3DAxis::AxisOrientation)
    rangeChanged             : typing.ClassVar[Signal] = ... # rangeChanged(float,float)
    titleChanged             : typing.ClassVar[Signal] = ... # titleChanged(QString)
    titleFixedChanged        : typing.ClassVar[Signal] = ... # titleFixedChanged(bool)
    titleOffsetChanged       : typing.ClassVar[Signal] = ... # titleOffsetChanged(float)
    titleVisibleChanged      : typing.ClassVar[Signal] = ... # titleVisibleChanged(bool)

    class AxisOrientation(enum.Enum):

        None_                     = ...  # 0x0
        X                         = ...  # 0x1
        Y                         = ...  # 0x2
        Z                         = ...  # 0x3

    class AxisType(enum.Enum):

        None_                     = ...  # 0x0
        Category                  = ...  # 0x1
        Value                     = ...  # 0x2


    @property
    def autoAdjustRange(self, /) -> bool: ...
    @autoAdjustRange.setter
    def autoAdjustRange(self, autoAdjust: bool, /) -> None: ...
    @property
    def labelAutoAngle(self, /) -> float: ...
    @labelAutoAngle.setter
    def labelAutoAngle(self, degree: float, /) -> None: ...
    @property
    def labels(self, /) -> typing.List[str]: ...
    @labels.setter
    def labels(self, labels: collections.abc.Sequence[str], /) -> None: ...
    @property
    def labelsVisible(self, /) -> bool: ...
    @labelsVisible.setter
    def labelsVisible(self, visible: bool, /) -> None: ...
    @property
    def max(self, /) -> float: ...
    @max.setter
    def max(self, max: float, /) -> None: ...
    @property
    def min(self, /) -> float: ...
    @min.setter
    def min(self, min: float, /) -> None: ...
    @property
    def orientation(self, /) -> PySide6.QtGraphs.QAbstract3DAxis.AxisOrientation: ...
    def setRange(self, min: float, max: float, /) -> None: ...
    @property
    def title(self, /) -> str: ...
    @title.setter
    def title(self, title: str, /) -> None: ...
    @property
    def titleFixed(self, /) -> bool: ...
    @titleFixed.setter
    def titleFixed(self, fixed: bool, /) -> None: ...
    @property
    def titleOffset(self, /) -> float: ...
    @titleOffset.setter
    def titleOffset(self, offset: float, /) -> None: ...
    @property
    def titleVisible(self, /) -> bool: ...
    @titleVisible.setter
    def titleVisible(self, visible: bool, /) -> None: ...
    @property
    def type(self, /) -> PySide6.QtGraphs.QAbstract3DAxis.AxisType: ...


class QAbstract3DSeries(PySide6.QtCore.QObject):

    baseColorChanged         : typing.ClassVar[Signal] = ... # baseColorChanged(QColor)
    baseGradientChanged      : typing.ClassVar[Signal] = ... # baseGradientChanged(QLinearGradient)
    colorStyleChanged        : typing.ClassVar[Signal] = ... # colorStyleChanged(QGraphsTheme::ColorStyle)
    itemLabelChanged         : typing.ClassVar[Signal] = ... # itemLabelChanged(QString)
    itemLabelFormatChanged   : typing.ClassVar[Signal] = ... # itemLabelFormatChanged(QString)
    itemLabelVisibleChanged  : typing.ClassVar[Signal] = ... # itemLabelVisibleChanged(bool)
    meshChanged              : typing.ClassVar[Signal] = ... # meshChanged(QAbstract3DSeries::Mesh)
    meshRotationChanged      : typing.ClassVar[Signal] = ... # meshRotationChanged(QQuaternion)
    meshSmoothChanged        : typing.ClassVar[Signal] = ... # meshSmoothChanged(bool)
    multiHighlightColorChanged: typing.ClassVar[Signal] = ... # multiHighlightColorChanged(QColor)
    multiHighlightGradientChanged: typing.ClassVar[Signal] = ... # multiHighlightGradientChanged(QLinearGradient)
    nameChanged              : typing.ClassVar[Signal] = ... # nameChanged(QString)
    singleHighlightColorChanged: typing.ClassVar[Signal] = ... # singleHighlightColorChanged(QColor)
    singleHighlightGradientChanged: typing.ClassVar[Signal] = ... # singleHighlightGradientChanged(QLinearGradient)
    userDefinedMeshChanged   : typing.ClassVar[Signal] = ... # userDefinedMeshChanged(QString)
    visibleChanged           : typing.ClassVar[Signal] = ... # visibleChanged(bool)

    class Mesh(enum.Enum):

        UserDefined               = ...  # 0x0
        Bar                       = ...  # 0x1
        Cube                      = ...  # 0x2
        Pyramid                   = ...  # 0x3
        Cone                      = ...  # 0x4
        Cylinder                  = ...  # 0x5
        BevelBar                  = ...  # 0x6
        BevelCube                 = ...  # 0x7
        Sphere                    = ...  # 0x8
        Minimal                   = ...  # 0x9
        Arrow                     = ...  # 0xa
        Point                     = ...  # 0xb

    class SeriesType(enum.Enum):

        None_                     = ...  # 0x0
        Bar                       = ...  # 0x1
        Scatter                   = ...  # 0x2
        Surface                   = ...  # 0x3


    @property
    def baseColor(self, /) -> PySide6.QtGui.QColor: ...
    @baseColor.setter
    def baseColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def baseGradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    @baseGradient.setter
    def baseGradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    @property
    def colorStyle(self, /) -> PySide6.QtGraphs.QGraphsTheme.ColorStyle: ...
    @colorStyle.setter
    def colorStyle(self, style: PySide6.QtGraphs.QGraphsTheme.ColorStyle, /) -> None: ...
    @property
    def itemLabel(self, /) -> str: ...
    @property
    def itemLabelFormat(self, /) -> str: ...
    @itemLabelFormat.setter
    def itemLabelFormat(self, format: str, /) -> None: ...
    @property
    def itemLabelVisible(self, /) -> bool: ...
    @itemLabelVisible.setter
    def itemLabelVisible(self, visible: bool, /) -> None: ...
    @property
    def mesh(self, /) -> PySide6.QtGraphs.QAbstract3DSeries.Mesh: ...
    @mesh.setter
    def mesh(self, mesh: PySide6.QtGraphs.QAbstract3DSeries.Mesh, /) -> None: ...
    @property
    def meshRotation(self, /) -> PySide6.QtGui.QQuaternion: ...
    @meshRotation.setter
    def meshRotation(self, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...
    @property
    def meshSmooth(self, /) -> bool: ...
    @meshSmooth.setter
    def meshSmooth(self, enable: bool, /) -> None: ...
    @property
    def multiHighlightColor(self, /) -> PySide6.QtGui.QColor: ...
    @multiHighlightColor.setter
    def multiHighlightColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def multiHighlightGradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    @multiHighlightGradient.setter
    def multiHighlightGradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    @property
    def name(self, /) -> str: ...
    @name.setter
    def name(self, name: str, /) -> None: ...
    def setMeshAxisAndAngle(self, axis: PySide6.QtGui.QVector3D, angle: float, /) -> None: ...
    @property
    def singleHighlightColor(self, /) -> PySide6.QtGui.QColor: ...
    @singleHighlightColor.setter
    def singleHighlightColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def singleHighlightGradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    @singleHighlightGradient.setter
    def singleHighlightGradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    @property
    def type(self, /) -> PySide6.QtGraphs.QAbstract3DSeries.SeriesType: ...
    @property
    def userDefinedMesh(self, /) -> str: ...
    @userDefinedMesh.setter
    def userDefinedMesh(self, fileName: str, /) -> None: ...
    @property
    def visible(self, /) -> bool: ...
    @visible.setter
    def visible(self, visible: bool, /) -> None: ...


class QAbstractAxis(PySide6.QtCore.QObject):

    gridVisibleChanged       : typing.ClassVar[Signal] = ... # gridVisibleChanged(bool)
    labelDelegateChanged     : typing.ClassVar[Signal] = ... # labelDelegateChanged()
    labelsAngleChanged       : typing.ClassVar[Signal] = ... # labelsAngleChanged(double)
    labelsVisibleChanged     : typing.ClassVar[Signal] = ... # labelsVisibleChanged(bool)
    lineVisibleChanged       : typing.ClassVar[Signal] = ... # lineVisibleChanged(bool)
    rangeChanged             : typing.ClassVar[Signal] = ... # rangeChanged(double,double)
    subGridVisibleChanged    : typing.ClassVar[Signal] = ... # subGridVisibleChanged(bool)
    titleColorChanged        : typing.ClassVar[Signal] = ... # titleColorChanged(QColor)
    titleFontChanged         : typing.ClassVar[Signal] = ... # titleFontChanged(QFont)
    titleTextChanged         : typing.ClassVar[Signal] = ... # titleTextChanged(QString)
    titleVisibleChanged      : typing.ClassVar[Signal] = ... # titleVisibleChanged(bool)
    update                   : typing.ClassVar[Signal] = ... # update()
    visibleChanged           : typing.ClassVar[Signal] = ... # visibleChanged(bool)

    class AxisType(enum.Enum):

        Value                     = ...  # 0x0
        BarCategory               = ...  # 0x1
        DateTime                  = ...  # 0x2


    @property
    def gridVisible(self, /) -> bool: ...
    @gridVisible.setter
    def gridVisible(self, /, visible: bool = ...) -> None: ...
    def hide(self, /) -> None: ...
    @property
    def labelDelegate(self, /) -> PySide6.QtQml.QQmlComponent: ...
    @labelDelegate.setter
    def labelDelegate(self, newLabelDelegate: PySide6.QtQml.QQmlComponent, /) -> None: ...
    @property
    def labelsAngle(self, /) -> float: ...
    @labelsAngle.setter
    def labelsAngle(self, angle: float, /) -> None: ...
    @property
    def labelsVisible(self, /) -> bool: ...
    @labelsVisible.setter
    def labelsVisible(self, /, visible: bool = ...) -> None: ...
    @property
    def lineVisible(self, /) -> bool: ...
    @lineVisible.setter
    def lineVisible(self, /, visible: bool = ...) -> None: ...
    def setMax(self, max: typing.Any, /) -> None: ...
    def setMin(self, min: typing.Any, /) -> None: ...
    def setRange(self, min: typing.Any, max: typing.Any, /) -> None: ...
    def show(self, /) -> None: ...
    @property
    def subGridVisible(self, /) -> bool: ...
    @subGridVisible.setter
    def subGridVisible(self, /, visible: bool = ...) -> None: ...
    @property
    def titleColor(self, /) -> PySide6.QtGui.QColor: ...
    @titleColor.setter
    def titleColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def titleFont(self, /) -> PySide6.QtGui.QFont: ...
    @titleFont.setter
    def titleFont(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    @property
    def titleText(self, /) -> str: ...
    @titleText.setter
    def titleText(self, title: str, /) -> None: ...
    @property
    def titleVisible(self, /) -> bool: ...
    @titleVisible.setter
    def titleVisible(self, /, visible: bool = ...) -> None: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractAxis.AxisType: ...
    @property
    def visible(self, /) -> bool: ...
    @visible.setter
    def visible(self, /, visible: bool = ...) -> None: ...


class QAbstractDataProxy(PySide6.QtCore.QObject):

    class DataType(enum.Enum):

        None_                     = ...  # 0x0
        Bar                       = ...  # 0x1
        Scatter                   = ...  # 0x2
        Surface                   = ...  # 0x3


    @property
    def type(self, /) -> PySide6.QtGraphs.QAbstractDataProxy.DataType: ...


class QAbstractSeries(PySide6.QtCore.QObject, PySide6.QtQml.QQmlParserStatus):

    hover                    : typing.ClassVar[Signal] = ... # hover(QString,QPointF,QPointF)
    hoverEnter               : typing.ClassVar[Signal] = ... # hoverEnter(QString,QPointF,QPointF)
    hoverExit                : typing.ClassVar[Signal] = ... # hoverExit(QString,QPointF)
    hoverableChanged         : typing.ClassVar[Signal] = ... # hoverableChanged()
    legendDataChanged        : typing.ClassVar[Signal] = ... # legendDataChanged()
    nameChanged              : typing.ClassVar[Signal] = ... # nameChanged()
    opacityChanged           : typing.ClassVar[Signal] = ... # opacityChanged()
    selectableChanged        : typing.ClassVar[Signal] = ... # selectableChanged()
    update                   : typing.ClassVar[Signal] = ... # update()
    valuesMultiplierChanged  : typing.ClassVar[Signal] = ... # valuesMultiplierChanged()
    visibleChanged           : typing.ClassVar[Signal] = ... # visibleChanged()

    class SeriesType(enum.Enum):

        Line                      = ...  # 0x0
        Area                      = ...  # 0x1
        Bar                       = ...  # 0x2
        Pie                       = ...  # 0x3
        Scatter                   = ...  # 0x4
        Spline                    = ...  # 0x5


    def classBegin(self, /) -> None: ...
    def componentComplete(self, /) -> None: ...
    def hasLoaded(self, /) -> bool: ...
    def hide(self, /) -> None: ...
    @property
    def hoverable(self, /) -> bool: ...
    @hoverable.setter
    def hoverable(self, newHoverable: bool, /) -> None: ...
    @property
    def legendData(self, /) -> typing.List[PySide6.QtGraphs.QLegendData]: ...
    @property
    def name(self, /) -> str: ...
    @name.setter
    def name(self, name: str, /) -> None: ...
    @property
    def opacity(self, /) -> float: ...
    @opacity.setter
    def opacity(self, opacity: float, /) -> None: ...
    @property
    def selectable(self, /) -> bool: ...
    @selectable.setter
    def selectable(self, selectable: bool, /) -> None: ...
    def show(self, /) -> None: ...
    @property
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...
    @property
    def valuesMultiplier(self, /) -> float: ...
    @valuesMultiplier.setter
    def valuesMultiplier(self, valuesMultiplier: float, /) -> None: ...
    @property
    def visible(self, /) -> bool: ...
    @visible.setter
    def visible(self, /, visible: bool = ...) -> None: ...


class QAreaSeries(PySide6.QtGraphs.QAbstractSeries):

    borderColorChanged       : typing.ClassVar[Signal] = ... # borderColorChanged(QColor)
    borderWidthChanged       : typing.ClassVar[Signal] = ... # borderWidthChanged()
    colorChanged             : typing.ClassVar[Signal] = ... # colorChanged(QColor)
    lowerSeriesChanged       : typing.ClassVar[Signal] = ... # lowerSeriesChanged()
    selectedBorderColorChanged: typing.ClassVar[Signal] = ... # selectedBorderColorChanged(QColor)
    selectedChanged          : typing.ClassVar[Signal] = ... # selectedChanged()
    selectedColorChanged     : typing.ClassVar[Signal] = ... # selectedColorChanged(QColor)
    upperSeriesChanged       : typing.ClassVar[Signal] = ... # upperSeriesChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, color: PySide6.QtGui.QColor | None = ..., selectedColor: PySide6.QtGui.QColor | None = ..., borderColor: PySide6.QtGui.QColor | None = ..., selectedBorderColor: PySide6.QtGui.QColor | None = ..., borderWidth: float | None = ..., selected: bool | None = ..., upperSeries: PySide6.QtCharts.QXYSeries | None = ..., lowerSeries: PySide6.QtCharts.QXYSeries | None = ...) -> None: ...

    @property
    def borderColor(self, /) -> PySide6.QtGui.QColor: ...
    @borderColor.setter
    def borderColor(self, newBorderColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def borderWidth(self, /) -> float: ...
    @borderWidth.setter
    def borderWidth(self, newBorderWidth: float, /) -> None: ...
    @property
    def color(self, /) -> PySide6.QtGui.QColor: ...
    @color.setter
    def color(self, newColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def lowerSeries(self, /) -> PySide6.QtGraphs.QXYSeries: ...
    @lowerSeries.setter
    def lowerSeries(self, newLowerSeries: PySide6.QtGraphs.QXYSeries, /) -> None: ...
    @property
    def selected(self, /) -> bool: ...
    @selected.setter
    def selected(self, newSelected: bool, /) -> None: ...
    @property
    def selectedBorderColor(self, /) -> PySide6.QtGui.QColor: ...
    @selectedBorderColor.setter
    def selectedBorderColor(self, newSelectedBorderColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def selectedColor(self, /) -> PySide6.QtGui.QColor: ...
    @selectedColor.setter
    def selectedColor(self, newColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...
    @property
    def upperSeries(self, /) -> PySide6.QtGraphs.QXYSeries: ...
    @upperSeries.setter
    def upperSeries(self, newUpperSeries: PySide6.QtGraphs.QXYSeries, /) -> None: ...


class QBar3DSeries(PySide6.QtGraphs.QAbstract3DSeries):

    columnLabelsChanged      : typing.ClassVar[Signal] = ... # columnLabelsChanged()
    dataArrayChanged         : typing.ClassVar[Signal] = ... # dataArrayChanged(QBarDataArray)
    dataProxyChanged         : typing.ClassVar[Signal] = ... # dataProxyChanged(QBarDataProxy*)
    meshAngleChanged         : typing.ClassVar[Signal] = ... # meshAngleChanged(float)
    rowColorsChanged         : typing.ClassVar[Signal] = ... # rowColorsChanged(QList<QColor>)
    rowLabelsChanged         : typing.ClassVar[Signal] = ... # rowLabelsChanged()
    selectedBarChanged       : typing.ClassVar[Signal] = ... # selectedBarChanged(QPoint)

    @typing.overload
    def __init__(self, dataProxy: PySide6.QtDataVisualization.QBarDataProxy, /, parent: PySide6.QtCore.QObject | None = ..., *, selectedBar: PySide6.QtCore.QPoint | None = ..., meshAngle: float | None = ..., rowColors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., rowLabels: collections.abc.Sequence[str] | None = ..., columnLabels: collections.abc.Sequence[str] | None = ..., dataArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, dataProxy: PySide6.QtDataVisualization.QBarDataProxy | None = ..., selectedBar: PySide6.QtCore.QPoint | None = ..., meshAngle: float | None = ..., rowColors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., rowLabels: collections.abc.Sequence[str] | None = ..., columnLabels: collections.abc.Sequence[str] | None = ..., dataArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]] | None = ...) -> None: ...

    def clearArray(self, /) -> None: ...
    def clearRow(self, rowIndex: int, /) -> None: ...
    @property
    def columnLabels(self, /) -> typing.List[str]: ...
    @columnLabels.setter
    def columnLabels(self, labels: collections.abc.Sequence[str], /) -> None: ...
    @property
    def dataArray(self, /) -> typing.List[typing.List[PySide6.QtGraphs.QBarDataItem]]: ...
    @dataArray.setter
    def dataArray(self, newDataArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], /) -> None: ...
    @property
    def dataProxy(self, /) -> PySide6.QtGraphs.QBarDataProxy: ...
    @dataProxy.setter
    def dataProxy(self, proxy: PySide6.QtGraphs.QBarDataProxy, /) -> None: ...
    @staticmethod
    def invalidSelectionPosition() -> PySide6.QtCore.QPoint: ...
    @property
    def meshAngle(self, /) -> float: ...
    @meshAngle.setter
    def meshAngle(self, angle: float, /) -> None: ...
    @property
    def rowColors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    @rowColors.setter
    def rowColors(self, colors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    @property
    def rowLabels(self, /) -> typing.List[str]: ...
    @rowLabels.setter
    def rowLabels(self, labels: collections.abc.Sequence[str], /) -> None: ...
    @property
    def selectedBar(self, /) -> PySide6.QtCore.QPoint: ...
    @selectedBar.setter
    def selectedBar(self, position: PySide6.QtCore.QPoint, /) -> None: ...


class QBarCategoryAxis(PySide6.QtGraphs.QAbstractAxis):

    categoriesChanged        : typing.ClassVar[Signal] = ... # categoriesChanged()
    categoryRangeChanged     : typing.ClassVar[Signal] = ... # categoryRangeChanged(QString,QString)
    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    maxChanged               : typing.ClassVar[Signal] = ... # maxChanged(QString)
    minChanged               : typing.ClassVar[Signal] = ... # minChanged(QString)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, categories: collections.abc.Sequence[str] | None = ..., min: str | None = ..., max: str | None = ..., count: int | None = ...) -> None: ...

    @typing.overload
    def append(self, category: str, /) -> None: ...
    @typing.overload
    def append(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def at(self, index: int, /) -> str: ...
    @property
    def categories(self, /) -> typing.List[str]: ...
    @categories.setter
    def categories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def clear(self, /) -> None: ...
    @property
    def count(self, /) -> int: ...
    def insert(self, index: int, category: str, /) -> None: ...
    @property
    def max(self, /) -> str: ...
    @max.setter
    def max(self, maxCategory: str, /) -> None: ...
    @property
    def min(self, /) -> str: ...
    @min.setter
    def min(self, minCategory: str, /) -> None: ...
    @typing.overload
    def remove(self, category: str, /) -> None: ...
    @typing.overload
    def remove(self, index: int, /) -> None: ...
    def replace(self, oldCategory: str, newCategory: str, /) -> None: ...
    def setRange(self, minCategory: str, maxCategory: str, /) -> None: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractAxis.AxisType: ...


class QBarDataItem(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QBarDataItem: PySide6.QtGraphs.QBarDataItem, /) -> None: ...
    @typing.overload
    def __init__(self, value: float, /) -> None: ...
    @typing.overload
    def __init__(self, value: float, angle: float, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def rotation(self, /) -> float: ...
    def setRotation(self, angle: float, /) -> None: ...
    def setValue(self, val: float, /) -> None: ...
    def value(self, /) -> float: ...


class QBarDataProxy(PySide6.QtGraphs.QAbstractDataProxy):

    arrayReset               : typing.ClassVar[Signal] = ... # arrayReset()
    colCountChanged          : typing.ClassVar[Signal] = ... # colCountChanged(qsizetype)
    itemChanged              : typing.ClassVar[Signal] = ... # itemChanged(qsizetype,qsizetype)
    rowCountChanged          : typing.ClassVar[Signal] = ... # rowCountChanged(qsizetype)
    rowsAdded                : typing.ClassVar[Signal] = ... # rowsAdded(qsizetype,qsizetype)
    rowsChanged              : typing.ClassVar[Signal] = ... # rowsChanged(qsizetype,qsizetype)
    rowsInserted             : typing.ClassVar[Signal] = ... # rowsInserted(qsizetype,qsizetype)
    rowsRemoved              : typing.ClassVar[Signal] = ... # rowsRemoved(qsizetype,qsizetype)
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged(QBar3DSeries*)

    class RemoveLabels(enum.Enum):

        No                        = ...  # 0x0
        Yes                       = ...  # 0x1


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, rowCount: int | None = ..., colCount: int | None = ..., series: PySide6.QtDataVisualization.QBar3DSeries | None = ...) -> None: ...

    @typing.overload
    def addRow(self, row: collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem], /) -> int: ...
    @typing.overload
    def addRow(self, row: collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem], label: str, /) -> int: ...
    @typing.overload
    def addRows(self, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], /) -> int: ...
    @typing.overload
    def addRows(self, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], labels: collections.abc.Sequence[str], /) -> int: ...
    @property
    def colCount(self, /) -> int: ...
    @typing.overload
    def insertRow(self, rowIndex: int, row: collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem], /) -> None: ...
    @typing.overload
    def insertRow(self, rowIndex: int, row: collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem], label: str, /) -> None: ...
    @typing.overload
    def insertRows(self, rowIndex: int, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], /) -> None: ...
    @typing.overload
    def insertRows(self, rowIndex: int, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], labels: collections.abc.Sequence[str], /) -> None: ...
    @typing.overload
    def itemAt(self, position: PySide6.QtCore.QPoint, /) -> PySide6.QtGraphs.QBarDataItem: ...
    @typing.overload
    def itemAt(self, rowIndex: int, columnIndex: int, /) -> PySide6.QtGraphs.QBarDataItem: ...
    def removeRows(self, rowIndex: int, removeCount: int, /, removeLabels: PySide6.QtGraphs.QBarDataProxy.RemoveLabels = ...) -> None: ...
    @typing.overload
    def resetArray(self, /) -> None: ...
    @typing.overload
    def resetArray(self, newArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], /) -> None: ...
    @typing.overload
    def resetArray(self, newArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], rowLabels: collections.abc.Sequence[str], columnLabels: collections.abc.Sequence[str], /) -> None: ...
    def rowAt(self, rowIndex: int, /) -> typing.List[PySide6.QtGraphs.QBarDataItem]: ...
    @property
    def rowCount(self, /) -> int: ...
    @property
    def series(self, /) -> PySide6.QtGraphs.QBar3DSeries: ...
    @typing.overload
    def setItem(self, position: PySide6.QtCore.QPoint, item: PySide6.QtGraphs.QBarDataItem, /) -> None: ...
    @typing.overload
    def setItem(self, rowIndex: int, columnIndex: int, item: PySide6.QtGraphs.QBarDataItem, /) -> None: ...
    @typing.overload
    def setRow(self, rowIndex: int, row: collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem], /) -> None: ...
    @typing.overload
    def setRow(self, rowIndex: int, row: collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem], label: str, /) -> None: ...
    @typing.overload
    def setRows(self, rowIndex: int, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], /) -> None: ...
    @typing.overload
    def setRows(self, rowIndex: int, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], labels: collections.abc.Sequence[str], /) -> None: ...


class QBarModelMapper(PySide6.QtCore.QObject):

    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    firstBarSetSectionChanged: typing.ClassVar[Signal] = ... # firstBarSetSectionChanged()
    firstChanged             : typing.ClassVar[Signal] = ... # firstChanged()
    lastBarSetSectionChanged : typing.ClassVar[Signal] = ... # lastBarSetSectionChanged()
    modelChanged             : typing.ClassVar[Signal] = ... # modelChanged()
    orientationChanged       : typing.ClassVar[Signal] = ... # orientationChanged()
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, series: PySide6.QtGraphs.QBarSeries | None = ..., model: PySide6.QtCore.QAbstractItemModel | None = ..., firstBarSetSection: int | None = ..., lastBarSetSection: int | None = ..., first: int | None = ..., count: int | None = ..., orientation: PySide6.QtCore.Qt.Orientation | None = ...) -> None: ...

    @property
    def count(self, /) -> int: ...
    @count.setter
    def count(self, newCount: int, /) -> None: ...
    @property
    def first(self, /) -> int: ...
    @first.setter
    def first(self, newFirst: int, /) -> None: ...
    @property
    def firstBarSetSection(self, /) -> int: ...
    @firstBarSetSection.setter
    def firstBarSetSection(self, newFirstBarSetSection: int, /) -> None: ...
    @property
    def lastBarSetSection(self, /) -> int: ...
    @lastBarSetSection.setter
    def lastBarSetSection(self, newLastBarSetSection: int, /) -> None: ...
    @property
    def model(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    @model.setter
    def model(self, model: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    @property
    def orientation(self, /) -> PySide6.QtCore.Qt.Orientation: ...
    @orientation.setter
    def orientation(self, orientation: PySide6.QtCore.Qt.Orientation, /) -> None: ...
    @property
    def series(self, /) -> PySide6.QtGraphs.QBarSeries: ...
    @series.setter
    def series(self, series: PySide6.QtGraphs.QBarSeries, /) -> None: ...


class QBarSeries(PySide6.QtGraphs.QAbstractSeries):

    barDelegateChanged       : typing.ClassVar[Signal] = ... # barDelegateChanged()
    barSetsChanged           : typing.ClassVar[Signal] = ... # barSetsChanged()
    barWidthChanged          : typing.ClassVar[Signal] = ... # barWidthChanged()
    barsTypeChanged          : typing.ClassVar[Signal] = ... # barsTypeChanged(QBarSeries::BarsType)
    barsetsAdded             : typing.ClassVar[Signal] = ... # barsetsAdded(QList<QBarSet*>)
    barsetsRemoved           : typing.ClassVar[Signal] = ... # barsetsRemoved(QList<QBarSet*>)
    barsetsReplaced          : typing.ClassVar[Signal] = ... # barsetsReplaced(QList<QBarSet*>)
    borderColorsChanged      : typing.ClassVar[Signal] = ... # borderColorsChanged()
    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    labelsAngleChanged       : typing.ClassVar[Signal] = ... # labelsAngleChanged(double)
    labelsFormatChanged      : typing.ClassVar[Signal] = ... # labelsFormatChanged(QString)
    labelsMarginChanged      : typing.ClassVar[Signal] = ... # labelsMarginChanged(double)
    labelsPositionChanged    : typing.ClassVar[Signal] = ... # labelsPositionChanged(QBarSeries::LabelsPosition)
    labelsPrecisionChanged   : typing.ClassVar[Signal] = ... # labelsPrecisionChanged(int)
    labelsVisibleChanged     : typing.ClassVar[Signal] = ... # labelsVisibleChanged(bool)
    seriesColorsChanged      : typing.ClassVar[Signal] = ... # seriesColorsChanged()
    setValueAdded            : typing.ClassVar[Signal] = ... # setValueAdded(qsizetype,qsizetype,QBarSet*)
    setValueChanged          : typing.ClassVar[Signal] = ... # setValueChanged(qsizetype,QBarSet*)
    setValueRemoved          : typing.ClassVar[Signal] = ... # setValueRemoved(qsizetype,qsizetype,QBarSet*)
    updatedBars              : typing.ClassVar[Signal] = ... # updatedBars()

    class BarsType(enum.Enum):

        Groups                    = ...  # 0x0
        Stacked                   = ...  # 0x1
        StackedPercent            = ...  # 0x2

    class LabelsPosition(enum.Enum):

        Center                    = ...  # 0x0
        InsideEnd                 = ...  # 0x1
        InsideBase                = ...  # 0x2
        OutsideEnd                = ...  # 0x3


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, seriesColors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., borderColors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., barsType: PySide6.QtGraphs.QBarSeries.BarsType | None = ..., barWidth: float | None = ..., count: int | None = ..., labelsVisible: bool | None = ..., labelsFormat: str | None = ..., labelsPosition: PySide6.QtGraphs.QBarSeries.LabelsPosition | None = ..., labelsMargin: float | None = ..., labelsAngle: float | None = ..., labelsPrecision: int | None = ..., barDelegate: PySide6.QtQml.QQmlComponent | None = ..., barSets: collections.abc.Sequence[PySide6.QtGraphs.QBarSet] | None = ...) -> None: ...

    @typing.overload
    def append(self, set: PySide6.QtGraphs.QBarSet, /) -> bool: ...
    @typing.overload
    def append(self, sets: collections.abc.Sequence[PySide6.QtGraphs.QBarSet], /) -> bool: ...
    def at(self, index: int, /) -> PySide6.QtGraphs.QBarSet: ...
    @property
    def barDelegate(self, /) -> PySide6.QtQml.QQmlComponent: ...
    @barDelegate.setter
    def barDelegate(self, newBarDelegate: PySide6.QtQml.QQmlComponent, /) -> None: ...
    @property
    def barSets(self, /) -> typing.List[PySide6.QtGraphs.QBarSet]: ...
    @property
    def barWidth(self, /) -> float: ...
    @barWidth.setter
    def barWidth(self, width: float, /) -> None: ...
    @property
    def barsType(self, /) -> PySide6.QtGraphs.QBarSeries.BarsType: ...
    @barsType.setter
    def barsType(self, type: PySide6.QtGraphs.QBarSeries.BarsType, /) -> None: ...
    @property
    def borderColors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    @borderColors.setter
    def borderColors(self, newBorderColors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    def clear(self, /) -> None: ...
    def componentComplete(self, /) -> None: ...
    @property
    def count(self, /) -> int: ...
    def deselectAll(self, /) -> None: ...
    def find(self, set: PySide6.QtGraphs.QBarSet, /) -> int: ...
    def insert(self, index: int, set: PySide6.QtGraphs.QBarSet, /) -> bool: ...
    @property
    def labelsAngle(self, /) -> float: ...
    @labelsAngle.setter
    def labelsAngle(self, angle: float, /) -> None: ...
    @property
    def labelsFormat(self, /) -> str: ...
    @labelsFormat.setter
    def labelsFormat(self, format: str, /) -> None: ...
    @property
    def labelsMargin(self, /) -> float: ...
    @labelsMargin.setter
    def labelsMargin(self, margin: float, /) -> None: ...
    @property
    def labelsPosition(self, /) -> PySide6.QtGraphs.QBarSeries.LabelsPosition: ...
    @labelsPosition.setter
    def labelsPosition(self, position: PySide6.QtGraphs.QBarSeries.LabelsPosition, /) -> None: ...
    @property
    def labelsPrecision(self, /) -> int: ...
    @labelsPrecision.setter
    def labelsPrecision(self, precision: int, /) -> None: ...
    @property
    def labelsVisible(self, /) -> bool: ...
    @labelsVisible.setter
    def labelsVisible(self, /, visible: bool = ...) -> None: ...
    @typing.overload
    def remove(self, set: PySide6.QtGraphs.QBarSet, /) -> bool: ...
    @typing.overload
    def remove(self, index: int, /) -> bool: ...
    def removeMultiple(self, index: int, count: int, /) -> None: ...
    @typing.overload
    def replace(self, oldValue: PySide6.QtGraphs.QBarSet, newValue: PySide6.QtGraphs.QBarSet, /) -> bool: ...
    @typing.overload
    def replace(self, sets: collections.abc.Sequence[PySide6.QtGraphs.QBarSet], /) -> bool: ...
    @typing.overload
    def replace(self, index: int, set: PySide6.QtGraphs.QBarSet, /) -> None: ...
    def selectAll(self, /) -> None: ...
    @property
    def seriesColors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    @seriesColors.setter
    def seriesColors(self, newSeriesColors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    def take(self, set: PySide6.QtGraphs.QBarSet, /) -> bool: ...
    @property
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...


class QBarSet(PySide6.QtCore.QObject):

    borderColorChanged       : typing.ClassVar[Signal] = ... # borderColorChanged(QColor)
    borderWidthChanged       : typing.ClassVar[Signal] = ... # borderWidthChanged(double)
    colorChanged             : typing.ClassVar[Signal] = ... # colorChanged(QColor)
    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    labelChanged             : typing.ClassVar[Signal] = ... # labelChanged()
    labelColorChanged        : typing.ClassVar[Signal] = ... # labelColorChanged(QColor)
    selectedBarsChanged      : typing.ClassVar[Signal] = ... # selectedBarsChanged(QList<qsizetype>)
    selectedColorChanged     : typing.ClassVar[Signal] = ... # selectedColorChanged(QColor)
    update                   : typing.ClassVar[Signal] = ... # update()
    updatedBars              : typing.ClassVar[Signal] = ... # updatedBars()
    valueAdded               : typing.ClassVar[Signal] = ... # valueAdded(qsizetype,qsizetype)
    valueChanged             : typing.ClassVar[Signal] = ... # valueChanged(qsizetype)
    valueRemoved             : typing.ClassVar[Signal] = ... # valueRemoved(qsizetype,qsizetype)
    valuesAdded              : typing.ClassVar[Signal] = ... # valuesAdded(qsizetype,qsizetype)
    valuesChanged            : typing.ClassVar[Signal] = ... # valuesChanged()
    valuesRemoved            : typing.ClassVar[Signal] = ... # valuesRemoved(qsizetype,qsizetype)

    @typing.overload
    def __init__(self, label: str, /, parent: PySide6.QtCore.QObject | None = ..., *, color: PySide6.QtGui.QColor | None = ..., selectedColor: PySide6.QtGui.QColor | None = ..., borderColor: PySide6.QtGui.QColor | None = ..., labelColor: PySide6.QtGui.QColor | None = ..., values: collections.abc.Sequence[typing.Any] | None = ..., borderWidth: float | None = ..., count: int | None = ..., selectedBars: collections.abc.Sequence[int] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, label: str | None = ..., color: PySide6.QtGui.QColor | None = ..., selectedColor: PySide6.QtGui.QColor | None = ..., borderColor: PySide6.QtGui.QColor | None = ..., labelColor: PySide6.QtGui.QColor | None = ..., values: collections.abc.Sequence[typing.Any] | None = ..., borderWidth: float | None = ..., count: int | None = ..., selectedBars: collections.abc.Sequence[int] | None = ...) -> None: ...

    def __lshift__(self, value: float, /) -> PySide6.QtGraphs.QBarSet: ...
    @typing.overload
    def append(self, values: collections.abc.Sequence[float], /) -> None: ...
    @typing.overload
    def append(self, value: float, /) -> None: ...
    def at(self, index: int, /) -> float: ...
    @property
    def borderColor(self, /) -> PySide6.QtGui.QColor: ...
    @borderColor.setter
    def borderColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def borderWidth(self, /) -> float: ...
    @borderWidth.setter
    def borderWidth(self, borderWidth: float, /) -> None: ...
    def clear(self, /) -> None: ...
    @property
    def color(self, /) -> PySide6.QtGui.QColor: ...
    @color.setter
    def color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def count(self, /) -> int: ...
    def deselectAllBars(self, /) -> None: ...
    def deselectBar(self, index: int, /) -> None: ...
    def deselectBars(self, indexes: collections.abc.Sequence[int], /) -> None: ...
    def insert(self, index: int, value: float, /) -> None: ...
    def isBarSelected(self, index: int, /) -> bool: ...
    @property
    def label(self, /) -> str: ...
    @label.setter
    def label(self, label: str, /) -> None: ...
    @property
    def labelColor(self, /) -> PySide6.QtGui.QColor: ...
    @labelColor.setter
    def labelColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def remove(self, index: int, /, count: int = ...) -> None: ...
    def replace(self, index: int, value: float, /) -> None: ...
    def selectAllBars(self, /) -> None: ...
    def selectBar(self, index: int, /) -> None: ...
    def selectBars(self, indexes: collections.abc.Sequence[int], /) -> None: ...
    @property
    def selectedBars(self, /) -> typing.List[int]: ...
    @property
    def selectedColor(self, /) -> PySide6.QtGui.QColor: ...
    @selectedColor.setter
    def selectedColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def setBarSelected(self, index: int, selected: bool, /) -> None: ...
    def sum(self, /) -> float: ...
    def toggleSelection(self, indexes: collections.abc.Sequence[int], /) -> None: ...
    @property
    def values(self, /) -> typing.List[typing.Any]: ...
    @values.setter
    def values(self, values: collections.abc.Sequence[typing.Any], /) -> None: ...


class QCategory3DAxis(PySide6.QtGraphs.QAbstract3DAxis):

    columnLabelsChanged      : typing.ClassVar[Signal] = ... # columnLabelsChanged()
    rowLabelsChanged         : typing.ClassVar[Signal] = ... # rowLabelsChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, labels: collections.abc.Sequence[str] | None = ...) -> None: ...

    @property
    def labels(self, /) -> typing.List[str]: ...
    @labels.setter
    def labels(self, labels: collections.abc.Sequence[str], /) -> None: ...


class QCustom3DItem(PySide6.QtCore.QObject):

    meshFileChanged          : typing.ClassVar[Signal] = ... # meshFileChanged(QString)
    needUpdate               : typing.ClassVar[Signal] = ... # needUpdate()
    positionAbsoluteChanged  : typing.ClassVar[Signal] = ... # positionAbsoluteChanged(bool)
    positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(QVector3D)
    rotationChanged          : typing.ClassVar[Signal] = ... # rotationChanged(QQuaternion)
    scalingAbsoluteChanged   : typing.ClassVar[Signal] = ... # scalingAbsoluteChanged(bool)
    scalingChanged           : typing.ClassVar[Signal] = ... # scalingChanged(QVector3D)
    shadowCastingChanged     : typing.ClassVar[Signal] = ... # shadowCastingChanged(bool)
    textureFileChanged       : typing.ClassVar[Signal] = ... # textureFileChanged(QString)
    visibleChanged           : typing.ClassVar[Signal] = ... # visibleChanged(bool)

    @typing.overload
    def __init__(self, meshFile: str, position: PySide6.QtGui.QVector3D, scaling: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, texture: PySide6.QtGui.QImage, /, parent: PySide6.QtCore.QObject | None = ..., *, textureFile: str | None = ..., positionAbsolute: bool | None = ..., visible: bool | None = ..., shadowCasting: bool | None = ..., scalingAbsolute: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, meshFile: str | None = ..., textureFile: str | None = ..., position: PySide6.QtGui.QVector3D | None = ..., positionAbsolute: bool | None = ..., scaling: PySide6.QtGui.QVector3D | None = ..., rotation: PySide6.QtGui.QQuaternion | None = ..., visible: bool | None = ..., shadowCasting: bool | None = ..., scalingAbsolute: bool | None = ...) -> None: ...

    @property
    def meshFile(self, /) -> str: ...
    @meshFile.setter
    def meshFile(self, meshFile: str, /) -> None: ...
    @property
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    @position.setter
    def position(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    @property
    def positionAbsolute(self, /) -> bool: ...
    @positionAbsolute.setter
    def positionAbsolute(self, positionAbsolute: bool, /) -> None: ...
    @property
    def rotation(self, /) -> PySide6.QtGui.QQuaternion: ...
    @rotation.setter
    def rotation(self, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...
    @property
    def scaling(self, /) -> PySide6.QtGui.QVector3D: ...
    @scaling.setter
    def scaling(self, scaling: PySide6.QtGui.QVector3D, /) -> None: ...
    @property
    def scalingAbsolute(self, /) -> bool: ...
    @scalingAbsolute.setter
    def scalingAbsolute(self, scalingAbsolute: bool, /) -> None: ...
    def setRotationAxisAndAngle(self, axis: PySide6.QtGui.QVector3D, angle: float, /) -> None: ...
    def setTextureImage(self, textureImage: PySide6.QtGui.QImage, /) -> None: ...
    @property
    def shadowCasting(self, /) -> bool: ...
    @shadowCasting.setter
    def shadowCasting(self, enabled: bool, /) -> None: ...
    @property
    def textureFile(self, /) -> str: ...
    @textureFile.setter
    def textureFile(self, textureFile: str, /) -> None: ...
    @property
    def visible(self, /) -> bool: ...
    @visible.setter
    def visible(self, visible: bool, /) -> None: ...


class QCustom3DLabel(PySide6.QtGraphs.QCustom3DItem):

    backgroundColorChanged   : typing.ClassVar[Signal] = ... # backgroundColorChanged(QColor)
    backgroundVisibleChanged : typing.ClassVar[Signal] = ... # backgroundVisibleChanged(bool)
    borderVisibleChanged     : typing.ClassVar[Signal] = ... # borderVisibleChanged(bool)
    facingCameraChanged      : typing.ClassVar[Signal] = ... # facingCameraChanged(bool)
    fontChanged              : typing.ClassVar[Signal] = ... # fontChanged(QFont)
    textChanged              : typing.ClassVar[Signal] = ... # textChanged(QString)
    textColorChanged         : typing.ClassVar[Signal] = ... # textColorChanged(QColor)

    @typing.overload
    def __init__(self, text: str, font: PySide6.QtGui.QFont, position: PySide6.QtGui.QVector3D, scaling: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, /, parent: PySide6.QtCore.QObject | None = ..., *, textColor: PySide6.QtGui.QColor | None = ..., backgroundColor: PySide6.QtGui.QColor | None = ..., borderVisible: bool | None = ..., backgroundVisible: bool | None = ..., facingCamera: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, text: str | None = ..., font: PySide6.QtGui.QFont | None = ..., textColor: PySide6.QtGui.QColor | None = ..., backgroundColor: PySide6.QtGui.QColor | None = ..., borderVisible: bool | None = ..., backgroundVisible: bool | None = ..., facingCamera: bool | None = ...) -> None: ...

    @property
    def backgroundColor(self, /) -> PySide6.QtGui.QColor: ...
    @backgroundColor.setter
    def backgroundColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def backgroundVisible(self, /) -> bool: ...
    @backgroundVisible.setter
    def backgroundVisible(self, visible: bool, /) -> None: ...
    @property
    def borderVisible(self, /) -> bool: ...
    @borderVisible.setter
    def borderVisible(self, visible: bool, /) -> None: ...
    @property
    def facingCamera(self, /) -> bool: ...
    @facingCamera.setter
    def facingCamera(self, enabled: bool, /) -> None: ...
    @property
    def font(self, /) -> PySide6.QtGui.QFont: ...
    @font.setter
    def font(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    @property
    def text(self, /) -> str: ...
    @text.setter
    def text(self, text: str, /) -> None: ...
    @property
    def textColor(self, /) -> PySide6.QtGui.QColor: ...
    @textColor.setter
    def textColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...


class QCustom3DVolume(PySide6.QtGraphs.QCustom3DItem):

    alphaMultiplierChanged   : typing.ClassVar[Signal] = ... # alphaMultiplierChanged(float)
    colorTableChanged        : typing.ClassVar[Signal] = ... # colorTableChanged()
    drawSliceFramesChanged   : typing.ClassVar[Signal] = ... # drawSliceFramesChanged(bool)
    drawSlicesChanged        : typing.ClassVar[Signal] = ... # drawSlicesChanged(bool)
    preserveOpacityChanged   : typing.ClassVar[Signal] = ... # preserveOpacityChanged(bool)
    sliceFrameColorChanged   : typing.ClassVar[Signal] = ... # sliceFrameColorChanged(QColor)
    sliceFrameGapsChanged    : typing.ClassVar[Signal] = ... # sliceFrameGapsChanged(QVector3D)
    sliceFrameThicknessesChanged: typing.ClassVar[Signal] = ... # sliceFrameThicknessesChanged(QVector3D)
    sliceFrameWidthsChanged  : typing.ClassVar[Signal] = ... # sliceFrameWidthsChanged(QVector3D)
    sliceIndexXChanged       : typing.ClassVar[Signal] = ... # sliceIndexXChanged(int)
    sliceIndexYChanged       : typing.ClassVar[Signal] = ... # sliceIndexYChanged(int)
    sliceIndexZChanged       : typing.ClassVar[Signal] = ... # sliceIndexZChanged(int)
    textureDataChanged       : typing.ClassVar[Signal] = ... # textureDataChanged(QList<uchar>*)
    textureDepthChanged      : typing.ClassVar[Signal] = ... # textureDepthChanged(int)
    textureFormatChanged     : typing.ClassVar[Signal] = ... # textureFormatChanged(QImage::Format)
    textureHeightChanged     : typing.ClassVar[Signal] = ... # textureHeightChanged(int)
    textureWidthChanged      : typing.ClassVar[Signal] = ... # textureWidthChanged(int)
    useHighDefShaderChanged  : typing.ClassVar[Signal] = ... # useHighDefShaderChanged(bool)

    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, scaling: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, textureWidth: int, textureHeight: int, textureDepth: int, textureData: collections.abc.Sequence[int], textureFormat: PySide6.QtGui.QImage.Format, colorTable: collections.abc.Sequence[int], /, parent: PySide6.QtCore.QObject | None = ..., *, sliceIndexX: int | None = ..., sliceIndexY: int | None = ..., sliceIndexZ: int | None = ..., alphaMultiplier: float | None = ..., preserveOpacity: bool | None = ..., useHighDefShader: bool | None = ..., drawSlices: bool | None = ..., drawSliceFrames: bool | None = ..., sliceFrameColor: PySide6.QtGui.QColor | None = ..., sliceFrameWidths: PySide6.QtGui.QVector3D | None = ..., sliceFrameGaps: PySide6.QtGui.QVector3D | None = ..., sliceFrameThicknesses: PySide6.QtGui.QVector3D | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, textureWidth: int | None = ..., textureHeight: int | None = ..., textureDepth: int | None = ..., sliceIndexX: int | None = ..., sliceIndexY: int | None = ..., sliceIndexZ: int | None = ..., colorTable: collections.abc.Sequence[int] | None = ..., textureData: collections.abc.Sequence[int] | None = ..., alphaMultiplier: float | None = ..., preserveOpacity: bool | None = ..., useHighDefShader: bool | None = ..., drawSlices: bool | None = ..., drawSliceFrames: bool | None = ..., sliceFrameColor: PySide6.QtGui.QColor | None = ..., sliceFrameWidths: PySide6.QtGui.QVector3D | None = ..., sliceFrameGaps: PySide6.QtGui.QVector3D | None = ..., sliceFrameThicknesses: PySide6.QtGui.QVector3D | None = ...) -> None: ...

    @property
    def alphaMultiplier(self, /) -> float: ...
    @alphaMultiplier.setter
    def alphaMultiplier(self, mult: float, /) -> None: ...
    @property
    def colorTable(self, /) -> typing.List[int]: ...
    @colorTable.setter
    def colorTable(self, colors: collections.abc.Sequence[int], /) -> None: ...
    def createTextureData(self, images: collections.abc.Sequence[PySide6.QtGui.QImage], /) -> typing.List[int]: ...
    @property
    def drawSliceFrames(self, /) -> bool: ...
    @drawSliceFrames.setter
    def drawSliceFrames(self, enable: bool, /) -> None: ...
    @property
    def drawSlices(self, /) -> bool: ...
    @drawSlices.setter
    def drawSlices(self, enable: bool, /) -> None: ...
    @property
    def preserveOpacity(self, /) -> bool: ...
    @preserveOpacity.setter
    def preserveOpacity(self, enable: bool, /) -> None: ...
    def renderSlice(self, axis: PySide6.QtCore.Qt.Axis, index: int, /) -> PySide6.QtGui.QImage: ...
    def setSliceIndices(self, x: int, y: int, z: int, /) -> None: ...
    @typing.overload
    def setSubTextureData(self, axis: PySide6.QtCore.Qt.Axis, index: int, image: PySide6.QtGui.QImage, /) -> None: ...
    @typing.overload
    def setSubTextureData(self, axis: PySide6.QtCore.Qt.Axis, index: int, data: bytes | bytearray | memoryview, /) -> None: ...
    def setTextureDimensions(self, width: int, height: int, depth: int, /) -> None: ...
    def setTextureFormat(self, format: PySide6.QtGui.QImage.Format, /) -> None: ...
    @property
    def sliceFrameColor(self, /) -> PySide6.QtGui.QColor: ...
    @sliceFrameColor.setter
    def sliceFrameColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def sliceFrameGaps(self, /) -> PySide6.QtGui.QVector3D: ...
    @sliceFrameGaps.setter
    def sliceFrameGaps(self, values: PySide6.QtGui.QVector3D, /) -> None: ...
    @property
    def sliceFrameThicknesses(self, /) -> PySide6.QtGui.QVector3D: ...
    @sliceFrameThicknesses.setter
    def sliceFrameThicknesses(self, values: PySide6.QtGui.QVector3D, /) -> None: ...
    @property
    def sliceFrameWidths(self, /) -> PySide6.QtGui.QVector3D: ...
    @sliceFrameWidths.setter
    def sliceFrameWidths(self, values: PySide6.QtGui.QVector3D, /) -> None: ...
    @property
    def sliceIndexX(self, /) -> int: ...
    @sliceIndexX.setter
    def sliceIndexX(self, value: int, /) -> None: ...
    @property
    def sliceIndexY(self, /) -> int: ...
    @sliceIndexY.setter
    def sliceIndexY(self, value: int, /) -> None: ...
    @property
    def sliceIndexZ(self, /) -> int: ...
    @sliceIndexZ.setter
    def sliceIndexZ(self, value: int, /) -> None: ...
    @property
    def textureData(self, /) -> typing.List[int]: ...
    @textureData.setter
    def textureData(self, arg__1: collections.abc.Sequence[int], /) -> None: ...
    def textureDataWidth(self, /) -> int: ...
    @property
    def textureDepth(self, /) -> int: ...
    @textureDepth.setter
    def textureDepth(self, value: int, /) -> None: ...
    def textureFormat(self, /) -> PySide6.QtGui.QImage.Format: ...
    @property
    def textureHeight(self, /) -> int: ...
    @textureHeight.setter
    def textureHeight(self, value: int, /) -> None: ...
    @property
    def textureWidth(self, /) -> int: ...
    @textureWidth.setter
    def textureWidth(self, value: int, /) -> None: ...
    @property
    def useHighDefShader(self, /) -> bool: ...
    @useHighDefShader.setter
    def useHighDefShader(self, enable: bool, /) -> None: ...


class QDateTimeAxis(PySide6.QtGraphs.QAbstractAxis):

    labelFormatChanged       : typing.ClassVar[Signal] = ... # labelFormatChanged(QString)
    maxChanged               : typing.ClassVar[Signal] = ... # maxChanged(QDateTime)
    minChanged               : typing.ClassVar[Signal] = ... # minChanged(QDateTime)
    subTickCountChanged      : typing.ClassVar[Signal] = ... # subTickCountChanged()
    tickIntervalChanged      : typing.ClassVar[Signal] = ... # tickIntervalChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, min: PySide6.QtCore.QDateTime | None = ..., max: PySide6.QtCore.QDateTime | None = ..., labelFormat: str | None = ..., subTickCount: int | None = ..., tickInterval: float | None = ...) -> None: ...

    @property
    def labelFormat(self, /) -> str: ...
    @labelFormat.setter
    def labelFormat(self, format: str, /) -> None: ...
    @property
    def max(self, /) -> PySide6.QtCore.QDateTime: ...
    @max.setter
    def max(self, max: PySide6.QtCore.QDateTime, /) -> None: ...
    @property
    def min(self, /) -> PySide6.QtCore.QDateTime: ...
    @min.setter
    def min(self, min: PySide6.QtCore.QDateTime, /) -> None: ...
    @property
    def subTickCount(self, /) -> int: ...
    @subTickCount.setter
    def subTickCount(self, newSubTickCount: int, /) -> None: ...
    @property
    def tickInterval(self, /) -> float: ...
    @tickInterval.setter
    def tickInterval(self, newTickInterval: float, /) -> None: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractAxis.AxisType: ...


class QGraphsLine(Shiboken.Object):

    @typing.overload
    def __init__(self, other: PySide6.QtGraphs.QGraphsLine, /, *, mainColor: PySide6.QtGui.QColor | None = ..., subColor: PySide6.QtGui.QColor | None = ..., mainWidth: float | None = ..., subWidth: float | None = ..., labelTextColor: PySide6.QtGui.QColor | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, mainColor: PySide6.QtGui.QColor | None = ..., subColor: PySide6.QtGui.QColor | None = ..., mainWidth: float | None = ..., subWidth: float | None = ..., labelTextColor: PySide6.QtGui.QColor | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtGraphs.QGraphsLine, /) -> bool: ...
    def __ne__(self, rhs: PySide6.QtGraphs.QGraphsLine, /) -> bool: ...
    @property
    def labelTextColor(self, /) -> PySide6.QtGui.QColor: ...
    @labelTextColor.setter
    def labelTextColor(self, newColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def mainColor(self, /) -> PySide6.QtGui.QColor: ...
    @mainColor.setter
    def mainColor(self, newColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def mainWidth(self, /) -> float: ...
    @mainWidth.setter
    def mainWidth(self, newWidth: float, /) -> None: ...
    @property
    def subColor(self, /) -> PySide6.QtGui.QColor: ...
    @subColor.setter
    def subColor(self, newColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def subWidth(self, /) -> float: ...
    @subWidth.setter
    def subWidth(self, newWidth: float, /) -> None: ...


class QGraphsTheme(PySide6.QtCore.QObject, PySide6.QtQml.QQmlParserStatus):

    axisXChanged             : typing.ClassVar[Signal] = ... # axisXChanged()
    axisXLabelFontChanged    : typing.ClassVar[Signal] = ... # axisXLabelFontChanged()
    axisYChanged             : typing.ClassVar[Signal] = ... # axisYChanged()
    axisYLabelFontChanged    : typing.ClassVar[Signal] = ... # axisYLabelFontChanged()
    axisZChanged             : typing.ClassVar[Signal] = ... # axisZChanged()
    axisZLabelFontChanged    : typing.ClassVar[Signal] = ... # axisZLabelFontChanged()
    backgroundColorChanged   : typing.ClassVar[Signal] = ... # backgroundColorChanged()
    backgroundVisibleChanged : typing.ClassVar[Signal] = ... # backgroundVisibleChanged()
    borderColorsChanged      : typing.ClassVar[Signal] = ... # borderColorsChanged()
    borderWidthChanged       : typing.ClassVar[Signal] = ... # borderWidthChanged()
    colorSchemeChanged       : typing.ClassVar[Signal] = ... # colorSchemeChanged()
    colorStyleChanged        : typing.ClassVar[Signal] = ... # colorStyleChanged(QGraphsTheme::ColorStyle)
    gridChanged              : typing.ClassVar[Signal] = ... # gridChanged()
    gridVisibleChanged       : typing.ClassVar[Signal] = ... # gridVisibleChanged()
    labelBackgroundColorChanged: typing.ClassVar[Signal] = ... # labelBackgroundColorChanged()
    labelBackgroundVisibleChanged: typing.ClassVar[Signal] = ... # labelBackgroundVisibleChanged()
    labelBorderVisibleChanged: typing.ClassVar[Signal] = ... # labelBorderVisibleChanged()
    labelFontChanged         : typing.ClassVar[Signal] = ... # labelFontChanged()
    labelTextColorChanged    : typing.ClassVar[Signal] = ... # labelTextColorChanged()
    labelsVisibleChanged     : typing.ClassVar[Signal] = ... # labelsVisibleChanged()
    multiHighlightColorChanged: typing.ClassVar[Signal] = ... # multiHighlightColorChanged(QColor)
    multiHighlightGradientChanged: typing.ClassVar[Signal] = ... # multiHighlightGradientChanged(QLinearGradient)
    multiHighlightGradientQMLChanged: typing.ClassVar[Signal] = ... # multiHighlightGradientQMLChanged()
    plotAreaBackgroundColorChanged: typing.ClassVar[Signal] = ... # plotAreaBackgroundColorChanged()
    plotAreaBackgroundVisibleChanged: typing.ClassVar[Signal] = ... # plotAreaBackgroundVisibleChanged()
    seriesColorsChanged      : typing.ClassVar[Signal] = ... # seriesColorsChanged(QList<QColor>)
    seriesGradientsChanged   : typing.ClassVar[Signal] = ... # seriesGradientsChanged(QList<QLinearGradient>)
    singleHighlightColorChanged: typing.ClassVar[Signal] = ... # singleHighlightColorChanged(QColor)
    singleHighlightGradientChanged: typing.ClassVar[Signal] = ... # singleHighlightGradientChanged(QLinearGradient)
    singleHighlightGradientQMLChanged: typing.ClassVar[Signal] = ... # singleHighlightGradientQMLChanged()
    themeChanged             : typing.ClassVar[Signal] = ... # themeChanged(QGraphsTheme::Theme)
    update                   : typing.ClassVar[Signal] = ... # update()

    class ColorScheme(enum.Enum):

        Automatic                 = ...  # 0x0
        Light                     = ...  # 0x1
        Dark                      = ...  # 0x2

    class ColorStyle(enum.Enum):

        Uniform                   = ...  # 0x0
        ObjectGradient            = ...  # 0x1
        RangeGradient             = ...  # 0x2

    class ForceTheme(enum.Enum):

        No                        = ...  # 0x0
        Yes                       = ...  # 0x1

    class Theme(enum.Enum):

        QtGreen                   = ...  # 0x0
        QtGreenNeon               = ...  # 0x1
        MixSeries                 = ...  # 0x2
        OrangeSeries              = ...  # 0x3
        YellowSeries              = ...  # 0x4
        BlueSeries                = ...  # 0x5
        PurpleSeries              = ...  # 0x6
        GreySeries                = ...  # 0x7
        UserDefined               = ...  # 0x8


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, colorScheme: PySide6.QtGraphs.QGraphsTheme.ColorScheme | None = ..., theme: PySide6.QtGraphs.QGraphsTheme.Theme | None = ..., colorStyle: PySide6.QtGraphs.QGraphsTheme.ColorStyle | None = ..., backgroundColor: PySide6.QtGui.QColor | None = ..., backgroundVisible: bool | None = ..., plotAreaBackgroundColor: PySide6.QtGui.QColor | None = ..., plotAreaBackgroundVisible: bool | None = ..., gridVisible: bool | None = ..., axisXLabelFont: PySide6.QtGui.QFont | None = ..., axisYLabelFont: PySide6.QtGui.QFont | None = ..., axisZLabelFont: PySide6.QtGui.QFont | None = ..., grid: PySide6.QtGraphs.QGraphsLine | None = ..., axisX: PySide6.QtGraphs.QGraphsLine | None = ..., axisY: PySide6.QtGraphs.QGraphsLine | None = ..., axisZ: PySide6.QtGraphs.QGraphsLine | None = ..., labelFont: PySide6.QtGui.QFont | None = ..., labelsVisible: bool | None = ..., labelBackgroundColor: PySide6.QtGui.QColor | None = ..., labelTextColor: PySide6.QtGui.QColor | None = ..., labelBackgroundVisible: bool | None = ..., labelBorderVisible: bool | None = ..., seriesColors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., borderColors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., borderWidth: float | None = ..., singleHighlightColor: PySide6.QtGui.QColor | None = ..., multiHighlightColor: PySide6.QtGui.QColor | None = ...) -> None: ...

    @property
    def axisX(self, /) -> PySide6.QtGraphs.QGraphsLine: ...
    @axisX.setter
    def axisX(self, newAxisX: PySide6.QtGraphs.QGraphsLine, /) -> None: ...
    @property
    def axisXLabelFont(self, /) -> PySide6.QtGui.QFont: ...
    @axisXLabelFont.setter
    def axisXLabelFont(self, newAxisXLabelFont: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    @property
    def axisY(self, /) -> PySide6.QtGraphs.QGraphsLine: ...
    @axisY.setter
    def axisY(self, newAxisY: PySide6.QtGraphs.QGraphsLine, /) -> None: ...
    @property
    def axisYLabelFont(self, /) -> PySide6.QtGui.QFont: ...
    @axisYLabelFont.setter
    def axisYLabelFont(self, newAxisYLabelFont: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    @property
    def axisZ(self, /) -> PySide6.QtGraphs.QGraphsLine: ...
    @axisZ.setter
    def axisZ(self, newAxisZ: PySide6.QtGraphs.QGraphsLine, /) -> None: ...
    @property
    def axisZLabelFont(self, /) -> PySide6.QtGui.QFont: ...
    @axisZLabelFont.setter
    def axisZLabelFont(self, newAxisZLabelFont: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    @property
    def backgroundColor(self, /) -> PySide6.QtGui.QColor: ...
    @backgroundColor.setter
    def backgroundColor(self, newBackgroundColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def backgroundVisible(self, /) -> bool: ...
    @backgroundVisible.setter
    def backgroundVisible(self, newBackgroundVisible: bool, /) -> None: ...
    @property
    def borderColors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    @borderColors.setter
    def borderColors(self, newBorderColors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    @property
    def borderWidth(self, /) -> float: ...
    @borderWidth.setter
    def borderWidth(self, newBorderWidth: float, /) -> None: ...
    def classBegin(self, /) -> None: ...
    @property
    def colorScheme(self, /) -> PySide6.QtGraphs.QGraphsTheme.ColorScheme: ...
    @colorScheme.setter
    def colorScheme(self, newColorScheme: PySide6.QtGraphs.QGraphsTheme.ColorScheme, /) -> None: ...
    @property
    def colorStyle(self, /) -> PySide6.QtGraphs.QGraphsTheme.ColorStyle: ...
    @colorStyle.setter
    def colorStyle(self, newColorStyle: PySide6.QtGraphs.QGraphsTheme.ColorStyle, /) -> None: ...
    def componentComplete(self, /) -> None: ...
    def dirtyBits(self, /) -> PySide6.QtGraphs.QGraphsThemeDirtyBitField: ...
    @property
    def grid(self, /) -> PySide6.QtGraphs.QGraphsLine: ...
    @grid.setter
    def grid(self, newGrid: PySide6.QtGraphs.QGraphsLine, /) -> None: ...
    @property
    def gridVisible(self, /) -> bool: ...
    @gridVisible.setter
    def gridVisible(self, newGridVisibility: bool, /) -> None: ...
    def handleBaseColorUpdate(self, /) -> None: ...
    def handleBaseGradientUpdate(self, /) -> None: ...
    @property
    def labelBackgroundColor(self, /) -> PySide6.QtGui.QColor: ...
    @labelBackgroundColor.setter
    def labelBackgroundColor(self, newLabelBackgroundColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def labelBackgroundVisible(self, /) -> bool: ...
    @labelBackgroundVisible.setter
    def labelBackgroundVisible(self, newLabelBackgroundVisibility: bool, /) -> None: ...
    @property
    def labelBorderVisible(self, /) -> bool: ...
    @labelBorderVisible.setter
    def labelBorderVisible(self, newLabelBorderVisibility: bool, /) -> None: ...
    @property
    def labelFont(self, /) -> PySide6.QtGui.QFont: ...
    @labelFont.setter
    def labelFont(self, newFont: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    @property
    def labelTextColor(self, /) -> PySide6.QtGui.QColor: ...
    @labelTextColor.setter
    def labelTextColor(self, newLabelTextColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def labelsVisible(self, /) -> bool: ...
    @labelsVisible.setter
    def labelsVisible(self, newLabelsVisibility: bool, /) -> None: ...
    @property
    def multiHighlightColor(self, /) -> PySide6.QtGui.QColor: ...
    @multiHighlightColor.setter
    def multiHighlightColor(self, newMultiHighlightColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def multiHighlightGradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    @property
    def plotAreaBackgroundColor(self, /) -> PySide6.QtGui.QColor: ...
    @plotAreaBackgroundColor.setter
    def plotAreaBackgroundColor(self, newBackgroundColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def plotAreaBackgroundVisible(self, /) -> bool: ...
    @plotAreaBackgroundVisible.setter
    def plotAreaBackgroundVisible(self, newBackgroundVisibility: bool, /) -> None: ...
    def resetColorTheme(self, /) -> None: ...
    def resetDirtyBits(self, /) -> None: ...
    def resetThemeDirty(self, /) -> None: ...
    @property
    def seriesColors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    @seriesColors.setter
    def seriesColors(self, newSeriesColors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    def seriesGradients(self, /) -> typing.List[PySide6.QtGui.QLinearGradient]: ...
    def setMultiHighlightGradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    def setSeriesGradients(self, newSeriesGradients: collections.abc.Sequence[PySide6.QtGui.QLinearGradient], /) -> None: ...
    def setSingleHighlightGradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    @property
    def singleHighlightColor(self, /) -> PySide6.QtGui.QColor: ...
    @singleHighlightColor.setter
    def singleHighlightColor(self, newSingleHighlightColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def singleHighlightGradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    @property
    def theme(self, /) -> PySide6.QtGraphs.QGraphsTheme.Theme: ...
    @theme.setter
    def theme(self, newTheme: PySide6.QtGraphs.QGraphsTheme.Theme, /, force: PySide6.QtGraphs.QGraphsTheme.ForceTheme = ...) -> None: ...
    def themeDirty(self, /) -> bool: ...


class QGraphsThemeDirtyBitField(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QGraphsThemeDirtyBitField: PySide6.QtGraphs.QGraphsThemeDirtyBitField, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...


class QHeightMapSurfaceDataProxy(PySide6.QtGraphs.QSurfaceDataProxy):

    autoScaleYChanged        : typing.ClassVar[Signal] = ... # autoScaleYChanged(bool)
    heightMapChanged         : typing.ClassVar[Signal] = ... # heightMapChanged(QImage)
    heightMapFileChanged     : typing.ClassVar[Signal] = ... # heightMapFileChanged(QString)
    maxXValueChanged         : typing.ClassVar[Signal] = ... # maxXValueChanged(float)
    maxYValueChanged         : typing.ClassVar[Signal] = ... # maxYValueChanged(float)
    maxZValueChanged         : typing.ClassVar[Signal] = ... # maxZValueChanged(float)
    minXValueChanged         : typing.ClassVar[Signal] = ... # minXValueChanged(float)
    minYValueChanged         : typing.ClassVar[Signal] = ... # minYValueChanged(float)
    minZValueChanged         : typing.ClassVar[Signal] = ... # minZValueChanged(float)

    @typing.overload
    def __init__(self, image: PySide6.QtGui.QImage, /, parent: PySide6.QtCore.QObject | None = ..., *, heightMap: PySide6.QtGui.QImage | None = ..., heightMapFile: str | None = ..., minXValue: float | None = ..., maxXValue: float | None = ..., minZValue: float | None = ..., maxZValue: float | None = ..., minYValue: float | None = ..., maxYValue: float | None = ..., autoScaleY: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, filename: str, /, parent: PySide6.QtCore.QObject | None = ..., *, heightMap: PySide6.QtGui.QImage | None = ..., heightMapFile: str | None = ..., minXValue: float | None = ..., maxXValue: float | None = ..., minZValue: float | None = ..., maxZValue: float | None = ..., minYValue: float | None = ..., maxYValue: float | None = ..., autoScaleY: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, heightMap: PySide6.QtGui.QImage | None = ..., heightMapFile: str | None = ..., minXValue: float | None = ..., maxXValue: float | None = ..., minZValue: float | None = ..., maxZValue: float | None = ..., minYValue: float | None = ..., maxYValue: float | None = ..., autoScaleY: bool | None = ...) -> None: ...

    @property
    def autoScaleY(self, /) -> bool: ...
    @autoScaleY.setter
    def autoScaleY(self, enabled: bool, /) -> None: ...
    def handlePendingResolve(self, /) -> None: ...
    @property
    def heightMap(self, /) -> PySide6.QtGui.QImage: ...
    @heightMap.setter
    def heightMap(self, image: PySide6.QtGui.QImage, /) -> None: ...
    @property
    def heightMapFile(self, /) -> str: ...
    @heightMapFile.setter
    def heightMapFile(self, filename: str, /) -> None: ...
    @property
    def maxXValue(self, /) -> float: ...
    @maxXValue.setter
    def maxXValue(self, max: float, /) -> None: ...
    @property
    def maxYValue(self, /) -> float: ...
    @maxYValue.setter
    def maxYValue(self, max: float, /) -> None: ...
    @property
    def maxZValue(self, /) -> float: ...
    @maxZValue.setter
    def maxZValue(self, max: float, /) -> None: ...
    @property
    def minXValue(self, /) -> float: ...
    @minXValue.setter
    def minXValue(self, min: float, /) -> None: ...
    @property
    def minYValue(self, /) -> float: ...
    @minYValue.setter
    def minYValue(self, min: float, /) -> None: ...
    @property
    def minZValue(self, /) -> float: ...
    @minZValue.setter
    def minZValue(self, min: float, /) -> None: ...
    def setValueRanges(self, minX: float, maxX: float, minZ: float, maxZ: float, /) -> None: ...


class QIntList: ...


class QItemModelBarDataProxy(PySide6.QtGraphs.QBarDataProxy):

    autoColumnCategoriesChanged: typing.ClassVar[Signal] = ... # autoColumnCategoriesChanged(bool)
    autoRowCategoriesChanged : typing.ClassVar[Signal] = ... # autoRowCategoriesChanged(bool)
    columnCategoriesChanged  : typing.ClassVar[Signal] = ... # columnCategoriesChanged()
    columnRoleChanged        : typing.ClassVar[Signal] = ... # columnRoleChanged(QString)
    columnRolePatternChanged : typing.ClassVar[Signal] = ... # columnRolePatternChanged(QRegularExpression)
    columnRoleReplaceChanged : typing.ClassVar[Signal] = ... # columnRoleReplaceChanged(QString)
    itemModelChanged         : typing.ClassVar[Signal] = ... # itemModelChanged(const QAbstractItemModel*)
    multiMatchBehaviorChanged: typing.ClassVar[Signal] = ... # multiMatchBehaviorChanged(QItemModelBarDataProxy::MultiMatchBehavior)
    rotationRoleChanged      : typing.ClassVar[Signal] = ... # rotationRoleChanged(QString)
    rotationRolePatternChanged: typing.ClassVar[Signal] = ... # rotationRolePatternChanged(QRegularExpression)
    rotationRoleReplaceChanged: typing.ClassVar[Signal] = ... # rotationRoleReplaceChanged(QString)
    rowCategoriesChanged     : typing.ClassVar[Signal] = ... # rowCategoriesChanged()
    rowRoleChanged           : typing.ClassVar[Signal] = ... # rowRoleChanged(QString)
    rowRolePatternChanged    : typing.ClassVar[Signal] = ... # rowRolePatternChanged(QRegularExpression)
    rowRoleReplaceChanged    : typing.ClassVar[Signal] = ... # rowRoleReplaceChanged(QString)
    useModelCategoriesChanged: typing.ClassVar[Signal] = ... # useModelCategoriesChanged(bool)
    valueRoleChanged         : typing.ClassVar[Signal] = ... # valueRoleChanged(QString)
    valueRolePatternChanged  : typing.ClassVar[Signal] = ... # valueRolePatternChanged(QRegularExpression)
    valueRoleReplaceChanged  : typing.ClassVar[Signal] = ... # valueRoleReplaceChanged(QString)

    class MultiMatchBehavior(enum.Enum):

        First                     = ...  # 0x0
        Last                      = ...  # 0x1
        Average                   = ...  # 0x2
        Cumulative                = ...  # 0x3


    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, valueRole: str, rotationRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, valueRole: str, rotationRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, valueRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, rotationRole: str | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, valueRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rotationRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, valueRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rowRole: str | None = ..., columnRole: str | None = ..., rotationRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, /, parent: PySide6.QtCore.QObject | None = ..., *, rowRole: str | None = ..., columnRole: str | None = ..., valueRole: str | None = ..., rotationRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, itemModel: PySide6.QtCore.QAbstractItemModel | None = ..., rowRole: str | None = ..., columnRole: str | None = ..., valueRole: str | None = ..., rotationRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...

    @property
    def autoColumnCategories(self, /) -> bool: ...
    @autoColumnCategories.setter
    def autoColumnCategories(self, enable: bool, /) -> None: ...
    @property
    def autoRowCategories(self, /) -> bool: ...
    @autoRowCategories.setter
    def autoRowCategories(self, enable: bool, /) -> None: ...
    @property
    def columnCategories(self, /) -> typing.List[str]: ...
    @columnCategories.setter
    def columnCategories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def columnCategoryIndex(self, category: str, /) -> int: ...
    @property
    def columnRole(self, /) -> str: ...
    @columnRole.setter
    def columnRole(self, role: str, /) -> None: ...
    @property
    def columnRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @columnRolePattern.setter
    def columnRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def columnRoleReplace(self, /) -> str: ...
    @columnRoleReplace.setter
    def columnRoleReplace(self, replace: str, /) -> None: ...
    @property
    def itemModel(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    @itemModel.setter
    def itemModel(self, itemModel: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    @property
    def multiMatchBehavior(self, /) -> PySide6.QtGraphs.QItemModelBarDataProxy.MultiMatchBehavior: ...
    @multiMatchBehavior.setter
    def multiMatchBehavior(self, behavior: PySide6.QtGraphs.QItemModelBarDataProxy.MultiMatchBehavior, /) -> None: ...
    def remap(self, rowRole: str, columnRole: str, valueRole: str, rotationRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /) -> None: ...
    @property
    def rotationRole(self, /) -> str: ...
    @rotationRole.setter
    def rotationRole(self, role: str, /) -> None: ...
    @property
    def rotationRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @rotationRolePattern.setter
    def rotationRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def rotationRoleReplace(self, /) -> str: ...
    @rotationRoleReplace.setter
    def rotationRoleReplace(self, replace: str, /) -> None: ...
    @property
    def rowCategories(self, /) -> typing.List[str]: ...
    @rowCategories.setter
    def rowCategories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def rowCategoryIndex(self, category: str, /) -> int: ...
    @property
    def rowRole(self, /) -> str: ...
    @rowRole.setter
    def rowRole(self, role: str, /) -> None: ...
    @property
    def rowRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @rowRolePattern.setter
    def rowRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def rowRoleReplace(self, /) -> str: ...
    @rowRoleReplace.setter
    def rowRoleReplace(self, replace: str, /) -> None: ...
    @property
    def useModelCategories(self, /) -> bool: ...
    @useModelCategories.setter
    def useModelCategories(self, enable: bool, /) -> None: ...
    @property
    def valueRole(self, /) -> str: ...
    @valueRole.setter
    def valueRole(self, role: str, /) -> None: ...
    @property
    def valueRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @valueRolePattern.setter
    def valueRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def valueRoleReplace(self, /) -> str: ...
    @valueRoleReplace.setter
    def valueRoleReplace(self, replace: str, /) -> None: ...


class QItemModelScatterDataProxy(PySide6.QtGraphs.QScatterDataProxy):

    itemModelChanged         : typing.ClassVar[Signal] = ... # itemModelChanged(const QAbstractItemModel*)
    rotationRoleChanged      : typing.ClassVar[Signal] = ... # rotationRoleChanged(QString)
    rotationRolePatternChanged: typing.ClassVar[Signal] = ... # rotationRolePatternChanged(QRegularExpression)
    rotationRoleReplaceChanged: typing.ClassVar[Signal] = ... # rotationRoleReplaceChanged(QString)
    xPosRoleChanged          : typing.ClassVar[Signal] = ... # xPosRoleChanged(QString)
    xPosRolePatternChanged   : typing.ClassVar[Signal] = ... # xPosRolePatternChanged(QRegularExpression)
    xPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # xPosRoleReplaceChanged(QString)
    yPosRoleChanged          : typing.ClassVar[Signal] = ... # yPosRoleChanged(QString)
    yPosRolePatternChanged   : typing.ClassVar[Signal] = ... # yPosRolePatternChanged(QRegularExpression)
    yPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # yPosRoleReplaceChanged(QString)
    zPosRoleChanged          : typing.ClassVar[Signal] = ... # zPosRoleChanged(QString)
    zPosRolePatternChanged   : typing.ClassVar[Signal] = ... # zPosRolePatternChanged(QRegularExpression)
    zPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # zPosRoleReplaceChanged(QString)

    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, xPosRole: str, yPosRole: str, zPosRole: str, rotationRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., rotationRoleReplace: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, xPosRole: str, yPosRole: str, zPosRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rotationRole: str | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., rotationRoleReplace: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, /, parent: PySide6.QtCore.QObject | None = ..., *, xPosRole: str | None = ..., yPosRole: str | None = ..., zPosRole: str | None = ..., rotationRole: str | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., rotationRoleReplace: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, itemModel: PySide6.QtCore.QAbstractItemModel | None = ..., xPosRole: str | None = ..., yPosRole: str | None = ..., zPosRole: str | None = ..., rotationRole: str | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., rotationRoleReplace: str | None = ...) -> None: ...

    @property
    def itemModel(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    @itemModel.setter
    def itemModel(self, itemModel: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    def remap(self, xPosRole: str, yPosRole: str, zPosRole: str, rotationRole: str, /) -> None: ...
    @property
    def rotationRole(self, /) -> str: ...
    @rotationRole.setter
    def rotationRole(self, role: str, /) -> None: ...
    @property
    def rotationRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @rotationRolePattern.setter
    def rotationRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def rotationRoleReplace(self, /) -> str: ...
    @rotationRoleReplace.setter
    def rotationRoleReplace(self, replace: str, /) -> None: ...
    @property
    def xPosRole(self, /) -> str: ...
    @xPosRole.setter
    def xPosRole(self, role: str, /) -> None: ...
    @property
    def xPosRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @xPosRolePattern.setter
    def xPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def xPosRoleReplace(self, /) -> str: ...
    @xPosRoleReplace.setter
    def xPosRoleReplace(self, replace: str, /) -> None: ...
    @property
    def yPosRole(self, /) -> str: ...
    @yPosRole.setter
    def yPosRole(self, role: str, /) -> None: ...
    @property
    def yPosRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @yPosRolePattern.setter
    def yPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def yPosRoleReplace(self, /) -> str: ...
    @yPosRoleReplace.setter
    def yPosRoleReplace(self, replace: str, /) -> None: ...
    @property
    def zPosRole(self, /) -> str: ...
    @zPosRole.setter
    def zPosRole(self, role: str, /) -> None: ...
    @property
    def zPosRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @zPosRolePattern.setter
    def zPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def zPosRoleReplace(self, /) -> str: ...
    @zPosRoleReplace.setter
    def zPosRoleReplace(self, replace: str, /) -> None: ...


class QItemModelSurfaceDataProxy(PySide6.QtGraphs.QSurfaceDataProxy):

    autoColumnCategoriesChanged: typing.ClassVar[Signal] = ... # autoColumnCategoriesChanged(bool)
    autoRowCategoriesChanged : typing.ClassVar[Signal] = ... # autoRowCategoriesChanged(bool)
    columnCategoriesChanged  : typing.ClassVar[Signal] = ... # columnCategoriesChanged()
    columnRoleChanged        : typing.ClassVar[Signal] = ... # columnRoleChanged(QString)
    columnRolePatternChanged : typing.ClassVar[Signal] = ... # columnRolePatternChanged(QRegularExpression)
    columnRoleReplaceChanged : typing.ClassVar[Signal] = ... # columnRoleReplaceChanged(QString)
    itemModelChanged         : typing.ClassVar[Signal] = ... # itemModelChanged(const QAbstractItemModel*)
    multiMatchBehaviorChanged: typing.ClassVar[Signal] = ... # multiMatchBehaviorChanged(QItemModelSurfaceDataProxy::MultiMatchBehavior)
    rowCategoriesChanged     : typing.ClassVar[Signal] = ... # rowCategoriesChanged()
    rowRoleChanged           : typing.ClassVar[Signal] = ... # rowRoleChanged(QString)
    rowRolePatternChanged    : typing.ClassVar[Signal] = ... # rowRolePatternChanged(QRegularExpression)
    rowRoleReplaceChanged    : typing.ClassVar[Signal] = ... # rowRoleReplaceChanged(QString)
    useModelCategoriesChanged: typing.ClassVar[Signal] = ... # useModelCategoriesChanged(bool)
    xPosRoleChanged          : typing.ClassVar[Signal] = ... # xPosRoleChanged(QString)
    xPosRolePatternChanged   : typing.ClassVar[Signal] = ... # xPosRolePatternChanged(QRegularExpression)
    xPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # xPosRoleReplaceChanged(QString)
    yPosRoleChanged          : typing.ClassVar[Signal] = ... # yPosRoleChanged(QString)
    yPosRolePatternChanged   : typing.ClassVar[Signal] = ... # yPosRolePatternChanged(QRegularExpression)
    yPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # yPosRoleReplaceChanged(QString)
    zPosRoleChanged          : typing.ClassVar[Signal] = ... # zPosRoleChanged(QString)
    zPosRolePatternChanged   : typing.ClassVar[Signal] = ... # zPosRolePatternChanged(QRegularExpression)
    zPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # zPosRoleReplaceChanged(QString)

    class MultiMatchBehavior(enum.Enum):

        First                     = ...  # 0x0
        Last                      = ...  # 0x1
        Average                   = ...  # 0x2
        CumulativeY               = ...  # 0x3


    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, xPosRole: str, yPosRole: str, zPosRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, xPosRole: str, yPosRole: str, zPosRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, yPosRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, xPosRole: str | None = ..., zPosRole: str | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, yPosRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, xPosRole: str | None = ..., zPosRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, yPosRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rowRole: str | None = ..., columnRole: str | None = ..., xPosRole: str | None = ..., zPosRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, /, parent: PySide6.QtCore.QObject | None = ..., *, rowRole: str | None = ..., columnRole: str | None = ..., xPosRole: str | None = ..., yPosRole: str | None = ..., zPosRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, itemModel: PySide6.QtCore.QAbstractItemModel | None = ..., rowRole: str | None = ..., columnRole: str | None = ..., xPosRole: str | None = ..., yPosRole: str | None = ..., zPosRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...

    @property
    def autoColumnCategories(self, /) -> bool: ...
    @autoColumnCategories.setter
    def autoColumnCategories(self, enable: bool, /) -> None: ...
    @property
    def autoRowCategories(self, /) -> bool: ...
    @autoRowCategories.setter
    def autoRowCategories(self, enable: bool, /) -> None: ...
    @property
    def columnCategories(self, /) -> typing.List[str]: ...
    @columnCategories.setter
    def columnCategories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def columnCategoryIndex(self, category: str, /) -> int: ...
    @property
    def columnRole(self, /) -> str: ...
    @columnRole.setter
    def columnRole(self, role: str, /) -> None: ...
    @property
    def columnRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @columnRolePattern.setter
    def columnRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def columnRoleReplace(self, /) -> str: ...
    @columnRoleReplace.setter
    def columnRoleReplace(self, replace: str, /) -> None: ...
    @property
    def itemModel(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    @itemModel.setter
    def itemModel(self, itemModel: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    @property
    def multiMatchBehavior(self, /) -> PySide6.QtGraphs.QItemModelSurfaceDataProxy.MultiMatchBehavior: ...
    @multiMatchBehavior.setter
    def multiMatchBehavior(self, behavior: PySide6.QtGraphs.QItemModelSurfaceDataProxy.MultiMatchBehavior, /) -> None: ...
    def remap(self, rowRole: str, columnRole: str, xPosRole: str, yPosRole: str, zPosRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /) -> None: ...
    @property
    def rowCategories(self, /) -> typing.List[str]: ...
    @rowCategories.setter
    def rowCategories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def rowCategoryIndex(self, category: str, /) -> int: ...
    @property
    def rowRole(self, /) -> str: ...
    @rowRole.setter
    def rowRole(self, role: str, /) -> None: ...
    @property
    def rowRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @rowRolePattern.setter
    def rowRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def rowRoleReplace(self, /) -> str: ...
    @rowRoleReplace.setter
    def rowRoleReplace(self, replace: str, /) -> None: ...
    @property
    def useModelCategories(self, /) -> bool: ...
    @useModelCategories.setter
    def useModelCategories(self, enable: bool, /) -> None: ...
    @property
    def xPosRole(self, /) -> str: ...
    @xPosRole.setter
    def xPosRole(self, role: str, /) -> None: ...
    @property
    def xPosRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @xPosRolePattern.setter
    def xPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def xPosRoleReplace(self, /) -> str: ...
    @xPosRoleReplace.setter
    def xPosRoleReplace(self, replace: str, /) -> None: ...
    @property
    def yPosRole(self, /) -> str: ...
    @yPosRole.setter
    def yPosRole(self, role: str, /) -> None: ...
    @property
    def yPosRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @yPosRolePattern.setter
    def yPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def yPosRoleReplace(self, /) -> str: ...
    @yPosRoleReplace.setter
    def yPosRoleReplace(self, replace: str, /) -> None: ...
    @property
    def zPosRole(self, /) -> str: ...
    @zPosRole.setter
    def zPosRole(self, role: str, /) -> None: ...
    @property
    def zPosRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @zPosRolePattern.setter
    def zPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def zPosRoleReplace(self, /) -> str: ...
    @zPosRoleReplace.setter
    def zPosRoleReplace(self, replace: str, /) -> None: ...


class QLegendData(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QLegendData: PySide6.QtGraphs.QLegendData, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...


class QLineSeries(PySide6.QtGraphs.QXYSeries):

    capStyleChanged          : typing.ClassVar[Signal] = ... # capStyleChanged()
    widthChanged             : typing.ClassVar[Signal] = ... # widthChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, width: float | None = ..., capStyle: PySide6.QtCore.Qt.PenCapStyle | None = ...) -> None: ...

    @property
    def capStyle(self, /) -> PySide6.QtCore.Qt.PenCapStyle: ...
    @capStyle.setter
    def capStyle(self, newCapStyle: PySide6.QtCore.Qt.PenCapStyle, /) -> None: ...
    def componentComplete(self, /) -> None: ...
    @property
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...
    @property
    def width(self, /) -> float: ...
    @width.setter
    def width(self, newWidth: float, /) -> None: ...


class QLogValue3DAxisFormatter(PySide6.QtGraphs.QValue3DAxisFormatter):

    autoSubGridChanged       : typing.ClassVar[Signal] = ... # autoSubGridChanged(bool)
    baseChanged              : typing.ClassVar[Signal] = ... # baseChanged(double)
    edgeLabelsVisibleChanged : typing.ClassVar[Signal] = ... # edgeLabelsVisibleChanged(bool)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, base: float | None = ..., autoSubGrid: bool | None = ..., edgeLabelsVisible: bool | None = ...) -> None: ...

    @property
    def autoSubGrid(self, /) -> bool: ...
    @autoSubGrid.setter
    def autoSubGrid(self, enabled: bool, /) -> None: ...
    @property
    def base(self, /) -> float: ...
    @base.setter
    def base(self, base: float, /) -> None: ...
    def createNewInstance(self, /) -> PySide6.QtGraphs.QValue3DAxisFormatter: ...
    @property
    def edgeLabelsVisible(self, /) -> bool: ...
    @edgeLabelsVisible.setter
    def edgeLabelsVisible(self, enabled: bool, /) -> None: ...
    def populateCopy(self, copy: PySide6.QtGraphs.QValue3DAxisFormatter, /) -> None: ...
    def positionAt(self, value: float, /) -> float: ...
    def recalculate(self, /) -> None: ...
    def valueAt(self, position: float, /) -> float: ...


class QPieModelMapper(PySide6.QtCore.QObject):

    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    firstChanged             : typing.ClassVar[Signal] = ... # firstChanged()
    labelsSectionChanged     : typing.ClassVar[Signal] = ... # labelsSectionChanged()
    modelChanged             : typing.ClassVar[Signal] = ... # modelChanged()
    orientationChanged       : typing.ClassVar[Signal] = ... # orientationChanged()
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged()
    valuesSectionChanged     : typing.ClassVar[Signal] = ... # valuesSectionChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, series: PySide6.QtCharts.QPieSeries | None = ..., model: PySide6.QtCore.QAbstractItemModel | None = ..., valuesSection: int | None = ..., labelsSection: int | None = ..., first: int | None = ..., count: int | None = ..., orientation: PySide6.QtCore.Qt.Orientation | None = ...) -> None: ...

    @property
    def count(self, /) -> int: ...
    @count.setter
    def count(self, count: int, /) -> None: ...
    @property
    def first(self, /) -> int: ...
    @first.setter
    def first(self, first: int, /) -> None: ...
    @property
    def labelsSection(self, /) -> int: ...
    @labelsSection.setter
    def labelsSection(self, labelsSection: int, /) -> None: ...
    @property
    def model(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    @model.setter
    def model(self, model: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    def onSliceLabelChanged(self, /) -> None: ...
    def onSliceValueChanged(self, /) -> None: ...
    @property
    def orientation(self, /) -> PySide6.QtCore.Qt.Orientation: ...
    @orientation.setter
    def orientation(self, orientation: PySide6.QtCore.Qt.Orientation, /) -> None: ...
    @property
    def series(self, /) -> PySide6.QtGraphs.QPieSeries: ...
    @series.setter
    def series(self, series: PySide6.QtGraphs.QPieSeries, /) -> None: ...
    @property
    def valuesSection(self, /) -> int: ...
    @valuesSection.setter
    def valuesSection(self, valuesSection: int, /) -> None: ...


class QPieSeries(PySide6.QtGraphs.QAbstractSeries):

    added                    : typing.ClassVar[Signal] = ... # added(QList<QPieSlice*>)
    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    endAngleChanged          : typing.ClassVar[Signal] = ... # endAngleChanged()
    holeSizeChanged          : typing.ClassVar[Signal] = ... # holeSizeChanged()
    horizontalPositionChanged: typing.ClassVar[Signal] = ... # horizontalPositionChanged()
    pieSizeChanged           : typing.ClassVar[Signal] = ... # pieSizeChanged()
    removed                  : typing.ClassVar[Signal] = ... # removed(QList<QPieSlice*>)
    replaced                 : typing.ClassVar[Signal] = ... # replaced(QList<QPieSlice*>)
    startAngleChanged        : typing.ClassVar[Signal] = ... # startAngleChanged()
    sumChanged               : typing.ClassVar[Signal] = ... # sumChanged()
    verticalPositionChanged  : typing.ClassVar[Signal] = ... # verticalPositionChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, horizontalPosition: float | None = ..., verticalPosition: float | None = ..., pieSize: float | None = ..., startAngle: float | None = ..., endAngle: float | None = ..., count: int | None = ..., sum: float | None = ..., holeSize: float | None = ...) -> None: ...

    def __lshift__(self, slice: PySide6.QtGraphs.QPieSlice, /) -> PySide6.QtGraphs.QPieSeries: ...
    @typing.overload
    def append(self, slice: PySide6.QtGraphs.QPieSlice, /) -> bool: ...
    @typing.overload
    def append(self, label: str, value: float, /) -> PySide6.QtGraphs.QPieSlice: ...
    @typing.overload
    def append(self, slices: collections.abc.Sequence[PySide6.QtGraphs.QPieSlice], /) -> bool: ...
    def at(self, index: int, /) -> PySide6.QtGraphs.QPieSlice: ...
    def clear(self, /) -> None: ...
    def componentComplete(self, /) -> None: ...
    @property
    def count(self, /) -> int: ...
    @property
    def endAngle(self, /) -> float: ...
    @endAngle.setter
    def endAngle(self, endAngle: float, /) -> None: ...
    def find(self, label: str, /) -> PySide6.QtGraphs.QPieSlice: ...
    def handleSliceChange(self, /) -> None: ...
    @property
    def holeSize(self, /) -> float: ...
    @holeSize.setter
    def holeSize(self, holeSize: float, /) -> None: ...
    @property
    def horizontalPosition(self, /) -> float: ...
    @horizontalPosition.setter
    def horizontalPosition(self, relativePosition: float, /) -> None: ...
    def insert(self, index: int, slice: PySide6.QtGraphs.QPieSlice, /) -> bool: ...
    def isEmpty(self, /) -> bool: ...
    @property
    def pieSize(self, /) -> float: ...
    @pieSize.setter
    def pieSize(self, relativeSize: float, /) -> None: ...
    @typing.overload
    def remove(self, slice: PySide6.QtGraphs.QPieSlice, /) -> bool: ...
    @typing.overload
    def remove(self, index: int, /) -> bool: ...
    def removeMultiple(self, index: int, count: int, /) -> None: ...
    @typing.overload
    def replace(self, oldSlice: PySide6.QtGraphs.QPieSlice, newSlice: PySide6.QtGraphs.QPieSlice, /) -> bool: ...
    @typing.overload
    def replace(self, slices: collections.abc.Sequence[PySide6.QtGraphs.QPieSlice], /) -> bool: ...
    @typing.overload
    def replace(self, index: int, slice: PySide6.QtGraphs.QPieSlice, /) -> bool: ...
    def setLabelsPosition(self, position: PySide6.QtGraphs.QPieSlice.LabelPosition, /) -> None: ...
    def setLabelsVisible(self, visible: bool, /) -> None: ...
    def slices(self, /) -> typing.List[PySide6.QtGraphs.QPieSlice]: ...
    @property
    def startAngle(self, /) -> float: ...
    @startAngle.setter
    def startAngle(self, startAngle: float, /) -> None: ...
    @property
    def sum(self, /) -> float: ...
    def take(self, slice: PySide6.QtGraphs.QPieSlice, /) -> bool: ...
    @property
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...
    @property
    def verticalPosition(self, /) -> float: ...
    @verticalPosition.setter
    def verticalPosition(self, relativePosition: float, /) -> None: ...


class QPieSlice(PySide6.QtCore.QObject):

    angleSpanChanged         : typing.ClassVar[Signal] = ... # angleSpanChanged()
    borderColorChanged       : typing.ClassVar[Signal] = ... # borderColorChanged()
    borderWidthChanged       : typing.ClassVar[Signal] = ... # borderWidthChanged()
    colorChanged             : typing.ClassVar[Signal] = ... # colorChanged()
    explodeDistanceFactorChanged: typing.ClassVar[Signal] = ... # explodeDistanceFactorChanged()
    explodedChanged          : typing.ClassVar[Signal] = ... # explodedChanged()
    labelArmLengthFactorChanged: typing.ClassVar[Signal] = ... # labelArmLengthFactorChanged()
    labelChanged             : typing.ClassVar[Signal] = ... # labelChanged()
    labelColorChanged        : typing.ClassVar[Signal] = ... # labelColorChanged()
    labelFontChanged         : typing.ClassVar[Signal] = ... # labelFontChanged()
    labelPositionChanged     : typing.ClassVar[Signal] = ... # labelPositionChanged()
    labelVisibleChanged      : typing.ClassVar[Signal] = ... # labelVisibleChanged()
    percentageChanged        : typing.ClassVar[Signal] = ... # percentageChanged()
    sliceChanged             : typing.ClassVar[Signal] = ... # sliceChanged()
    startAngleChanged        : typing.ClassVar[Signal] = ... # startAngleChanged()
    valueChanged             : typing.ClassVar[Signal] = ... # valueChanged()

    class LabelPosition(enum.Enum):

        Outside                   = ...  # 0x0
        InsideHorizontal          = ...  # 0x1
        InsideTangential          = ...  # 0x2
        InsideNormal              = ...  # 0x3


    @typing.overload
    def __init__(self, label: str, value: float, /, parent: PySide6.QtCore.QObject | None = ..., *, labelVisible: bool | None = ..., labelPosition: PySide6.QtCharts.QPieSlice.LabelPosition | None = ..., labelColor: PySide6.QtGui.QColor | None = ..., labelFont: PySide6.QtGui.QFont | None = ..., labelArmLengthFactor: float | None = ..., color: PySide6.QtGui.QColor | None = ..., borderColor: PySide6.QtGui.QColor | None = ..., borderWidth: float | None = ..., exploded: bool | None = ..., explodeDistanceFactor: float | None = ..., percentage: float | None = ..., startAngle: float | None = ..., angleSpan: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, label: str | None = ..., labelVisible: bool | None = ..., labelPosition: PySide6.QtCharts.QPieSlice.LabelPosition | None = ..., labelColor: PySide6.QtGui.QColor | None = ..., labelFont: PySide6.QtGui.QFont | None = ..., labelArmLengthFactor: float | None = ..., color: PySide6.QtGui.QColor | None = ..., borderColor: PySide6.QtGui.QColor | None = ..., borderWidth: float | None = ..., value: float | None = ..., exploded: bool | None = ..., explodeDistanceFactor: float | None = ..., percentage: float | None = ..., startAngle: float | None = ..., angleSpan: float | None = ...) -> None: ...

    @property
    def angleSpan(self, /) -> float: ...
    @property
    def borderColor(self, /) -> PySide6.QtGui.QColor: ...
    @borderColor.setter
    def borderColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def borderWidth(self, /) -> float: ...
    @borderWidth.setter
    def borderWidth(self, borderWidth: float, /) -> None: ...
    @property
    def color(self, /) -> PySide6.QtGui.QColor: ...
    @color.setter
    def color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def explodeDistanceFactor(self, /) -> float: ...
    @explodeDistanceFactor.setter
    def explodeDistanceFactor(self, factor: float, /) -> None: ...
    @property
    def exploded(self, /) -> bool: ...
    @exploded.setter
    def exploded(self, exploded: bool, /) -> None: ...
    @property
    def label(self, /) -> str: ...
    @label.setter
    def label(self, label: str, /) -> None: ...
    @property
    def labelArmLengthFactor(self, /) -> float: ...
    @labelArmLengthFactor.setter
    def labelArmLengthFactor(self, factor: float, /) -> None: ...
    @property
    def labelColor(self, /) -> PySide6.QtGui.QColor: ...
    @labelColor.setter
    def labelColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def labelFont(self, /) -> PySide6.QtGui.QFont: ...
    @labelFont.setter
    def labelFont(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    @property
    def labelPosition(self, /) -> PySide6.QtGraphs.QPieSlice.LabelPosition: ...
    @labelPosition.setter
    def labelPosition(self, position: PySide6.QtGraphs.QPieSlice.LabelPosition, /) -> None: ...
    @property
    def labelVisible(self, /) -> bool: ...
    @labelVisible.setter
    def labelVisible(self, /, visible: bool = ...) -> None: ...
    @property
    def percentage(self, /) -> float: ...
    def series(self, /) -> PySide6.QtGraphs.QPieSeries: ...
    @property
    def startAngle(self, /) -> float: ...
    @property
    def value(self, /) -> float: ...
    @value.setter
    def value(self, value: float, /) -> None: ...


class QPointFList: ...


class QScatter3DSeries(PySide6.QtGraphs.QAbstract3DSeries):

    dataArrayChanged         : typing.ClassVar[Signal] = ... # dataArrayChanged(QScatterDataArray)
    dataProxyChanged         : typing.ClassVar[Signal] = ... # dataProxyChanged(QScatterDataProxy*)
    itemSizeChanged          : typing.ClassVar[Signal] = ... # itemSizeChanged(float)
    selectedItemChanged      : typing.ClassVar[Signal] = ... # selectedItemChanged(qsizetype)

    @typing.overload
    def __init__(self, dataProxy: PySide6.QtDataVisualization.QScatterDataProxy, /, parent: PySide6.QtCore.QObject | None = ..., *, selectedItem: int | None = ..., itemSize: float | None = ..., dataArray: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, dataProxy: PySide6.QtDataVisualization.QScatterDataProxy | None = ..., selectedItem: int | None = ..., itemSize: float | None = ..., dataArray: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem] | None = ...) -> None: ...

    def clearArray(self, /) -> None: ...
    @property
    def dataArray(self, /) -> typing.List[PySide6.QtGraphs.QScatterDataItem]: ...
    @dataArray.setter
    def dataArray(self, newDataArray: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem], /) -> None: ...
    @property
    def dataProxy(self, /) -> PySide6.QtGraphs.QScatterDataProxy: ...
    @dataProxy.setter
    def dataProxy(self, proxy: PySide6.QtGraphs.QScatterDataProxy, /) -> None: ...
    @staticmethod
    def invalidSelectionIndex() -> int: ...
    @property
    def itemSize(self, /) -> float: ...
    @itemSize.setter
    def itemSize(self, size: float, /) -> None: ...
    @property
    def selectedItem(self, /) -> int: ...
    @selectedItem.setter
    def selectedItem(self, index: int, /) -> None: ...


class QScatterDataItem(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QScatterDataItem: PySide6.QtGraphs.QScatterDataItem, /) -> None: ...
    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...
    @typing.overload
    def __init__(self, x: float, y: float, z: float, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    def rotation(self, /) -> PySide6.QtGui.QQuaternion: ...
    def setPosition(self, pos: PySide6.QtGui.QVector3D, /) -> None: ...
    def setRotation(self, rot: PySide6.QtGui.QQuaternion, /) -> None: ...
    def setX(self, value: float, /) -> None: ...
    def setY(self, value: float, /) -> None: ...
    def setZ(self, value: float, /) -> None: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QScatterDataProxy(PySide6.QtGraphs.QAbstractDataProxy):

    arrayReset               : typing.ClassVar[Signal] = ... # arrayReset()
    itemCountChanged         : typing.ClassVar[Signal] = ... # itemCountChanged(qsizetype)
    itemsAdded               : typing.ClassVar[Signal] = ... # itemsAdded(qsizetype,qsizetype)
    itemsChanged             : typing.ClassVar[Signal] = ... # itemsChanged(qsizetype,qsizetype)
    itemsInserted            : typing.ClassVar[Signal] = ... # itemsInserted(qsizetype,qsizetype)
    itemsRemoved             : typing.ClassVar[Signal] = ... # itemsRemoved(qsizetype,qsizetype)
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged(QScatter3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, itemCount: int | None = ..., series: PySide6.QtDataVisualization.QScatter3DSeries | None = ...) -> None: ...

    def addItem(self, item: PySide6.QtGraphs.QScatterDataItem, /) -> int: ...
    def addItems(self, items: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem], /) -> int: ...
    def insertItem(self, index: int, item: PySide6.QtGraphs.QScatterDataItem, /) -> None: ...
    def insertItems(self, index: int, items: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem], /) -> None: ...
    def itemAt(self, index: int, /) -> PySide6.QtGraphs.QScatterDataItem: ...
    @property
    def itemCount(self, /) -> int: ...
    def removeItems(self, index: int, removeCount: int, /) -> None: ...
    @typing.overload
    def resetArray(self, /) -> None: ...
    @typing.overload
    def resetArray(self, newArray: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem], /) -> None: ...
    @property
    def series(self, /) -> PySide6.QtGraphs.QScatter3DSeries: ...
    def setItem(self, index: int, item: PySide6.QtGraphs.QScatterDataItem, /) -> None: ...
    def setItems(self, index: int, items: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem], /) -> None: ...


class QScatterSeries(PySide6.QtGraphs.QXYSeries):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def componentComplete(self, /) -> None: ...
    @property
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...


class QSplineSeries(PySide6.QtGraphs.QXYSeries):

    capStyleChanged          : typing.ClassVar[Signal] = ... # capStyleChanged()
    widthChanged             : typing.ClassVar[Signal] = ... # widthChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, width: float | None = ..., capStyle: PySide6.QtCore.Qt.PenCapStyle | None = ...) -> None: ...

    @property
    def capStyle(self, /) -> PySide6.QtCore.Qt.PenCapStyle: ...
    @capStyle.setter
    def capStyle(self, newCapStyle: PySide6.QtCore.Qt.PenCapStyle, /) -> None: ...
    def componentComplete(self, /) -> None: ...
    def getControlPoints(self, /) -> typing.List[PySide6.QtCore.QPointF]: ...
    @property
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...
    @property
    def width(self, /) -> float: ...
    @width.setter
    def width(self, newWidth: float, /) -> None: ...


class QSurface3DSeries(PySide6.QtGraphs.QAbstract3DSeries):

    dataArrayChanged         : typing.ClassVar[Signal] = ... # dataArrayChanged(QSurfaceDataArray)
    dataProxyChanged         : typing.ClassVar[Signal] = ... # dataProxyChanged(QSurfaceDataProxy*)
    drawModeChanged          : typing.ClassVar[Signal] = ... # drawModeChanged(QSurface3DSeries::DrawFlags)
    flatShadingSupportedChanged: typing.ClassVar[Signal] = ... # flatShadingSupportedChanged(bool)
    selectedPointChanged     : typing.ClassVar[Signal] = ... # selectedPointChanged(QPoint)
    shadingChanged           : typing.ClassVar[Signal] = ... # shadingChanged(Shading)
    textureChanged           : typing.ClassVar[Signal] = ... # textureChanged(QImage)
    textureFileChanged       : typing.ClassVar[Signal] = ... # textureFileChanged(QString)
    wireframeColorChanged    : typing.ClassVar[Signal] = ... # wireframeColorChanged(QColor)

    class DrawFlag(enum.Flag):

        DrawWireframe             = ...  # 0x1
        DrawSurface               = ...  # 0x2
        DrawSurfaceAndWireframe   = ...  # 0x3

    class Shading(enum.Enum):

        Smooth                    = ...  # 0x0
        Flat                      = ...  # 0x1


    @typing.overload
    def __init__(self, dataProxy: PySide6.QtDataVisualization.QSurfaceDataProxy, /, parent: PySide6.QtCore.QObject | None = ..., *, selectedPoint: PySide6.QtCore.QPoint | None = ..., flatShadingSupported: bool | None = ..., drawMode: PySide6.QtGraphs.QSurface3DSeries.DrawFlag | None = ..., shading: PySide6.QtGraphs.QSurface3DSeries.Shading | None = ..., texture: PySide6.QtGui.QImage | None = ..., textureFile: str | None = ..., wireframeColor: PySide6.QtGui.QColor | None = ..., dataArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, dataProxy: PySide6.QtDataVisualization.QSurfaceDataProxy | None = ..., selectedPoint: PySide6.QtCore.QPoint | None = ..., flatShadingSupported: bool | None = ..., drawMode: PySide6.QtGraphs.QSurface3DSeries.DrawFlag | None = ..., shading: PySide6.QtGraphs.QSurface3DSeries.Shading | None = ..., texture: PySide6.QtGui.QImage | None = ..., textureFile: str | None = ..., wireframeColor: PySide6.QtGui.QColor | None = ..., dataArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]] | None = ...) -> None: ...

    def clearArray(self, /) -> None: ...
    def clearRow(self, rowIndex: int, /) -> None: ...
    @property
    def dataArray(self, /) -> typing.List[typing.List[PySide6.QtGraphs.QSurfaceDataItem]]: ...
    @dataArray.setter
    def dataArray(self, newDataArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]], /) -> None: ...
    @property
    def dataProxy(self, /) -> PySide6.QtGraphs.QSurfaceDataProxy: ...
    @dataProxy.setter
    def dataProxy(self, proxy: PySide6.QtGraphs.QSurfaceDataProxy, /) -> None: ...
    @property
    def drawMode(self, /) -> PySide6.QtGraphs.QSurface3DSeries.DrawFlag: ...
    @drawMode.setter
    def drawMode(self, mode: PySide6.QtGraphs.QSurface3DSeries.DrawFlag, /) -> None: ...
    @property
    def flatShadingSupported(self, /) -> bool: ...
    @staticmethod
    def invalidSelectionPosition() -> PySide6.QtCore.QPoint: ...
    @property
    def selectedPoint(self, /) -> PySide6.QtCore.QPoint: ...
    @selectedPoint.setter
    def selectedPoint(self, position: PySide6.QtCore.QPoint, /) -> None: ...
    @property
    def shading(self, /) -> PySide6.QtGraphs.QSurface3DSeries.Shading: ...
    @shading.setter
    def shading(self, shading: PySide6.QtGraphs.QSurface3DSeries.Shading, /) -> None: ...
    @property
    def texture(self, /) -> PySide6.QtGui.QImage: ...
    @texture.setter
    def texture(self, texture: PySide6.QtGui.QImage, /) -> None: ...
    @property
    def textureFile(self, /) -> str: ...
    @textureFile.setter
    def textureFile(self, filename: str, /) -> None: ...
    @property
    def wireframeColor(self, /) -> PySide6.QtGui.QColor: ...
    @wireframeColor.setter
    def wireframeColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...


class QSurfaceDataItem(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QSurfaceDataItem: PySide6.QtGraphs.QSurfaceDataItem, /) -> None: ...
    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    @typing.overload
    def __init__(self, x: float, y: float, z: float, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    def setPosition(self, pos: PySide6.QtGui.QVector3D, /) -> None: ...
    def setX(self, value: float, /) -> None: ...
    def setY(self, value: float, /) -> None: ...
    def setZ(self, value: float, /) -> None: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QSurfaceDataProxy(PySide6.QtGraphs.QAbstractDataProxy):

    arrayReset               : typing.ClassVar[Signal] = ... # arrayReset()
    columnCountChanged       : typing.ClassVar[Signal] = ... # columnCountChanged(qsizetype)
    itemChanged              : typing.ClassVar[Signal] = ... # itemChanged(qsizetype,qsizetype)
    rowCountChanged          : typing.ClassVar[Signal] = ... # rowCountChanged(qsizetype)
    rowsAdded                : typing.ClassVar[Signal] = ... # rowsAdded(qsizetype,qsizetype)
    rowsChanged              : typing.ClassVar[Signal] = ... # rowsChanged(qsizetype,qsizetype)
    rowsInserted             : typing.ClassVar[Signal] = ... # rowsInserted(qsizetype,qsizetype)
    rowsRemoved              : typing.ClassVar[Signal] = ... # rowsRemoved(qsizetype,qsizetype)
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged(QSurface3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, rowCount: int | None = ..., columnCount: int | None = ..., series: PySide6.QtDataVisualization.QSurface3DSeries | None = ...) -> None: ...

    def addRow(self, row: collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem], /) -> int: ...
    def addRows(self, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]], /) -> int: ...
    @property
    def columnCount(self, /) -> int: ...
    def insertRow(self, rowIndex: int, row: collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem], /) -> None: ...
    def insertRows(self, rowIndex: int, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]], /) -> None: ...
    @typing.overload
    def itemAt(self, position: PySide6.QtCore.QPoint, /) -> PySide6.QtGraphs.QSurfaceDataItem: ...
    @typing.overload
    def itemAt(self, rowIndex: int, columnIndex: int, /) -> PySide6.QtGraphs.QSurfaceDataItem: ...
    def removeRows(self, rowIndex: int, removeCount: int, /) -> None: ...
    @typing.overload
    def resetArray(self, /) -> None: ...
    @typing.overload
    def resetArray(self, newArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]], /) -> None: ...
    def resetArrayNp(self, x: float, deltaX: float, z: float, deltaZ: float, data: collections.abc.Sequence[typing.Any], /) -> None: ...
    @property
    def rowCount(self, /) -> int: ...
    @property
    def series(self, /) -> PySide6.QtGraphs.QSurface3DSeries: ...
    @typing.overload
    def setItem(self, position: PySide6.QtCore.QPoint, item: PySide6.QtGraphs.QSurfaceDataItem, /) -> None: ...
    @typing.overload
    def setItem(self, rowIndex: int, columnIndex: int, item: PySide6.QtGraphs.QSurfaceDataItem, /) -> None: ...
    def setRow(self, rowIndex: int, row: collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem], /) -> None: ...
    def setRows(self, rowIndex: int, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]], /) -> None: ...


class QValue3DAxis(PySide6.QtGraphs.QAbstract3DAxis):

    formatterChanged         : typing.ClassVar[Signal] = ... # formatterChanged(QValue3DAxisFormatter*)
    formatterDirty           : typing.ClassVar[Signal] = ... # formatterDirty()
    labelFormatChanged       : typing.ClassVar[Signal] = ... # labelFormatChanged(QString)
    reversedChanged          : typing.ClassVar[Signal] = ... # reversedChanged(bool)
    segmentCountChanged      : typing.ClassVar[Signal] = ... # segmentCountChanged(qsizetype)
    subSegmentCountChanged   : typing.ClassVar[Signal] = ... # subSegmentCountChanged(qsizetype)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, segmentCount: int | None = ..., subSegmentCount: int | None = ..., labelFormat: str | None = ..., formatter: PySide6.QtDataVisualization.QValue3DAxisFormatter | None = ..., reversed: bool | None = ...) -> None: ...

    @property
    def formatter(self, /) -> PySide6.QtGraphs.QValue3DAxisFormatter: ...
    @formatter.setter
    def formatter(self, formatter: PySide6.QtGraphs.QValue3DAxisFormatter, /) -> None: ...
    def gridPositionAt(self, gridLine: int, /) -> float: ...
    def gridSize(self, /) -> int: ...
    @property
    def labelFormat(self, /) -> str: ...
    @labelFormat.setter
    def labelFormat(self, format: str, /) -> None: ...
    def labelPositionAt(self, index: int, /) -> float: ...
    def positionAt(self, x: float, /) -> float: ...
    def recalculate(self, /) -> None: ...
    @property
    def reversed(self, /) -> bool: ...
    @reversed.setter
    def reversed(self, enable: bool, /) -> None: ...
    @property
    def segmentCount(self, /) -> int: ...
    @segmentCount.setter
    def segmentCount(self, count: int, /) -> None: ...
    def stringForValue(self, x: float, /) -> str: ...
    def subGridPositionAt(self, gridLine: int, /) -> float: ...
    def subGridSize(self, /) -> int: ...
    @property
    def subSegmentCount(self, /) -> int: ...
    @subSegmentCount.setter
    def subSegmentCount(self, count: int, /) -> None: ...


class QValue3DAxisFormatter(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def allowNegatives(self, /) -> bool: ...
    def allowZero(self, /) -> bool: ...
    def axis(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    def createNewInstance(self, /) -> PySide6.QtGraphs.QValue3DAxisFormatter: ...
    def gridPositions(self, /) -> typing.List[float]: ...
    def labelPositions(self, /) -> typing.List[float]: ...
    def labelStrings(self, /) -> typing.List[str]: ...
    def locale(self, /) -> PySide6.QtCore.QLocale: ...
    def markDirty(self, /, labelsChange: bool = ...) -> None: ...
    def populateCopy(self, copy: PySide6.QtGraphs.QValue3DAxisFormatter, /) -> None: ...
    def positionAt(self, value: float, /) -> float: ...
    def recalculate(self, /) -> None: ...
    def setAllowNegatives(self, allow: bool, /) -> None: ...
    def setAllowZero(self, allow: bool, /) -> None: ...
    def setAxis(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def setGridPoitions(self, gridPositions: collections.abc.Sequence[float], /) -> None: ...
    def setLabelStrings(self, labelStrings: collections.abc.Sequence[str], /) -> None: ...
    def setLocale(self, locale: PySide6.QtCore.QLocale | PySide6.QtCore.QLocale.Language, /) -> None: ...
    def setSubGridPositions(self, subGridPositions: collections.abc.Sequence[float], /) -> None: ...
    def setlabelPositions(self, labelPositions: collections.abc.Sequence[float], /) -> None: ...
    def stringForValue(self, value: float, format: str, /) -> str: ...
    def subGridPositions(self, /) -> typing.List[float]: ...
    def valueAt(self, position: float, /) -> float: ...


class QValueAxis(PySide6.QtGraphs.QAbstractAxis):

    labelDecimalsChanged     : typing.ClassVar[Signal] = ... # labelDecimalsChanged(int)
    labelFormatChanged       : typing.ClassVar[Signal] = ... # labelFormatChanged(QString)
    maxChanged               : typing.ClassVar[Signal] = ... # maxChanged(double)
    minChanged               : typing.ClassVar[Signal] = ... # minChanged(double)
    rangeChanged             : typing.ClassVar[Signal] = ... # rangeChanged(double,double)
    subTickCountChanged      : typing.ClassVar[Signal] = ... # subTickCountChanged(qsizetype)
    tickAnchorChanged        : typing.ClassVar[Signal] = ... # tickAnchorChanged(double)
    tickIntervalChanged      : typing.ClassVar[Signal] = ... # tickIntervalChanged(double)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, min: float | None = ..., max: float | None = ..., labelFormat: str | None = ..., labelDecimals: int | None = ..., subTickCount: int | None = ..., tickAnchor: float | None = ..., tickInterval: float | None = ...) -> None: ...

    @property
    def labelDecimals(self, /) -> int: ...
    @labelDecimals.setter
    def labelDecimals(self, decimals: int, /) -> None: ...
    @property
    def labelFormat(self, /) -> str: ...
    @labelFormat.setter
    def labelFormat(self, format: str, /) -> None: ...
    @property
    def max(self, /) -> float: ...
    @max.setter
    def max(self, max: float, /) -> None: ...
    @property
    def min(self, /) -> float: ...
    @min.setter
    def min(self, min: float, /) -> None: ...
    def setRange(self, min: float, max: float, /) -> None: ...
    @property
    def subTickCount(self, /) -> int: ...
    @subTickCount.setter
    def subTickCount(self, count: int, /) -> None: ...
    @property
    def tickAnchor(self, /) -> float: ...
    @tickAnchor.setter
    def tickAnchor(self, anchor: float, /) -> None: ...
    @property
    def tickInterval(self, /) -> float: ...
    @tickInterval.setter
    def tickInterval(self, interval: float, /) -> None: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractAxis.AxisType: ...


class QXYModelMapper(PySide6.QtCore.QObject):

    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    firstChanged             : typing.ClassVar[Signal] = ... # firstChanged()
    modelChanged             : typing.ClassVar[Signal] = ... # modelChanged()
    orientationChanged       : typing.ClassVar[Signal] = ... # orientationChanged()
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged()
    xSectionChanged          : typing.ClassVar[Signal] = ... # xSectionChanged()
    ySectionChanged          : typing.ClassVar[Signal] = ... # ySectionChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, series: PySide6.QtCharts.QXYSeries | None = ..., model: PySide6.QtCore.QAbstractItemModel | None = ..., xSection: int | None = ..., ySection: int | None = ..., first: int | None = ..., count: int | None = ..., orientation: PySide6.QtCore.Qt.Orientation | None = ...) -> None: ...

    @property
    def count(self, /) -> int: ...
    @count.setter
    def count(self, count: int, /) -> None: ...
    @property
    def first(self, /) -> int: ...
    @first.setter
    def first(self, first: int, /) -> None: ...
    @property
    def model(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    @model.setter
    def model(self, model: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    @property
    def orientation(self, /) -> PySide6.QtCore.Qt.Orientation: ...
    @orientation.setter
    def orientation(self, orientation: PySide6.QtCore.Qt.Orientation, /) -> None: ...
    @property
    def series(self, /) -> PySide6.QtGraphs.QXYSeries: ...
    @series.setter
    def series(self, series: PySide6.QtGraphs.QXYSeries, /) -> None: ...
    @property
    def xSection(self, /) -> int: ...
    @xSection.setter
    def xSection(self, xSection: int, /) -> None: ...
    @property
    def ySection(self, /) -> int: ...
    @ySection.setter
    def ySection(self, ySection: int, /) -> None: ...


class QXYSeries(PySide6.QtGraphs.QAbstractSeries):

    colorChanged             : typing.ClassVar[Signal] = ... # colorChanged(QColor)
    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    draggableChanged         : typing.ClassVar[Signal] = ... # draggableChanged()
    pointAdded               : typing.ClassVar[Signal] = ... # pointAdded(qsizetype)
    pointDelegateChanged     : typing.ClassVar[Signal] = ... # pointDelegateChanged()
    pointRemoved             : typing.ClassVar[Signal] = ... # pointRemoved(qsizetype)
    pointReplaced            : typing.ClassVar[Signal] = ... # pointReplaced(qsizetype)
    pointsRemoved            : typing.ClassVar[Signal] = ... # pointsRemoved(qsizetype,qsizetype)
    pointsReplaced           : typing.ClassVar[Signal] = ... # pointsReplaced()
    selectedColorChanged     : typing.ClassVar[Signal] = ... # selectedColorChanged(QColor)
    selectedPointsChanged    : typing.ClassVar[Signal] = ... # selectedPointsChanged()
    seriesUpdated            : typing.ClassVar[Signal] = ... # seriesUpdated()
    @typing.overload
    def __lshift__(self, points: collections.abc.Sequence[PySide6.QtCore.QPointF], /) -> PySide6.QtGraphs.QXYSeries: ...
    @typing.overload
    def __lshift__(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> PySide6.QtGraphs.QXYSeries: ...
    @typing.overload
    def append(self, points: collections.abc.Sequence[PySide6.QtCore.QPointF], /) -> None: ...
    @typing.overload
    def append(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    @typing.overload
    def append(self, x: float, y: float, /) -> None: ...
    def appendNp(self, x: collections.abc.Sequence[typing.Any], y: collections.abc.Sequence[typing.Any], /) -> None: ...
    def at(self, index: int, /) -> PySide6.QtCore.QPointF: ...
    def clear(self, /) -> None: ...
    @property
    def color(self, /) -> PySide6.QtGui.QColor: ...
    @color.setter
    def color(self, newColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def count(self, /) -> int: ...
    def deselectAllPoints(self, /) -> None: ...
    def deselectPoint(self, index: int, /) -> None: ...
    def deselectPoints(self, indexes: collections.abc.Sequence[int], /) -> None: ...
    @property
    def draggable(self, /) -> bool: ...
    @draggable.setter
    def draggable(self, newDraggable: bool, /) -> None: ...
    def find(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> int: ...
    def insert(self, index: int, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    def isPointSelected(self, index: int, /) -> bool: ...
    @property
    def pointDelegate(self, /) -> PySide6.QtQml.QQmlComponent: ...
    @pointDelegate.setter
    def pointDelegate(self, newPointDelegate: PySide6.QtQml.QQmlComponent, /) -> None: ...
    def points(self, /) -> typing.List[PySide6.QtCore.QPointF]: ...
    def qt_qmlMarker_uncreatable(self, /) -> None: ...
    @typing.overload
    def remove(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    @typing.overload
    def remove(self, index: int, /) -> None: ...
    @typing.overload
    def remove(self, x: float, y: float, /) -> None: ...
    def removeMultiple(self, index: int, count: int, /) -> None: ...
    @typing.overload
    def replace(self, points: collections.abc.Sequence[PySide6.QtCore.QPointF], /) -> None: ...
    @typing.overload
    def replace(self, oldPoint: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, newPoint: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    @typing.overload
    def replace(self, index: int, newPoint: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    @typing.overload
    def replace(self, index: int, newX: float, newY: float, /) -> None: ...
    @typing.overload
    def replace(self, oldX: float, oldY: float, newX: float, newY: float, /) -> None: ...
    def replaceNp(self, x: collections.abc.Sequence[typing.Any], y: collections.abc.Sequence[typing.Any], /) -> None: ...
    def selectAllPoints(self, /) -> None: ...
    def selectPoint(self, index: int, /) -> None: ...
    def selectPoints(self, indexes: collections.abc.Sequence[int], /) -> None: ...
    @property
    def selectedColor(self, /) -> PySide6.QtGui.QColor: ...
    @selectedColor.setter
    def selectedColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def selectedPoints(self, /) -> typing.List[int]: ...
    def setPointSelected(self, index: int, selected: bool, /) -> None: ...
    def take(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> bool: ...
    def toggleSelection(self, indexes: collections.abc.Sequence[int], /) -> None: ...


class QtGraphs3D(Shiboken.Object):

    class CameraPreset(enum.Enum):

        NoPreset                  = ...  # 0x0
        FrontLow                  = ...  # 0x1
        Front                     = ...  # 0x2
        FrontHigh                 = ...  # 0x3
        LeftLow                   = ...  # 0x4
        Left                      = ...  # 0x5
        LeftHigh                  = ...  # 0x6
        RightLow                  = ...  # 0x7
        Right                     = ...  # 0x8
        RightHigh                 = ...  # 0x9
        BehindLow                 = ...  # 0xa
        Behind                    = ...  # 0xb
        BehindHigh                = ...  # 0xc
        IsometricLeft             = ...  # 0xd
        IsometricLeftHigh         = ...  # 0xe
        IsometricRight            = ...  # 0xf
        IsometricRightHigh        = ...  # 0x10
        DirectlyAbove             = ...  # 0x11
        DirectlyAboveCW45         = ...  # 0x12
        DirectlyAboveCCW45        = ...  # 0x13
        FrontBelow                = ...  # 0x14
        LeftBelow                 = ...  # 0x15
        RightBelow                = ...  # 0x16
        BehindBelow               = ...  # 0x17
        DirectlyBelow             = ...  # 0x18

    class ElementType(enum.Enum):

        None_                     = ...  # 0x0
        Series                    = ...  # 0x1
        AxisXLabel                = ...  # 0x2
        AxisYLabel                = ...  # 0x3
        AxisZLabel                = ...  # 0x4
        CustomItem                = ...  # 0x5

    class GridLineType(enum.Enum):

        Shader                    = ...  # 0x0
        Geometry                  = ...  # 0x1

    class OptimizationHint(enum.Flag):

        Default                   = ...  # 0x0
        Legacy                    = ...  # 0x1

    class RenderingMode(enum.Enum):

        DirectToBackground        = ...  # 0x0
        Indirect                  = ...  # 0x1

    class SelectionFlag(enum.Flag):

        None_                     = ...  # 0x0
        Item                      = ...  # 0x1
        Row                       = ...  # 0x2
        ItemAndRow                = ...  # 0x3
        Column                    = ...  # 0x4
        ItemAndColumn             = ...  # 0x5
        RowAndColumn              = ...  # 0x6
        ItemRowAndColumn          = ...  # 0x7
        Slice                     = ...  # 0x8
        MultiSeries               = ...  # 0x10

    class ShadowQuality(enum.Enum):

        None_                     = ...  # 0x0
        Low                       = ...  # 0x1
        Medium                    = ...  # 0x2
        High                      = ...  # 0x3
        SoftLow                   = ...  # 0x4
        SoftMedium                = ...  # 0x5
        SoftHigh                  = ...  # 0x6


def qDefaultSurfaceFormat(antialias: bool, /) -> PySide6.QtGui.QSurfaceFormat: ...


# eof
