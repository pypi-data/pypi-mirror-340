# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtQml, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtQml`

import PySide6.QtQml
import PySide6.QtCore
import PySide6.QtNetwork

import os
import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class ListProperty(PySide6.QtCore.Property):

    def __init__(self, type: type, /, append: collections.abc.Callable[..., typing.Any] | None = ..., at: collections.abc.Callable[..., typing.Any] | None = ..., clear: collections.abc.Callable[..., typing.Any] | None = ..., count: collections.abc.Callable[..., typing.Any] | None = ...) -> None: ...


class QIntList: ...


class QJSEngine(PySide6.QtCore.QObject):

    uiLanguageChanged        : typing.ClassVar[Signal] = ... # uiLanguageChanged()

    class Extension(enum.Flag):

        TranslationExtension      = ...  # 0x1
        ConsoleExtension          = ...  # 0x2
        GarbageCollectionExtension = ...  # 0x4
        AllExtensions             = ...  # 0xffffffff

    class ObjectOwnership(enum.Enum):

        CppOwnership              = ...  # 0x0
        JavaScriptOwnership       = ...  # 0x1


    @typing.overload
    def __init__(self, parent: PySide6.QtCore.QObject, /, *, ui_language: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, ui_language: str | None = ...) -> None: ...

    def catch_error(self, /) -> PySide6.QtQml.QJSValue: ...
    def collect_garbage(self, /) -> None: ...
    def evaluate(self, program: str, /, fileName: str = ..., lineNumber: int = ...) -> typing.Tuple[PySide6.QtQml.QJSValue, typing.List[str]]: ...
    def global_object(self, /) -> PySide6.QtQml.QJSValue: ...
    def has_error(self, /) -> bool: ...
    def import_module(self, fileName: str, /) -> PySide6.QtQml.QJSValue: ...
    def install_extensions(self, extensions: PySide6.QtQml.QJSEngine.Extension, /, object: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int = ...) -> None: ...
    def is_interrupted(self, /) -> bool: ...
    def newQMetaObject(self, metaObject: PySide6.QtCore.QMetaObject, /) -> PySide6.QtQml.QJSValue: ...
    def newQObject(self, object: PySide6.QtCore.QObject, /) -> PySide6.QtQml.QJSValue: ...
    def new_array(self, /, length: int | None = ...) -> PySide6.QtQml.QJSValue: ...
    def new_error_object(self, errorType: PySide6.QtQml.QJSValue.ErrorType, /, message: str = ...) -> PySide6.QtQml.QJSValue: ...
    def new_object(self, /) -> PySide6.QtQml.QJSValue: ...
    def new_symbol(self, name: str, /) -> PySide6.QtQml.QJSValue: ...
    @staticmethod
    def object_ownership(arg__1: PySide6.QtCore.QObject, /) -> PySide6.QtQml.QJSEngine.ObjectOwnership: ...
    def register_module(self, moduleName: str, value: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /) -> bool: ...
    def set_interrupted(self, interrupted: bool, /) -> None: ...
    @staticmethod
    def set_object_ownership(arg__1: PySide6.QtCore.QObject, arg__2: PySide6.QtQml.QJSEngine.ObjectOwnership, /) -> None: ...
    def set_ui_language(self, language: str, /) -> None: ...
    @typing.overload
    def throw_error(self, errorType: PySide6.QtQml.QJSValue.ErrorType, /, message: str = ...) -> None: ...
    @typing.overload
    def throw_error(self, message: str, /) -> None: ...
    @typing.overload
    def throw_error(self, error: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /) -> None: ...
    def to_script_value(self, value: typing.Any, /) -> PySide6.QtQml.QJSValue: ...
    def ui_language(self, /) -> str: ...


class QJSManagedValue(Shiboken.Object):

    class Type(enum.Enum):

        Undefined                 = ...  # 0x0
        Boolean                   = ...  # 0x1
        Number                    = ...  # 0x2
        String                    = ...  # 0x3
        Object                    = ...  # 0x4
        Symbol                    = ...  # 0x5
        Function                  = ...  # 0x6


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, string: str, engine: PySide6.QtQml.QJSEngine, /) -> None: ...
    @typing.overload
    def __init__(self, value: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, engine: PySide6.QtQml.QJSEngine, /) -> None: ...
    @typing.overload
    def __init__(self, value: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, engine: PySide6.QtQml.QJSEngine, /) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any, engine: PySide6.QtQml.QJSEngine, /) -> None: ...

    def call(self, /, arguments: collections.abc.Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSValue: ...
    def call_as_constructor(self, /, arguments: collections.abc.Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSValue: ...
    def call_with_instance(self, instance: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /, arguments: collections.abc.Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSValue: ...
    @typing.overload
    def delete_property(self, name: str, /) -> bool: ...
    @typing.overload
    def delete_property(self, arrayIndex: int, /) -> bool: ...
    def engine(self, /) -> PySide6.QtQml.QJSEngine: ...
    def equals(self, other: PySide6.QtQml.QJSManagedValue, /) -> bool: ...
    @typing.overload
    def has_own_property(self, name: str, /) -> bool: ...
    @typing.overload
    def has_own_property(self, arrayIndex: int, /) -> bool: ...
    @typing.overload
    def has_property(self, name: str, /) -> bool: ...
    @typing.overload
    def has_property(self, arrayIndex: int, /) -> bool: ...
    def isQMetaObject(self, /) -> bool: ...
    def isQObject(self, /) -> bool: ...
    def is_array(self, /) -> bool: ...
    def is_boolean(self, /) -> bool: ...
    def is_date(self, /) -> bool: ...
    def is_error(self, /) -> bool: ...
    def is_function(self, /) -> bool: ...
    def is_integer(self, /) -> bool: ...
    def is_js_meta_type(self, /) -> bool: ...
    def is_null(self, /) -> bool: ...
    def is_number(self, /) -> bool: ...
    def is_object(self, /) -> bool: ...
    def is_regular_expression(self, /) -> bool: ...
    def is_string(self, /) -> bool: ...
    def is_symbol(self, /) -> bool: ...
    def is_undefined(self, /) -> bool: ...
    def is_url(self, /) -> bool: ...
    def is_variant(self, /) -> bool: ...
    def js_meta_instantiate(self, /, values: collections.abc.Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSManagedValue: ...
    def js_meta_members(self, /) -> typing.List[str]: ...
    def js_meta_type(self, /) -> PySide6.QtQml.QJSManagedValue: ...
    @typing.overload
    def property(self, name: str, /) -> PySide6.QtQml.QJSValue: ...
    @typing.overload
    def property(self, arrayIndex: int, /) -> PySide6.QtQml.QJSValue: ...
    def prototype(self, /) -> PySide6.QtQml.QJSManagedValue: ...
    @typing.overload
    def set_property(self, name: str, value: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /) -> None: ...
    @typing.overload
    def set_property(self, arrayIndex: int, value: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /) -> None: ...
    def set_prototype(self, prototype: PySide6.QtQml.QJSManagedValue, /) -> None: ...
    def strictly_equals(self, other: PySide6.QtQml.QJSManagedValue, /) -> bool: ...
    def toJSValue(self, /) -> PySide6.QtQml.QJSValue: ...
    def toQMetaObject(self, /) -> PySide6.QtCore.QMetaObject: ...
    def toQObject(self, /) -> PySide6.QtCore.QObject: ...
    def to_boolean(self, /) -> bool: ...
    def to_date_time(self, /) -> PySide6.QtCore.QDateTime: ...
    def to_integer(self, /) -> int: ...
    def to_number(self, /) -> float: ...
    def to_primitive(self, /) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def to_regular_expression(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def to_string(self, /) -> str: ...
    def to_url(self, /) -> PySide6.QtCore.QUrl: ...
    def to_variant(self, /) -> typing.Any: ...
    def type(self, /) -> PySide6.QtQml.QJSManagedValue.Type: ...


class QJSPrimitiveValue(Shiboken.Object):

    class Type(enum.Enum):

        Undefined                 = ...  # 0x0
        Null                      = ...  # 0x1
        Boolean                   = ...  # 0x2
        Integer                   = ...  # 0x3
        Double                    = ...  # 0x4
        String                    = ...  # 0x5


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, string: str, /) -> None: ...
    @typing.overload
    def __init__(self, type: PySide6.QtCore.QMetaType | PySide6.QtCore.QMetaType.Type, /) -> None: ...
    @typing.overload
    def __init__(self, type: PySide6.QtCore.QMetaType | PySide6.QtCore.QMetaType.Type, value: int, /) -> None: ...
    @typing.overload
    def __init__(self, value: bool, /) -> None: ...
    @typing.overload
    def __init__(self, value: int, /) -> None: ...
    @typing.overload
    def __init__(self, value: float, /) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any, /) -> None: ...

    def __add__(self, rhs: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, /) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, /) -> bool: ...
    def __ge__(self, rhs: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, /) -> bool: ...
    def __gt__(self, rhs: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, /) -> bool: ...
    def __iadd__(self, arg__1: int, /) -> PySide6.QtQml.QJSPrimitiveValue: ...  # type: ignore[misc]
    def __isub__(self, arg__1: int, /) -> PySide6.QtQml.QJSPrimitiveValue: ...  # type: ignore[misc]
    def __le__(self, rhs: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, /) -> bool: ...
    def __lt__(self, rhs: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, /) -> bool: ...
    def __mod__(self, rhs: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, /) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def __mul__(self, rhs: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, /) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def __ne__(self, rhs: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, /) -> bool: ...
    def __neg__(self, /) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def __pos__(self, /) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def __sub__(self, rhs: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, /) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def const_data(self, /) -> int: ...
    def data(self, /) -> int: ...
    def equals(self, other: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, /) -> bool: ...
    def meta_type(self, /) -> PySide6.QtCore.QMetaType: ...
    def strictly_equals(self, other: PySide6.QtQml.QJSPrimitiveValue | str | bool | float | int, /) -> bool: ...
    def to_boolean(self, /) -> bool: ...
    def to_double(self, /) -> float: ...
    def to_integer(self, /) -> int: ...
    def to_string(self, /) -> str: ...
    def to_variant(self, /) -> typing.Any: ...
    def type(self, /) -> PySide6.QtQml.QJSPrimitiveValue.Type: ...


class QJSValue(Shiboken.Object):

    class ErrorType(enum.Enum):

        NoError                   = ...  # 0x0
        GenericError              = ...  # 0x1
        EvalError                 = ...  # 0x2
        RangeError                = ...  # 0x3
        ReferenceError            = ...  # 0x4
        SyntaxError               = ...  # 0x5
        TypeError                 = ...  # 0x6
        URIError                  = ...  # 0x7

    class ObjectConversionBehavior(enum.Enum):

        ConvertJSObjects          = ...  # 0x0
        RetainJSObjects           = ...  # 0x1

    class SpecialValue(enum.Enum):

        NullValue                 = ...  # 0x0
        UndefinedValue            = ...  # 0x1


    @typing.overload
    def __init__(self, other: PySide6.QtQml.QJSValue, /) -> None: ...
    @typing.overload
    def __init__(self, /, value: PySide6.QtQml.QJSValue.SpecialValue = ...) -> None: ...
    @typing.overload
    def __init__(self, value: str, /) -> None: ...
    @typing.overload
    def __init__(self, str: bytes | bytearray | memoryview, /) -> None: ...
    @typing.overload
    def __init__(self, value: bool, /) -> None: ...
    @typing.overload
    def __init__(self, value: int, /) -> None: ...
    @typing.overload
    def __init__(self, value: float, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __lshift__(self, arg__1: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def __rshift__(self, arg__1: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def call(self, /, args: collections.abc.Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSValue: ...
    def call_as_constructor(self, /, args: collections.abc.Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSValue: ...
    def call_with_instance(self, instance: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /, args: collections.abc.Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSValue: ...
    def delete_property(self, name: str, /) -> bool: ...
    def equals(self, other: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /) -> bool: ...
    def error_type(self, /) -> PySide6.QtQml.QJSValue.ErrorType: ...
    def has_own_property(self, name: str, /) -> bool: ...
    def has_property(self, name: str, /) -> bool: ...
    def isQMetaObject(self, /) -> bool: ...
    def isQObject(self, /) -> bool: ...
    def is_array(self, /) -> bool: ...
    def is_bool(self, /) -> bool: ...
    def is_callable(self, /) -> bool: ...
    def is_date(self, /) -> bool: ...
    def is_error(self, /) -> bool: ...
    def is_null(self, /) -> bool: ...
    def is_number(self, /) -> bool: ...
    def is_object(self, /) -> bool: ...
    def is_reg_exp(self, /) -> bool: ...
    def is_string(self, /) -> bool: ...
    def is_undefined(self, /) -> bool: ...
    def is_url(self, /) -> bool: ...
    def is_variant(self, /) -> bool: ...
    @typing.overload
    def property(self, name: str, /) -> PySide6.QtQml.QJSValue: ...
    @typing.overload
    def property(self, arrayIndex: int, /) -> PySide6.QtQml.QJSValue: ...
    def prototype(self, /) -> PySide6.QtQml.QJSValue: ...
    @typing.overload
    def set_property(self, name: str, value: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /) -> None: ...
    @typing.overload
    def set_property(self, arrayIndex: int, value: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /) -> None: ...
    def set_prototype(self, prototype: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /) -> None: ...
    def strictly_equals(self, other: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /) -> bool: ...
    def toQMetaObject(self, /) -> PySide6.QtCore.QMetaObject: ...
    def toQObject(self, /) -> PySide6.QtCore.QObject: ...
    def toUInt(self, /) -> int: ...
    def to_bool(self, /) -> bool: ...
    def to_date_time(self, /) -> PySide6.QtCore.QDateTime: ...
    def to_int(self, /) -> int: ...
    def to_number(self, /) -> float: ...
    def to_primitive(self, /) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def to_string(self, /) -> str: ...
    @typing.overload
    def to_variant(self, /) -> typing.Any: ...
    @typing.overload
    def to_variant(self, behavior: PySide6.QtQml.QJSValue.ObjectConversionBehavior, /) -> typing.Any: ...


class QJSValueIterator(Shiboken.Object):

    def __init__(self, value: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /) -> None: ...

    def has_next(self, /) -> bool: ...
    def name(self, /) -> str: ...
    def next(self, /) -> bool: ...
    def value(self, /) -> PySide6.QtQml.QJSValue: ...


class QPyQmlParserStatus(PySide6.QtCore.QObject, PySide6.QtQml.QQmlParserStatus):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...


class QPyQmlPropertyValueSource(PySide6.QtCore.QObject, PySide6.QtQml.QQmlPropertyValueSource):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...


class QQmlAbstractUrlInterceptor(Shiboken.Object):

    class DataType(enum.Enum):

        QmlFile                   = ...  # 0x0
        JavaScriptFile            = ...  # 0x1
        QmldirFile                = ...  # 0x2
        UrlString                 = ...  # 0x1000


    def __init__(self, /) -> None: ...

    def intercept(self, path: PySide6.QtCore.QUrl | str, type: PySide6.QtQml.QQmlAbstractUrlInterceptor.DataType, /) -> PySide6.QtCore.QUrl: ...


class QQmlApplicationEngine(PySide6.QtQml.QQmlEngine):

    objectCreated            : typing.ClassVar[Signal] = ... # objectCreated(QObject*,QUrl)
    objectCreationFailed     : typing.ClassVar[Signal] = ... # objectCreationFailed(QUrl)

    @typing.overload
    def __init__(self, uri: str, typeName: str, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, filePath: str, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, url: PySide6.QtCore.QUrl | str, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    @typing.overload
    def load(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    @typing.overload
    def load(self, filePath: str | bytes | os.PathLike[str], /) -> None: ...
    def load_data(self, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /, url: PySide6.QtCore.QUrl | str = ...) -> None: ...
    def load_from_module(self, uri: str, typeName: str, /) -> None: ...
    def root_objects(self, /) -> typing.List[PySide6.QtCore.QObject]: ...
    def set_extra_file_selectors(self, extraFileSelectors: collections.abc.Sequence[str], /) -> None: ...
    def set_initial_properties(self, initialProperties: typing.Dict[str, typing.Any], /) -> None: ...


class QQmlComponent(PySide6.QtCore.QObject):

    progressChanged          : typing.ClassVar[Signal] = ... # progressChanged(double)
    statusChanged            : typing.ClassVar[Signal] = ... # statusChanged(QQmlComponent::Status)

    class CompilationMode(enum.Enum):

        PreferSynchronous         = ...  # 0x0
        Asynchronous              = ...  # 0x1

    class Status(enum.Enum):

        Null                      = ...  # 0x0
        Ready                     = ...  # 0x1
        Loading                   = ...  # 0x2
        Error                     = ...  # 0x3


    @typing.overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlEngine, url: PySide6.QtCore.QUrl, mode: PySide6.QtQml.QQmlComponent.CompilationMode, /, parent: PySide6.QtCore.QObject | None = ..., *, progress: float | None = ..., status: PySide6.QtQml.QQmlComponent.Status | None = ...) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlEngine, url: PySide6.QtCore.QUrl, /, parent: PySide6.QtCore.QObject | None = ..., *, progress: float | None = ..., status: PySide6.QtQml.QQmlComponent.Status | None = ...) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlEngine, fileName: str, mode: PySide6.QtQml.QQmlComponent.CompilationMode, /, parent: PySide6.QtCore.QObject | None = ..., *, progress: float | None = ..., status: PySide6.QtQml.QQmlComponent.Status | None = ..., url: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, engine: PySide6.QtQml.QQmlEngine, uri: str, typeName: str, mode: PySide6.QtQml.QQmlComponent.CompilationMode, /, parent: PySide6.QtCore.QObject | None = ..., *, progress: float | None = ..., status: PySide6.QtQml.QQmlComponent.Status | None = ..., url: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, engine: PySide6.QtQml.QQmlEngine, uri: str, typeName: str, /, parent: PySide6.QtCore.QObject | None = ..., *, progress: float | None = ..., status: PySide6.QtQml.QQmlComponent.Status | None = ..., url: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlEngine, fileName: str, /, parent: PySide6.QtCore.QObject | None = ..., *, progress: float | None = ..., status: PySide6.QtQml.QQmlComponent.Status | None = ..., url: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlEngine, /, parent: PySide6.QtCore.QObject | None = ..., *, progress: float | None = ..., status: PySide6.QtQml.QQmlComponent.Status | None = ..., url: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, progress: float | None = ..., status: PySide6.QtQml.QQmlComponent.Status | None = ..., url: PySide6.QtCore.QUrl | None = ...) -> None: ...

    def begin_create(self, arg__1: PySide6.QtQml.QQmlContext, /) -> PySide6.QtCore.QObject: ...
    def complete_create(self, /) -> None: ...
    @typing.overload
    def create(self, arg__1: PySide6.QtQml.QQmlIncubator, /, context: PySide6.QtQml.QQmlContext | None = ..., forContext: PySide6.QtQml.QQmlContext | None = ...) -> None: ...
    @typing.overload
    def create(self, /, context: PySide6.QtQml.QQmlContext | None = ...) -> PySide6.QtCore.QObject: ...
    def create_object(self, /, parent: PySide6.QtCore.QObject | None = ..., properties: typing.Dict[str, typing.Any] = ...) -> PySide6.QtCore.QObject: ...
    def create_with_initial_properties(self, initialProperties: typing.Dict[str, typing.Any], /, context: PySide6.QtQml.QQmlContext | None = ...) -> PySide6.QtCore.QObject: ...
    def creation_context(self, /) -> PySide6.QtQml.QQmlContext: ...
    def engine(self, /) -> PySide6.QtQml.QQmlEngine: ...
    def error_string(self, /) -> str: ...
    def errors(self, /) -> typing.List[PySide6.QtQml.QQmlError]: ...
    def is_bound(self, /) -> bool: ...
    def is_error(self, /) -> bool: ...
    def is_loading(self, /) -> bool: ...
    def is_null(self, /) -> bool: ...
    def is_ready(self, /) -> bool: ...
    def load_from_module(self, uri: str, typeName: str, /, mode: PySide6.QtQml.QQmlComponent.CompilationMode = ...) -> None: ...
    @typing.overload
    def load_url(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    @typing.overload
    def load_url(self, url: PySide6.QtCore.QUrl | str, mode: PySide6.QtQml.QQmlComponent.CompilationMode, /) -> None: ...
    def progress(self, /) -> float: ...
    def set_data(self, arg__1: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, baseUrl: PySide6.QtCore.QUrl | str, /) -> None: ...
    def set_initial_properties(self, component: PySide6.QtCore.QObject, properties: typing.Dict[str, typing.Any], /) -> None: ...
    def status(self, /) -> PySide6.QtQml.QQmlComponent.Status: ...
    def url(self, /) -> PySide6.QtCore.QUrl: ...


class QQmlContext(PySide6.QtCore.QObject):

    class PropertyPair(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, PropertyPair: PySide6.QtQml.QQmlContext.PropertyPair, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...


    @typing.overload
    def __init__(self, parent: PySide6.QtQml.QQmlEngine, /, objParent: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, parent: PySide6.QtQml.QQmlContext, /, objParent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def base_url(self, /) -> PySide6.QtCore.QUrl: ...
    def context_object(self, /) -> PySide6.QtCore.QObject: ...
    def context_property(self, arg__1: str, /) -> typing.Any: ...
    def engine(self, /) -> PySide6.QtQml.QQmlEngine: ...
    def imported_script(self, name: str, /) -> PySide6.QtQml.QJSValue: ...
    def is_valid(self, /) -> bool: ...
    def name_for_object(self, arg__1: PySide6.QtCore.QObject, /) -> str: ...
    def object_for_name(self, arg__1: str, /) -> PySide6.QtCore.QObject: ...
    def parent_context(self, /) -> PySide6.QtQml.QQmlContext: ...
    def resolved_url(self, arg__1: PySide6.QtCore.QUrl | str, /) -> PySide6.QtCore.QUrl: ...
    def set_base_url(self, arg__1: PySide6.QtCore.QUrl | str, /) -> None: ...
    def set_context_object(self, arg__1: PySide6.QtCore.QObject, /) -> None: ...
    def set_context_properties(self, properties: collections.abc.Sequence[PySide6.QtQml.QQmlContext.PropertyPair], /) -> None: ...
    @typing.overload
    def set_context_property(self, arg__1: str, arg__2: PySide6.QtCore.QObject, /) -> None: ...
    @typing.overload
    def set_context_property(self, arg__1: str, arg__2: typing.Any, /) -> None: ...


class QQmlDebuggingEnabler(Shiboken.Object):

    class StartMode(enum.Enum):

        DoNotWaitForClient        = ...  # 0x0
        WaitForClient             = ...  # 0x1


    def __init__(self, /, printWarning: bool = ...) -> None: ...

    @staticmethod
    def connect_to_local_debugger(socketFileName: str, /, mode: PySide6.QtQml.QQmlDebuggingEnabler.StartMode = ...) -> bool: ...
    @staticmethod
    def debugger_services() -> typing.List[str]: ...
    @staticmethod
    def enable_debugging(printWarning: bool, /) -> None: ...
    @staticmethod
    def inspector_services() -> typing.List[str]: ...
    @staticmethod
    def native_debugger_services() -> typing.List[str]: ...
    @staticmethod
    def profiler_services() -> typing.List[str]: ...
    @staticmethod
    def set_services(services: collections.abc.Sequence[str], /) -> None: ...
    @staticmethod
    def start_debug_connector(pluginName: str, /, configuration: typing.Dict[str, typing.Any] = ...) -> bool: ...
    @staticmethod
    def start_tcp_debug_server(port: int, /, mode: PySide6.QtQml.QQmlDebuggingEnabler.StartMode = ..., hostName: str = ...) -> bool: ...


class QQmlEngine(PySide6.QtQml.QJSEngine):

    exit                     : typing.ClassVar[Signal] = ... # exit(int)
    offlineStoragePathChanged: typing.ClassVar[Signal] = ... # offlineStoragePathChanged()
    quit                     : typing.ClassVar[Signal] = ... # quit()
    warnings                 : typing.ClassVar[Signal] = ... # warnings(QList<QQmlError>)

    def __init__(self, /, p: PySide6.QtCore.QObject | None = ..., *, offline_storage_path: str | None = ...) -> None: ...

    def add_image_provider(self, id: str, arg__2: PySide6.QtQml.QQmlImageProviderBase, /) -> None: ...
    def add_import_path(self, dir: str | bytes | os.PathLike[str], /) -> None: ...
    def add_named_bundle(self, arg__1: str, arg__2: str, /) -> bool: ...
    def add_plugin_path(self, dir: str | bytes | os.PathLike[str], /) -> None: ...
    def add_url_interceptor(self, urlInterceptor: PySide6.QtQml.QQmlAbstractUrlInterceptor, /) -> None: ...
    def base_url(self, /) -> PySide6.QtCore.QUrl: ...
    def capture_property(self, object: PySide6.QtCore.QObject, property: PySide6.QtCore.QMetaProperty, /) -> None: ...
    def clear_component_cache(self, /) -> None: ...
    def clear_singletons(self, /) -> None: ...
    @staticmethod
    def context_for_object(arg__1: PySide6.QtCore.QObject, /) -> PySide6.QtQml.QQmlContext: ...
    def event(self, arg__1: PySide6.QtCore.QEvent, /) -> bool: ...
    def image_provider(self, id: str, /) -> PySide6.QtQml.QQmlImageProviderBase: ...
    def import_path_list(self, /) -> typing.List[str]: ...
    def import_plugin(self, filePath: str, uri: str, errors: collections.abc.Sequence[PySide6.QtQml.QQmlError], /) -> bool: ...
    def incubation_controller(self, /) -> PySide6.QtQml.QQmlIncubationController: ...
    def intercept_url(self, url: PySide6.QtCore.QUrl | str, type: PySide6.QtQml.QQmlAbstractUrlInterceptor.DataType, /) -> PySide6.QtCore.QUrl: ...
    def mark_current_function_as_translation_binding(self, /) -> None: ...
    def network_access_manager(self, /) -> PySide6.QtNetwork.QNetworkAccessManager: ...
    def network_access_manager_factory(self, /) -> PySide6.QtQml.QQmlNetworkAccessManagerFactory: ...
    def offline_storage_database_file_path(self, databaseName: str, /) -> str: ...
    def offline_storage_path(self, /) -> str: ...
    def output_warnings_to_standard_error(self, /) -> bool: ...
    def plugin_path_list(self, /) -> typing.List[str]: ...
    def remove_image_provider(self, id: str, /) -> None: ...
    def remove_url_interceptor(self, urlInterceptor: PySide6.QtQml.QQmlAbstractUrlInterceptor, /) -> None: ...
    def retranslate(self, /) -> None: ...
    def root_context(self, /) -> PySide6.QtQml.QQmlContext: ...
    def set_base_url(self, arg__1: PySide6.QtCore.QUrl | str, /) -> None: ...
    @staticmethod
    def set_context_for_object(arg__1: PySide6.QtCore.QObject, arg__2: PySide6.QtQml.QQmlContext, /) -> None: ...
    def set_import_path_list(self, paths: collections.abc.Sequence[str], /) -> None: ...
    def set_incubation_controller(self, arg__1: PySide6.QtQml.QQmlIncubationController, /) -> None: ...
    def set_network_access_manager_factory(self, arg__1: PySide6.QtQml.QQmlNetworkAccessManagerFactory, /) -> None: ...
    def set_offline_storage_path(self, dir: str, /) -> None: ...
    def set_output_warnings_to_standard_error(self, arg__1: bool, /) -> None: ...
    def set_plugin_path_list(self, paths: collections.abc.Sequence[str], /) -> None: ...
    def set_url_interceptor(self, urlInterceptor: PySide6.QtQml.QQmlAbstractUrlInterceptor, /) -> None: ...
    @typing.overload
    def singleton_instance(self, uri: str, typeName: str, /) -> typing.Union[PySide6.QtCore.QObject, PySide6.QtQml.QJSValue, None]: ...
    @typing.overload
    def singleton_instance(self, qmlTypeId: int, /) -> typing.Union[PySide6.QtCore.QObject, PySide6.QtQml.QJSValue, None]: ...
    def trim_component_cache(self, /) -> None: ...
    def url_interceptor(self, /) -> PySide6.QtQml.QQmlAbstractUrlInterceptor: ...
    def url_interceptors(self, /) -> typing.List[PySide6.QtQml.QQmlAbstractUrlInterceptor]: ...


class QQmlError(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlError, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __repr__(self, /) -> str: ...
    def column(self, /) -> int: ...
    def description(self, /) -> str: ...
    def is_valid(self, /) -> bool: ...
    def line(self, /) -> int: ...
    def message_type(self, /) -> PySide6.QtCore.QtMsgType: ...
    def object(self, /) -> PySide6.QtCore.QObject: ...
    def set_column(self, arg__1: int, /) -> None: ...
    def set_description(self, arg__1: str, /) -> None: ...
    def set_line(self, arg__1: int, /) -> None: ...
    def set_message_type(self, messageType: PySide6.QtCore.QtMsgType, /) -> None: ...
    def set_object(self, arg__1: PySide6.QtCore.QObject, /) -> None: ...
    def set_url(self, arg__1: PySide6.QtCore.QUrl | str, /) -> None: ...
    def swap(self, other: PySide6.QtQml.QQmlError, /) -> None: ...
    def to_string(self, /) -> str: ...
    def url(self, /) -> PySide6.QtCore.QUrl: ...


class QQmlExpression(PySide6.QtCore.QObject):

    valueChanged             : typing.ClassVar[Signal] = ... # valueChanged()

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlContext, arg__2: PySide6.QtCore.QObject, arg__3: str, /, arg__4: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlScriptString, /, arg__2: PySide6.QtQml.QQmlContext | None = ..., arg__3: PySide6.QtCore.QObject | None = ..., arg__4: PySide6.QtCore.QObject | None = ...) -> None: ...

    def clear_error(self, /) -> None: ...
    def column_number(self, /) -> int: ...
    def context(self, /) -> PySide6.QtQml.QQmlContext: ...
    def engine(self, /) -> PySide6.QtQml.QQmlEngine: ...
    def error(self, /) -> PySide6.QtQml.QQmlError: ...
    def evaluate(self, /) -> typing.Tuple[typing.Any, bool]: ...
    def expression(self, /) -> str: ...
    def has_error(self, /) -> bool: ...
    def line_number(self, /) -> int: ...
    def notify_on_value_changed(self, /) -> bool: ...
    def scope_object(self, /) -> PySide6.QtCore.QObject: ...
    def set_expression(self, arg__1: str, /) -> None: ...
    def set_notify_on_value_changed(self, arg__1: bool, /) -> None: ...
    def set_source_location(self, fileName: str, line: int, /, column: int | None = ...) -> None: ...
    def source_file(self, /) -> str: ...


class QQmlExtensionInterface(PySide6.QtQml.QQmlTypesExtensionInterface):

    def __init__(self, /) -> None: ...

    def initialize_engine(self, engine: PySide6.QtQml.QQmlEngine, uri: bytes | bytearray | memoryview, /) -> None: ...


class QQmlExtensionPlugin(PySide6.QtCore.QObject, PySide6.QtQml.QQmlExtensionInterface):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def base_url(self, /) -> PySide6.QtCore.QUrl: ...
    def initialize_engine(self, engine: PySide6.QtQml.QQmlEngine, uri: bytes | bytearray | memoryview, /) -> None: ...
    def register_types(self, uri: bytes | bytearray | memoryview, /) -> None: ...
    def unregister_types(self, /) -> None: ...


class QQmlFile(Shiboken.Object):

    class Status(enum.Enum):

        Null                      = ...  # 0x0
        Ready                     = ...  # 0x1
        Error                     = ...  # 0x2
        Loading                   = ...  # 0x3


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, engine: PySide6.QtQml.QQmlEngine, url: str, /) -> None: ...
    @typing.overload
    def __init__(self, engine: PySide6.QtQml.QQmlEngine, url: PySide6.QtCore.QUrl | str, /) -> None: ...

    @typing.overload
    def clear(self, /) -> None: ...
    @typing.overload
    def clear(self, object: PySide6.QtCore.QObject, /) -> None: ...
    @typing.overload
    def connect_download_progress(self, arg__1: PySide6.QtCore.QObject, arg__2: bytes | bytearray | memoryview, /) -> bool: ...
    @typing.overload
    def connect_download_progress(self, arg__1: PySide6.QtCore.QObject, arg__2: int, /) -> bool: ...
    @typing.overload
    def connect_finished(self, arg__1: PySide6.QtCore.QObject, arg__2: bytes | bytearray | memoryview, /) -> bool: ...
    @typing.overload
    def connect_finished(self, arg__1: PySide6.QtCore.QObject, arg__2: int, /) -> bool: ...
    def data(self, /) -> typing.Union[bytes, bytearray, memoryview]: ...
    def data_byte_array(self, /) -> PySide6.QtCore.QByteArray: ...
    def error(self, /) -> str: ...
    def is_error(self, /) -> bool: ...
    def is_loading(self, /) -> bool: ...
    @typing.overload
    @staticmethod
    def is_local_file(url: str, /) -> bool: ...
    @typing.overload
    @staticmethod
    def is_local_file(url: PySide6.QtCore.QUrl | str, /) -> bool: ...
    def is_null(self, /) -> bool: ...
    def is_ready(self, /) -> bool: ...
    @typing.overload
    @staticmethod
    def is_synchronous(url: str, /) -> bool: ...
    @typing.overload
    @staticmethod
    def is_synchronous(url: PySide6.QtCore.QUrl | str, /) -> bool: ...
    @typing.overload
    def load(self, arg__1: PySide6.QtQml.QQmlEngine, arg__2: str, /) -> None: ...
    @typing.overload
    def load(self, arg__1: PySide6.QtQml.QQmlEngine, arg__2: PySide6.QtCore.QUrl | str, /) -> None: ...
    def size(self, /) -> int: ...
    def status(self, /) -> PySide6.QtQml.QQmlFile.Status: ...
    def url(self, /) -> PySide6.QtCore.QUrl: ...
    @typing.overload
    @staticmethod
    def url_to_local_file_or_qrc(arg__1: str, /) -> str: ...
    @typing.overload
    @staticmethod
    def url_to_local_file_or_qrc(arg__1: PySide6.QtCore.QUrl | str, /) -> str: ...


class QQmlFileSelector(PySide6.QtCore.QObject):

    def __init__(self, engine: PySide6.QtQml.QQmlEngine, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    @staticmethod
    def get(arg__1: PySide6.QtQml.QQmlEngine, /) -> PySide6.QtQml.QQmlFileSelector: ...
    def selector(self, /) -> PySide6.QtCore.QFileSelector: ...
    def set_extra_selectors(self, strings: collections.abc.Sequence[str], /) -> None: ...
    def set_selector(self, selector: PySide6.QtCore.QFileSelector, /) -> None: ...


class QQmlImageProviderBase(PySide6.QtCore.QObject):

    class Flag(enum.Flag):

        ForceAsynchronousImageLoading = ...  # 0x1

    class ImageType(enum.Enum):

        Invalid                   = ...  # 0x0
        Image                     = ...  # 0x1
        Pixmap                    = ...  # 0x2
        Texture                   = ...  # 0x3
        ImageResponse             = ...  # 0x4


    def flags(self, /) -> PySide6.QtQml.QQmlImageProviderBase.Flag: ...
    def image_type(self, /) -> PySide6.QtQml.QQmlImageProviderBase.ImageType: ...


class QQmlIncubationController(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def engine(self, /) -> PySide6.QtQml.QQmlEngine: ...
    def incubate_for(self, msecs: int, /) -> None: ...
    def incubate_while(self, flag: PySide6.QtQml.VolatileBool, /, msecs: int | None = ...) -> None: ...
    def incubating_object_count(self, /) -> int: ...
    def incubating_object_count_changed(self, arg__1: int, /) -> None: ...


class QQmlIncubator(Shiboken.Object):

    class IncubationMode(enum.Enum):

        Asynchronous              = ...  # 0x0
        AsynchronousIfNested      = ...  # 0x1
        Synchronous               = ...  # 0x2

    class Status(enum.Enum):

        Null                      = ...  # 0x0
        Ready                     = ...  # 0x1
        Loading                   = ...  # 0x2
        Error                     = ...  # 0x3


    def __init__(self, /, arg__1: PySide6.QtQml.QQmlIncubator.IncubationMode = ...) -> None: ...

    def clear(self, /) -> None: ...
    def errors(self, /) -> typing.List[PySide6.QtQml.QQmlError]: ...
    def force_completion(self, /) -> None: ...
    def incubation_mode(self, /) -> PySide6.QtQml.QQmlIncubator.IncubationMode: ...
    def is_error(self, /) -> bool: ...
    def is_loading(self, /) -> bool: ...
    def is_null(self, /) -> bool: ...
    def is_ready(self, /) -> bool: ...
    def object(self, /) -> PySide6.QtCore.QObject: ...
    def set_initial_properties(self, initialProperties: typing.Dict[str, typing.Any], /) -> None: ...
    def set_initial_state(self, arg__1: PySide6.QtCore.QObject, /) -> None: ...
    def status(self, /) -> PySide6.QtQml.QQmlIncubator.Status: ...
    def status_changed(self, arg__1: PySide6.QtQml.QQmlIncubator.Status, /) -> None: ...


class QQmlListReference(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, o: PySide6.QtCore.QObject, property: bytes | bytearray | memoryview, /) -> None: ...
    @typing.overload
    def __init__(self, o: PySide6.QtCore.QObject, property: bytes | bytearray | memoryview, engine: PySide6.QtQml.QQmlEngine, /) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlListReference, /) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any, /) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any, engine: PySide6.QtQml.QQmlEngine, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtQml.QQmlListReference, /) -> bool: ...
    def append(self, arg__1: PySide6.QtCore.QObject, /) -> bool: ...
    def at(self, arg__1: int, /) -> PySide6.QtCore.QObject: ...
    def can_append(self, /) -> bool: ...
    def can_at(self, /) -> bool: ...
    def can_clear(self, /) -> bool: ...
    def can_count(self, /) -> bool: ...
    def can_remove_last(self, /) -> bool: ...
    def can_replace(self, /) -> bool: ...
    def clear(self, /) -> bool: ...
    def count(self, /) -> int: ...
    def is_manipulable(self, /) -> bool: ...
    def is_readable(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def list_element_type(self, /) -> PySide6.QtCore.QMetaObject: ...
    def object(self, /) -> PySide6.QtCore.QObject: ...
    def remove_last(self, /) -> bool: ...
    def replace(self, arg__1: int, arg__2: PySide6.QtCore.QObject, /) -> bool: ...
    def size(self, /) -> int: ...


class QQmlModuleImportSpecialVersions(enum.Enum):

    QQmlModuleImportAuto      = ...  # -2
    QQmlModuleImportLatest    = ...  # -1
    QQmlModuleImportModuleAny = ...  # -1


class QQmlNetworkAccessManagerFactory(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def create(self, parent: PySide6.QtCore.QObject, /) -> PySide6.QtNetwork.QNetworkAccessManager: ...


class QQmlParserStatus(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def class_begin(self, /) -> None: ...
    def component_complete(self, /) -> None: ...


class QQmlProperty(Shiboken.Object):

    class PropertyTypeCategory(enum.Enum):

        InvalidCategory           = ...  # 0x0
        List                      = ...  # 0x1
        Object                    = ...  # 0x2
        Normal                    = ...  # 0x3

    class Type(enum.Enum):

        Invalid                   = ...  # 0x0
        Property                  = ...  # 0x1
        SignalProperty            = ...  # 0x2


    @typing.overload
    def __init__(self, arg__1: PySide6.QtCore.QObject, arg__2: PySide6.QtQml.QQmlEngine, /, *, object: PySide6.QtCore.QObject | None = ..., name: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtCore.QObject, arg__2: PySide6.QtQml.QQmlContext, /, *, object: PySide6.QtCore.QObject | None = ..., name: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: PySide6.QtQml.QQmlEngine, /, *, object: PySide6.QtCore.QObject | None = ..., name: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: PySide6.QtQml.QQmlContext, /, *, object: PySide6.QtCore.QObject | None = ..., name: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtCore.QObject, arg__2: str, /, *, object: PySide6.QtCore.QObject | None = ..., name: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtCore.QObject, /, *, object: PySide6.QtCore.QObject | None = ..., name: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlProperty, /, *, object: PySide6.QtCore.QObject | None = ..., name: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, object: PySide6.QtCore.QObject | None = ..., name: str | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, arg__1: PySide6.QtQml.QQmlProperty | PySide6.QtCore.QObject, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    @typing.overload
    def connect_notify_signal(self, dest: PySide6.QtCore.QObject, slot: bytes | bytearray | memoryview, /) -> bool: ...
    @typing.overload
    def connect_notify_signal(self, dest: PySide6.QtCore.QObject, method: int, /) -> bool: ...
    def has_notify_signal(self, /) -> bool: ...
    def index(self, /) -> int: ...
    def is_bindable(self, /) -> bool: ...
    def is_designable(self, /) -> bool: ...
    def is_property(self, /) -> bool: ...
    def is_resettable(self, /) -> bool: ...
    def is_signal_property(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def is_writable(self, /) -> bool: ...
    def method(self, /) -> PySide6.QtCore.QMetaMethod: ...
    def name(self, /) -> str: ...
    def needs_notify_signal(self, /) -> bool: ...
    def object(self, /) -> PySide6.QtCore.QObject: ...
    def property(self, /) -> PySide6.QtCore.QMetaProperty: ...
    def property_meta_type(self, /) -> PySide6.QtCore.QMetaType: ...
    def property_type(self, /) -> int: ...
    def property_type_category(self, /) -> PySide6.QtQml.QQmlProperty.PropertyTypeCategory: ...
    def property_type_name(self, /) -> typing.Union[bytes, bytearray, memoryview]: ...
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    @staticmethod
    def read(arg__1: PySide6.QtCore.QObject, arg__2: str, /) -> typing.Any: ...  # type: ignore[misc, overload-cannot-match]
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    @staticmethod
    def read(arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: PySide6.QtQml.QQmlEngine, /) -> typing.Any: ...  # type: ignore[misc, overload-cannot-match]
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    @staticmethod
    def read(arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: PySide6.QtQml.QQmlContext, /) -> typing.Any: ...  # type: ignore[misc, overload-cannot-match]
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    def read(self, /) -> typing.Any: ...  # type: ignore[misc, overload-cannot-match]
    def reset(self, /) -> bool: ...
    def swap(self, other: PySide6.QtQml.QQmlProperty | PySide6.QtCore.QObject, /) -> None: ...
    def type(self, /) -> PySide6.QtQml.QQmlProperty.Type: ...
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    @staticmethod
    def write(arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: typing.Any, /) -> bool: ...  # type: ignore[misc, overload-cannot-match]
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    @staticmethod
    def write(arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: typing.Any, arg__4: PySide6.QtQml.QQmlEngine, /) -> bool: ...  # type: ignore[misc, overload-cannot-match]
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    @staticmethod
    def write(arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: typing.Any, arg__4: PySide6.QtQml.QQmlContext, /) -> bool: ...  # type: ignore[misc, overload-cannot-match]
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    def write(self, arg__1: typing.Any, /) -> bool: ...  # type: ignore[misc, overload-cannot-match]


class QQmlPropertyMap(PySide6.QtCore.QObject):

    valueChanged             : typing.ClassVar[Signal] = ... # valueChanged(QString,QVariant)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def clear(self, key: str, /) -> None: ...
    def contains(self, key: str, /) -> bool: ...
    def count(self, /) -> int: ...
    def freeze(self, /) -> None: ...
    @typing.overload
    def insert(self, key: str, value: typing.Any, /) -> None: ...
    @typing.overload
    def insert(self, values: typing.Dict[str, typing.Any], /) -> None: ...
    def is_empty(self, /) -> bool: ...
    def keys(self, /) -> typing.List[str]: ...
    def size(self, /) -> int: ...
    def update_value(self, key: str, input: typing.Any, /) -> typing.Any: ...
    def value(self, key: str, /) -> typing.Any: ...


class QQmlPropertyValueSource(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def set_target(self, arg__1: PySide6.QtQml.QQmlProperty | PySide6.QtCore.QObject, /) -> None: ...


class QQmlScriptString(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlScriptString, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, arg__1: PySide6.QtQml.QQmlScriptString, /) -> bool: ...
    def __ne__(self, arg__1: PySide6.QtQml.QQmlScriptString, /) -> bool: ...
    def boolean_literal(self, /) -> typing.Tuple[bool, bool]: ...
    def is_empty(self, /) -> bool: ...
    def is_null_literal(self, /) -> bool: ...
    def is_undefined_literal(self, /) -> bool: ...
    def number_literal(self, /) -> typing.Tuple[float, bool]: ...
    def string_literal(self, /) -> str: ...


class QQmlTypesExtensionInterface(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def register_types(self, uri: bytes | bytearray | memoryview, /) -> None: ...


class QmlAttached: ...


class QmlExtended: ...


class QmlForeign: ...


class QmlNamedElement: ...


class QmlUncreatable: ...


class VolatileBool:
    def __repr__(self, /) -> str: ...
    def get(self, /) -> bool: ...
    def set(self, a: object, /) -> None: ...


def QmlAnonymous(arg__1: object, /) -> object: ...
def QmlElement(arg__1: object, /) -> object: ...
def QmlSingleton(arg__1: object, /) -> object: ...
def qjsEngine(arg__1: PySide6.QtCore.QObject, /) -> typing.Optional[PySide6.QtQml.QJSEngine]: ...
def qmlAttachedPropertiesObject(type_obj: type, arg__2: PySide6.QtCore.QObject, /, arg__3: bool = ...) -> PySide6.QtCore.QObject: ...
def qmlClearTypeRegistrations() -> None: ...
def qmlContext(arg__1: PySide6.QtCore.QObject, /) -> typing.Optional[PySide6.QtQml.QQmlContext]: ...
def qmlEngine(arg__1: PySide6.QtCore.QObject, /) -> typing.Optional[PySide6.QtQml.QQmlEngine]: ...
def qmlProtectModule(uri: bytes | bytearray | memoryview, majVersion: int, /) -> bool: ...
def qmlRegisterModule(uri: bytes | bytearray | memoryview, versionMajor: int, versionMinor: int, /) -> None: ...
def qmlRegisterSingletonInstance(type_obj: type, uri: str, version_major: int, version_minor: int, qml_name: bytes | bytearray | memoryview, callback: object, /) -> int: ...
@typing.overload
def qmlRegisterSingletonType(uri: str, version_major: int, version_minor: int, qml_name: bytes | bytearray | memoryview, callback: object, /) -> int: ...
@typing.overload
def qmlRegisterSingletonType(type_obj: type, uri: str, version_major: int, version_minor: int, qml_name: bytes | bytearray | memoryview, /) -> int: ...
@typing.overload
def qmlRegisterSingletonType(type_obj: type, uri: str, version_major: int, version_minor: int, qml_name: bytes | bytearray | memoryview, callback: object, /) -> int: ...
@typing.overload
def qmlRegisterSingletonType(url: PySide6.QtCore.QUrl | str, uri: bytes | bytearray | memoryview, versionMajor: int, versionMinor: int, qmlName: bytes | bytearray | memoryview, /) -> int: ...
@typing.overload
def qmlRegisterType(type_obj: type, uri: str, version_major: int, version_minor: int, qml_name: bytes | bytearray | memoryview, /) -> int: ...
@typing.overload
def qmlRegisterType(url: PySide6.QtCore.QUrl | str, uri: bytes | bytearray | memoryview, versionMajor: int, versionMinor: int, qmlName: bytes | bytearray | memoryview, /) -> int: ...
def qmlRegisterUncreatableMetaObject(staticMetaObject: PySide6.QtCore.QMetaObject, uri: bytes | bytearray | memoryview, versionMajor: int, versionMinor: int, qmlName: bytes | bytearray | memoryview, reason: str, /) -> int: ...
def qmlRegisterUncreatableType(type_obj: type, uri: str, version_major: int, version_minor: int, qml_name: bytes | bytearray | memoryview, message: bytes | bytearray | memoryview, /) -> int: ...
def qmlTypeId(uri: bytes | bytearray | memoryview, versionMajor: int, versionMinor: int, qmlName: bytes | bytearray | memoryview, /) -> int: ...


# eof
