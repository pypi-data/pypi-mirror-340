# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtQuick, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtQuick`

import PySide6.QtQuick
import PySide6.QtCore
import PySide6.QtGui
import PySide6.QtOpenGL
import PySide6.QtQml

import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QIntList: ...


class QQuickAsyncImageProvider(PySide6.QtQuick.QQuickImageProvider):

    def __init__(self, /) -> None: ...

    def request_image_response(self, id: str, requestedSize: PySide6.QtCore.QSize, /) -> PySide6.QtQuick.QQuickImageResponse: ...


class QQuickFramebufferObject(PySide6.QtQuick.QQuickItem):

    mirrorVerticallyChanged  : typing.ClassVar[Signal] = ... # mirrorVerticallyChanged(bool)
    textureFollowsItemSizeChanged: typing.ClassVar[Signal] = ... # textureFollowsItemSizeChanged(bool)

    class Renderer(Shiboken.Object):

        def __init__(self, /) -> None: ...

        def create_framebuffer_object(self, size: PySide6.QtCore.QSize, /) -> PySide6.QtOpenGL.QOpenGLFramebufferObject: ...
        def framebuffer_object(self, /) -> PySide6.QtOpenGL.QOpenGLFramebufferObject: ...
        def invalidate_framebuffer_object(self, /) -> None: ...
        def render(self, /) -> None: ...
        def synchronize(self, arg__1: PySide6.QtQuick.QQuickFramebufferObject, /) -> None: ...
        def update(self, /) -> None: ...


    def __init__(self, /, parent: PySide6.QtQuick.QQuickItem | None = ..., *, texture_follows_item_size: bool | None = ..., mirror_vertically: bool | None = ...) -> None: ...

    def create_renderer(self, /) -> PySide6.QtQuick.QQuickFramebufferObject.Renderer: ...
    def geometry_change(self, newGeometry: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, oldGeometry: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    def is_texture_provider(self, /) -> bool: ...
    def mirror_vertically(self, /) -> bool: ...
    def release_resources(self, /) -> None: ...
    def set_mirror_vertically(self, enable: bool, /) -> None: ...
    def set_texture_follows_item_size(self, follows: bool, /) -> None: ...
    def texture_follows_item_size(self, /) -> bool: ...
    def texture_provider(self, /) -> PySide6.QtQuick.QSGTextureProvider: ...
    def update_paint_node(self, arg__1: PySide6.QtQuick.QSGNode, arg__2: PySide6.QtQuick.QQuickItem.UpdatePaintNodeData, /) -> PySide6.QtQuick.QSGNode: ...


class QQuickGraphicsConfiguration(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtQuick.QQuickGraphicsConfiguration, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def device_extensions(self, /) -> typing.List[PySide6.QtCore.QByteArray]: ...
    def is_automatic_pipeline_cache_enabled(self, /) -> bool: ...
    def is_debug_layer_enabled(self, /) -> bool: ...
    def is_debug_markers_enabled(self, /) -> bool: ...
    def is_depth_buffer_enabled_for2_d(self, /) -> bool: ...
    def pipeline_cache_load_file(self, /) -> str: ...
    def pipeline_cache_save_file(self, /) -> str: ...
    @staticmethod
    def preferred_instance_extensions() -> typing.List[PySide6.QtCore.QByteArray]: ...
    def prefers_software_device(self, /) -> bool: ...
    def set_automatic_pipeline_cache(self, enable: bool, /) -> None: ...
    def set_debug_layer(self, enable: bool, /) -> None: ...
    def set_debug_markers(self, enable: bool, /) -> None: ...
    def set_depth_buffer_for2_d(self, enable: bool, /) -> None: ...
    def set_device_extensions(self, extensions: collections.abc.Sequence[PySide6.QtCore.QByteArray], /) -> None: ...
    def set_pipeline_cache_load_file(self, filename: str, /) -> None: ...
    def set_pipeline_cache_save_file(self, filename: str, /) -> None: ...
    def set_prefer_software_device(self, enable: bool, /) -> None: ...
    def set_timestamps(self, enable: bool, /) -> None: ...
    def timestamps_enabled(self, /) -> bool: ...


class QQuickGraphicsDevice(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtQuick.QQuickGraphicsDevice, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    @staticmethod
    def fromOpenGLContext(context: PySide6.QtGui.QOpenGLContext, /) -> PySide6.QtQuick.QQuickGraphicsDevice: ...
    @staticmethod
    def from_rhi(rhi: PySide6.QtGui.QRhi, /) -> PySide6.QtQuick.QQuickGraphicsDevice: ...
    def is_null(self, /) -> bool: ...


class QQuickImageProvider(PySide6.QtQml.QQmlImageProviderBase):

    def __init__(self, type: PySide6.QtQml.QQmlImageProviderBase.ImageType, /, flags: PySide6.QtQml.QQmlImageProviderBase.Flag = ...) -> None: ...

    def flags(self, /) -> PySide6.QtQml.QQmlImageProviderBase.Flag: ...
    def image_type(self, /) -> PySide6.QtQml.QQmlImageProviderBase.ImageType: ...
    def request_image(self, id: str, size: PySide6.QtCore.QSize, requestedSize: PySide6.QtCore.QSize, /) -> PySide6.QtGui.QImage: ...
    def request_pixmap(self, id: str, size: PySide6.QtCore.QSize, requestedSize: PySide6.QtCore.QSize, /) -> PySide6.QtGui.QPixmap: ...
    def request_texture(self, id: str, size: PySide6.QtCore.QSize, requestedSize: PySide6.QtCore.QSize, /) -> PySide6.QtQuick.QQuickTextureFactory: ...


class QQuickImageResponse(PySide6.QtCore.QObject):

    finished                 : typing.ClassVar[Signal] = ... # finished()

    def __init__(self, /) -> None: ...

    def cancel(self, /) -> None: ...
    def error_string(self, /) -> str: ...
    def texture_factory(self, /) -> PySide6.QtQuick.QQuickTextureFactory: ...


class QQuickItem(PySide6.QtCore.QObject, PySide6.QtQml.QQmlParserStatus):

    activeFocusChanged       : typing.ClassVar[Signal] = ... # activeFocusChanged(bool)
    activeFocusOnTabChanged  : typing.ClassVar[Signal] = ... # activeFocusOnTabChanged(bool)
    antialiasingChanged      : typing.ClassVar[Signal] = ... # antialiasingChanged(bool)
    baselineOffsetChanged    : typing.ClassVar[Signal] = ... # baselineOffsetChanged(double)
    childrenChanged          : typing.ClassVar[Signal] = ... # childrenChanged()
    childrenRectChanged      : typing.ClassVar[Signal] = ... # childrenRectChanged(QRectF)
    clipChanged              : typing.ClassVar[Signal] = ... # clipChanged(bool)
    containmentMaskChanged   : typing.ClassVar[Signal] = ... # containmentMaskChanged()
    enabledChanged           : typing.ClassVar[Signal] = ... # enabledChanged()
    focusChanged             : typing.ClassVar[Signal] = ... # focusChanged(bool)
    focusPolicyChanged       : typing.ClassVar[Signal] = ... # focusPolicyChanged(Qt::FocusPolicy)
    heightChanged            : typing.ClassVar[Signal] = ... # heightChanged()
    implicitHeightChanged    : typing.ClassVar[Signal] = ... # implicitHeightChanged()
    implicitWidthChanged     : typing.ClassVar[Signal] = ... # implicitWidthChanged()
    opacityChanged           : typing.ClassVar[Signal] = ... # opacityChanged()
    paletteChanged           : typing.ClassVar[Signal] = ... # paletteChanged()
    paletteCreated           : typing.ClassVar[Signal] = ... # paletteCreated()
    parentChanged            : typing.ClassVar[Signal] = ... # parentChanged(QQuickItem*)
    rotationChanged          : typing.ClassVar[Signal] = ... # rotationChanged()
    scaleChanged             : typing.ClassVar[Signal] = ... # scaleChanged()
    smoothChanged            : typing.ClassVar[Signal] = ... # smoothChanged(bool)
    stateChanged             : typing.ClassVar[Signal] = ... # stateChanged(QString)
    transformOriginChanged   : typing.ClassVar[Signal] = ... # transformOriginChanged(TransformOrigin)
    visibleChanged           : typing.ClassVar[Signal] = ... # visibleChanged()
    visibleChildrenChanged   : typing.ClassVar[Signal] = ... # visibleChildrenChanged()
    widthChanged             : typing.ClassVar[Signal] = ... # widthChanged()
    windowChanged            : typing.ClassVar[Signal] = ... # windowChanged(QQuickWindow*)
    xChanged                 : typing.ClassVar[Signal] = ... # xChanged()
    yChanged                 : typing.ClassVar[Signal] = ... # yChanged()
    zChanged                 : typing.ClassVar[Signal] = ... # zChanged()

    class Flag(enum.Flag):

        ItemClipsChildrenToShape  = ...  # 0x1
        ItemAcceptsInputMethod    = ...  # 0x2
        ItemIsFocusScope          = ...  # 0x4
        ItemHasContents           = ...  # 0x8
        ItemAcceptsDrops          = ...  # 0x10
        ItemIsViewport            = ...  # 0x20
        ItemObservesViewport      = ...  # 0x40

    class ItemChange(enum.Enum):

        ItemChildAddedChange      = ...  # 0x0
        ItemChildRemovedChange    = ...  # 0x1
        ItemSceneChange           = ...  # 0x2
        ItemVisibleHasChanged     = ...  # 0x3
        ItemParentHasChanged      = ...  # 0x4
        ItemOpacityHasChanged     = ...  # 0x5
        ItemActiveFocusHasChanged = ...  # 0x6
        ItemRotationHasChanged    = ...  # 0x7
        ItemAntialiasingHasChanged = ...  # 0x8
        ItemDevicePixelRatioHasChanged = ...  # 0x9
        ItemEnabledHasChanged     = ...  # 0xa

    class TransformOrigin(enum.Enum):

        TopLeft                   = ...  # 0x0
        Top                       = ...  # 0x1
        TopRight                  = ...  # 0x2
        Left                      = ...  # 0x3
        Center                    = ...  # 0x4
        Right                     = ...  # 0x5
        BottomLeft                = ...  # 0x6
        Bottom                    = ...  # 0x7
        BottomRight               = ...  # 0x8

    class UpdatePaintNodeData(Shiboken.Object):

        def __init__(self, UpdatePaintNodeData: PySide6.QtQuick.QQuickItem.UpdatePaintNodeData, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...


    def __init__(self, /, parent: PySide6.QtQuick.QQuickItem | None = ..., *, x: float | None = ..., y: float | None = ..., z: float | None = ..., width: float | None = ..., height: float | None = ..., opacity: float | None = ..., enabled: bool | None = ..., visible: bool | None = ..., state: str | None = ..., children_rect: PySide6.QtCore.QRectF | None = ..., baseline_offset: float | None = ..., clip: bool | None = ..., focus: bool | None = ..., active_focus: bool | None = ..., active_focus_on_tab: bool | None = ..., focus_policy: PySide6.QtCore.Qt.FocusPolicy | None = ..., rotation: float | None = ..., scale: float | None = ..., transform_origin: PySide6.QtQuick.QQuickItem.TransformOrigin | None = ..., transform_origin_point: PySide6.QtCore.QPointF | None = ..., smooth: bool | None = ..., antialiasing: bool | None = ..., implicit_width: float | None = ..., implicit_height: float | None = ..., containment_mask: PySide6.QtCore.QObject | None = ...) -> None: ...

    def __repr__(self, /) -> str: ...
    def accept_hover_events(self, /) -> bool: ...
    def accept_touch_events(self, /) -> bool: ...
    def accepted_mouse_buttons(self, /) -> PySide6.QtCore.Qt.MouseButton: ...
    def active_focus_on_tab(self, /) -> bool: ...
    def antialiasing(self, /) -> bool: ...
    def baseline_offset(self, /) -> float: ...
    def bounding_rect(self, /) -> PySide6.QtCore.QRectF: ...
    def child_at(self, x: float, y: float, /) -> PySide6.QtQuick.QQuickItem: ...
    def child_items(self, /) -> typing.List[PySide6.QtQuick.QQuickItem]: ...
    def child_mouse_event_filter(self, arg__1: PySide6.QtQuick.QQuickItem, arg__2: PySide6.QtCore.QEvent, /) -> bool: ...
    def children_rect(self, /) -> PySide6.QtCore.QRectF: ...
    def class_begin(self, /) -> None: ...
    def clip(self, /) -> bool: ...
    def clip_rect(self, /) -> PySide6.QtCore.QRectF: ...
    def component_complete(self, /) -> None: ...
    def containment_mask(self, /) -> PySide6.QtCore.QObject: ...
    def contains(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> bool: ...
    def cursor(self, /) -> PySide6.QtGui.QCursor: ...
    def drag_enter_event(self, arg__1: PySide6.QtGui.QDragEnterEvent, /) -> None: ...
    def drag_leave_event(self, arg__1: PySide6.QtGui.QDragLeaveEvent, /) -> None: ...
    def drag_move_event(self, arg__1: PySide6.QtGui.QDragMoveEvent, /) -> None: ...
    def drop_event(self, arg__1: PySide6.QtGui.QDropEvent, /) -> None: ...
    def dump_item_tree(self, /) -> None: ...
    def ensure_polished(self, /) -> None: ...
    def event(self, arg__1: PySide6.QtCore.QEvent, /) -> bool: ...
    def filters_child_mouse_events(self, /) -> bool: ...
    def flags(self, /) -> PySide6.QtQuick.QQuickItem.Flag: ...
    def focus_in_event(self, arg__1: PySide6.QtGui.QFocusEvent, /) -> None: ...
    def focus_out_event(self, arg__1: PySide6.QtGui.QFocusEvent, /) -> None: ...
    def focus_policy(self, /) -> PySide6.QtCore.Qt.FocusPolicy: ...
    @typing.overload
    def force_active_focus(self, /) -> None: ...
    @typing.overload
    def force_active_focus(self, reason: PySide6.QtCore.Qt.FocusReason, /) -> None: ...
    def geometry_change(self, newGeometry: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, oldGeometry: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    def grab_mouse(self, /) -> None: ...
    @typing.overload
    def grab_to_image(self, /, targetSize: PySide6.QtCore.QSize = ...) -> PySide6.QtQuick.QSharedPointer_QQuickItemGrabResult: ...
    @typing.overload
    def grab_to_image(self, callback: PySide6.QtQml.QJSValue | PySide6.QtQml.QJSValue.SpecialValue | bool | str | bytes | bytearray | memoryview | float | int, /, targetSize: PySide6.QtCore.QSize = ...) -> bool: ...
    def grab_touch_points(self, ids: collections.abc.Sequence[int], /) -> None: ...
    def has_active_focus(self, /) -> bool: ...
    def has_focus(self, /) -> bool: ...
    def height(self, /) -> float: ...
    def height_valid(self, /) -> bool: ...
    def hover_enter_event(self, event: PySide6.QtGui.QHoverEvent, /) -> None: ...
    def hover_leave_event(self, event: PySide6.QtGui.QHoverEvent, /) -> None: ...
    def hover_move_event(self, event: PySide6.QtGui.QHoverEvent, /) -> None: ...
    def implicit_height(self, /) -> float: ...
    def implicit_width(self, /) -> float: ...
    def input_method_event(self, arg__1: PySide6.QtGui.QInputMethodEvent, /) -> None: ...
    def input_method_query(self, query: PySide6.QtCore.Qt.InputMethodQuery, /) -> typing.Any: ...
    def is_ancestor_of(self, child: PySide6.QtQuick.QQuickItem, /) -> bool: ...
    def is_component_complete(self, /) -> bool: ...
    def is_enabled(self, /) -> bool: ...
    def is_focus_scope(self, /) -> bool: ...
    def is_texture_provider(self, /) -> bool: ...
    def is_under_mouse(self, /) -> bool: ...
    def is_visible(self, /) -> bool: ...
    def item_transform(self, arg__1: PySide6.QtQuick.QQuickItem, /) -> typing.Tuple[bool, PySide6.QtGui.QTransform]: ...
    def keep_mouse_grab(self, /) -> bool: ...
    def keep_touch_grab(self, /) -> bool: ...
    def key_press_event(self, event: PySide6.QtGui.QKeyEvent, /) -> None: ...
    def key_release_event(self, event: PySide6.QtGui.QKeyEvent, /) -> None: ...
    @typing.overload
    def map_from_global(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> PySide6.QtCore.QPointF: ...
    @typing.overload
    def map_from_global(self, x: float, y: float, /) -> PySide6.QtCore.QPointF: ...
    @typing.overload
    def map_from_item(self, item: PySide6.QtQuick.QQuickItem, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> PySide6.QtCore.QRectF: ...
    @typing.overload
    def map_from_item(self, item: PySide6.QtQuick.QQuickItem, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> PySide6.QtCore.QPointF: ...
    @typing.overload
    def map_from_item(self, item: PySide6.QtQuick.QQuickItem, x: float, y: float, /) -> PySide6.QtCore.QPointF: ...
    @typing.overload
    def map_from_item(self, item: PySide6.QtQuick.QQuickItem, x: float, y: float, width: float, height: float, /) -> PySide6.QtCore.QRectF: ...
    def map_from_scene(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> PySide6.QtCore.QPointF: ...
    def map_rect_from_item(self, item: PySide6.QtQuick.QQuickItem, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> PySide6.QtCore.QRectF: ...
    def map_rect_from_scene(self, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> PySide6.QtCore.QRectF: ...
    def map_rect_to_item(self, item: PySide6.QtQuick.QQuickItem, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> PySide6.QtCore.QRectF: ...
    def map_rect_to_scene(self, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> PySide6.QtCore.QRectF: ...
    @typing.overload
    def map_to_global(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> PySide6.QtCore.QPointF: ...
    @typing.overload
    def map_to_global(self, x: float, y: float, /) -> PySide6.QtCore.QPointF: ...
    @typing.overload
    def map_to_item(self, item: PySide6.QtQuick.QQuickItem, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> PySide6.QtCore.QRectF: ...
    @typing.overload
    def map_to_item(self, item: PySide6.QtQuick.QQuickItem, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> PySide6.QtCore.QPointF: ...
    @typing.overload
    def map_to_item(self, item: PySide6.QtQuick.QQuickItem, x: float, y: float, /) -> PySide6.QtCore.QPointF: ...
    @typing.overload
    def map_to_item(self, item: PySide6.QtQuick.QQuickItem, x: float, y: float, width: float, height: float, /) -> PySide6.QtCore.QRectF: ...
    def map_to_scene(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> PySide6.QtCore.QPointF: ...
    def mouse_double_click_event(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_move_event(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_press_event(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_release_event(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_ungrab_event(self, /) -> None: ...
    def next_item_in_focus_chain(self, /, forward: bool = ...) -> PySide6.QtQuick.QQuickItem: ...
    def opacity(self, /) -> float: ...
    def parent_item(self, /) -> PySide6.QtQuick.QQuickItem: ...
    def polish(self, /) -> None: ...
    def position(self, /) -> PySide6.QtCore.QPointF: ...
    def release_resources(self, /) -> None: ...
    def reset_antialiasing(self, /) -> None: ...
    def reset_height(self, /) -> None: ...
    def reset_width(self, /) -> None: ...
    def rotation(self, /) -> float: ...
    def scale(self, /) -> float: ...
    def scoped_focus_item(self, /) -> PySide6.QtQuick.QQuickItem: ...
    def set_accept_hover_events(self, enabled: bool, /) -> None: ...
    def set_accept_touch_events(self, accept: bool, /) -> None: ...
    def set_accepted_mouse_buttons(self, buttons: PySide6.QtCore.Qt.MouseButton, /) -> None: ...
    def set_active_focus_on_tab(self, arg__1: bool, /) -> None: ...
    def set_antialiasing(self, arg__1: bool, /) -> None: ...
    def set_baseline_offset(self, arg__1: float, /) -> None: ...
    def set_clip(self, arg__1: bool, /) -> None: ...
    def set_containment_mask(self, mask: PySide6.QtCore.QObject, /) -> None: ...
    def set_cursor(self, cursor: PySide6.QtGui.QCursor | PySide6.QtCore.Qt.CursorShape | PySide6.QtGui.QPixmap, /) -> None: ...
    def set_enabled(self, arg__1: bool, /) -> None: ...
    def set_filters_child_mouse_events(self, filter: bool, /) -> None: ...
    def set_flag(self, flag: PySide6.QtQuick.QQuickItem.Flag, /, enabled: bool = ...) -> None: ...
    def set_flags(self, flags: PySide6.QtQuick.QQuickItem.Flag, /) -> None: ...
    @typing.overload
    def set_focus(self, arg__1: bool, /) -> None: ...
    @typing.overload
    def set_focus(self, focus: bool, reason: PySide6.QtCore.Qt.FocusReason, /) -> None: ...
    def set_focus_policy(self, policy: PySide6.QtCore.Qt.FocusPolicy, /) -> None: ...
    def set_height(self, arg__1: float, /) -> None: ...
    def set_implicit_height(self, arg__1: float, /) -> None: ...
    def set_implicit_size(self, arg__1: float, arg__2: float, /) -> None: ...
    def set_implicit_width(self, arg__1: float, /) -> None: ...
    def set_keep_mouse_grab(self, arg__1: bool, /) -> None: ...
    def set_keep_touch_grab(self, arg__1: bool, /) -> None: ...
    def set_opacity(self, arg__1: float, /) -> None: ...
    def set_parent_item(self, parent: PySide6.QtQuick.QQuickItem, /) -> None: ...
    def set_position(self, arg__1: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    def set_rotation(self, arg__1: float, /) -> None: ...
    def set_scale(self, arg__1: float, /) -> None: ...
    def set_size(self, size: PySide6.QtCore.QSizeF | PySide6.QtCore.QSize, /) -> None: ...
    def set_smooth(self, arg__1: bool, /) -> None: ...
    def set_state(self, arg__1: str, /) -> None: ...
    def set_transform_origin(self, arg__1: PySide6.QtQuick.QQuickItem.TransformOrigin, /) -> None: ...
    def set_transform_origin_point(self, arg__1: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    def set_visible(self, arg__1: bool, /) -> None: ...
    def set_width(self, arg__1: float, /) -> None: ...
    def set_x(self, arg__1: float, /) -> None: ...
    def set_y(self, arg__1: float, /) -> None: ...
    def set_z(self, arg__1: float, /) -> None: ...
    def size(self, /) -> PySide6.QtCore.QSizeF: ...
    def smooth(self, /) -> bool: ...
    def stack_after(self, arg__1: PySide6.QtQuick.QQuickItem, /) -> None: ...
    def stack_before(self, arg__1: PySide6.QtQuick.QQuickItem, /) -> None: ...
    def state(self, /) -> str: ...
    def texture_provider(self, /) -> PySide6.QtQuick.QSGTextureProvider: ...
    def touch_event(self, event: PySide6.QtGui.QTouchEvent, /) -> None: ...
    def touch_ungrab_event(self, /) -> None: ...
    def transform_origin(self, /) -> PySide6.QtQuick.QQuickItem.TransformOrigin: ...
    def transform_origin_point(self, /) -> PySide6.QtCore.QPointF: ...
    def ungrab_mouse(self, /) -> None: ...
    def ungrab_touch_points(self, /) -> None: ...
    def unset_cursor(self, /) -> None: ...
    def update(self, /) -> None: ...
    def update_input_method(self, /, queries: PySide6.QtCore.Qt.InputMethodQuery = ...) -> None: ...
    def update_paint_node(self, arg__1: PySide6.QtQuick.QSGNode, arg__2: PySide6.QtQuick.QQuickItem.UpdatePaintNodeData, /) -> PySide6.QtQuick.QSGNode: ...
    def update_polish(self, /) -> None: ...
    def viewport_item(self, /) -> PySide6.QtQuick.QQuickItem: ...
    def wheel_event(self, event: PySide6.QtGui.QWheelEvent, /) -> None: ...
    def width(self, /) -> float: ...
    def width_valid(self, /) -> bool: ...
    def window(self, /) -> PySide6.QtQuick.QQuickWindow: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QQuickItemGrabResult(PySide6.QtCore.QObject):

    ready                    : typing.ClassVar[Signal] = ... # ready()
    def event(self, arg__1: PySide6.QtCore.QEvent, /) -> bool: ...
    def image(self, /) -> PySide6.QtGui.QImage: ...
    @typing.overload
    def save_to_file(self, fileName: str, /) -> bool: ...
    @typing.overload
    def save_to_file(self, fileName: PySide6.QtCore.QUrl | str, /) -> bool: ...
    def url(self, /) -> PySide6.QtCore.QUrl: ...


class QQuickOpenGLUtils(Shiboken.Object):
    @staticmethod
    def resetOpenGLState() -> None: ...


class QQuickPaintedItem(PySide6.QtQuick.QQuickItem):

    contentsScaleChanged     : typing.ClassVar[Signal] = ... # contentsScaleChanged()
    contentsSizeChanged      : typing.ClassVar[Signal] = ... # contentsSizeChanged()
    fillColorChanged         : typing.ClassVar[Signal] = ... # fillColorChanged()
    renderTargetChanged      : typing.ClassVar[Signal] = ... # renderTargetChanged()
    textureSizeChanged       : typing.ClassVar[Signal] = ... # textureSizeChanged()

    class PerformanceHint(enum.Flag):

        FastFBOResizing           = ...  # 0x1

    class RenderTarget(enum.Enum):

        Image                     = ...  # 0x0
        FramebufferObject         = ...  # 0x1
        InvertedYFramebufferObject = ...  # 0x2


    def __init__(self, /, parent: PySide6.QtQuick.QQuickItem | None = ..., *, contents_size: PySide6.QtCore.QSize | None = ..., fill_color: PySide6.QtGui.QColor | None = ..., contents_scale: float | None = ..., render_target: PySide6.QtQuick.QQuickPaintedItem.RenderTarget | None = ..., texture_size: PySide6.QtCore.QSize | None = ...) -> None: ...

    def antialiasing(self, /) -> bool: ...
    def contents_bounding_rect(self, /) -> PySide6.QtCore.QRectF: ...
    def contents_scale(self, /) -> float: ...
    def contents_size(self, /) -> PySide6.QtCore.QSize: ...
    def fill_color(self, /) -> PySide6.QtGui.QColor: ...
    def is_texture_provider(self, /) -> bool: ...
    def mipmap(self, /) -> bool: ...
    def opaque_painting(self, /) -> bool: ...
    def paint(self, painter: PySide6.QtGui.QPainter, /) -> None: ...
    def performance_hints(self, /) -> PySide6.QtQuick.QQuickPaintedItem.PerformanceHint: ...
    def release_resources(self, /) -> None: ...
    def render_target(self, /) -> PySide6.QtQuick.QQuickPaintedItem.RenderTarget: ...
    def reset_contents_size(self, /) -> None: ...
    def set_antialiasing(self, enable: bool, /) -> None: ...
    def set_contents_scale(self, arg__1: float, /) -> None: ...
    def set_contents_size(self, arg__1: PySide6.QtCore.QSize, /) -> None: ...
    def set_fill_color(self, arg__1: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_mipmap(self, enable: bool, /) -> None: ...
    def set_opaque_painting(self, opaque: bool, /) -> None: ...
    def set_performance_hint(self, hint: PySide6.QtQuick.QQuickPaintedItem.PerformanceHint, /, enabled: bool = ...) -> None: ...
    def set_performance_hints(self, hints: PySide6.QtQuick.QQuickPaintedItem.PerformanceHint, /) -> None: ...
    def set_render_target(self, target: PySide6.QtQuick.QQuickPaintedItem.RenderTarget, /) -> None: ...
    def set_texture_size(self, size: PySide6.QtCore.QSize, /) -> None: ...
    def texture_provider(self, /) -> PySide6.QtQuick.QSGTextureProvider: ...
    def texture_size(self, /) -> PySide6.QtCore.QSize: ...
    def update(self, /, rect: PySide6.QtCore.QRect = ...) -> None: ...
    def update_paint_node(self, arg__1: PySide6.QtQuick.QSGNode, arg__2: PySide6.QtQuick.QQuickItem.UpdatePaintNodeData, /) -> PySide6.QtQuick.QSGNode: ...


class QQuickRenderControl(PySide6.QtCore.QObject):

    renderRequested          : typing.ClassVar[Signal] = ... # renderRequested()
    sceneChanged             : typing.ClassVar[Signal] = ... # sceneChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def begin_frame(self, /) -> None: ...
    def command_buffer(self, /) -> PySide6.QtGui.QRhiCommandBuffer: ...
    def end_frame(self, /) -> None: ...
    def initialize(self, /) -> bool: ...
    def invalidate(self, /) -> None: ...
    def polish_items(self, /) -> None: ...
    def prepare_thread(self, targetThread: PySide6.QtCore.QThread, /) -> None: ...
    def render(self, /) -> None: ...
    def render_window(self, offset: PySide6.QtCore.QPoint, /) -> PySide6.QtGui.QWindow: ...
    @staticmethod
    def render_window_for(win: PySide6.QtQuick.QQuickWindow, /, offset: PySide6.QtCore.QPoint | None = ...) -> PySide6.QtGui.QWindow: ...
    def rhi(self, /) -> PySide6.QtGui.QRhi: ...
    def samples(self, /) -> int: ...
    def set_samples(self, sampleCount: int, /) -> None: ...
    def sync(self, /) -> bool: ...
    def window(self, /) -> PySide6.QtQuick.QQuickWindow: ...


class QQuickRenderTarget(Shiboken.Object):

    class Flag(enum.Flag):

        MultisampleResolve        = ...  # 0x1


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtQuick.QQuickRenderTarget, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtQuick.QQuickRenderTarget, /) -> bool: ...
    def __ne__(self, rhs: PySide6.QtQuick.QQuickRenderTarget, /) -> bool: ...
    def depth_texture(self, /) -> PySide6.QtGui.QRhiTexture: ...
    def device_pixel_ratio(self, /) -> float: ...
    @staticmethod
    def fromOpenGLRenderBuffer(renderbufferId: int, pixelSize: PySide6.QtCore.QSize, /, sampleCount: int = ...) -> PySide6.QtQuick.QQuickRenderTarget: ...
    @typing.overload
    @staticmethod
    def fromOpenGLTexture(textureId: int, pixelSize: PySide6.QtCore.QSize, /, sampleCount: int = ...) -> PySide6.QtQuick.QQuickRenderTarget: ...
    @typing.overload
    @staticmethod
    def fromOpenGLTexture(textureId: int, format: int, pixelSize: PySide6.QtCore.QSize, /, sampleCount: int = ...) -> PySide6.QtQuick.QQuickRenderTarget: ...
    @typing.overload
    @staticmethod
    def fromOpenGLTexture(textureId: int, format: int, pixelSize: PySide6.QtCore.QSize, sampleCount: int, arraySize: int, flags: PySide6.QtQuick.QQuickRenderTarget.Flag, /) -> PySide6.QtQuick.QQuickRenderTarget: ...
    @staticmethod
    def from_paint_device(device: PySide6.QtGui.QPaintDevice, /) -> PySide6.QtQuick.QQuickRenderTarget: ...
    @staticmethod
    def from_rhi_render_target(renderTarget: PySide6.QtGui.QRhiRenderTarget, /) -> PySide6.QtQuick.QQuickRenderTarget: ...
    def is_null(self, /) -> bool: ...
    def mirror_vertically(self, /) -> bool: ...
    def set_depth_texture(self, texture: PySide6.QtGui.QRhiTexture, /) -> None: ...
    def set_device_pixel_ratio(self, ratio: float, /) -> None: ...
    def set_mirror_vertically(self, enable: bool, /) -> None: ...


class QQuickRhiItem(PySide6.QtQuick.QQuickItem):

    alphaBlendingChanged     : typing.ClassVar[Signal] = ... # alphaBlendingChanged()
    autoRenderTargetChanged  : typing.ClassVar[Signal] = ... # autoRenderTargetChanged()
    colorBufferFormatChanged : typing.ClassVar[Signal] = ... # colorBufferFormatChanged()
    effectiveColorBufferSizeChanged: typing.ClassVar[Signal] = ... # effectiveColorBufferSizeChanged()
    fixedColorBufferHeightChanged: typing.ClassVar[Signal] = ... # fixedColorBufferHeightChanged()
    fixedColorBufferWidthChanged: typing.ClassVar[Signal] = ... # fixedColorBufferWidthChanged()
    mirrorVerticallyChanged  : typing.ClassVar[Signal] = ... # mirrorVerticallyChanged()
    sampleCountChanged       : typing.ClassVar[Signal] = ... # sampleCountChanged()

    class TextureFormat(enum.Enum):

        RGBA8                     = ...  # 0x0
        RGBA16F                   = ...  # 0x1
        RGBA32F                   = ...  # 0x2
        RGB10A2                   = ...  # 0x3


    def __init__(self, /, parent: PySide6.QtQuick.QQuickItem | None = ..., *, sample_count: int | None = ..., color_buffer_format: PySide6.QtQuick.QQuickRhiItem.TextureFormat | None = ..., mirror_vertically: bool | None = ..., alpha_blending: bool | None = ..., fixed_color_buffer_width: int | None = ..., fixed_color_buffer_height: int | None = ..., effective_color_buffer_size: PySide6.QtCore.QSize | None = ...) -> None: ...

    def alpha_blending(self, /) -> bool: ...
    def color_buffer_format(self, /) -> PySide6.QtQuick.QQuickRhiItem.TextureFormat: ...
    def create_renderer(self, /) -> PySide6.QtQuick.QQuickRhiItemRenderer: ...
    def effective_color_buffer_size(self, /) -> PySide6.QtCore.QSize: ...
    def event(self, arg__1: PySide6.QtCore.QEvent, /) -> bool: ...
    def fixed_color_buffer_height(self, /) -> int: ...
    def fixed_color_buffer_width(self, /) -> int: ...
    def geometry_change(self, newGeometry: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, oldGeometry: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    def is_auto_render_target_enabled(self, /) -> bool: ...
    def is_mirror_vertically_enabled(self, /) -> bool: ...
    def is_texture_provider(self, /) -> bool: ...
    def release_resources(self, /) -> None: ...
    def sample_count(self, /) -> int: ...
    def set_alpha_blending(self, enable: bool, /) -> None: ...
    def set_auto_render_target(self, enabled: bool, /) -> None: ...
    def set_color_buffer_format(self, format: PySide6.QtQuick.QQuickRhiItem.TextureFormat, /) -> None: ...
    def set_fixed_color_buffer_height(self, height: int, /) -> None: ...
    def set_fixed_color_buffer_width(self, width: int, /) -> None: ...
    def set_mirror_vertically(self, enable: bool, /) -> None: ...
    def set_sample_count(self, samples: int, /) -> None: ...
    def texture_provider(self, /) -> PySide6.QtQuick.QSGTextureProvider: ...
    def update_paint_node(self, arg__1: PySide6.QtQuick.QSGNode, arg__2: PySide6.QtQuick.QQuickItem.UpdatePaintNodeData, /) -> PySide6.QtQuick.QSGNode: ...


class QQuickRhiItemRenderer(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def color_texture(self, /) -> PySide6.QtGui.QRhiTexture: ...
    def depth_stencil_buffer(self, /) -> PySide6.QtGui.QRhiRenderBuffer: ...
    def initialize(self, cb: PySide6.QtGui.QRhiCommandBuffer, /) -> None: ...
    def msaa_color_buffer(self, /) -> PySide6.QtGui.QRhiRenderBuffer: ...
    def render(self, cb: PySide6.QtGui.QRhiCommandBuffer, /) -> None: ...
    def render_target(self, /) -> PySide6.QtGui.QRhiRenderTarget: ...
    def resolve_texture(self, /) -> PySide6.QtGui.QRhiTexture: ...
    def rhi(self, /) -> PySide6.QtGui.QRhi: ...
    def synchronize(self, item: PySide6.QtQuick.QQuickRhiItem, /) -> None: ...
    def update(self, /) -> None: ...


class QQuickTextDocument(PySide6.QtCore.QObject):

    errorStringChanged       : typing.ClassVar[Signal] = ... # errorStringChanged()
    modifiedChanged          : typing.ClassVar[Signal] = ... # modifiedChanged()
    sourceChanged            : typing.ClassVar[Signal] = ... # sourceChanged()
    statusChanged            : typing.ClassVar[Signal] = ... # statusChanged()
    textDocumentChanged      : typing.ClassVar[Signal] = ... # textDocumentChanged()

    class Status(enum.Enum):

        Null                      = ...  # 0x0
        Loading                   = ...  # 0x1
        Loaded                    = ...  # 0x2
        Saving                    = ...  # 0x3
        Saved                     = ...  # 0x4
        ReadError                 = ...  # 0x5
        WriteError                = ...  # 0x6
        NonLocalFileError         = ...  # 0x7


    def __init__(self, parent: PySide6.QtQuick.QQuickItem, /, *, source: PySide6.QtCore.QUrl | None = ..., modified: bool | None = ..., status: PySide6.QtQuick.QQuickTextDocument.Status | None = ..., error_string: str | None = ...) -> None: ...

    def error_string(self, /) -> str: ...
    def is_modified(self, /) -> bool: ...
    def save(self, /) -> None: ...
    def save_as(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    def set_modified(self, modified: bool, /) -> None: ...
    def set_source(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    def set_text_document(self, document: PySide6.QtGui.QTextDocument, /) -> None: ...
    def source(self, /) -> PySide6.QtCore.QUrl: ...
    def status(self, /) -> PySide6.QtQuick.QQuickTextDocument.Status: ...
    def text_document(self, /) -> PySide6.QtGui.QTextDocument: ...


class QQuickTextureFactory(PySide6.QtCore.QObject):

    def __init__(self, /) -> None: ...

    def create_texture(self, window: PySide6.QtQuick.QQuickWindow, /) -> PySide6.QtQuick.QSGTexture: ...
    def image(self, /) -> PySide6.QtGui.QImage: ...
    def texture_byte_count(self, /) -> int: ...
    @staticmethod
    def texture_factory_for_image(image: PySide6.QtGui.QImage, /) -> PySide6.QtQuick.QQuickTextureFactory: ...
    def texture_size(self, /) -> PySide6.QtCore.QSize: ...


class QQuickTransform(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def append_to_item(self, arg__1: PySide6.QtQuick.QQuickItem, /) -> None: ...
    def apply_to(self, matrix: PySide6.QtGui.QMatrix4x4 | PySide6.QtGui.QTransform, /) -> None: ...
    def prepend_to_item(self, arg__1: PySide6.QtQuick.QQuickItem, /) -> None: ...
    def update(self, /) -> None: ...


class QQuickView(PySide6.QtQuick.QQuickWindow):

    statusChanged            : typing.ClassVar[Signal] = ... # statusChanged(QQuickView::Status)

    class ResizeMode(enum.Enum):

        SizeViewToRootObject      = ...  # 0x0
        SizeRootObjectToView      = ...  # 0x1

    class Status(enum.Enum):

        Null                      = ...  # 0x0
        Ready                     = ...  # 0x1
        Loading                   = ...  # 0x2
        Error                     = ...  # 0x3


    @typing.overload
    def __init__(self, engine: PySide6.QtQml.QQmlEngine, parent: PySide6.QtGui.QWindow, /, *, resize_mode: PySide6.QtQuick.QQuickView.ResizeMode | None = ..., status: PySide6.QtQuick.QQuickView.Status | None = ..., source: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, source: PySide6.QtCore.QUrl, renderControl: PySide6.QtQuick.QQuickRenderControl, /, *, resize_mode: PySide6.QtQuick.QQuickView.ResizeMode | None = ..., status: PySide6.QtQuick.QQuickView.Status | None = ...) -> None: ...
    @typing.overload
    def __init__(self, source: PySide6.QtCore.QUrl, /, parent: PySide6.QtGui.QWindow | None = ..., *, resize_mode: PySide6.QtQuick.QQuickView.ResizeMode | None = ..., status: PySide6.QtQuick.QQuickView.Status | None = ...) -> None: ...
    @typing.overload
    def __init__(self, uri: str, typeName: str, /, parent: PySide6.QtGui.QWindow | None = ..., *, resize_mode: PySide6.QtQuick.QQuickView.ResizeMode | None = ..., status: PySide6.QtQuick.QQuickView.Status | None = ..., source: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtGui.QWindow | None = ..., *, resize_mode: PySide6.QtQuick.QQuickView.ResizeMode | None = ..., status: PySide6.QtQuick.QQuickView.Status | None = ..., source: PySide6.QtCore.QUrl | None = ...) -> None: ...

    def engine(self, /) -> PySide6.QtQml.QQmlEngine: ...
    def errors(self, /) -> typing.List[PySide6.QtQml.QQmlError]: ...
    def initial_size(self, /) -> PySide6.QtCore.QSize: ...
    def key_press_event(self, arg__1: PySide6.QtGui.QKeyEvent, /) -> None: ...
    def key_release_event(self, arg__1: PySide6.QtGui.QKeyEvent, /) -> None: ...
    def load_from_module(self, uri: str, typeName: str, /) -> None: ...
    def mouse_move_event(self, arg__1: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_press_event(self, arg__1: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_release_event(self, arg__1: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def resize_event(self, arg__1: PySide6.QtGui.QResizeEvent, /) -> None: ...
    def resize_mode(self, /) -> PySide6.QtQuick.QQuickView.ResizeMode: ...
    def root_context(self, /) -> PySide6.QtQml.QQmlContext: ...
    def root_object(self, /) -> PySide6.QtQuick.QQuickItem: ...
    def set_content(self, url: PySide6.QtCore.QUrl | str, component: PySide6.QtQml.QQmlComponent, item: PySide6.QtCore.QObject, /) -> None: ...
    def set_initial_properties(self, initialProperties: typing.Dict[str, typing.Any], /) -> None: ...
    def set_resize_mode(self, arg__1: PySide6.QtQuick.QQuickView.ResizeMode, /) -> None: ...
    def set_source(self, arg__1: PySide6.QtCore.QUrl | str, /) -> None: ...
    def size_hint(self, /) -> PySide6.QtCore.QSize: ...
    def source(self, /) -> PySide6.QtCore.QUrl: ...
    def status(self, /) -> PySide6.QtQuick.QQuickView.Status: ...
    def timer_event(self, arg__1: PySide6.QtCore.QTimerEvent, /) -> None: ...


class QQuickWindow(PySide6.QtGui.QWindow):

    activeFocusItemChanged   : typing.ClassVar[Signal] = ... # activeFocusItemChanged()
    afterAnimating           : typing.ClassVar[Signal] = ... # afterAnimating()
    afterFrameEnd            : typing.ClassVar[Signal] = ... # afterFrameEnd()
    afterRenderPassRecording : typing.ClassVar[Signal] = ... # afterRenderPassRecording()
    afterRendering           : typing.ClassVar[Signal] = ... # afterRendering()
    afterSynchronizing       : typing.ClassVar[Signal] = ... # afterSynchronizing()
    beforeFrameBegin         : typing.ClassVar[Signal] = ... # beforeFrameBegin()
    beforeRenderPassRecording: typing.ClassVar[Signal] = ... # beforeRenderPassRecording()
    beforeRendering          : typing.ClassVar[Signal] = ... # beforeRendering()
    beforeSynchronizing      : typing.ClassVar[Signal] = ... # beforeSynchronizing()
    closing                  : typing.ClassVar[Signal] = ... # closing(QQuickCloseEvent*)
    colorChanged             : typing.ClassVar[Signal] = ... # colorChanged(QColor)
    frameSwapped             : typing.ClassVar[Signal] = ... # frameSwapped()
    paletteChanged           : typing.ClassVar[Signal] = ... # paletteChanged()
    paletteCreated           : typing.ClassVar[Signal] = ... # paletteCreated()
    sceneGraphAboutToStop    : typing.ClassVar[Signal] = ... # sceneGraphAboutToStop()
    sceneGraphError          : typing.ClassVar[Signal] = ... # sceneGraphError(QQuickWindow::SceneGraphError,QString)
    sceneGraphInitialized    : typing.ClassVar[Signal] = ... # sceneGraphInitialized()
    sceneGraphInvalidated    : typing.ClassVar[Signal] = ... # sceneGraphInvalidated()

    class CreateTextureOption(enum.Flag):

        TextureHasAlphaChannel    = ...  # 0x1
        TextureHasMipmaps         = ...  # 0x2
        TextureOwnsGLTexture      = ...  # 0x4
        TextureCanUseAtlas        = ...  # 0x8
        TextureIsOpaque           = ...  # 0x10

    class GraphicsStateInfo(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, GraphicsStateInfo: PySide6.QtQuick.QQuickWindow.GraphicsStateInfo, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...

    class RenderStage(enum.Enum):

        BeforeSynchronizingStage  = ...  # 0x0
        AfterSynchronizingStage   = ...  # 0x1
        BeforeRenderingStage      = ...  # 0x2
        AfterRenderingStage       = ...  # 0x3
        AfterSwapStage            = ...  # 0x4
        NoStage                   = ...  # 0x5

    class SceneGraphError(enum.Enum):

        ContextNotAvailable       = ...  # 0x1

    class TextRenderType(enum.Enum):

        QtTextRendering           = ...  # 0x0
        NativeTextRendering       = ...  # 0x1
        CurveTextRendering        = ...  # 0x2


    @typing.overload
    def __init__(self, renderControl: PySide6.QtQuick.QQuickRenderControl, /, *, color: PySide6.QtGui.QColor | None = ..., content_item: PySide6.QtQuick.QQuickItem | None = ..., active_focus_item: PySide6.QtQuick.QQuickItem | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtGui.QWindow | None = ..., *, color: PySide6.QtGui.QColor | None = ..., content_item: PySide6.QtQuick.QQuickItem | None = ..., active_focus_item: PySide6.QtQuick.QQuickItem | None = ...) -> None: ...

    def __repr__(self, /) -> str: ...
    def accessible_root(self, /) -> PySide6.QtGui.QAccessibleInterface: ...
    def active_focus_item(self, /) -> PySide6.QtQuick.QQuickItem: ...
    def begin_external_commands(self, /) -> None: ...
    def close_event(self, arg__1: PySide6.QtGui.QCloseEvent, /) -> None: ...
    def color(self, /) -> PySide6.QtGui.QColor: ...
    def content_item(self, /) -> PySide6.QtQuick.QQuickItem: ...
    def create_image_node(self, /) -> PySide6.QtQuick.QSGImageNode: ...
    def create_nine_patch_node(self, /) -> PySide6.QtQuick.QSGNinePatchNode: ...
    def create_rectangle_node(self, /) -> PySide6.QtQuick.QSGRectangleNode: ...
    def create_text_node(self, /) -> PySide6.QtQuick.QSGTextNode: ...
    @typing.overload
    def create_texture_from_image(self, image: PySide6.QtGui.QImage, /) -> PySide6.QtQuick.QSGTexture: ...
    @typing.overload
    def create_texture_from_image(self, image: PySide6.QtGui.QImage, options: PySide6.QtQuick.QQuickWindow.CreateTextureOption, /) -> PySide6.QtQuick.QSGTexture: ...
    def create_texture_from_rhi_texture(self, texture: PySide6.QtGui.QRhiTexture, /, options: PySide6.QtQuick.QQuickWindow.CreateTextureOption = ...) -> PySide6.QtQuick.QSGTexture: ...
    def effective_device_pixel_ratio(self, /) -> float: ...
    def end_external_commands(self, /) -> None: ...
    def event(self, arg__1: PySide6.QtCore.QEvent, /) -> bool: ...
    def expose_event(self, arg__1: PySide6.QtGui.QExposeEvent, /) -> None: ...
    def focus_in_event(self, arg__1: PySide6.QtGui.QFocusEvent, /) -> None: ...
    def focus_object(self, /) -> PySide6.QtCore.QObject: ...
    def focus_out_event(self, arg__1: PySide6.QtGui.QFocusEvent, /) -> None: ...
    def grab_window(self, /) -> PySide6.QtGui.QImage: ...
    @staticmethod
    def graphics_api() -> PySide6.QtQuick.QSGRendererInterface.GraphicsApi: ...
    def graphics_configuration(self, /) -> PySide6.QtQuick.QQuickGraphicsConfiguration: ...
    def graphics_device(self, /) -> PySide6.QtQuick.QQuickGraphicsDevice: ...
    def graphics_state_info(self, /) -> PySide6.QtQuick.QQuickWindow.GraphicsStateInfo: ...
    @staticmethod
    def has_default_alpha_buffer() -> bool: ...
    def hide_event(self, arg__1: PySide6.QtGui.QHideEvent, /) -> None: ...
    def incubation_controller(self, /) -> PySide6.QtQml.QQmlIncubationController: ...
    def is_persistent_graphics(self, /) -> bool: ...
    def is_persistent_scene_graph(self, /) -> bool: ...
    def is_scene_graph_initialized(self, /) -> bool: ...
    def key_press_event(self, arg__1: PySide6.QtGui.QKeyEvent, /) -> None: ...
    def key_release_event(self, arg__1: PySide6.QtGui.QKeyEvent, /) -> None: ...
    def mouse_double_click_event(self, arg__1: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_grabber_item(self, /) -> PySide6.QtQuick.QQuickItem: ...
    def mouse_move_event(self, arg__1: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_press_event(self, arg__1: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_release_event(self, arg__1: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def release_resources(self, /) -> None: ...
    def render_target(self, /) -> PySide6.QtQuick.QQuickRenderTarget: ...
    def renderer_interface(self, /) -> PySide6.QtQuick.QSGRendererInterface: ...
    def resize_event(self, arg__1: PySide6.QtGui.QResizeEvent, /) -> None: ...
    def rhi(self, /) -> PySide6.QtGui.QRhi: ...
    @staticmethod
    def scene_graph_backend() -> str: ...
    def schedule_render_job(self, job: PySide6.QtCore.QRunnable, schedule: PySide6.QtQuick.QQuickWindow.RenderStage, /) -> None: ...
    def set_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @staticmethod
    def set_default_alpha_buffer(useAlpha: bool, /) -> None: ...
    @staticmethod
    def set_graphics_api(api: PySide6.QtQuick.QSGRendererInterface.GraphicsApi, /) -> None: ...
    def set_graphics_configuration(self, config: PySide6.QtQuick.QQuickGraphicsConfiguration, /) -> None: ...
    def set_graphics_device(self, device: PySide6.QtQuick.QQuickGraphicsDevice, /) -> None: ...
    def set_persistent_graphics(self, persistent: bool, /) -> None: ...
    def set_persistent_scene_graph(self, persistent: bool, /) -> None: ...
    def set_render_target(self, target: PySide6.QtQuick.QQuickRenderTarget, /) -> None: ...
    @staticmethod
    def set_scene_graph_backend(backend: str, /) -> None: ...
    @staticmethod
    def set_text_render_type(renderType: PySide6.QtQuick.QQuickWindow.TextRenderType, /) -> None: ...
    def show_event(self, arg__1: PySide6.QtGui.QShowEvent, /) -> None: ...
    def swap_chain(self, /) -> PySide6.QtGui.QRhiSwapChain: ...
    def tablet_event(self, arg__1: PySide6.QtGui.QTabletEvent, /) -> None: ...
    @staticmethod
    def text_render_type() -> PySide6.QtQuick.QQuickWindow.TextRenderType: ...
    def update(self, /) -> None: ...
    def wheel_event(self, arg__1: PySide6.QtGui.QWheelEvent, /) -> None: ...


class QSGBasicGeometryNode(PySide6.QtQuick.QSGNode):

    def __init__(self, type: PySide6.QtQuick.QSGNode.NodeType, /) -> None: ...

    def clip_list(self, /) -> PySide6.QtQuick.QSGClipNode: ...
    def geometry(self, /) -> PySide6.QtQuick.QSGGeometry: ...
    def matrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
    def set_geometry(self, geometry: PySide6.QtQuick.QSGGeometry, /) -> None: ...
    def set_renderer_clip_list(self, c: PySide6.QtQuick.QSGClipNode, /) -> None: ...
    def set_renderer_matrix(self, m: PySide6.QtGui.QMatrix4x4 | PySide6.QtGui.QTransform, /) -> None: ...


class QSGClipNode(PySide6.QtQuick.QSGBasicGeometryNode):

    def __init__(self, /) -> None: ...

    def clip_rect(self, /) -> PySide6.QtCore.QRectF: ...
    def is_rectangular(self, /) -> bool: ...
    def set_clip_rect(self, arg__1: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    def set_is_rectangular(self, rectHint: bool, /) -> None: ...


class QSGDynamicTexture(PySide6.QtQuick.QSGTexture):

    def __init__(self, /) -> None: ...

    def update_texture(self, /) -> bool: ...


class QSGFlatColorMaterial(PySide6.QtQuick.QSGMaterial):

    def __init__(self, /) -> None: ...

    def color(self, /) -> PySide6.QtGui.QColor: ...
    def compare(self, other: PySide6.QtQuick.QSGMaterial, /) -> int: ...
    def create_shader(self, renderMode: PySide6.QtQuick.QSGRendererInterface.RenderMode, /) -> PySide6.QtQuick.QSGMaterialShader: ...
    def set_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def type(self, /) -> PySide6.QtQuick.QSGMaterialType: ...


class QSGGeometry(Shiboken.Object):

    class Attribute(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, Attribute: PySide6.QtQuick.QSGGeometry.Attribute, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        @staticmethod
        def create(pos: int, tupleSize: int, primitiveType: int, /, isPosition: bool = ...) -> PySide6.QtQuick.QSGGeometry.Attribute: ...
        @staticmethod
        def create_with_attribute_type(pos: int, tupleSize: int, primitiveType: int, attributeType: PySide6.QtQuick.QSGGeometry.AttributeType, /) -> PySide6.QtQuick.QSGGeometry.Attribute: ...

    class AttributeSet(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, AttributeSet: PySide6.QtQuick.QSGGeometry.AttributeSet, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...

    class AttributeType(enum.Enum):

        UnknownAttribute          = ...  # 0x0
        PositionAttribute         = ...  # 0x1
        ColorAttribute            = ...  # 0x2
        TexCoordAttribute         = ...  # 0x3
        TexCoord1Attribute        = ...  # 0x4
        TexCoord2Attribute        = ...  # 0x5

    class ColoredPoint2D(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, ColoredPoint2D: PySide6.QtQuick.QSGGeometry.ColoredPoint2D, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def set(self, nx: float, ny: float, nr: int, ng: int, nb: int, na: int, /) -> None: ...

    class DataPattern(enum.Enum):

        AlwaysUploadPattern       = ...  # 0x0
        StreamPattern             = ...  # 0x1
        DynamicPattern            = ...  # 0x2
        StaticPattern             = ...  # 0x3

    class DrawingMode(enum.IntEnum):

        DrawPoints                = ...  # 0x0
        DrawLines                 = ...  # 0x1
        DrawLineLoop              = ...  # 0x2
        DrawLineStrip             = ...  # 0x3
        DrawTriangles             = ...  # 0x4
        DrawTriangleStrip         = ...  # 0x5
        DrawTriangleFan           = ...  # 0x6

    class Point2D(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, Point2D: PySide6.QtQuick.QSGGeometry.Point2D, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def set(self, nx: float, ny: float, /) -> None: ...

    class TexturedPoint2D(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, TexturedPoint2D: PySide6.QtQuick.QSGGeometry.TexturedPoint2D, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def set(self, nx: float, ny: float, ntx: float, nty: float, /) -> None: ...

    class Type(enum.Enum):

        ByteType                  = ...  # 0x1400
        UnsignedByteType          = ...  # 0x1401
        ShortType                 = ...  # 0x1402
        UnsignedShortType         = ...  # 0x1403
        IntType                   = ...  # 0x1404
        UnsignedIntType           = ...  # 0x1405
        FloatType                 = ...  # 0x1406
        Bytes2Type                = ...  # 0x1407
        Bytes3Type                = ...  # 0x1408
        Bytes4Type                = ...  # 0x1409
        DoubleType                = ...  # 0x140a


    def __init__(self, attribs: PySide6.QtQuick.QSGGeometry.AttributeSet, vertexCount: int, /, indexCount: int | None = ..., indexType: int = ...) -> None: ...

    def allocate(self, vertexCount: int, /, indexCount: int | None = ...) -> None: ...
    def attribute_count(self, /) -> int: ...
    def attributes(self, /) -> PySide6.QtQuick.QSGGeometry.Attribute: ...
    @staticmethod
    def default_attributes__colored_point2_d() -> PySide6.QtQuick.QSGGeometry.AttributeSet: ...
    @staticmethod
    def default_attributes__point2_d() -> PySide6.QtQuick.QSGGeometry.AttributeSet: ...
    @staticmethod
    def default_attributes__textured_point2_d() -> PySide6.QtQuick.QSGGeometry.AttributeSet: ...
    def drawing_mode(self, /) -> int: ...
    def indexDataAsUInt(self, /) -> typing.List[int]: ...
    def indexDataAsUShort(self, /) -> typing.List[int]: ...
    def index_count(self, /) -> int: ...
    def index_data(self, /) -> int: ...
    def index_data_pattern(self, /) -> PySide6.QtQuick.QSGGeometry.DataPattern: ...
    def index_type(self, /) -> int: ...
    def line_width(self, /) -> float: ...
    def mark_index_data_dirty(self, /) -> None: ...
    def mark_vertex_data_dirty(self, /) -> None: ...
    def set_drawing_mode(self, mode: int, /) -> None: ...
    def set_index_data_pattern(self, p: PySide6.QtQuick.QSGGeometry.DataPattern, /) -> None: ...
    def set_line_width(self, w: float, /) -> None: ...
    def set_vertex_data_as_point2_d(self, points: collections.abc.Sequence[PySide6.QtQuick.QSGGeometry.Point2D], /) -> None: ...
    def set_vertex_data_pattern(self, p: PySide6.QtQuick.QSGGeometry.DataPattern, /) -> None: ...
    def size_of_index(self, /) -> int: ...
    def size_of_vertex(self, /) -> int: ...
    @staticmethod
    def update_colored_rect_geometry(g: PySide6.QtQuick.QSGGeometry, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    @staticmethod
    def update_rect_geometry(g: PySide6.QtQuick.QSGGeometry, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    @staticmethod
    def update_textured_rect_geometry(g: PySide6.QtQuick.QSGGeometry, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, sourceRect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    def vertex_count(self, /) -> int: ...
    def vertex_data(self, /) -> int: ...
    def vertex_data_as_colored_point2_d(self, /) -> PySide6.QtQuick.QSGGeometry.ColoredPoint2D: ...
    def vertex_data_as_point2_d(self, /) -> object: ...
    def vertex_data_as_textured_point2_d(self, /) -> PySide6.QtQuick.QSGGeometry.TexturedPoint2D: ...
    def vertex_data_pattern(self, /) -> PySide6.QtQuick.QSGGeometry.DataPattern: ...


class QSGGeometryNode(PySide6.QtQuick.QSGBasicGeometryNode):

    def __init__(self, /) -> None: ...

    def __repr__(self, /) -> str: ...
    def active_material(self, /) -> PySide6.QtQuick.QSGMaterial: ...
    def inherited_opacity(self, /) -> float: ...
    def material(self, /) -> PySide6.QtQuick.QSGMaterial: ...
    def opaque_material(self, /) -> PySide6.QtQuick.QSGMaterial: ...
    def render_order(self, /) -> int: ...
    def set_inherited_opacity(self, opacity: float, /) -> None: ...
    def set_material(self, material: PySide6.QtQuick.QSGMaterial, /) -> None: ...
    def set_opaque_material(self, material: PySide6.QtQuick.QSGMaterial, /) -> None: ...
    def set_render_order(self, order: int, /) -> None: ...


class QSGImageNode(PySide6.QtQuick.QSGGeometryNode):

    class TextureCoordinatesTransformFlag(enum.Flag):

        NoTransform               = ...  # 0x0
        MirrorHorizontally        = ...  # 0x1
        MirrorVertically          = ...  # 0x2


    def __init__(self, /) -> None: ...

    def anisotropy_level(self, /) -> PySide6.QtQuick.QSGTexture.AnisotropyLevel: ...
    def filtering(self, /) -> PySide6.QtQuick.QSGTexture.Filtering: ...
    def mipmap_filtering(self, /) -> PySide6.QtQuick.QSGTexture.Filtering: ...
    def owns_texture(self, /) -> bool: ...
    @staticmethod
    def rebuild_geometry(g: PySide6.QtQuick.QSGGeometry, texture: PySide6.QtQuick.QSGTexture, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, sourceRect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, texCoordMode: PySide6.QtQuick.QSGImageNode.TextureCoordinatesTransformFlag, /) -> None: ...
    def rect(self, /) -> PySide6.QtCore.QRectF: ...
    def set_anisotropy_level(self, level: PySide6.QtQuick.QSGTexture.AnisotropyLevel, /) -> None: ...
    def set_filtering(self, filtering: PySide6.QtQuick.QSGTexture.Filtering, /) -> None: ...
    def set_mipmap_filtering(self, filtering: PySide6.QtQuick.QSGTexture.Filtering, /) -> None: ...
    def set_owns_texture(self, owns: bool, /) -> None: ...
    @typing.overload
    def set_rect(self, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    @typing.overload
    def set_rect(self, x: float, y: float, w: float, h: float, /) -> None: ...
    @typing.overload
    def set_source_rect(self, r: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    @typing.overload
    def set_source_rect(self, x: float, y: float, w: float, h: float, /) -> None: ...
    def set_texture(self, texture: PySide6.QtQuick.QSGTexture, /) -> None: ...
    def set_texture_coordinates_transform(self, mode: PySide6.QtQuick.QSGImageNode.TextureCoordinatesTransformFlag, /) -> None: ...
    def source_rect(self, /) -> PySide6.QtCore.QRectF: ...
    def texture(self, /) -> PySide6.QtQuick.QSGTexture: ...
    def texture_coordinates_transform(self, /) -> PySide6.QtQuick.QSGImageNode.TextureCoordinatesTransformFlag: ...


class QSGMaterial(Shiboken.Object):

    class Flag(enum.Flag):

        Blending                  = ...  # 0x1
        RequiresDeterminant       = ...  # 0x2
        RequiresFullMatrixExceptTranslate = ...  # 0x6
        RequiresFullMatrix        = ...  # 0xe
        CustomCompileStep         = ...  # 0x10
        NoBatching                = ...  # 0x10
        MultiView2                = ...  # 0x10000
        MultiView3                = ...  # 0x20000
        MultiView4                = ...  # 0x40000


    def __init__(self, /) -> None: ...

    def compare(self, other: PySide6.QtQuick.QSGMaterial, /) -> int: ...
    def create_shader(self, renderMode: PySide6.QtQuick.QSGRendererInterface.RenderMode, /) -> PySide6.QtQuick.QSGMaterialShader: ...
    def flags(self, /) -> PySide6.QtQuick.QSGMaterial.Flag: ...
    def set_flag(self, flags: PySide6.QtQuick.QSGMaterial.Flag, /, on: bool = ...) -> None: ...
    def type(self, /) -> PySide6.QtQuick.QSGMaterialType: ...
    def view_count(self, /) -> int: ...


class QSGMaterialShader(Shiboken.Object):

    class Flag(enum.Flag):

        UpdatesGraphicsPipelineState = ...  # 0x1

    class GraphicsPipelineState(Shiboken.Object):

        class BlendFactor(enum.Enum):

            Zero                      = ...  # 0x0
            One                       = ...  # 0x1
            SrcColor                  = ...  # 0x2
            OneMinusSrcColor          = ...  # 0x3
            DstColor                  = ...  # 0x4
            OneMinusDstColor          = ...  # 0x5
            SrcAlpha                  = ...  # 0x6
            OneMinusSrcAlpha          = ...  # 0x7
            DstAlpha                  = ...  # 0x8
            OneMinusDstAlpha          = ...  # 0x9
            ConstantColor             = ...  # 0xa
            OneMinusConstantColor     = ...  # 0xb
            ConstantAlpha             = ...  # 0xc
            OneMinusConstantAlpha     = ...  # 0xd
            SrcAlphaSaturate          = ...  # 0xe
            Src1Color                 = ...  # 0xf
            OneMinusSrc1Color         = ...  # 0x10
            Src1Alpha                 = ...  # 0x11
            OneMinusSrc1Alpha         = ...  # 0x12

        class BlendOp(enum.Enum):

            Add                       = ...  # 0x0
            Subtract                  = ...  # 0x1
            ReverseSubtract           = ...  # 0x2
            Min                       = ...  # 0x3
            Max                       = ...  # 0x4

        class ColorMaskComponent(enum.Flag):

            R                         = ...  # 0x1
            G                         = ...  # 0x2
            B                         = ...  # 0x4
            A                         = ...  # 0x8

        class CullMode(enum.Enum):

            CullNone                  = ...  # 0x0
            CullFront                 = ...  # 0x1
            CullBack                  = ...  # 0x2

        class PolygonMode(enum.Enum):

            Fill                      = ...  # 0x0
            Line                      = ...  # 0x1


        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, GraphicsPipelineState: PySide6.QtQuick.QSGMaterialShader.GraphicsPipelineState, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...

    class RenderState(Shiboken.Object):

        class DirtyState(enum.Flag):

            DirtyMatrix               = ...  # 0x1
            DirtyOpacity              = ...  # 0x2
            DirtyCachedMaterialData   = ...  # 0x4
            DirtyAll                  = ...  # 0xffff


        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, RenderState: PySide6.QtQuick.QSGMaterialShader.RenderState, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        @typing.overload
        def combined_matrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
        @typing.overload
        def combined_matrix(self, index: int, /) -> PySide6.QtGui.QMatrix4x4: ...
        def determinant(self, /) -> float: ...
        def device_pixel_ratio(self, /) -> float: ...
        def device_rect(self, /) -> PySide6.QtCore.QRect: ...
        def dirty_states(self, /) -> PySide6.QtQuick.QSGMaterialShader.RenderState.DirtyState: ...
        def is_matrix_dirty(self, /) -> bool: ...
        def is_opacity_dirty(self, /) -> bool: ...
        def model_view_matrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
        def opacity(self, /) -> float: ...
        @typing.overload
        def projection_matrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
        @typing.overload
        def projection_matrix(self, index: int, /) -> PySide6.QtGui.QMatrix4x4: ...
        def projection_matrix_count(self, /) -> int: ...
        def resource_update_batch(self, /) -> PySide6.QtGui.QRhiResourceUpdateBatch: ...
        def rhi(self, /) -> PySide6.QtGui.QRhi: ...
        def uniform_data(self, /) -> PySide6.QtCore.QByteArray: ...
        def viewport_rect(self, /) -> PySide6.QtCore.QRect: ...

    class Stage(enum.Enum):

        VertexStage               = ...  # 0x0
        FragmentStage             = ...  # 0x1


    def __init__(self, /) -> None: ...

    def combined_image_sampler_count(self, binding: int, /) -> int: ...
    def flags(self, /) -> PySide6.QtQuick.QSGMaterialShader.Flag: ...
    def set_flag(self, flags: PySide6.QtQuick.QSGMaterialShader.Flag, /, on: bool = ...) -> None: ...
    def set_flags(self, flags: PySide6.QtQuick.QSGMaterialShader.Flag, /) -> None: ...
    @typing.overload
    def set_shader_file_name(self, stage: PySide6.QtQuick.QSGMaterialShader.Stage, filename: str, /) -> None: ...
    @typing.overload
    def set_shader_file_name(self, stage: PySide6.QtQuick.QSGMaterialShader.Stage, filename: str, viewCount: int, /) -> None: ...
    def update_graphics_pipeline_state(self, state: PySide6.QtQuick.QSGMaterialShader.RenderState, ps: PySide6.QtQuick.QSGMaterialShader.GraphicsPipelineState, newMaterial: PySide6.QtQuick.QSGMaterial, oldMaterial: PySide6.QtQuick.QSGMaterial, /) -> bool: ...
    def update_uniform_data(self, state: PySide6.QtQuick.QSGMaterialShader.RenderState, newMaterial: PySide6.QtQuick.QSGMaterial, oldMaterial: PySide6.QtQuick.QSGMaterial, /) -> bool: ...


class QSGMaterialType(Shiboken.Object):

    def __init__(self, /) -> None: ...


class QSGNinePatchNode(PySide6.QtQuick.QSGGeometryNode):

    def __init__(self, /) -> None: ...

    @staticmethod
    def rebuild_geometry(texture: PySide6.QtQuick.QSGTexture, geometry: PySide6.QtQuick.QSGGeometry, padding: PySide6.QtGui.QVector4D, bounds: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, dpr: float, /) -> None: ...
    def set_bounds(self, bounds: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    def set_device_pixel_ratio(self, ratio: float, /) -> None: ...
    def set_padding(self, left: float, top: float, right: float, bottom: float, /) -> None: ...
    def set_texture(self, texture: PySide6.QtQuick.QSGTexture, /) -> None: ...
    def update(self, /) -> None: ...


class QSGNode(Shiboken.Object):

    class DirtyStateBit(enum.Flag):

        DirtyUsePreprocess        = ...  # 0x2
        DirtySubtreeBlocked       = ...  # 0x80
        DirtyMatrix               = ...  # 0x100
        DirtyNodeAdded            = ...  # 0x400
        DirtyNodeRemoved          = ...  # 0x800
        DirtyGeometry             = ...  # 0x1000
        DirtyMaterial             = ...  # 0x2000
        DirtyOpacity              = ...  # 0x4000
        DirtyForceUpdate          = ...  # 0x8000
        DirtyPropagationMask      = ...  # 0xc500

    class Flag(enum.Flag):

        OwnedByParent             = ...  # 0x1
        UsePreprocess             = ...  # 0x2
        OwnsGeometry              = ...  # 0x10000
        OwnsMaterial              = ...  # 0x20000
        OwnsOpaqueMaterial        = ...  # 0x40000
        IsVisitableNode           = ...  # 0x1000000

    class NodeType(enum.Enum):

        BasicNodeType             = ...  # 0x0
        GeometryNodeType          = ...  # 0x1
        TransformNodeType         = ...  # 0x2
        ClipNodeType              = ...  # 0x3
        OpacityNodeType           = ...  # 0x4
        RootNodeType              = ...  # 0x5
        RenderNodeType            = ...  # 0x6


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, type: PySide6.QtQuick.QSGNode.NodeType, /) -> None: ...

    def __repr__(self, /) -> str: ...
    def append_child_node(self, node: PySide6.QtQuick.QSGNode, /) -> None: ...
    def child_at_index(self, i: int, /) -> PySide6.QtQuick.QSGNode: ...
    def child_count(self, /) -> int: ...
    def clear_dirty(self, /) -> None: ...
    def dirty_state(self, /) -> PySide6.QtQuick.QSGNode.DirtyStateBit: ...
    def first_child(self, /) -> PySide6.QtQuick.QSGNode: ...
    def flags(self, /) -> PySide6.QtQuick.QSGNode.Flag: ...
    def insert_child_node_after(self, node: PySide6.QtQuick.QSGNode, after: PySide6.QtQuick.QSGNode, /) -> None: ...
    def insert_child_node_before(self, node: PySide6.QtQuick.QSGNode, before: PySide6.QtQuick.QSGNode, /) -> None: ...
    def is_subtree_blocked(self, /) -> bool: ...
    def last_child(self, /) -> PySide6.QtQuick.QSGNode: ...
    def mark_dirty(self, bits: PySide6.QtQuick.QSGNode.DirtyStateBit, /) -> None: ...
    def next_sibling(self, /) -> PySide6.QtQuick.QSGNode: ...
    def parent(self, /) -> PySide6.QtQuick.QSGNode: ...
    def prepend_child_node(self, node: PySide6.QtQuick.QSGNode, /) -> None: ...
    def preprocess(self, /) -> None: ...
    def previous_sibling(self, /) -> PySide6.QtQuick.QSGNode: ...
    def remove_all_child_nodes(self, /) -> None: ...
    def remove_child_node(self, node: PySide6.QtQuick.QSGNode, /) -> None: ...
    def reparent_child_nodes_to(self, newParent: PySide6.QtQuick.QSGNode, /) -> None: ...
    def set_flag(self, arg__1: PySide6.QtQuick.QSGNode.Flag, /, arg__2: bool = ...) -> None: ...
    def set_flags(self, arg__1: PySide6.QtQuick.QSGNode.Flag, /, arg__2: bool = ...) -> None: ...
    def type(self, /) -> PySide6.QtQuick.QSGNode.NodeType: ...


class QSGNodeVisitor(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def enter_clip_node(self, arg__1: PySide6.QtQuick.QSGClipNode, /) -> None: ...
    def enter_geometry_node(self, arg__1: PySide6.QtQuick.QSGGeometryNode, /) -> None: ...
    def enter_opacity_node(self, arg__1: PySide6.QtQuick.QSGOpacityNode, /) -> None: ...
    def enter_transform_node(self, arg__1: PySide6.QtQuick.QSGTransformNode, /) -> None: ...
    def leave_clip_node(self, arg__1: PySide6.QtQuick.QSGClipNode, /) -> None: ...
    def leave_geometry_node(self, arg__1: PySide6.QtQuick.QSGGeometryNode, /) -> None: ...
    def leave_opacity_node(self, arg__1: PySide6.QtQuick.QSGOpacityNode, /) -> None: ...
    def leave_transform_node(self, arg__1: PySide6.QtQuick.QSGTransformNode, /) -> None: ...
    def visit_children(self, n: PySide6.QtQuick.QSGNode, /) -> None: ...
    def visit_node(self, n: PySide6.QtQuick.QSGNode, /) -> None: ...


class QSGOpacityNode(PySide6.QtQuick.QSGNode):

    def __init__(self, /) -> None: ...

    def __repr__(self, /) -> str: ...
    def combined_opacity(self, /) -> float: ...
    def is_subtree_blocked(self, /) -> bool: ...
    def opacity(self, /) -> float: ...
    def set_combined_opacity(self, opacity: float, /) -> None: ...
    def set_opacity(self, opacity: float, /) -> None: ...


class QSGOpaqueTextureMaterial(PySide6.QtQuick.QSGMaterial):

    def __init__(self, /) -> None: ...

    def anisotropy_level(self, /) -> PySide6.QtQuick.QSGTexture.AnisotropyLevel: ...
    def compare(self, other: PySide6.QtQuick.QSGMaterial, /) -> int: ...
    def create_shader(self, renderMode: PySide6.QtQuick.QSGRendererInterface.RenderMode, /) -> PySide6.QtQuick.QSGMaterialShader: ...
    def filtering(self, /) -> PySide6.QtQuick.QSGTexture.Filtering: ...
    def horizontal_wrap_mode(self, /) -> PySide6.QtQuick.QSGTexture.WrapMode: ...
    def mipmap_filtering(self, /) -> PySide6.QtQuick.QSGTexture.Filtering: ...
    def set_anisotropy_level(self, level: PySide6.QtQuick.QSGTexture.AnisotropyLevel, /) -> None: ...
    def set_filtering(self, filteringType: PySide6.QtQuick.QSGTexture.Filtering, /) -> None: ...
    def set_horizontal_wrap_mode(self, mode: PySide6.QtQuick.QSGTexture.WrapMode, /) -> None: ...
    def set_mipmap_filtering(self, filteringType: PySide6.QtQuick.QSGTexture.Filtering, /) -> None: ...
    def set_texture(self, texture: PySide6.QtQuick.QSGTexture, /) -> None: ...
    def set_vertical_wrap_mode(self, mode: PySide6.QtQuick.QSGTexture.WrapMode, /) -> None: ...
    def texture(self, /) -> PySide6.QtQuick.QSGTexture: ...
    def type(self, /) -> PySide6.QtQuick.QSGMaterialType: ...
    def vertical_wrap_mode(self, /) -> PySide6.QtQuick.QSGTexture.WrapMode: ...


class QSGRectangleNode(PySide6.QtQuick.QSGGeometryNode):

    def __init__(self, /) -> None: ...

    def color(self, /) -> PySide6.QtGui.QColor: ...
    def rect(self, /) -> PySide6.QtCore.QRectF: ...
    def set_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @typing.overload
    def set_rect(self, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    @typing.overload
    def set_rect(self, x: float, y: float, w: float, h: float, /) -> None: ...


class QSGRenderNode(PySide6.QtQuick.QSGNode):

    class RenderState(Shiboken.Object):

        def __init__(self, /) -> None: ...

        def clip_region(self, /) -> PySide6.QtGui.QRegion: ...
        def get(self, state: bytes | bytearray | memoryview, /) -> int: ...
        def projection_matrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
        def scissor_enabled(self, /) -> bool: ...
        def scissor_rect(self, /) -> PySide6.QtCore.QRect: ...
        def stencil_enabled(self, /) -> bool: ...
        def stencil_value(self, /) -> int: ...

    class RenderingFlag(enum.Flag):

        BoundedRectRendering      = ...  # 0x1
        DepthAwareRendering       = ...  # 0x2
        OpaqueRendering           = ...  # 0x4
        NoExternalRendering       = ...  # 0x8

    class StateFlag(enum.Flag):

        DepthState                = ...  # 0x1
        StencilState              = ...  # 0x2
        ScissorState              = ...  # 0x4
        ColorState                = ...  # 0x8
        BlendState                = ...  # 0x10
        CullState                 = ...  # 0x20
        ViewportState             = ...  # 0x40
        RenderTargetState         = ...  # 0x80


    def __init__(self, /) -> None: ...

    def changed_states(self, /) -> PySide6.QtQuick.QSGRenderNode.StateFlag: ...
    def clip_list(self, /) -> PySide6.QtQuick.QSGClipNode: ...
    def command_buffer(self, /) -> PySide6.QtGui.QRhiCommandBuffer: ...
    def flags(self, /) -> PySide6.QtQuick.QSGRenderNode.RenderingFlag: ...
    def inherited_opacity(self, /) -> float: ...
    def matrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
    def prepare(self, /) -> None: ...
    @typing.overload
    def projection_matrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
    @typing.overload
    def projection_matrix(self, index: int, /) -> PySide6.QtGui.QMatrix4x4: ...
    def rect(self, /) -> PySide6.QtCore.QRectF: ...
    def release_resources(self, /) -> None: ...
    def render(self, state: PySide6.QtQuick.QSGRenderNode.RenderState, /) -> None: ...
    def render_target(self, /) -> PySide6.QtGui.QRhiRenderTarget: ...


class QSGRendererInterface(Shiboken.Object):

    class GraphicsApi(enum.Enum):

        Unknown                   = ...  # 0x0
        Software                  = ...  # 0x1
        OpenVG                    = ...  # 0x2
        OpenGL                    = ...  # 0x3
        OpenGLRhi                 = ...  # 0x3
        Direct3D11                = ...  # 0x4
        Direct3D11Rhi             = ...  # 0x4
        Vulkan                    = ...  # 0x5
        VulkanRhi                 = ...  # 0x5
        Metal                     = ...  # 0x6
        MetalRhi                  = ...  # 0x6
        Null                      = ...  # 0x7
        NullRhi                   = ...  # 0x7
        Direct3D12                = ...  # 0x8

    class RenderMode(enum.Enum):

        RenderMode2D              = ...  # 0x0
        RenderMode2DNoDepthBuffer = ...  # 0x1
        RenderMode3D              = ...  # 0x2

    class Resource(enum.Enum):

        DeviceResource            = ...  # 0x0
        CommandQueueResource      = ...  # 0x1
        CommandListResource       = ...  # 0x2
        PainterResource           = ...  # 0x3
        RhiResource               = ...  # 0x4
        RhiSwapchainResource      = ...  # 0x5
        RhiRedirectCommandBuffer  = ...  # 0x6
        RhiRedirectRenderTarget   = ...  # 0x7
        PhysicalDeviceResource    = ...  # 0x8
        OpenGLContextResource     = ...  # 0x9
        DeviceContextResource     = ...  # 0xa
        CommandEncoderResource    = ...  # 0xb
        VulkanInstanceResource    = ...  # 0xc
        RenderPassResource        = ...  # 0xd
        RedirectPaintDevice       = ...  # 0xe
        GraphicsQueueFamilyIndexResource = ...  # 0xf
        GraphicsQueueIndexResource = ...  # 0x10

    class ShaderCompilationType(enum.Flag):

        RuntimeCompilation        = ...  # 0x1
        OfflineCompilation        = ...  # 0x2

    class ShaderSourceType(enum.Flag):

        ShaderSourceString        = ...  # 0x1
        ShaderSourceFile          = ...  # 0x2
        ShaderByteCode            = ...  # 0x4

    class ShaderType(enum.Enum):

        UnknownShadingLanguage    = ...  # 0x0
        GLSL                      = ...  # 0x1
        HLSL                      = ...  # 0x2
        RhiShader                 = ...  # 0x3


    def __init__(self, /) -> None: ...

    @typing.overload
    def get_resource(self, window: PySide6.QtQuick.QQuickWindow, resource: PySide6.QtQuick.QSGRendererInterface.Resource, /) -> int: ...
    @typing.overload
    def get_resource(self, window: PySide6.QtQuick.QQuickWindow, resource: bytes | bytearray | memoryview, /) -> int: ...
    def graphics_api(self, /) -> PySide6.QtQuick.QSGRendererInterface.GraphicsApi: ...
    @staticmethod
    def is_api_rhi_based(api: PySide6.QtQuick.QSGRendererInterface.GraphicsApi, /) -> bool: ...
    def shader_compilation_type(self, /) -> PySide6.QtQuick.QSGRendererInterface.ShaderCompilationType: ...
    def shader_source_type(self, /) -> PySide6.QtQuick.QSGRendererInterface.ShaderSourceType: ...
    def shader_type(self, /) -> PySide6.QtQuick.QSGRendererInterface.ShaderType: ...


class QSGRootNode(PySide6.QtQuick.QSGNode):

    def __init__(self, /) -> None: ...

    def __repr__(self, /) -> str: ...


class QSGSimpleRectNode(PySide6.QtQuick.QSGGeometryNode):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...

    def color(self, /) -> PySide6.QtGui.QColor: ...
    def rect(self, /) -> PySide6.QtCore.QRectF: ...
    def set_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @typing.overload
    def set_rect(self, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    @typing.overload
    def set_rect(self, x: float, y: float, w: float, h: float, /) -> None: ...


class QSGSimpleTextureNode(PySide6.QtQuick.QSGGeometryNode):

    class TextureCoordinatesTransformFlag(enum.Flag):

        NoTransform               = ...  # 0x0
        MirrorHorizontally        = ...  # 0x1
        MirrorVertically          = ...  # 0x2


    def __init__(self, /) -> None: ...

    def filtering(self, /) -> PySide6.QtQuick.QSGTexture.Filtering: ...
    def owns_texture(self, /) -> bool: ...
    def rect(self, /) -> PySide6.QtCore.QRectF: ...
    def set_filtering(self, filtering: PySide6.QtQuick.QSGTexture.Filtering, /) -> None: ...
    def set_owns_texture(self, owns: bool, /) -> None: ...
    @typing.overload
    def set_rect(self, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    @typing.overload
    def set_rect(self, x: float, y: float, w: float, h: float, /) -> None: ...
    @typing.overload
    def set_source_rect(self, r: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    @typing.overload
    def set_source_rect(self, x: float, y: float, w: float, h: float, /) -> None: ...
    def set_texture(self, texture: PySide6.QtQuick.QSGTexture, /) -> None: ...
    def set_texture_coordinates_transform(self, mode: PySide6.QtQuick.QSGSimpleTextureNode.TextureCoordinatesTransformFlag, /) -> None: ...
    def source_rect(self, /) -> PySide6.QtCore.QRectF: ...
    def texture(self, /) -> PySide6.QtQuick.QSGTexture: ...
    def texture_coordinates_transform(self, /) -> PySide6.QtQuick.QSGSimpleTextureNode.TextureCoordinatesTransformFlag: ...


class QSGTextNode(PySide6.QtQuick.QSGTransformNode):

    class RenderType(enum.Enum):

        QtRendering               = ...  # 0x0
        NativeRendering           = ...  # 0x1
        CurveRendering            = ...  # 0x2

    class TextStyle(enum.Enum):

        Normal                    = ...  # 0x0
        Outline                   = ...  # 0x1
        Raised                    = ...  # 0x2
        Sunken                    = ...  # 0x3


    def __init__(self, /) -> None: ...

    def add_text_document(self, position: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, document: PySide6.QtGui.QTextDocument, /, selectionStart: int = ..., selectionCount: int = ...) -> None: ...
    def add_text_layout(self, position: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, layout: PySide6.QtGui.QTextLayout, /, selectionStart: int = ..., selectionCount: int = ..., lineStart: int | None = ..., lineCount: int = ...) -> None: ...
    def clear(self, /) -> None: ...
    def color(self, /) -> PySide6.QtGui.QColor: ...
    def filtering(self, /) -> PySide6.QtQuick.QSGTexture.Filtering: ...
    def link_color(self, /) -> PySide6.QtGui.QColor: ...
    def render_type(self, /) -> PySide6.QtQuick.QSGTextNode.RenderType: ...
    def render_type_quality(self, /) -> int: ...
    def selection_color(self, /) -> PySide6.QtGui.QColor: ...
    def selection_text_color(self, /) -> PySide6.QtGui.QColor: ...
    def set_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_filtering(self, arg__1: PySide6.QtQuick.QSGTexture.Filtering, /) -> None: ...
    def set_link_color(self, linkColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_render_type(self, renderType: PySide6.QtQuick.QSGTextNode.RenderType, /) -> None: ...
    def set_render_type_quality(self, renderTypeQuality: int, /) -> None: ...
    def set_selection_color(self, selectionColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_selection_text_color(self, selectionTextColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_style_color(self, styleColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_text_style(self, textStyle: PySide6.QtQuick.QSGTextNode.TextStyle, /) -> None: ...
    def set_viewport(self, viewport: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    def style_color(self, /) -> PySide6.QtGui.QColor: ...
    def text_style(self, /) -> PySide6.QtQuick.QSGTextNode.TextStyle: ...
    def viewport(self, /) -> PySide6.QtCore.QRectF: ...


class QSGTexture(PySide6.QtCore.QObject):

    class AnisotropyLevel(enum.Enum):

        AnisotropyNone            = ...  # 0x0
        Anisotropy2x              = ...  # 0x1
        Anisotropy4x              = ...  # 0x2
        Anisotropy8x              = ...  # 0x3
        Anisotropy16x             = ...  # 0x4

    class Filtering(enum.Enum):

        None_                     = ...  # 0x0
        Nearest                   = ...  # 0x1
        Linear                    = ...  # 0x2

    class WrapMode(enum.Enum):

        Repeat                    = ...  # 0x0
        ClampToEdge               = ...  # 0x1
        MirroredRepeat            = ...  # 0x2


    def __init__(self, /) -> None: ...

    def anisotropy_level(self, /) -> PySide6.QtQuick.QSGTexture.AnisotropyLevel: ...
    def commit_texture_operations(self, rhi: PySide6.QtGui.QRhi, resourceUpdates: PySide6.QtGui.QRhiResourceUpdateBatch, /) -> None: ...
    def comparison_key(self, /) -> int: ...
    def convert_to_normalized_source_rect(self, rect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> PySide6.QtCore.QRectF: ...
    def filtering(self, /) -> PySide6.QtQuick.QSGTexture.Filtering: ...
    def has_alpha_channel(self, /) -> bool: ...
    def has_mipmaps(self, /) -> bool: ...
    def horizontal_wrap_mode(self, /) -> PySide6.QtQuick.QSGTexture.WrapMode: ...
    def is_atlas_texture(self, /) -> bool: ...
    def mipmap_filtering(self, /) -> PySide6.QtQuick.QSGTexture.Filtering: ...
    def normalized_texture_sub_rect(self, /) -> PySide6.QtCore.QRectF: ...
    def removed_from_atlas(self, /, resourceUpdates: PySide6.QtGui.QRhiResourceUpdateBatch | None = ...) -> PySide6.QtQuick.QSGTexture: ...
    def resolve_interface(self, name: bytes | bytearray | memoryview, revision: int, /) -> int: ...
    def rhi_texture(self, /) -> PySide6.QtGui.QRhiTexture: ...
    def set_anisotropy_level(self, level: PySide6.QtQuick.QSGTexture.AnisotropyLevel, /) -> None: ...
    def set_filtering(self, filter: PySide6.QtQuick.QSGTexture.Filtering, /) -> None: ...
    def set_horizontal_wrap_mode(self, hwrap: PySide6.QtQuick.QSGTexture.WrapMode, /) -> None: ...
    def set_mipmap_filtering(self, filter: PySide6.QtQuick.QSGTexture.Filtering, /) -> None: ...
    def set_vertical_wrap_mode(self, vwrap: PySide6.QtQuick.QSGTexture.WrapMode, /) -> None: ...
    def texture_size(self, /) -> PySide6.QtCore.QSize: ...
    def vertical_wrap_mode(self, /) -> PySide6.QtQuick.QSGTexture.WrapMode: ...


class QSGTextureMaterial(PySide6.QtQuick.QSGOpaqueTextureMaterial):

    def __init__(self, /) -> None: ...

    def create_shader(self, renderMode: PySide6.QtQuick.QSGRendererInterface.RenderMode, /) -> PySide6.QtQuick.QSGMaterialShader: ...
    def type(self, /) -> PySide6.QtQuick.QSGMaterialType: ...


class QSGTextureProvider(PySide6.QtCore.QObject):

    textureChanged           : typing.ClassVar[Signal] = ... # textureChanged()

    def __init__(self, /) -> None: ...

    def texture(self, /) -> PySide6.QtQuick.QSGTexture: ...


class QSGTransformNode(PySide6.QtQuick.QSGNode):

    def __init__(self, /) -> None: ...

    def __repr__(self, /) -> str: ...
    def combined_matrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
    def matrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
    def set_combined_matrix(self, matrix: PySide6.QtGui.QMatrix4x4 | PySide6.QtGui.QTransform, /) -> None: ...
    def set_matrix(self, matrix: PySide6.QtGui.QMatrix4x4 | PySide6.QtGui.QTransform, /) -> None: ...


class QSGVertexColorMaterial(PySide6.QtQuick.QSGMaterial):

    def __init__(self, /) -> None: ...

    def compare(self, other: PySide6.QtQuick.QSGMaterial, /) -> int: ...
    def create_shader(self, renderMode: PySide6.QtQuick.QSGRendererInterface.RenderMode, /) -> PySide6.QtQuick.QSGMaterialShader: ...
    def type(self, /) -> PySide6.QtQuick.QSGMaterialType: ...


class QSharedPointer_QQuickItemGrabResult(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, pointee: PySide6.QtQuick.QQuickItemGrabResult, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __dir__(self, /) -> collections.abc.Iterable[str]: ...
    def __repr__(self, /) -> str: ...
    def data(self, /) -> PySide6.QtQuick.QQuickItemGrabResult: ...
    @typing.overload
    def reset(self, /) -> None: ...
    @typing.overload
    def reset(self, t: PySide6.QtQuick.QQuickItemGrabResult, /) -> None: ...


# eof
