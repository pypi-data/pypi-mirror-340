# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtStateMachine, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtStateMachine`

import PySide6.QtStateMachine
import PySide6.QtCore
import PySide6.QtGui

import enum
import typing
import collections
from PySide6.QtCore import Signal


class QAbstractState(PySide6.QtCore.QObject):

    activeChanged            : typing.ClassVar[Signal] = ... # activeChanged(bool)
    entered                  : typing.ClassVar[Signal] = ... # entered()
    exited                   : typing.ClassVar[Signal] = ... # exited()

    def __init__(self, /, parent: PySide6.QtStateMachine.QState | None = ..., *, active: bool | None = ...) -> None: ...

    def active(self, /) -> bool: ...
    def event(self, e: PySide6.QtCore.QEvent, /) -> bool: ...
    def machine(self, /) -> PySide6.QtStateMachine.QStateMachine: ...
    def on_entry(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def on_exit(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def parent_state(self, /) -> PySide6.QtStateMachine.QState: ...


class QAbstractTransition(PySide6.QtCore.QObject):

    targetStateChanged       : typing.ClassVar[Signal] = ... # targetStateChanged()
    targetStatesChanged      : typing.ClassVar[Signal] = ... # targetStatesChanged()
    triggered                : typing.ClassVar[Signal] = ... # triggered()

    class TransitionType(enum.Enum):

        ExternalTransition        = ...  # 0x0
        InternalTransition        = ...  # 0x1


    def __init__(self, /, source_state: PySide6.QtStateMachine.QState | None = ..., *, target_state: PySide6.QtStateMachine.QAbstractState | None = ..., target_states: collections.abc.Sequence[PySide6.QtStateMachine.QAbstractState] | None = ..., transition_type: PySide6.QtStateMachine.QAbstractTransition.TransitionType | None = ...) -> None: ...

    def add_animation(self, animation: PySide6.QtCore.QAbstractAnimation, /) -> None: ...
    def animations(self, /) -> typing.List[PySide6.QtCore.QAbstractAnimation]: ...
    def event(self, e: PySide6.QtCore.QEvent, /) -> bool: ...
    def event_test(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def machine(self, /) -> PySide6.QtStateMachine.QStateMachine: ...
    def on_transition(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def remove_animation(self, animation: PySide6.QtCore.QAbstractAnimation, /) -> None: ...
    def set_target_state(self, target: PySide6.QtStateMachine.QAbstractState, /) -> None: ...
    def set_target_states(self, targets: collections.abc.Sequence[PySide6.QtStateMachine.QAbstractState], /) -> None: ...
    def set_transition_type(self, type: PySide6.QtStateMachine.QAbstractTransition.TransitionType, /) -> None: ...
    def source_state(self, /) -> PySide6.QtStateMachine.QState: ...
    def target_state(self, /) -> PySide6.QtStateMachine.QAbstractState: ...
    def target_states(self, /) -> typing.List[PySide6.QtStateMachine.QAbstractState]: ...
    def transition_type(self, /) -> PySide6.QtStateMachine.QAbstractTransition.TransitionType: ...


class QEventTransition(PySide6.QtStateMachine.QAbstractTransition):

    @typing.overload
    def __init__(self, object: PySide6.QtCore.QObject, type: PySide6.QtCore.QEvent.Type, /, sourceState: PySide6.QtStateMachine.QState | None = ..., *, event_source: PySide6.QtCore.QObject | None = ..., event_type: PySide6.QtCore.QEvent.Type | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, sourceState: PySide6.QtStateMachine.QState | None = ..., *, event_source: PySide6.QtCore.QObject | None = ..., event_type: PySide6.QtCore.QEvent.Type | None = ...) -> None: ...

    def event(self, e: PySide6.QtCore.QEvent, /) -> bool: ...
    def event_source(self, /) -> PySide6.QtCore.QObject: ...
    def event_test(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def event_type(self, /) -> PySide6.QtCore.QEvent.Type: ...
    def on_transition(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def set_event_source(self, object: PySide6.QtCore.QObject, /) -> None: ...
    def set_event_type(self, type: PySide6.QtCore.QEvent.Type, /) -> None: ...


class QFinalState(PySide6.QtStateMachine.QAbstractState):

    def __init__(self, /, parent: PySide6.QtStateMachine.QState | None = ...) -> None: ...

    def event(self, e: PySide6.QtCore.QEvent, /) -> bool: ...
    def on_entry(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def on_exit(self, event: PySide6.QtCore.QEvent, /) -> None: ...


class QHistoryState(PySide6.QtStateMachine.QAbstractState):

    defaultStateChanged      : typing.ClassVar[Signal] = ... # defaultStateChanged()
    defaultTransitionChanged : typing.ClassVar[Signal] = ... # defaultTransitionChanged()
    historyTypeChanged       : typing.ClassVar[Signal] = ... # historyTypeChanged()

    class HistoryType(enum.Enum):

        ShallowHistory            = ...  # 0x0
        DeepHistory               = ...  # 0x1


    @typing.overload
    def __init__(self, type: PySide6.QtStateMachine.QHistoryState.HistoryType, /, parent: PySide6.QtStateMachine.QState | None = ..., *, default_state: PySide6.QtStateMachine.QAbstractState | None = ..., default_transition: PySide6.QtStateMachine.QAbstractTransition | None = ..., history_type: PySide6.QtStateMachine.QHistoryState.HistoryType | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtStateMachine.QState | None = ..., *, default_state: PySide6.QtStateMachine.QAbstractState | None = ..., default_transition: PySide6.QtStateMachine.QAbstractTransition | None = ..., history_type: PySide6.QtStateMachine.QHistoryState.HistoryType | None = ...) -> None: ...

    def default_state(self, /) -> PySide6.QtStateMachine.QAbstractState: ...
    def default_transition(self, /) -> PySide6.QtStateMachine.QAbstractTransition: ...
    def event(self, e: PySide6.QtCore.QEvent, /) -> bool: ...
    def history_type(self, /) -> PySide6.QtStateMachine.QHistoryState.HistoryType: ...
    def on_entry(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def on_exit(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def set_default_state(self, state: PySide6.QtStateMachine.QAbstractState, /) -> None: ...
    def set_default_transition(self, transition: PySide6.QtStateMachine.QAbstractTransition, /) -> None: ...
    def set_history_type(self, type: PySide6.QtStateMachine.QHistoryState.HistoryType, /) -> None: ...


class QIntList: ...


class QKeyEventTransition(PySide6.QtStateMachine.QEventTransition):

    @typing.overload
    def __init__(self, object: PySide6.QtCore.QObject, type: PySide6.QtCore.QEvent.Type, key: int, /, sourceState: PySide6.QtStateMachine.QState | None = ..., *, modifier_mask: PySide6.QtCore.Qt.KeyboardModifier | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, sourceState: PySide6.QtStateMachine.QState | None = ..., *, key: int | None = ..., modifier_mask: PySide6.QtCore.Qt.KeyboardModifier | None = ...) -> None: ...

    def event_test(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def key(self, /) -> int: ...
    def modifier_mask(self, /) -> PySide6.QtCore.Qt.KeyboardModifier: ...
    def on_transition(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def set_key(self, key: int, /) -> None: ...
    def set_modifier_mask(self, modifiers: PySide6.QtCore.Qt.KeyboardModifier, /) -> None: ...


class QMouseEventTransition(PySide6.QtStateMachine.QEventTransition):

    @typing.overload
    def __init__(self, object: PySide6.QtCore.QObject, type: PySide6.QtCore.QEvent.Type, button: PySide6.QtCore.Qt.MouseButton, /, sourceState: PySide6.QtStateMachine.QState | None = ..., *, modifier_mask: PySide6.QtCore.Qt.KeyboardModifier | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, sourceState: PySide6.QtStateMachine.QState | None = ..., *, button: PySide6.QtCore.Qt.MouseButton | None = ..., modifier_mask: PySide6.QtCore.Qt.KeyboardModifier | None = ...) -> None: ...

    def button(self, /) -> PySide6.QtCore.Qt.MouseButton: ...
    def event_test(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def hit_test_path(self, /) -> PySide6.QtGui.QPainterPath: ...
    def modifier_mask(self, /) -> PySide6.QtCore.Qt.KeyboardModifier: ...
    def on_transition(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def set_button(self, button: PySide6.QtCore.Qt.MouseButton, /) -> None: ...
    def set_hit_test_path(self, path: PySide6.QtGui.QPainterPath, /) -> None: ...
    def set_modifier_mask(self, modifiers: PySide6.QtCore.Qt.KeyboardModifier, /) -> None: ...


class QSignalTransition(PySide6.QtStateMachine.QAbstractTransition):

    senderObjectChanged      : typing.ClassVar[Signal] = ... # senderObjectChanged()
    signalChanged            : typing.ClassVar[Signal] = ... # signalChanged()

    @typing.overload
    def __init__(self, signal: PySide6.QtCore.QByteArray, /, state: PySide6.QtStateMachine.QState | None = ..., *, sender_object: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, sender: PySide6.QtCore.QObject, signal: PySide6.QtCore.QByteArray, /, sourceState: PySide6.QtStateMachine.QState | None = ..., *, sender_object: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, sourceState: PySide6.QtStateMachine.QState | None = ..., *, sender_object: PySide6.QtCore.QObject | None = ..., signal: PySide6.QtCore.QByteArray | None = ...) -> None: ...

    def event(self, e: PySide6.QtCore.QEvent, /) -> bool: ...
    def event_test(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def on_transition(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def sender_object(self, /) -> PySide6.QtCore.QObject: ...
    def set_sender_object(self, sender: PySide6.QtCore.QObject, /) -> None: ...
    def set_signal(self, signal: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def signal(self, /) -> PySide6.QtCore.QByteArray: ...


class QState(PySide6.QtStateMachine.QAbstractState):

    childModeChanged         : typing.ClassVar[Signal] = ... # childModeChanged()
    errorStateChanged        : typing.ClassVar[Signal] = ... # errorStateChanged()
    finished                 : typing.ClassVar[Signal] = ... # finished()
    initialStateChanged      : typing.ClassVar[Signal] = ... # initialStateChanged()
    propertiesAssigned       : typing.ClassVar[Signal] = ... # propertiesAssigned()

    class ChildMode(enum.Enum):

        ExclusiveStates           = ...  # 0x0
        ParallelStates            = ...  # 0x1

    class RestorePolicy(enum.Enum):

        DontRestoreProperties     = ...  # 0x0
        RestoreProperties         = ...  # 0x1


    @typing.overload
    def __init__(self, child_mode: PySide6.QtStateMachine.QState.ChildMode, /, parent: PySide6.QtStateMachine.QState | None = ..., *, initial_state: PySide6.QtStateMachine.QAbstractState | None = ..., error_state: PySide6.QtStateMachine.QAbstractState | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtStateMachine.QState | None = ..., *, initial_state: PySide6.QtStateMachine.QAbstractState | None = ..., error_state: PySide6.QtStateMachine.QAbstractState | None = ..., child_mode: PySide6.QtStateMachine.QState.ChildMode | None = ...) -> None: ...

    @typing.overload
    def add_transition(self, target: PySide6.QtStateMachine.QAbstractState, /) -> PySide6.QtStateMachine.QAbstractTransition: ...
    @typing.overload
    def add_transition(self, transition: PySide6.QtStateMachine.QAbstractTransition, /) -> None: ...
    @typing.overload
    def add_transition(self, sender: PySide6.QtCore.QObject, signal: str, target: PySide6.QtStateMachine.QAbstractState, /) -> PySide6.QtStateMachine.QSignalTransition: ...
    @typing.overload
    def add_transition(self, signal: object, arg__2: PySide6.QtStateMachine.QAbstractState, /) -> PySide6.QtStateMachine.QSignalTransition: ...
    def assign_property(self, object: PySide6.QtCore.QObject, name: str, value: typing.Any, /) -> None: ...
    def child_mode(self, /) -> PySide6.QtStateMachine.QState.ChildMode: ...
    def error_state(self, /) -> PySide6.QtStateMachine.QAbstractState: ...
    def event(self, e: PySide6.QtCore.QEvent, /) -> bool: ...
    def initial_state(self, /) -> PySide6.QtStateMachine.QAbstractState: ...
    def on_entry(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def on_exit(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def remove_transition(self, transition: PySide6.QtStateMachine.QAbstractTransition, /) -> None: ...
    def set_child_mode(self, mode: PySide6.QtStateMachine.QState.ChildMode, /) -> None: ...
    def set_error_state(self, state: PySide6.QtStateMachine.QAbstractState, /) -> None: ...
    def set_initial_state(self, state: PySide6.QtStateMachine.QAbstractState, /) -> None: ...
    def transitions(self, /) -> typing.List[PySide6.QtStateMachine.QAbstractTransition]: ...


class QStateMachine(PySide6.QtStateMachine.QState):

    runningChanged           : typing.ClassVar[Signal] = ... # runningChanged(bool)
    started                  : typing.ClassVar[Signal] = ... # started()
    stopped                  : typing.ClassVar[Signal] = ... # stopped()

    class Error(enum.Enum):

        NoError                   = ...  # 0x0
        NoInitialStateError       = ...  # 0x1
        NoDefaultStateInHistoryStateError = ...  # 0x2
        NoCommonAncestorForTransitionError = ...  # 0x3
        StateMachineChildModeSetToParallelError = ...  # 0x4

    class EventPriority(enum.Enum):

        NormalPriority            = ...  # 0x0
        HighPriority              = ...  # 0x1

    class SignalEvent(PySide6.QtCore.QEvent):

        def __init__(self, sender: PySide6.QtCore.QObject, signalIndex: int, arguments: collections.abc.Sequence[typing.Any], /) -> None: ...

        def arguments(self, /) -> typing.List[typing.Any]: ...
        def sender(self, /) -> PySide6.QtCore.QObject: ...
        def signal_index(self, /) -> int: ...

    class WrappedEvent(PySide6.QtCore.QEvent):

        def __init__(self, object: PySide6.QtCore.QObject, event: PySide6.QtCore.QEvent, /) -> None: ...

        def event(self, /) -> PySide6.QtCore.QEvent: ...
        def object(self, /) -> PySide6.QtCore.QObject: ...


    @typing.overload
    def __init__(self, childMode: PySide6.QtStateMachine.QState.ChildMode, /, parent: PySide6.QtCore.QObject | None = ..., *, error_string: str | None = ..., global_restore_policy: PySide6.QtStateMachine.QState.RestorePolicy | None = ..., running: bool | None = ..., animated: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, error_string: str | None = ..., global_restore_policy: PySide6.QtStateMachine.QState.RestorePolicy | None = ..., running: bool | None = ..., animated: bool | None = ...) -> None: ...

    def add_default_animation(self, animation: PySide6.QtCore.QAbstractAnimation, /) -> None: ...
    def add_state(self, state: PySide6.QtStateMachine.QAbstractState, /) -> None: ...
    def begin_microstep(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def begin_select_transitions(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def cancel_delayed_event(self, id: int, /) -> bool: ...
    def clear_error(self, /) -> None: ...
    def configuration(self, /) -> typing.Set[PySide6.QtStateMachine.QAbstractState]: ...
    def default_animations(self, /) -> typing.List[PySide6.QtCore.QAbstractAnimation]: ...
    def end_microstep(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def end_select_transitions(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def error(self, /) -> PySide6.QtStateMachine.QStateMachine.Error: ...
    def error_string(self, /) -> str: ...
    def event(self, e: PySide6.QtCore.QEvent, /) -> bool: ...
    def event_filter(self, watched: PySide6.QtCore.QObject, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def global_restore_policy(self, /) -> PySide6.QtStateMachine.QState.RestorePolicy: ...
    def is_animated(self, /) -> bool: ...
    def is_running(self, /) -> bool: ...
    def on_entry(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def on_exit(self, event: PySide6.QtCore.QEvent, /) -> None: ...
    def post_delayed_event(self, event: PySide6.QtCore.QEvent, delay: int, /) -> int: ...
    def post_event(self, event: PySide6.QtCore.QEvent, /, priority: PySide6.QtStateMachine.QStateMachine.EventPriority = ...) -> None: ...
    def remove_default_animation(self, animation: PySide6.QtCore.QAbstractAnimation, /) -> None: ...
    def remove_state(self, state: PySide6.QtStateMachine.QAbstractState, /) -> None: ...
    def set_animated(self, enabled: bool, /) -> None: ...
    def set_global_restore_policy(self, restorePolicy: PySide6.QtStateMachine.QState.RestorePolicy, /) -> None: ...
    def set_running(self, running: bool, /) -> None: ...
    def start(self, /) -> None: ...
    def stop(self, /) -> None: ...


# eof
