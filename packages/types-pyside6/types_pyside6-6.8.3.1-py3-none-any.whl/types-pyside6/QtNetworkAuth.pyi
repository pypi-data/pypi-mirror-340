# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtNetworkAuth, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtNetworkAuth`

import PySide6.QtNetworkAuth
import PySide6.QtCore
import PySide6.QtNetwork

import enum
import typing
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QAbstractOAuth(PySide6.QtCore.QObject):

    authorizationUrlChanged  : typing.ClassVar[Signal] = ... # authorizationUrlChanged(QUrl)
    authorizeWithBrowser     : typing.ClassVar[Signal] = ... # authorizeWithBrowser(QUrl)
    clientIdentifierChanged  : typing.ClassVar[Signal] = ... # clientIdentifierChanged(QString)
    contentTypeChanged       : typing.ClassVar[Signal] = ... # contentTypeChanged(ContentType)
    extraTokensChanged       : typing.ClassVar[Signal] = ... # extraTokensChanged(QVariantMap)
    finished                 : typing.ClassVar[Signal] = ... # finished(QNetworkReply*)
    granted                  : typing.ClassVar[Signal] = ... # granted()
    replyDataReceived        : typing.ClassVar[Signal] = ... # replyDataReceived(QByteArray)
    requestFailed            : typing.ClassVar[Signal] = ... # requestFailed(Error)
    statusChanged            : typing.ClassVar[Signal] = ... # statusChanged(Status)
    tokenChanged             : typing.ClassVar[Signal] = ... # tokenChanged(QString)

    class ContentType(enum.Enum):

        WwwFormUrlEncoded         = ...  # 0x0
        Json                      = ...  # 0x1

    class Error(enum.Enum):

        NoError                   = ...  # 0x0
        NetworkError              = ...  # 0x1
        ServerError               = ...  # 0x2
        OAuthTokenNotFoundError   = ...  # 0x3
        OAuthTokenSecretNotFoundError = ...  # 0x4
        OAuthCallbackNotVerified  = ...  # 0x5

    class Stage(enum.Enum):

        RequestingTemporaryCredentials = ...  # 0x0
        RequestingAuthorization   = ...  # 0x1
        RequestingAccessToken     = ...  # 0x2
        RefreshingAccessToken     = ...  # 0x3

    class Status(enum.Enum):

        NotAuthenticated          = ...  # 0x0
        TemporaryCredentialsReceived = ...  # 0x1
        Granted                   = ...  # 0x2
        RefreshingToken           = ...  # 0x3


    def authorization_url(self, /) -> PySide6.QtCore.QUrl: ...
    def callback(self, /) -> str: ...
    def client_identifier(self, /) -> str: ...
    def content_type(self, /) -> PySide6.QtNetworkAuth.QAbstractOAuth.ContentType: ...
    def delete_resource(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    def extra_tokens(self, /) -> typing.Dict[str, typing.Any]: ...
    @staticmethod
    def generate_random_string(length: int, /) -> PySide6.QtCore.QByteArray: ...
    def get(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    def grant(self, /) -> None: ...
    def head(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    def network_access_manager(self, /) -> PySide6.QtNetwork.QNetworkAccessManager: ...
    def post(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    def prepare_request(self, request: PySide6.QtNetwork.QNetworkRequest, verb: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /, body: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> None: ...
    def put(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    def reply_handler(self, /) -> PySide6.QtNetworkAuth.QAbstractOAuthReplyHandler: ...
    def resource_owner_authorization(self, url: PySide6.QtCore.QUrl | str, parameters: typing.Dict[str, typing.Any], /) -> None: ...
    def set_authorization_url(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    def set_client_identifier(self, clientIdentifier: str, /) -> None: ...
    def set_content_type(self, contentType: PySide6.QtNetworkAuth.QAbstractOAuth.ContentType, /) -> None: ...
    def set_modify_parameters_function(self, modifyParametersFunction: object, /) -> None: ...
    def set_network_access_manager(self, networkAccessManager: PySide6.QtNetwork.QNetworkAccessManager, /) -> None: ...
    def set_reply_handler(self, handler: PySide6.QtNetworkAuth.QAbstractOAuthReplyHandler, /) -> None: ...
    def set_status(self, status: PySide6.QtNetworkAuth.QAbstractOAuth.Status, /) -> None: ...
    def set_token(self, token: str, /) -> None: ...
    def status(self, /) -> PySide6.QtNetworkAuth.QAbstractOAuth.Status: ...
    def token(self, /) -> str: ...


class QAbstractOAuth2(PySide6.QtNetworkAuth.QAbstractOAuth):

    authorizationCallbackReceived: typing.ClassVar[Signal] = ... # authorizationCallbackReceived(QVariantMap)
    clientIdentifierSharedKeyChanged: typing.ClassVar[Signal] = ... # clientIdentifierSharedKeyChanged(QString)
    error                    : typing.ClassVar[Signal] = ... # error(QString,QString,QUrl)
    expirationAtChanged      : typing.ClassVar[Signal] = ... # expirationAtChanged(QDateTime)
    refreshTokenChanged      : typing.ClassVar[Signal] = ... # refreshTokenChanged(QString)
    responseTypeChanged      : typing.ClassVar[Signal] = ... # responseTypeChanged(QString)
    scopeChanged             : typing.ClassVar[Signal] = ... # scopeChanged(QString)
    sslConfigurationChanged  : typing.ClassVar[Signal] = ... # sslConfigurationChanged(QSslConfiguration)
    stateChanged             : typing.ClassVar[Signal] = ... # stateChanged(QString)
    userAgentChanged         : typing.ClassVar[Signal] = ... # userAgentChanged(QString)

    @typing.overload
    def __init__(self, manager: PySide6.QtNetwork.QNetworkAccessManager, /, parent: PySide6.QtCore.QObject | None = ..., *, scope: str | None = ..., user_agent: str | None = ..., client_identifier_shared_key: str | None = ..., state: str | None = ..., expiration: PySide6.QtCore.QDateTime | None = ..., refresh_token: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, scope: str | None = ..., user_agent: str | None = ..., client_identifier_shared_key: str | None = ..., state: str | None = ..., expiration: PySide6.QtCore.QDateTime | None = ..., refresh_token: str | None = ...) -> None: ...

    def client_identifier_shared_key(self, /) -> str: ...
    def create_authenticated_url(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtCore.QUrl: ...
    def delete_resource(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    def expiration_at(self, /) -> PySide6.QtCore.QDateTime: ...
    def get(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    def head(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, url: PySide6.QtCore.QUrl | str, multiPart: PySide6.QtNetwork.QHttpMultiPart, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, url: PySide6.QtCore.QUrl | str, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtNetwork.QNetworkReply: ...
    def prepare_request(self, request: PySide6.QtNetwork.QNetworkRequest, verb: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /, body: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> None: ...
    @typing.overload
    def put(self, url: PySide6.QtCore.QUrl | str, multiPart: PySide6.QtNetwork.QHttpMultiPart, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, url: PySide6.QtCore.QUrl | str, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtNetwork.QNetworkReply: ...
    def refresh_token(self, /) -> str: ...
    def response_type(self, /) -> str: ...
    def scope(self, /) -> str: ...
    def set_client_identifier_shared_key(self, clientIdentifierSharedKey: str, /) -> None: ...
    def set_refresh_token(self, refreshToken: str, /) -> None: ...
    def set_response_type(self, responseType: str, /) -> None: ...
    def set_scope(self, scope: str, /) -> None: ...
    def set_ssl_configuration(self, configuration: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...
    def set_state(self, state: str, /) -> None: ...
    def set_user_agent(self, userAgent: str, /) -> None: ...
    def ssl_configuration(self, /) -> PySide6.QtNetwork.QSslConfiguration: ...
    def state(self, /) -> str: ...
    def user_agent(self, /) -> str: ...


class QAbstractOAuthReplyHandler(PySide6.QtCore.QObject):

    callbackDataReceived     : typing.ClassVar[Signal] = ... # callbackDataReceived(QByteArray)
    callbackReceived         : typing.ClassVar[Signal] = ... # callbackReceived(QVariantMap)
    replyDataReceived        : typing.ClassVar[Signal] = ... # replyDataReceived(QByteArray)
    tokenRequestErrorOccurred: typing.ClassVar[Signal] = ... # tokenRequestErrorOccurred(QAbstractOAuth::Error,QString)
    tokensReceived           : typing.ClassVar[Signal] = ... # tokensReceived(QVariantMap)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def callback(self, /) -> str: ...
    def network_reply_finished(self, reply: PySide6.QtNetwork.QNetworkReply, /) -> None: ...


class QIntList: ...


class QOAuth1(PySide6.QtNetworkAuth.QAbstractOAuth):

    clientSharedSecretChanged: typing.ClassVar[Signal] = ... # clientSharedSecretChanged(QString)
    signatureMethodChanged   : typing.ClassVar[Signal] = ... # signatureMethodChanged(QOAuth1::SignatureMethod)
    temporaryCredentialsUrlChanged: typing.ClassVar[Signal] = ... # temporaryCredentialsUrlChanged(QUrl)
    tokenCredentialsUrlChanged: typing.ClassVar[Signal] = ... # tokenCredentialsUrlChanged(QUrl)
    tokenSecretChanged       : typing.ClassVar[Signal] = ... # tokenSecretChanged(QString)

    class SignatureMethod(enum.Enum):

        Hmac_Sha1                 = ...  # 0x0
        Rsa_Sha1                  = ...  # 0x1
        PlainText                 = ...  # 0x2


    @typing.overload
    def __init__(self, manager: PySide6.QtNetwork.QNetworkAccessManager, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, clientIdentifier: str, clientSharedSecret: str, manager: PySide6.QtNetwork.QNetworkAccessManager, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def client_credentials(self, /) -> typing.Tuple[str, str]: ...
    def client_shared_secret(self, /) -> str: ...
    def continue_grant_with_verifier(self, verifier: str, /) -> None: ...
    def delete_resource(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    @staticmethod
    def generate_authorization_header(oauthParams: typing.Dict[str, typing.Any], /) -> PySide6.QtCore.QByteArray: ...
    def get(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    def grant(self, /) -> None: ...
    def head(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    @staticmethod
    def nonce() -> PySide6.QtCore.QByteArray: ...
    def post(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    def prepare_request(self, request: PySide6.QtNetwork.QNetworkRequest, verb: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /, body: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> None: ...
    def put(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    def request_temporary_credentials(self, operation: PySide6.QtNetwork.QNetworkAccessManager.Operation, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    def request_token_credentials(self, operation: PySide6.QtNetwork.QNetworkAccessManager.Operation, url: PySide6.QtCore.QUrl | str, temporaryToken: typing.Tuple[str, str], /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def set_client_credentials(self, clientIdentifier: str, clientSharedSecret: str, /) -> None: ...
    @typing.overload
    def set_client_credentials(self, clientCredentials: typing.Tuple[str, str], /) -> None: ...
    def set_client_shared_secret(self, clientSharedSecret: str, /) -> None: ...
    def set_signature_method(self, value: PySide6.QtNetworkAuth.QOAuth1.SignatureMethod, /) -> None: ...
    def set_temporary_credentials_url(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    @typing.overload
    def set_token_credentials(self, token: str, tokenSecret: str, /) -> None: ...
    @typing.overload
    def set_token_credentials(self, tokenCredentials: typing.Tuple[str, str], /) -> None: ...
    def set_token_credentials_url(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    def set_token_secret(self, tokenSecret: str, /) -> None: ...
    @typing.overload
    def setup(self, request: PySide6.QtNetwork.QNetworkRequest, signingParameters: typing.Dict[str, typing.Any], operation: PySide6.QtNetwork.QNetworkAccessManager.Operation, /) -> None: ...
    @typing.overload
    def setup(self, request: PySide6.QtNetwork.QNetworkRequest, signingParameters: typing.Dict[str, typing.Any], operationVerb: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def signature_method(self, /) -> PySide6.QtNetworkAuth.QOAuth1.SignatureMethod: ...
    def temporary_credentials_url(self, /) -> PySide6.QtCore.QUrl: ...
    def token_credentials(self, /) -> typing.Tuple[str, str]: ...
    def token_credentials_url(self, /) -> PySide6.QtCore.QUrl: ...
    def token_secret(self, /) -> str: ...


class QOAuth1Signature(Shiboken.Object):

    class HttpRequestMethod(enum.Enum):

        Unknown                   = ...  # 0x0
        Head                      = ...  # 0x1
        Get                       = ...  # 0x2
        Put                       = ...  # 0x3
        Post                      = ...  # 0x4
        Delete                    = ...  # 0x5
        Custom                    = ...  # 0x6


    @typing.overload
    def __init__(self, other: PySide6.QtNetworkAuth.QOAuth1Signature, /) -> None: ...
    @typing.overload
    def __init__(self, /, url: PySide6.QtCore.QUrl | str = ..., method: PySide6.QtNetworkAuth.QOAuth1Signature.HttpRequestMethod = ..., parameters: typing.Dict[str, typing.Any] = ...) -> None: ...
    @typing.overload
    def __init__(self, url: PySide6.QtCore.QUrl | str, clientSharedKey: str, tokenSecret: str, /, method: PySide6.QtNetworkAuth.QOAuth1Signature.HttpRequestMethod = ..., parameters: typing.Dict[str, typing.Any] = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def add_request_body(self, body: PySide6.QtCore.QUrlQuery, /) -> None: ...
    def client_shared_key(self, /) -> str: ...
    def custom_method_string(self, /) -> PySide6.QtCore.QByteArray: ...
    def hmac_sha1(self, /) -> PySide6.QtCore.QByteArray: ...
    def http_request_method(self, /) -> PySide6.QtNetworkAuth.QOAuth1Signature.HttpRequestMethod: ...
    def insert(self, key: str, value: typing.Any, /) -> None: ...
    def keys(self, /) -> typing.List[str]: ...
    def parameters(self, /) -> typing.Dict[str, typing.Any]: ...
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    def plain_text(self, /) -> PySide6.QtCore.QByteArray: ...  # type: ignore[misc, overload-cannot-match]
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    @staticmethod
    def plain_text(clientSharedSecret: str, tokenSecret: str, /) -> PySide6.QtCore.QByteArray: ...  # type: ignore[misc, overload-cannot-match]
    def rsa_sha1(self, /) -> PySide6.QtCore.QByteArray: ...
    def set_client_shared_key(self, secret: str, /) -> None: ...
    def set_custom_method_string(self, verb: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_http_request_method(self, method: PySide6.QtNetworkAuth.QOAuth1Signature.HttpRequestMethod, /) -> None: ...
    def set_parameters(self, parameters: typing.Dict[str, typing.Any], /) -> None: ...
    def set_token_secret(self, secret: str, /) -> None: ...
    def set_url(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    def swap(self, other: PySide6.QtNetworkAuth.QOAuth1Signature, /) -> None: ...
    def take(self, key: str, /) -> typing.Any: ...
    def token_secret(self, /) -> str: ...
    def url(self, /) -> PySide6.QtCore.QUrl: ...
    def value(self, key: str, /, defaultValue: typing.Any = ...) -> typing.Any: ...


class QOAuth2AuthorizationCodeFlow(PySide6.QtNetworkAuth.QAbstractOAuth2):

    accessTokenUrlChanged    : typing.ClassVar[Signal] = ... # accessTokenUrlChanged(QUrl)

    class PkceMethod(enum.Enum):

        S256                      = ...  # 0x0
        Plain                     = ...  # 0x1
        None_                     = ...  # 0xff


    @typing.overload
    def __init__(self, manager: PySide6.QtNetwork.QNetworkAccessManager, /, parent: PySide6.QtCore.QObject | None = ..., *, access_token_url: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, clientIdentifier: str, manager: PySide6.QtNetwork.QNetworkAccessManager, /, parent: PySide6.QtCore.QObject | None = ..., *, access_token_url: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, clientIdentifier: str, authorizationUrl: PySide6.QtCore.QUrl | str, access_token_url: PySide6.QtCore.QUrl, manager: PySide6.QtNetwork.QNetworkAccessManager, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, access_token_url: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, authorizationUrl: PySide6.QtCore.QUrl | str, access_token_url: PySide6.QtCore.QUrl, manager: PySide6.QtNetwork.QNetworkAccessManager, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def access_token_url(self, /) -> PySide6.QtCore.QUrl: ...
    def build_authenticate_url(self, /, parameters: typing.Dict[str, typing.Any] = ...) -> PySide6.QtCore.QUrl: ...
    def grant(self, /) -> None: ...
    def pkce_method(self, /) -> PySide6.QtNetworkAuth.QOAuth2AuthorizationCodeFlow.PkceMethod: ...
    def refresh_access_token(self, /) -> None: ...
    def request_access_token(self, code: str, /) -> None: ...
    def resource_owner_authorization(self, url: PySide6.QtCore.QUrl | str, /, parameters: typing.Dict[str, typing.Any] = ...) -> None: ...
    def set_access_token_url(self, accessTokenUrl: PySide6.QtCore.QUrl | str, /) -> None: ...
    def set_pkce_method(self, method: PySide6.QtNetworkAuth.QOAuth2AuthorizationCodeFlow.PkceMethod, /, length: int = ...) -> None: ...


class QOAuthHttpServerReplyHandler(PySide6.QtNetworkAuth.QOAuthOobReplyHandler):

    @typing.overload
    def __init__(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, port: int, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, port: int, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def callback(self, /) -> str: ...
    def callback_path(self, /) -> str: ...
    def callback_text(self, /) -> str: ...
    def close(self, /) -> None: ...
    def is_listening(self, /) -> bool: ...
    def listen(self, /, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress = ..., port: int | None = ...) -> bool: ...
    def port(self, /) -> int: ...
    def set_callback_path(self, path: str, /) -> None: ...
    def set_callback_text(self, text: str, /) -> None: ...


class QOAuthOobReplyHandler(PySide6.QtNetworkAuth.QAbstractOAuthReplyHandler):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def callback(self, /) -> str: ...
    def network_reply_finished(self, reply: PySide6.QtNetwork.QNetworkReply, /) -> None: ...


class QOAuthUriSchemeReplyHandler(PySide6.QtNetworkAuth.QOAuthOobReplyHandler):

    redirectUrlChanged       : typing.ClassVar[Signal] = ... # redirectUrlChanged()

    @typing.overload
    def __init__(self, parent: PySide6.QtCore.QObject, /, *, redirect_url: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, redirect_url: PySide6.QtCore.QUrl, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, redirect_url: PySide6.QtCore.QUrl | None = ...) -> None: ...

    def callback(self, /) -> str: ...
    def close(self, /) -> None: ...
    def is_listening(self, /) -> bool: ...
    def listen(self, /) -> bool: ...
    def redirect_url(self, /) -> PySide6.QtCore.QUrl: ...
    def set_redirect_url(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...


# eof
