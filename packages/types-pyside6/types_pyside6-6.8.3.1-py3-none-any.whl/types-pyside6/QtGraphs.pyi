# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtGraphs, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtGraphs`

import PySide6.QtGraphs
import PySide6.QtCore
import PySide6.QtGui
import PySide6.QtQml
import PySide6.QtCharts
import PySide6.QtDataVisualization

import os
import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class Q3DScene(PySide6.QtCore.QObject):

    devicePixelRatioChanged  : typing.ClassVar[Signal] = ... # devicePixelRatioChanged(double)
    graphPositionQueryChanged: typing.ClassVar[Signal] = ... # graphPositionQueryChanged(QPoint)
    needRender               : typing.ClassVar[Signal] = ... # needRender()
    primarySubViewportChanged: typing.ClassVar[Signal] = ... # primarySubViewportChanged(QRect)
    secondarySubViewportChanged: typing.ClassVar[Signal] = ... # secondarySubViewportChanged(QRect)
    secondarySubviewOnTopChanged: typing.ClassVar[Signal] = ... # secondarySubviewOnTopChanged(bool)
    selectionQueryPositionChanged: typing.ClassVar[Signal] = ... # selectionQueryPositionChanged(QPoint)
    slicingActiveChanged     : typing.ClassVar[Signal] = ... # slicingActiveChanged(bool)
    viewportChanged          : typing.ClassVar[Signal] = ... # viewportChanged(QRect)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, viewport: PySide6.QtCore.QRect | None = ..., primary_sub_viewport: PySide6.QtCore.QRect | None = ..., secondary_sub_viewport: PySide6.QtCore.QRect | None = ..., selection_query_position: PySide6.QtCore.QPoint | None = ..., secondary_subview_on_top: bool | None = ..., slicing_active: bool | None = ..., device_pixel_ratio: float | None = ..., graph_position_query: PySide6.QtCore.QPoint | None = ..., invalid_selection_point: PySide6.QtCore.QPoint | None = ...) -> None: ...

    def device_pixel_ratio(self, /) -> float: ...
    def graph_position_query(self, /) -> PySide6.QtCore.QPoint: ...
    def invalid_selection_point(self, /) -> PySide6.QtCore.QPoint: ...
    def is_point_in_primary_sub_view(self, point: PySide6.QtCore.QPoint, /) -> bool: ...
    def is_point_in_secondary_sub_view(self, point: PySide6.QtCore.QPoint, /) -> bool: ...
    def is_secondary_subview_on_top(self, /) -> bool: ...
    def is_slicing_active(self, /) -> bool: ...
    def primary_sub_viewport(self, /) -> PySide6.QtCore.QRect: ...
    def secondary_sub_viewport(self, /) -> PySide6.QtCore.QRect: ...
    def selection_query_position(self, /) -> PySide6.QtCore.QPoint: ...
    def set_device_pixel_ratio(self, pixelRatio: float, /) -> None: ...
    def set_graph_position_query(self, point: PySide6.QtCore.QPoint, /) -> None: ...
    def set_primary_sub_viewport(self, primarySubViewport: PySide6.QtCore.QRect, /) -> None: ...
    def set_secondary_sub_viewport(self, secondarySubViewport: PySide6.QtCore.QRect, /) -> None: ...
    def set_secondary_subview_on_top(self, isSecondaryOnTop: bool, /) -> None: ...
    def set_selection_query_position(self, point: PySide6.QtCore.QPoint, /) -> None: ...
    def set_slicing_active(self, isSlicing: bool, /) -> None: ...
    def viewport(self, /) -> PySide6.QtCore.QRect: ...


class QAbstract3DAxis(PySide6.QtCore.QObject):

    autoAdjustRangeChanged   : typing.ClassVar[Signal] = ... # autoAdjustRangeChanged(bool)
    labelAutoAngleChanged    : typing.ClassVar[Signal] = ... # labelAutoAngleChanged(float)
    labelVisibleChanged      : typing.ClassVar[Signal] = ... # labelVisibleChanged(bool)
    labelsChanged            : typing.ClassVar[Signal] = ... # labelsChanged()
    maxChanged               : typing.ClassVar[Signal] = ... # maxChanged(float)
    minChanged               : typing.ClassVar[Signal] = ... # minChanged(float)
    orientationChanged       : typing.ClassVar[Signal] = ... # orientationChanged(QAbstract3DAxis::AxisOrientation)
    rangeChanged             : typing.ClassVar[Signal] = ... # rangeChanged(float,float)
    titleChanged             : typing.ClassVar[Signal] = ... # titleChanged(QString)
    titleFixedChanged        : typing.ClassVar[Signal] = ... # titleFixedChanged(bool)
    titleOffsetChanged       : typing.ClassVar[Signal] = ... # titleOffsetChanged(float)
    titleVisibleChanged      : typing.ClassVar[Signal] = ... # titleVisibleChanged(bool)

    class AxisOrientation(enum.Enum):

        None_                     = ...  # 0x0
        X                         = ...  # 0x1
        Y                         = ...  # 0x2
        Z                         = ...  # 0x3

    class AxisType(enum.Enum):

        None_                     = ...  # 0x0
        Category                  = ...  # 0x1
        Value                     = ...  # 0x2


    def is_auto_adjust_range(self, /) -> bool: ...
    def is_title_fixed(self, /) -> bool: ...
    def is_title_visible(self, /) -> bool: ...
    def label_auto_angle(self, /) -> float: ...
    def labels(self, /) -> typing.List[str]: ...
    def labels_visible(self, /) -> bool: ...
    def max(self, /) -> float: ...
    def min(self, /) -> float: ...
    def orientation(self, /) -> PySide6.QtGraphs.QAbstract3DAxis.AxisOrientation: ...
    def set_auto_adjust_range(self, autoAdjust: bool, /) -> None: ...
    def set_label_auto_angle(self, degree: float, /) -> None: ...
    def set_labels(self, labels: collections.abc.Sequence[str], /) -> None: ...
    def set_labels_visible(self, visible: bool, /) -> None: ...
    def set_max(self, max: float, /) -> None: ...
    def set_min(self, min: float, /) -> None: ...
    def set_range(self, min: float, max: float, /) -> None: ...
    def set_title(self, title: str, /) -> None: ...
    def set_title_fixed(self, fixed: bool, /) -> None: ...
    def set_title_offset(self, offset: float, /) -> None: ...
    def set_title_visible(self, visible: bool, /) -> None: ...
    def title(self, /) -> str: ...
    def title_offset(self, /) -> float: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstract3DAxis.AxisType: ...


class QAbstract3DSeries(PySide6.QtCore.QObject):

    baseColorChanged         : typing.ClassVar[Signal] = ... # baseColorChanged(QColor)
    baseGradientChanged      : typing.ClassVar[Signal] = ... # baseGradientChanged(QLinearGradient)
    colorStyleChanged        : typing.ClassVar[Signal] = ... # colorStyleChanged(QGraphsTheme::ColorStyle)
    itemLabelChanged         : typing.ClassVar[Signal] = ... # itemLabelChanged(QString)
    itemLabelFormatChanged   : typing.ClassVar[Signal] = ... # itemLabelFormatChanged(QString)
    itemLabelVisibleChanged  : typing.ClassVar[Signal] = ... # itemLabelVisibleChanged(bool)
    meshChanged              : typing.ClassVar[Signal] = ... # meshChanged(QAbstract3DSeries::Mesh)
    meshRotationChanged      : typing.ClassVar[Signal] = ... # meshRotationChanged(QQuaternion)
    meshSmoothChanged        : typing.ClassVar[Signal] = ... # meshSmoothChanged(bool)
    multiHighlightColorChanged: typing.ClassVar[Signal] = ... # multiHighlightColorChanged(QColor)
    multiHighlightGradientChanged: typing.ClassVar[Signal] = ... # multiHighlightGradientChanged(QLinearGradient)
    nameChanged              : typing.ClassVar[Signal] = ... # nameChanged(QString)
    singleHighlightColorChanged: typing.ClassVar[Signal] = ... # singleHighlightColorChanged(QColor)
    singleHighlightGradientChanged: typing.ClassVar[Signal] = ... # singleHighlightGradientChanged(QLinearGradient)
    userDefinedMeshChanged   : typing.ClassVar[Signal] = ... # userDefinedMeshChanged(QString)
    visibleChanged           : typing.ClassVar[Signal] = ... # visibleChanged(bool)

    class Mesh(enum.Enum):

        UserDefined               = ...  # 0x0
        Bar                       = ...  # 0x1
        Cube                      = ...  # 0x2
        Pyramid                   = ...  # 0x3
        Cone                      = ...  # 0x4
        Cylinder                  = ...  # 0x5
        BevelBar                  = ...  # 0x6
        BevelCube                 = ...  # 0x7
        Sphere                    = ...  # 0x8
        Minimal                   = ...  # 0x9
        Arrow                     = ...  # 0xa
        Point                     = ...  # 0xb

    class SeriesType(enum.Enum):

        None_                     = ...  # 0x0
        Bar                       = ...  # 0x1
        Scatter                   = ...  # 0x2
        Surface                   = ...  # 0x3


    def base_color(self, /) -> PySide6.QtGui.QColor: ...
    def base_gradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    def color_style(self, /) -> PySide6.QtGraphs.QGraphsTheme.ColorStyle: ...
    def is_item_label_visible(self, /) -> bool: ...
    def is_mesh_smooth(self, /) -> bool: ...
    def is_visible(self, /) -> bool: ...
    def item_label(self, /) -> str: ...
    def item_label_format(self, /) -> str: ...
    def mesh(self, /) -> PySide6.QtGraphs.QAbstract3DSeries.Mesh: ...
    def mesh_rotation(self, /) -> PySide6.QtGui.QQuaternion: ...
    def multi_highlight_color(self, /) -> PySide6.QtGui.QColor: ...
    def multi_highlight_gradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    def name(self, /) -> str: ...
    def set_base_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_base_gradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    def set_color_style(self, style: PySide6.QtGraphs.QGraphsTheme.ColorStyle, /) -> None: ...
    def set_item_label_format(self, format: str, /) -> None: ...
    def set_item_label_visible(self, visible: bool, /) -> None: ...
    def set_mesh(self, mesh: PySide6.QtGraphs.QAbstract3DSeries.Mesh, /) -> None: ...
    def set_mesh_axis_and_angle(self, axis: PySide6.QtGui.QVector3D, angle: float, /) -> None: ...
    def set_mesh_rotation(self, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...
    def set_mesh_smooth(self, enable: bool, /) -> None: ...
    def set_multi_highlight_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_multi_highlight_gradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    def set_name(self, name: str, /) -> None: ...
    def set_single_highlight_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_single_highlight_gradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    def set_user_defined_mesh(self, fileName: str, /) -> None: ...
    def set_visible(self, visible: bool, /) -> None: ...
    def single_highlight_color(self, /) -> PySide6.QtGui.QColor: ...
    def single_highlight_gradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstract3DSeries.SeriesType: ...
    def user_defined_mesh(self, /) -> str: ...


class QAbstractAxis(PySide6.QtCore.QObject):

    gridVisibleChanged       : typing.ClassVar[Signal] = ... # gridVisibleChanged(bool)
    labelDelegateChanged     : typing.ClassVar[Signal] = ... # labelDelegateChanged()
    labelsAngleChanged       : typing.ClassVar[Signal] = ... # labelsAngleChanged(double)
    labelsVisibleChanged     : typing.ClassVar[Signal] = ... # labelsVisibleChanged(bool)
    lineVisibleChanged       : typing.ClassVar[Signal] = ... # lineVisibleChanged(bool)
    rangeChanged             : typing.ClassVar[Signal] = ... # rangeChanged(double,double)
    subGridVisibleChanged    : typing.ClassVar[Signal] = ... # subGridVisibleChanged(bool)
    titleColorChanged        : typing.ClassVar[Signal] = ... # titleColorChanged(QColor)
    titleFontChanged         : typing.ClassVar[Signal] = ... # titleFontChanged(QFont)
    titleTextChanged         : typing.ClassVar[Signal] = ... # titleTextChanged(QString)
    titleVisibleChanged      : typing.ClassVar[Signal] = ... # titleVisibleChanged(bool)
    update                   : typing.ClassVar[Signal] = ... # update()
    visibleChanged           : typing.ClassVar[Signal] = ... # visibleChanged(bool)

    class AxisType(enum.Enum):

        Value                     = ...  # 0x0
        BarCategory               = ...  # 0x1
        DateTime                  = ...  # 0x2


    def hide(self, /) -> None: ...
    def is_grid_visible(self, /) -> bool: ...
    def is_line_visible(self, /) -> bool: ...
    def is_sub_grid_visible(self, /) -> bool: ...
    def is_title_visible(self, /) -> bool: ...
    def is_visible(self, /) -> bool: ...
    def label_delegate(self, /) -> PySide6.QtQml.QQmlComponent: ...
    def labels_angle(self, /) -> float: ...
    def labels_visible(self, /) -> bool: ...
    def set_grid_visible(self, /, visible: bool = ...) -> None: ...
    def set_label_delegate(self, newLabelDelegate: PySide6.QtQml.QQmlComponent, /) -> None: ...
    def set_labels_angle(self, angle: float, /) -> None: ...
    def set_labels_visible(self, /, visible: bool = ...) -> None: ...
    def set_line_visible(self, /, visible: bool = ...) -> None: ...
    def set_max(self, max: typing.Any, /) -> None: ...
    def set_min(self, min: typing.Any, /) -> None: ...
    def set_range(self, min: typing.Any, max: typing.Any, /) -> None: ...
    def set_sub_grid_visible(self, /, visible: bool = ...) -> None: ...
    def set_title_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_title_font(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    def set_title_text(self, title: str, /) -> None: ...
    def set_title_visible(self, /, visible: bool = ...) -> None: ...
    def set_visible(self, /, visible: bool = ...) -> None: ...
    def show(self, /) -> None: ...
    def title_color(self, /) -> PySide6.QtGui.QColor: ...
    def title_font(self, /) -> PySide6.QtGui.QFont: ...
    def title_text(self, /) -> str: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractAxis.AxisType: ...


class QAbstractDataProxy(PySide6.QtCore.QObject):

    class DataType(enum.Enum):

        None_                     = ...  # 0x0
        Bar                       = ...  # 0x1
        Scatter                   = ...  # 0x2
        Surface                   = ...  # 0x3


    def type(self, /) -> PySide6.QtGraphs.QAbstractDataProxy.DataType: ...


class QAbstractSeries(PySide6.QtCore.QObject, PySide6.QtQml.QQmlParserStatus):

    hover                    : typing.ClassVar[Signal] = ... # hover(QString,QPointF,QPointF)
    hoverEnter               : typing.ClassVar[Signal] = ... # hoverEnter(QString,QPointF,QPointF)
    hoverExit                : typing.ClassVar[Signal] = ... # hoverExit(QString,QPointF)
    hoverableChanged         : typing.ClassVar[Signal] = ... # hoverableChanged()
    legendDataChanged        : typing.ClassVar[Signal] = ... # legendDataChanged()
    nameChanged              : typing.ClassVar[Signal] = ... # nameChanged()
    opacityChanged           : typing.ClassVar[Signal] = ... # opacityChanged()
    selectableChanged        : typing.ClassVar[Signal] = ... # selectableChanged()
    update                   : typing.ClassVar[Signal] = ... # update()
    valuesMultiplierChanged  : typing.ClassVar[Signal] = ... # valuesMultiplierChanged()
    visibleChanged           : typing.ClassVar[Signal] = ... # visibleChanged()

    class SeriesType(enum.Enum):

        Line                      = ...  # 0x0
        Area                      = ...  # 0x1
        Bar                       = ...  # 0x2
        Pie                       = ...  # 0x3
        Scatter                   = ...  # 0x4
        Spline                    = ...  # 0x5


    def class_begin(self, /) -> None: ...
    def component_complete(self, /) -> None: ...
    def has_loaded(self, /) -> bool: ...
    def hide(self, /) -> None: ...
    def is_hoverable(self, /) -> bool: ...
    def is_selectable(self, /) -> bool: ...
    def is_visible(self, /) -> bool: ...
    def legend_data(self, /) -> typing.List[PySide6.QtGraphs.QLegendData]: ...
    def name(self, /) -> str: ...
    def opacity(self, /) -> float: ...
    def set_hoverable(self, newHoverable: bool, /) -> None: ...
    def set_name(self, name: str, /) -> None: ...
    def set_opacity(self, opacity: float, /) -> None: ...
    def set_selectable(self, selectable: bool, /) -> None: ...
    def set_values_multiplier(self, valuesMultiplier: float, /) -> None: ...
    def set_visible(self, /, visible: bool = ...) -> None: ...
    def show(self, /) -> None: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...
    def values_multiplier(self, /) -> float: ...


class QAreaSeries(PySide6.QtGraphs.QAbstractSeries):

    borderColorChanged       : typing.ClassVar[Signal] = ... # borderColorChanged(QColor)
    borderWidthChanged       : typing.ClassVar[Signal] = ... # borderWidthChanged()
    colorChanged             : typing.ClassVar[Signal] = ... # colorChanged(QColor)
    lowerSeriesChanged       : typing.ClassVar[Signal] = ... # lowerSeriesChanged()
    selectedBorderColorChanged: typing.ClassVar[Signal] = ... # selectedBorderColorChanged(QColor)
    selectedChanged          : typing.ClassVar[Signal] = ... # selectedChanged()
    selectedColorChanged     : typing.ClassVar[Signal] = ... # selectedColorChanged(QColor)
    upperSeriesChanged       : typing.ClassVar[Signal] = ... # upperSeriesChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, color: PySide6.QtGui.QColor | None = ..., selected_color: PySide6.QtGui.QColor | None = ..., border_color: PySide6.QtGui.QColor | None = ..., selected_border_color: PySide6.QtGui.QColor | None = ..., border_width: float | None = ..., selected: bool | None = ..., upper_series: PySide6.QtCharts.QXYSeries | None = ..., lower_series: PySide6.QtCharts.QXYSeries | None = ...) -> None: ...

    def border_color(self, /) -> PySide6.QtGui.QColor: ...
    def border_width(self, /) -> float: ...
    def color(self, /) -> PySide6.QtGui.QColor: ...
    def is_selected(self, /) -> bool: ...
    def lower_series(self, /) -> PySide6.QtGraphs.QXYSeries: ...
    def selected_border_color(self, /) -> PySide6.QtGui.QColor: ...
    def selected_color(self, /) -> PySide6.QtGui.QColor: ...
    def set_border_color(self, newBorderColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_border_width(self, newBorderWidth: float, /) -> None: ...
    def set_color(self, newColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_lower_series(self, newLowerSeries: PySide6.QtGraphs.QXYSeries, /) -> None: ...
    def set_selected(self, newSelected: bool, /) -> None: ...
    def set_selected_border_color(self, newSelectedBorderColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_selected_color(self, newColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_upper_series(self, newUpperSeries: PySide6.QtGraphs.QXYSeries, /) -> None: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...
    def upper_series(self, /) -> PySide6.QtGraphs.QXYSeries: ...


class QBar3DSeries(PySide6.QtGraphs.QAbstract3DSeries):

    columnLabelsChanged      : typing.ClassVar[Signal] = ... # columnLabelsChanged()
    dataArrayChanged         : typing.ClassVar[Signal] = ... # dataArrayChanged(QBarDataArray)
    dataProxyChanged         : typing.ClassVar[Signal] = ... # dataProxyChanged(QBarDataProxy*)
    meshAngleChanged         : typing.ClassVar[Signal] = ... # meshAngleChanged(float)
    rowColorsChanged         : typing.ClassVar[Signal] = ... # rowColorsChanged(QList<QColor>)
    rowLabelsChanged         : typing.ClassVar[Signal] = ... # rowLabelsChanged()
    selectedBarChanged       : typing.ClassVar[Signal] = ... # selectedBarChanged(QPoint)

    @typing.overload
    def __init__(self, data_proxy: PySide6.QtDataVisualization.QBarDataProxy, /, parent: PySide6.QtCore.QObject | None = ..., *, selected_bar: PySide6.QtCore.QPoint | None = ..., mesh_angle: float | None = ..., row_colors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., row_labels: collections.abc.Sequence[str] | None = ..., column_labels: collections.abc.Sequence[str] | None = ..., data_array: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, data_proxy: PySide6.QtDataVisualization.QBarDataProxy | None = ..., selected_bar: PySide6.QtCore.QPoint | None = ..., mesh_angle: float | None = ..., row_colors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., row_labels: collections.abc.Sequence[str] | None = ..., column_labels: collections.abc.Sequence[str] | None = ..., data_array: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]] | None = ...) -> None: ...

    def clear_array(self, /) -> None: ...
    def clear_row(self, rowIndex: int, /) -> None: ...
    def column_labels(self, /) -> typing.List[str]: ...
    def data_array(self, /) -> typing.List[typing.List[PySide6.QtGraphs.QBarDataItem]]: ...
    def data_proxy(self, /) -> PySide6.QtGraphs.QBarDataProxy: ...
    @staticmethod
    def invalid_selection_position() -> PySide6.QtCore.QPoint: ...
    def mesh_angle(self, /) -> float: ...
    def row_colors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    def row_labels(self, /) -> typing.List[str]: ...
    def selected_bar(self, /) -> PySide6.QtCore.QPoint: ...
    def set_column_labels(self, labels: collections.abc.Sequence[str], /) -> None: ...
    def set_data_array(self, newDataArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], /) -> None: ...
    def set_data_proxy(self, proxy: PySide6.QtGraphs.QBarDataProxy, /) -> None: ...
    def set_mesh_angle(self, angle: float, /) -> None: ...
    def set_row_colors(self, colors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    def set_row_labels(self, labels: collections.abc.Sequence[str], /) -> None: ...
    def set_selected_bar(self, position: PySide6.QtCore.QPoint, /) -> None: ...


class QBarCategoryAxis(PySide6.QtGraphs.QAbstractAxis):

    categoriesChanged        : typing.ClassVar[Signal] = ... # categoriesChanged()
    categoryRangeChanged     : typing.ClassVar[Signal] = ... # categoryRangeChanged(QString,QString)
    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    maxChanged               : typing.ClassVar[Signal] = ... # maxChanged(QString)
    minChanged               : typing.ClassVar[Signal] = ... # minChanged(QString)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, categories: collections.abc.Sequence[str] | None = ..., min: str | None = ..., max: str | None = ..., count: int | None = ...) -> None: ...

    @typing.overload
    def append(self, category: str, /) -> None: ...
    @typing.overload
    def append(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def at(self, index: int, /) -> str: ...
    def categories(self, /) -> typing.List[str]: ...
    def clear(self, /) -> None: ...
    def count(self, /) -> int: ...
    def insert(self, index: int, category: str, /) -> None: ...
    def max(self, /) -> str: ...
    def min(self, /) -> str: ...
    @typing.overload
    def remove(self, category: str, /) -> None: ...
    @typing.overload
    def remove(self, index: int, /) -> None: ...
    def replace(self, oldCategory: str, newCategory: str, /) -> None: ...
    def set_categories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def set_max(self, maxCategory: str, /) -> None: ...
    def set_min(self, minCategory: str, /) -> None: ...
    def set_range(self, minCategory: str, maxCategory: str, /) -> None: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractAxis.AxisType: ...


class QBarDataItem(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QBarDataItem: PySide6.QtGraphs.QBarDataItem, /) -> None: ...
    @typing.overload
    def __init__(self, value: float, /) -> None: ...
    @typing.overload
    def __init__(self, value: float, angle: float, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def rotation(self, /) -> float: ...
    def set_rotation(self, angle: float, /) -> None: ...
    def set_value(self, val: float, /) -> None: ...
    def value(self, /) -> float: ...


class QBarDataProxy(PySide6.QtGraphs.QAbstractDataProxy):

    arrayReset               : typing.ClassVar[Signal] = ... # arrayReset()
    colCountChanged          : typing.ClassVar[Signal] = ... # colCountChanged(qsizetype)
    itemChanged              : typing.ClassVar[Signal] = ... # itemChanged(qsizetype,qsizetype)
    rowCountChanged          : typing.ClassVar[Signal] = ... # rowCountChanged(qsizetype)
    rowsAdded                : typing.ClassVar[Signal] = ... # rowsAdded(qsizetype,qsizetype)
    rowsChanged              : typing.ClassVar[Signal] = ... # rowsChanged(qsizetype,qsizetype)
    rowsInserted             : typing.ClassVar[Signal] = ... # rowsInserted(qsizetype,qsizetype)
    rowsRemoved              : typing.ClassVar[Signal] = ... # rowsRemoved(qsizetype,qsizetype)
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged(QBar3DSeries*)

    class RemoveLabels(enum.Enum):

        No                        = ...  # 0x0
        Yes                       = ...  # 0x1


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, row_count: int | None = ..., col_count: int | None = ..., series: PySide6.QtDataVisualization.QBar3DSeries | None = ...) -> None: ...

    @typing.overload
    def add_row(self, row: collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem], /) -> int: ...
    @typing.overload
    def add_row(self, row: collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem], label: str, /) -> int: ...
    @typing.overload
    def add_rows(self, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], /) -> int: ...
    @typing.overload
    def add_rows(self, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], labels: collections.abc.Sequence[str], /) -> int: ...
    def col_count(self, /) -> int: ...
    @typing.overload
    def insert_row(self, rowIndex: int, row: collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem], /) -> None: ...
    @typing.overload
    def insert_row(self, rowIndex: int, row: collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem], label: str, /) -> None: ...
    @typing.overload
    def insert_rows(self, rowIndex: int, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], /) -> None: ...
    @typing.overload
    def insert_rows(self, rowIndex: int, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], labels: collections.abc.Sequence[str], /) -> None: ...
    @typing.overload
    def item_at(self, position: PySide6.QtCore.QPoint, /) -> PySide6.QtGraphs.QBarDataItem: ...
    @typing.overload
    def item_at(self, rowIndex: int, columnIndex: int, /) -> PySide6.QtGraphs.QBarDataItem: ...
    def remove_rows(self, rowIndex: int, removeCount: int, /, removeLabels: PySide6.QtGraphs.QBarDataProxy.RemoveLabels = ...) -> None: ...
    @typing.overload
    def reset_array(self, /) -> None: ...
    @typing.overload
    def reset_array(self, newArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], /) -> None: ...
    @typing.overload
    def reset_array(self, newArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], rowLabels: collections.abc.Sequence[str], columnLabels: collections.abc.Sequence[str], /) -> None: ...
    def row_at(self, rowIndex: int, /) -> typing.List[PySide6.QtGraphs.QBarDataItem]: ...
    def row_count(self, /) -> int: ...
    def series(self, /) -> PySide6.QtGraphs.QBar3DSeries: ...
    @typing.overload
    def set_item(self, position: PySide6.QtCore.QPoint, item: PySide6.QtGraphs.QBarDataItem, /) -> None: ...
    @typing.overload
    def set_item(self, rowIndex: int, columnIndex: int, item: PySide6.QtGraphs.QBarDataItem, /) -> None: ...
    @typing.overload
    def set_row(self, rowIndex: int, row: collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem], /) -> None: ...
    @typing.overload
    def set_row(self, rowIndex: int, row: collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem], label: str, /) -> None: ...
    @typing.overload
    def set_rows(self, rowIndex: int, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], /) -> None: ...
    @typing.overload
    def set_rows(self, rowIndex: int, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QBarDataItem]], labels: collections.abc.Sequence[str], /) -> None: ...


class QBarModelMapper(PySide6.QtCore.QObject):

    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    firstBarSetSectionChanged: typing.ClassVar[Signal] = ... # firstBarSetSectionChanged()
    firstChanged             : typing.ClassVar[Signal] = ... # firstChanged()
    lastBarSetSectionChanged : typing.ClassVar[Signal] = ... # lastBarSetSectionChanged()
    modelChanged             : typing.ClassVar[Signal] = ... # modelChanged()
    orientationChanged       : typing.ClassVar[Signal] = ... # orientationChanged()
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, series: PySide6.QtGraphs.QBarSeries | None = ..., model: PySide6.QtCore.QAbstractItemModel | None = ..., first_bar_set_section: int | None = ..., last_bar_set_section: int | None = ..., first: int | None = ..., count: int | None = ..., orientation: PySide6.QtCore.Qt.Orientation | None = ...) -> None: ...

    def count(self, /) -> int: ...
    def first(self, /) -> int: ...
    def first_bar_set_section(self, /) -> int: ...
    def last_bar_set_section(self, /) -> int: ...
    def model(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    def orientation(self, /) -> PySide6.QtCore.Qt.Orientation: ...
    def series(self, /) -> PySide6.QtGraphs.QBarSeries: ...
    def set_count(self, newCount: int, /) -> None: ...
    def set_first(self, newFirst: int, /) -> None: ...
    def set_first_bar_set_section(self, newFirstBarSetSection: int, /) -> None: ...
    def set_last_bar_set_section(self, newLastBarSetSection: int, /) -> None: ...
    def set_model(self, model: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    def set_orientation(self, orientation: PySide6.QtCore.Qt.Orientation, /) -> None: ...
    def set_series(self, series: PySide6.QtGraphs.QBarSeries, /) -> None: ...


class QBarSeries(PySide6.QtGraphs.QAbstractSeries):

    barDelegateChanged       : typing.ClassVar[Signal] = ... # barDelegateChanged()
    barSetsChanged           : typing.ClassVar[Signal] = ... # barSetsChanged()
    barWidthChanged          : typing.ClassVar[Signal] = ... # barWidthChanged()
    barsTypeChanged          : typing.ClassVar[Signal] = ... # barsTypeChanged(QBarSeries::BarsType)
    barsetsAdded             : typing.ClassVar[Signal] = ... # barsetsAdded(QList<QBarSet*>)
    barsetsRemoved           : typing.ClassVar[Signal] = ... # barsetsRemoved(QList<QBarSet*>)
    barsetsReplaced          : typing.ClassVar[Signal] = ... # barsetsReplaced(QList<QBarSet*>)
    borderColorsChanged      : typing.ClassVar[Signal] = ... # borderColorsChanged()
    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    labelsAngleChanged       : typing.ClassVar[Signal] = ... # labelsAngleChanged(double)
    labelsFormatChanged      : typing.ClassVar[Signal] = ... # labelsFormatChanged(QString)
    labelsMarginChanged      : typing.ClassVar[Signal] = ... # labelsMarginChanged(double)
    labelsPositionChanged    : typing.ClassVar[Signal] = ... # labelsPositionChanged(QBarSeries::LabelsPosition)
    labelsPrecisionChanged   : typing.ClassVar[Signal] = ... # labelsPrecisionChanged(int)
    labelsVisibleChanged     : typing.ClassVar[Signal] = ... # labelsVisibleChanged(bool)
    seriesColorsChanged      : typing.ClassVar[Signal] = ... # seriesColorsChanged()
    setValueAdded            : typing.ClassVar[Signal] = ... # setValueAdded(qsizetype,qsizetype,QBarSet*)
    setValueChanged          : typing.ClassVar[Signal] = ... # setValueChanged(qsizetype,QBarSet*)
    setValueRemoved          : typing.ClassVar[Signal] = ... # setValueRemoved(qsizetype,qsizetype,QBarSet*)
    updatedBars              : typing.ClassVar[Signal] = ... # updatedBars()

    class BarsType(enum.Enum):

        Groups                    = ...  # 0x0
        Stacked                   = ...  # 0x1
        StackedPercent            = ...  # 0x2

    class LabelsPosition(enum.Enum):

        Center                    = ...  # 0x0
        InsideEnd                 = ...  # 0x1
        InsideBase                = ...  # 0x2
        OutsideEnd                = ...  # 0x3


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, series_colors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., border_colors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., bars_type: PySide6.QtGraphs.QBarSeries.BarsType | None = ..., bar_width: float | None = ..., count: int | None = ..., labels_visible: bool | None = ..., labels_format: str | None = ..., labels_position: PySide6.QtGraphs.QBarSeries.LabelsPosition | None = ..., labels_margin: float | None = ..., labels_angle: float | None = ..., labels_precision: int | None = ..., bar_delegate: PySide6.QtQml.QQmlComponent | None = ..., bar_sets: collections.abc.Sequence[PySide6.QtGraphs.QBarSet] | None = ...) -> None: ...

    @typing.overload
    def append(self, set: PySide6.QtGraphs.QBarSet, /) -> bool: ...
    @typing.overload
    def append(self, sets: collections.abc.Sequence[PySide6.QtGraphs.QBarSet], /) -> bool: ...
    def at(self, index: int, /) -> PySide6.QtGraphs.QBarSet: ...
    def bar_delegate(self, /) -> PySide6.QtQml.QQmlComponent: ...
    def bar_sets(self, /) -> typing.List[PySide6.QtGraphs.QBarSet]: ...
    def bar_width(self, /) -> float: ...
    def bars_type(self, /) -> PySide6.QtGraphs.QBarSeries.BarsType: ...
    def border_colors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    def clear(self, /) -> None: ...
    def component_complete(self, /) -> None: ...
    def count(self, /) -> int: ...
    def deselect_all(self, /) -> None: ...
    def find(self, set: PySide6.QtGraphs.QBarSet, /) -> int: ...
    def insert(self, index: int, set: PySide6.QtGraphs.QBarSet, /) -> bool: ...
    def labels_angle(self, /) -> float: ...
    def labels_format(self, /) -> str: ...
    def labels_margin(self, /) -> float: ...
    def labels_position(self, /) -> PySide6.QtGraphs.QBarSeries.LabelsPosition: ...
    def labels_precision(self, /) -> int: ...
    def labels_visible(self, /) -> bool: ...
    @typing.overload
    def remove(self, set: PySide6.QtGraphs.QBarSet, /) -> bool: ...
    @typing.overload
    def remove(self, index: int, /) -> bool: ...
    def remove_multiple(self, index: int, count: int, /) -> None: ...
    @typing.overload
    def replace(self, oldValue: PySide6.QtGraphs.QBarSet, newValue: PySide6.QtGraphs.QBarSet, /) -> bool: ...
    @typing.overload
    def replace(self, sets: collections.abc.Sequence[PySide6.QtGraphs.QBarSet], /) -> bool: ...
    @typing.overload
    def replace(self, index: int, set: PySide6.QtGraphs.QBarSet, /) -> None: ...
    def select_all(self, /) -> None: ...
    def series_colors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    def set_bar_delegate(self, newBarDelegate: PySide6.QtQml.QQmlComponent, /) -> None: ...
    def set_bar_width(self, width: float, /) -> None: ...
    def set_bars_type(self, type: PySide6.QtGraphs.QBarSeries.BarsType, /) -> None: ...
    def set_border_colors(self, newBorderColors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    def set_labels_angle(self, angle: float, /) -> None: ...
    def set_labels_format(self, format: str, /) -> None: ...
    def set_labels_margin(self, margin: float, /) -> None: ...
    def set_labels_position(self, position: PySide6.QtGraphs.QBarSeries.LabelsPosition, /) -> None: ...
    def set_labels_precision(self, precision: int, /) -> None: ...
    def set_labels_visible(self, /, visible: bool = ...) -> None: ...
    def set_series_colors(self, newSeriesColors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    def take(self, set: PySide6.QtGraphs.QBarSet, /) -> bool: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...


class QBarSet(PySide6.QtCore.QObject):

    borderColorChanged       : typing.ClassVar[Signal] = ... # borderColorChanged(QColor)
    borderWidthChanged       : typing.ClassVar[Signal] = ... # borderWidthChanged(double)
    colorChanged             : typing.ClassVar[Signal] = ... # colorChanged(QColor)
    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    labelChanged             : typing.ClassVar[Signal] = ... # labelChanged()
    labelColorChanged        : typing.ClassVar[Signal] = ... # labelColorChanged(QColor)
    selectedBarsChanged      : typing.ClassVar[Signal] = ... # selectedBarsChanged(QList<qsizetype>)
    selectedColorChanged     : typing.ClassVar[Signal] = ... # selectedColorChanged(QColor)
    update                   : typing.ClassVar[Signal] = ... # update()
    updatedBars              : typing.ClassVar[Signal] = ... # updatedBars()
    valueAdded               : typing.ClassVar[Signal] = ... # valueAdded(qsizetype,qsizetype)
    valueChanged             : typing.ClassVar[Signal] = ... # valueChanged(qsizetype)
    valueRemoved             : typing.ClassVar[Signal] = ... # valueRemoved(qsizetype,qsizetype)
    valuesAdded              : typing.ClassVar[Signal] = ... # valuesAdded(qsizetype,qsizetype)
    valuesChanged            : typing.ClassVar[Signal] = ... # valuesChanged()
    valuesRemoved            : typing.ClassVar[Signal] = ... # valuesRemoved(qsizetype,qsizetype)

    @typing.overload
    def __init__(self, label: str, /, parent: PySide6.QtCore.QObject | None = ..., *, color: PySide6.QtGui.QColor | None = ..., selected_color: PySide6.QtGui.QColor | None = ..., border_color: PySide6.QtGui.QColor | None = ..., label_color: PySide6.QtGui.QColor | None = ..., values: collections.abc.Sequence[typing.Any] | None = ..., border_width: float | None = ..., count: int | None = ..., selected_bars: collections.abc.Sequence[int] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, label: str | None = ..., color: PySide6.QtGui.QColor | None = ..., selected_color: PySide6.QtGui.QColor | None = ..., border_color: PySide6.QtGui.QColor | None = ..., label_color: PySide6.QtGui.QColor | None = ..., values: collections.abc.Sequence[typing.Any] | None = ..., border_width: float | None = ..., count: int | None = ..., selected_bars: collections.abc.Sequence[int] | None = ...) -> None: ...

    def __lshift__(self, value: float, /) -> PySide6.QtGraphs.QBarSet: ...
    @typing.overload
    def append(self, values: collections.abc.Sequence[float], /) -> None: ...
    @typing.overload
    def append(self, value: float, /) -> None: ...
    def at(self, index: int, /) -> float: ...
    def border_color(self, /) -> PySide6.QtGui.QColor: ...
    def border_width(self, /) -> float: ...
    def clear(self, /) -> None: ...
    def color(self, /) -> PySide6.QtGui.QColor: ...
    def count(self, /) -> int: ...
    def deselect_all_bars(self, /) -> None: ...
    def deselect_bar(self, index: int, /) -> None: ...
    def deselect_bars(self, indexes: collections.abc.Sequence[int], /) -> None: ...
    def insert(self, index: int, value: float, /) -> None: ...
    def is_bar_selected(self, index: int, /) -> bool: ...
    def label(self, /) -> str: ...
    def label_color(self, /) -> PySide6.QtGui.QColor: ...
    def remove(self, index: int, /, count: int = ...) -> None: ...
    def replace(self, index: int, value: float, /) -> None: ...
    def select_all_bars(self, /) -> None: ...
    def select_bar(self, index: int, /) -> None: ...
    def select_bars(self, indexes: collections.abc.Sequence[int], /) -> None: ...
    def selected_bars(self, /) -> typing.List[int]: ...
    def selected_color(self, /) -> PySide6.QtGui.QColor: ...
    def set_bar_selected(self, index: int, selected: bool, /) -> None: ...
    def set_border_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_border_width(self, borderWidth: float, /) -> None: ...
    def set_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_label(self, label: str, /) -> None: ...
    def set_label_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_selected_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_values(self, values: collections.abc.Sequence[typing.Any], /) -> None: ...
    def sum(self, /) -> float: ...
    def toggle_selection(self, indexes: collections.abc.Sequence[int], /) -> None: ...
    def values(self, /) -> typing.List[typing.Any]: ...


class QCategory3DAxis(PySide6.QtGraphs.QAbstract3DAxis):

    columnLabelsChanged      : typing.ClassVar[Signal] = ... # columnLabelsChanged()
    rowLabelsChanged         : typing.ClassVar[Signal] = ... # rowLabelsChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, labels: collections.abc.Sequence[str] | None = ...) -> None: ...

    def labels(self, /) -> typing.List[str]: ...
    def set_labels(self, labels: collections.abc.Sequence[str], /) -> None: ...


class QCustom3DItem(PySide6.QtCore.QObject):

    meshFileChanged          : typing.ClassVar[Signal] = ... # meshFileChanged(QString)
    needUpdate               : typing.ClassVar[Signal] = ... # needUpdate()
    positionAbsoluteChanged  : typing.ClassVar[Signal] = ... # positionAbsoluteChanged(bool)
    positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(QVector3D)
    rotationChanged          : typing.ClassVar[Signal] = ... # rotationChanged(QQuaternion)
    scalingAbsoluteChanged   : typing.ClassVar[Signal] = ... # scalingAbsoluteChanged(bool)
    scalingChanged           : typing.ClassVar[Signal] = ... # scalingChanged(QVector3D)
    shadowCastingChanged     : typing.ClassVar[Signal] = ... # shadowCastingChanged(bool)
    textureFileChanged       : typing.ClassVar[Signal] = ... # textureFileChanged(QString)
    visibleChanged           : typing.ClassVar[Signal] = ... # visibleChanged(bool)

    @typing.overload
    def __init__(self, mesh_file: str, position: PySide6.QtGui.QVector3D, scaling: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, texture: PySide6.QtGui.QImage, /, parent: PySide6.QtCore.QObject | None = ..., *, texture_file: str | None = ..., position_absolute: bool | None = ..., visible: bool | None = ..., shadow_casting: bool | None = ..., scaling_absolute: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, mesh_file: str | None = ..., texture_file: str | None = ..., position: PySide6.QtGui.QVector3D | None = ..., position_absolute: bool | None = ..., scaling: PySide6.QtGui.QVector3D | None = ..., rotation: PySide6.QtGui.QQuaternion | None = ..., visible: bool | None = ..., shadow_casting: bool | None = ..., scaling_absolute: bool | None = ...) -> None: ...

    def is_position_absolute(self, /) -> bool: ...
    def is_scaling_absolute(self, /) -> bool: ...
    def is_shadow_casting(self, /) -> bool: ...
    def is_visible(self, /) -> bool: ...
    def mesh_file(self, /) -> str: ...
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    def rotation(self, /) -> PySide6.QtGui.QQuaternion: ...
    def scaling(self, /) -> PySide6.QtGui.QVector3D: ...
    def set_mesh_file(self, meshFile: str, /) -> None: ...
    def set_position(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_position_absolute(self, positionAbsolute: bool, /) -> None: ...
    def set_rotation(self, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...
    def set_rotation_axis_and_angle(self, axis: PySide6.QtGui.QVector3D, angle: float, /) -> None: ...
    def set_scaling(self, scaling: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_scaling_absolute(self, scalingAbsolute: bool, /) -> None: ...
    def set_shadow_casting(self, enabled: bool, /) -> None: ...
    def set_texture_file(self, textureFile: str, /) -> None: ...
    def set_texture_image(self, textureImage: PySide6.QtGui.QImage, /) -> None: ...
    def set_visible(self, visible: bool, /) -> None: ...
    def texture_file(self, /) -> str: ...


class QCustom3DLabel(PySide6.QtGraphs.QCustom3DItem):

    backgroundColorChanged   : typing.ClassVar[Signal] = ... # backgroundColorChanged(QColor)
    backgroundVisibleChanged : typing.ClassVar[Signal] = ... # backgroundVisibleChanged(bool)
    borderVisibleChanged     : typing.ClassVar[Signal] = ... # borderVisibleChanged(bool)
    facingCameraChanged      : typing.ClassVar[Signal] = ... # facingCameraChanged(bool)
    fontChanged              : typing.ClassVar[Signal] = ... # fontChanged(QFont)
    textChanged              : typing.ClassVar[Signal] = ... # textChanged(QString)
    textColorChanged         : typing.ClassVar[Signal] = ... # textColorChanged(QColor)

    @typing.overload
    def __init__(self, text: str, font: PySide6.QtGui.QFont, position: PySide6.QtGui.QVector3D, scaling: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, /, parent: PySide6.QtCore.QObject | None = ..., *, text_color: PySide6.QtGui.QColor | None = ..., background_color: PySide6.QtGui.QColor | None = ..., border_visible: bool | None = ..., background_visible: bool | None = ..., facing_camera: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, text: str | None = ..., font: PySide6.QtGui.QFont | None = ..., text_color: PySide6.QtGui.QColor | None = ..., background_color: PySide6.QtGui.QColor | None = ..., border_visible: bool | None = ..., background_visible: bool | None = ..., facing_camera: bool | None = ...) -> None: ...

    def background_color(self, /) -> PySide6.QtGui.QColor: ...
    def font(self, /) -> PySide6.QtGui.QFont: ...
    def is_background_visible(self, /) -> bool: ...
    def is_border_visible(self, /) -> bool: ...
    def is_facing_camera(self, /) -> bool: ...
    def set_background_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_background_visible(self, visible: bool, /) -> None: ...
    def set_border_visible(self, visible: bool, /) -> None: ...
    def set_facing_camera(self, enabled: bool, /) -> None: ...
    def set_font(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    def set_text(self, text: str, /) -> None: ...
    def set_text_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def text(self, /) -> str: ...
    def text_color(self, /) -> PySide6.QtGui.QColor: ...


class QCustom3DVolume(PySide6.QtGraphs.QCustom3DItem):

    alphaMultiplierChanged   : typing.ClassVar[Signal] = ... # alphaMultiplierChanged(float)
    colorTableChanged        : typing.ClassVar[Signal] = ... # colorTableChanged()
    drawSliceFramesChanged   : typing.ClassVar[Signal] = ... # drawSliceFramesChanged(bool)
    drawSlicesChanged        : typing.ClassVar[Signal] = ... # drawSlicesChanged(bool)
    preserveOpacityChanged   : typing.ClassVar[Signal] = ... # preserveOpacityChanged(bool)
    sliceFrameColorChanged   : typing.ClassVar[Signal] = ... # sliceFrameColorChanged(QColor)
    sliceFrameGapsChanged    : typing.ClassVar[Signal] = ... # sliceFrameGapsChanged(QVector3D)
    sliceFrameThicknessesChanged: typing.ClassVar[Signal] = ... # sliceFrameThicknessesChanged(QVector3D)
    sliceFrameWidthsChanged  : typing.ClassVar[Signal] = ... # sliceFrameWidthsChanged(QVector3D)
    sliceIndexXChanged       : typing.ClassVar[Signal] = ... # sliceIndexXChanged(int)
    sliceIndexYChanged       : typing.ClassVar[Signal] = ... # sliceIndexYChanged(int)
    sliceIndexZChanged       : typing.ClassVar[Signal] = ... # sliceIndexZChanged(int)
    textureDataChanged       : typing.ClassVar[Signal] = ... # textureDataChanged(QList<uchar>*)
    textureDepthChanged      : typing.ClassVar[Signal] = ... # textureDepthChanged(int)
    textureFormatChanged     : typing.ClassVar[Signal] = ... # textureFormatChanged(QImage::Format)
    textureHeightChanged     : typing.ClassVar[Signal] = ... # textureHeightChanged(int)
    textureWidthChanged      : typing.ClassVar[Signal] = ... # textureWidthChanged(int)
    useHighDefShaderChanged  : typing.ClassVar[Signal] = ... # useHighDefShaderChanged(bool)

    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, scaling: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, texture_width: int, texture_height: int, texture_depth: int, texture_data: collections.abc.Sequence[int], textureFormat: PySide6.QtGui.QImage.Format, color_table: collections.abc.Sequence[int], /, parent: PySide6.QtCore.QObject | None = ..., *, slice_index_x: int | None = ..., slice_index_y: int | None = ..., slice_index_z: int | None = ..., alpha_multiplier: float | None = ..., preserve_opacity: bool | None = ..., use_high_def_shader: bool | None = ..., draw_slices: bool | None = ..., draw_slice_frames: bool | None = ..., slice_frame_color: PySide6.QtGui.QColor | None = ..., slice_frame_widths: PySide6.QtGui.QVector3D | None = ..., slice_frame_gaps: PySide6.QtGui.QVector3D | None = ..., slice_frame_thicknesses: PySide6.QtGui.QVector3D | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, texture_width: int | None = ..., texture_height: int | None = ..., texture_depth: int | None = ..., slice_index_x: int | None = ..., slice_index_y: int | None = ..., slice_index_z: int | None = ..., color_table: collections.abc.Sequence[int] | None = ..., texture_data: collections.abc.Sequence[int] | None = ..., alpha_multiplier: float | None = ..., preserve_opacity: bool | None = ..., use_high_def_shader: bool | None = ..., draw_slices: bool | None = ..., draw_slice_frames: bool | None = ..., slice_frame_color: PySide6.QtGui.QColor | None = ..., slice_frame_widths: PySide6.QtGui.QVector3D | None = ..., slice_frame_gaps: PySide6.QtGui.QVector3D | None = ..., slice_frame_thicknesses: PySide6.QtGui.QVector3D | None = ...) -> None: ...

    def alpha_multiplier(self, /) -> float: ...
    def color_table(self, /) -> typing.List[int]: ...
    def create_texture_data(self, images: collections.abc.Sequence[PySide6.QtGui.QImage], /) -> typing.List[int]: ...
    def draw_slice_frames(self, /) -> bool: ...
    def draw_slices(self, /) -> bool: ...
    def preserve_opacity(self, /) -> bool: ...
    def render_slice(self, axis: PySide6.QtCore.Qt.Axis, index: int, /) -> PySide6.QtGui.QImage: ...
    def set_alpha_multiplier(self, mult: float, /) -> None: ...
    def set_color_table(self, colors: collections.abc.Sequence[int], /) -> None: ...
    def set_draw_slice_frames(self, enable: bool, /) -> None: ...
    def set_draw_slices(self, enable: bool, /) -> None: ...
    def set_preserve_opacity(self, enable: bool, /) -> None: ...
    def set_slice_frame_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_slice_frame_gaps(self, values: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_slice_frame_thicknesses(self, values: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_slice_frame_widths(self, values: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_slice_index_x(self, value: int, /) -> None: ...
    def set_slice_index_y(self, value: int, /) -> None: ...
    def set_slice_index_z(self, value: int, /) -> None: ...
    def set_slice_indices(self, x: int, y: int, z: int, /) -> None: ...
    @typing.overload
    def set_sub_texture_data(self, axis: PySide6.QtCore.Qt.Axis, index: int, image: PySide6.QtGui.QImage, /) -> None: ...
    @typing.overload
    def set_sub_texture_data(self, axis: PySide6.QtCore.Qt.Axis, index: int, data: bytes | bytearray | memoryview, /) -> None: ...
    def set_texture_data(self, arg__1: collections.abc.Sequence[int], /) -> None: ...
    def set_texture_depth(self, value: int, /) -> None: ...
    def set_texture_dimensions(self, width: int, height: int, depth: int, /) -> None: ...
    def set_texture_format(self, format: PySide6.QtGui.QImage.Format, /) -> None: ...
    def set_texture_height(self, value: int, /) -> None: ...
    def set_texture_width(self, value: int, /) -> None: ...
    def set_use_high_def_shader(self, enable: bool, /) -> None: ...
    def slice_frame_color(self, /) -> PySide6.QtGui.QColor: ...
    def slice_frame_gaps(self, /) -> PySide6.QtGui.QVector3D: ...
    def slice_frame_thicknesses(self, /) -> PySide6.QtGui.QVector3D: ...
    def slice_frame_widths(self, /) -> PySide6.QtGui.QVector3D: ...
    def slice_index_x(self, /) -> int: ...
    def slice_index_y(self, /) -> int: ...
    def slice_index_z(self, /) -> int: ...
    def texture_data(self, /) -> typing.List[int]: ...
    def texture_data_width(self, /) -> int: ...
    def texture_depth(self, /) -> int: ...
    def texture_format(self, /) -> PySide6.QtGui.QImage.Format: ...
    def texture_height(self, /) -> int: ...
    def texture_width(self, /) -> int: ...
    def use_high_def_shader(self, /) -> bool: ...


class QDateTimeAxis(PySide6.QtGraphs.QAbstractAxis):

    labelFormatChanged       : typing.ClassVar[Signal] = ... # labelFormatChanged(QString)
    maxChanged               : typing.ClassVar[Signal] = ... # maxChanged(QDateTime)
    minChanged               : typing.ClassVar[Signal] = ... # minChanged(QDateTime)
    subTickCountChanged      : typing.ClassVar[Signal] = ... # subTickCountChanged()
    tickIntervalChanged      : typing.ClassVar[Signal] = ... # tickIntervalChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, min: PySide6.QtCore.QDateTime | None = ..., max: PySide6.QtCore.QDateTime | None = ..., label_format: str | None = ..., sub_tick_count: int | None = ..., tick_interval: float | None = ...) -> None: ...

    def label_format(self, /) -> str: ...
    def max(self, /) -> PySide6.QtCore.QDateTime: ...
    def min(self, /) -> PySide6.QtCore.QDateTime: ...
    def set_label_format(self, format: str, /) -> None: ...
    def set_max(self, max: PySide6.QtCore.QDateTime, /) -> None: ...
    def set_min(self, min: PySide6.QtCore.QDateTime, /) -> None: ...
    def set_sub_tick_count(self, newSubTickCount: int, /) -> None: ...
    def set_tick_interval(self, newTickInterval: float, /) -> None: ...
    def sub_tick_count(self, /) -> int: ...
    def tick_interval(self, /) -> float: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractAxis.AxisType: ...


class QGraphsLine(Shiboken.Object):

    @typing.overload
    def __init__(self, other: PySide6.QtGraphs.QGraphsLine, /, *, main_color: PySide6.QtGui.QColor | None = ..., sub_color: PySide6.QtGui.QColor | None = ..., main_width: float | None = ..., sub_width: float | None = ..., label_text_color: PySide6.QtGui.QColor | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, main_color: PySide6.QtGui.QColor | None = ..., sub_color: PySide6.QtGui.QColor | None = ..., main_width: float | None = ..., sub_width: float | None = ..., label_text_color: PySide6.QtGui.QColor | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtGraphs.QGraphsLine, /) -> bool: ...
    def __ne__(self, rhs: PySide6.QtGraphs.QGraphsLine, /) -> bool: ...
    def label_text_color(self, /) -> PySide6.QtGui.QColor: ...
    def main_color(self, /) -> PySide6.QtGui.QColor: ...
    def main_width(self, /) -> float: ...
    def set_label_text_color(self, newColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_main_color(self, newColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_main_width(self, newWidth: float, /) -> None: ...
    def set_sub_color(self, newColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_sub_width(self, newWidth: float, /) -> None: ...
    def sub_color(self, /) -> PySide6.QtGui.QColor: ...
    def sub_width(self, /) -> float: ...


class QGraphsTheme(PySide6.QtCore.QObject, PySide6.QtQml.QQmlParserStatus):

    axisXChanged             : typing.ClassVar[Signal] = ... # axisXChanged()
    axisXLabelFontChanged    : typing.ClassVar[Signal] = ... # axisXLabelFontChanged()
    axisYChanged             : typing.ClassVar[Signal] = ... # axisYChanged()
    axisYLabelFontChanged    : typing.ClassVar[Signal] = ... # axisYLabelFontChanged()
    axisZChanged             : typing.ClassVar[Signal] = ... # axisZChanged()
    axisZLabelFontChanged    : typing.ClassVar[Signal] = ... # axisZLabelFontChanged()
    backgroundColorChanged   : typing.ClassVar[Signal] = ... # backgroundColorChanged()
    backgroundVisibleChanged : typing.ClassVar[Signal] = ... # backgroundVisibleChanged()
    borderColorsChanged      : typing.ClassVar[Signal] = ... # borderColorsChanged()
    borderWidthChanged       : typing.ClassVar[Signal] = ... # borderWidthChanged()
    colorSchemeChanged       : typing.ClassVar[Signal] = ... # colorSchemeChanged()
    colorStyleChanged        : typing.ClassVar[Signal] = ... # colorStyleChanged(QGraphsTheme::ColorStyle)
    gridChanged              : typing.ClassVar[Signal] = ... # gridChanged()
    gridVisibleChanged       : typing.ClassVar[Signal] = ... # gridVisibleChanged()
    labelBackgroundColorChanged: typing.ClassVar[Signal] = ... # labelBackgroundColorChanged()
    labelBackgroundVisibleChanged: typing.ClassVar[Signal] = ... # labelBackgroundVisibleChanged()
    labelBorderVisibleChanged: typing.ClassVar[Signal] = ... # labelBorderVisibleChanged()
    labelFontChanged         : typing.ClassVar[Signal] = ... # labelFontChanged()
    labelTextColorChanged    : typing.ClassVar[Signal] = ... # labelTextColorChanged()
    labelsVisibleChanged     : typing.ClassVar[Signal] = ... # labelsVisibleChanged()
    multiHighlightColorChanged: typing.ClassVar[Signal] = ... # multiHighlightColorChanged(QColor)
    multiHighlightGradientChanged: typing.ClassVar[Signal] = ... # multiHighlightGradientChanged(QLinearGradient)
    multiHighlightGradientQMLChanged: typing.ClassVar[Signal] = ... # multiHighlightGradientQMLChanged()
    plotAreaBackgroundColorChanged: typing.ClassVar[Signal] = ... # plotAreaBackgroundColorChanged()
    plotAreaBackgroundVisibleChanged: typing.ClassVar[Signal] = ... # plotAreaBackgroundVisibleChanged()
    seriesColorsChanged      : typing.ClassVar[Signal] = ... # seriesColorsChanged(QList<QColor>)
    seriesGradientsChanged   : typing.ClassVar[Signal] = ... # seriesGradientsChanged(QList<QLinearGradient>)
    singleHighlightColorChanged: typing.ClassVar[Signal] = ... # singleHighlightColorChanged(QColor)
    singleHighlightGradientChanged: typing.ClassVar[Signal] = ... # singleHighlightGradientChanged(QLinearGradient)
    singleHighlightGradientQMLChanged: typing.ClassVar[Signal] = ... # singleHighlightGradientQMLChanged()
    themeChanged             : typing.ClassVar[Signal] = ... # themeChanged(QGraphsTheme::Theme)
    update                   : typing.ClassVar[Signal] = ... # update()

    class ColorScheme(enum.Enum):

        Automatic                 = ...  # 0x0
        Light                     = ...  # 0x1
        Dark                      = ...  # 0x2

    class ColorStyle(enum.Enum):

        Uniform                   = ...  # 0x0
        ObjectGradient            = ...  # 0x1
        RangeGradient             = ...  # 0x2

    class ForceTheme(enum.Enum):

        No                        = ...  # 0x0
        Yes                       = ...  # 0x1

    class Theme(enum.Enum):

        QtGreen                   = ...  # 0x0
        QtGreenNeon               = ...  # 0x1
        MixSeries                 = ...  # 0x2
        OrangeSeries              = ...  # 0x3
        YellowSeries              = ...  # 0x4
        BlueSeries                = ...  # 0x5
        PurpleSeries              = ...  # 0x6
        GreySeries                = ...  # 0x7
        UserDefined               = ...  # 0x8


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, color_scheme: PySide6.QtGraphs.QGraphsTheme.ColorScheme | None = ..., theme: PySide6.QtGraphs.QGraphsTheme.Theme | None = ..., color_style: PySide6.QtGraphs.QGraphsTheme.ColorStyle | None = ..., background_color: PySide6.QtGui.QColor | None = ..., background_visible: bool | None = ..., plot_area_background_color: PySide6.QtGui.QColor | None = ..., plot_area_background_visible: bool | None = ..., grid_visible: bool | None = ..., axisXLabelFont: PySide6.QtGui.QFont | None = ..., axisYLabelFont: PySide6.QtGui.QFont | None = ..., axisZLabelFont: PySide6.QtGui.QFont | None = ..., grid: PySide6.QtGraphs.QGraphsLine | None = ..., axis_x: PySide6.QtGraphs.QGraphsLine | None = ..., axis_y: PySide6.QtGraphs.QGraphsLine | None = ..., axis_z: PySide6.QtGraphs.QGraphsLine | None = ..., label_font: PySide6.QtGui.QFont | None = ..., labels_visible: bool | None = ..., label_background_color: PySide6.QtGui.QColor | None = ..., label_text_color: PySide6.QtGui.QColor | None = ..., label_background_visible: bool | None = ..., label_border_visible: bool | None = ..., series_colors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., border_colors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., border_width: float | None = ..., single_highlight_color: PySide6.QtGui.QColor | None = ..., multi_highlight_color: PySide6.QtGui.QColor | None = ...) -> None: ...

    def axisXLabelFont(self, /) -> PySide6.QtGui.QFont: ...
    def axisYLabelFont(self, /) -> PySide6.QtGui.QFont: ...
    def axisZLabelFont(self, /) -> PySide6.QtGui.QFont: ...
    def axis_x(self, /) -> PySide6.QtGraphs.QGraphsLine: ...
    def axis_y(self, /) -> PySide6.QtGraphs.QGraphsLine: ...
    def axis_z(self, /) -> PySide6.QtGraphs.QGraphsLine: ...
    def background_color(self, /) -> PySide6.QtGui.QColor: ...
    def border_colors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    def border_width(self, /) -> float: ...
    def class_begin(self, /) -> None: ...
    def color_scheme(self, /) -> PySide6.QtGraphs.QGraphsTheme.ColorScheme: ...
    def color_style(self, /) -> PySide6.QtGraphs.QGraphsTheme.ColorStyle: ...
    def component_complete(self, /) -> None: ...
    def dirty_bits(self, /) -> PySide6.QtGraphs.QGraphsThemeDirtyBitField: ...
    def grid(self, /) -> PySide6.QtGraphs.QGraphsLine: ...
    def handle_base_color_update(self, /) -> None: ...
    def handle_base_gradient_update(self, /) -> None: ...
    def is_background_visible(self, /) -> bool: ...
    def is_grid_visible(self, /) -> bool: ...
    def is_label_background_visible(self, /) -> bool: ...
    def is_label_border_visible(self, /) -> bool: ...
    def is_plot_area_background_visible(self, /) -> bool: ...
    def label_background_color(self, /) -> PySide6.QtGui.QColor: ...
    def label_font(self, /) -> PySide6.QtGui.QFont: ...
    def label_text_color(self, /) -> PySide6.QtGui.QColor: ...
    def labels_visible(self, /) -> bool: ...
    def multi_highlight_color(self, /) -> PySide6.QtGui.QColor: ...
    def multi_highlight_gradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    def plot_area_background_color(self, /) -> PySide6.QtGui.QColor: ...
    def reset_color_theme(self, /) -> None: ...
    def reset_dirty_bits(self, /) -> None: ...
    def reset_theme_dirty(self, /) -> None: ...
    def series_colors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    def series_gradients(self, /) -> typing.List[PySide6.QtGui.QLinearGradient]: ...
    def setAxisXLabelFont(self, newAxisXLabelFont: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    def setAxisYLabelFont(self, newAxisYLabelFont: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    def setAxisZLabelFont(self, newAxisZLabelFont: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    def set_axis_x(self, newAxisX: PySide6.QtGraphs.QGraphsLine, /) -> None: ...
    def set_axis_y(self, newAxisY: PySide6.QtGraphs.QGraphsLine, /) -> None: ...
    def set_axis_z(self, newAxisZ: PySide6.QtGraphs.QGraphsLine, /) -> None: ...
    def set_background_color(self, newBackgroundColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_background_visible(self, newBackgroundVisible: bool, /) -> None: ...
    def set_border_colors(self, newBorderColors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    def set_border_width(self, newBorderWidth: float, /) -> None: ...
    def set_color_scheme(self, newColorScheme: PySide6.QtGraphs.QGraphsTheme.ColorScheme, /) -> None: ...
    def set_color_style(self, newColorStyle: PySide6.QtGraphs.QGraphsTheme.ColorStyle, /) -> None: ...
    def set_grid(self, newGrid: PySide6.QtGraphs.QGraphsLine, /) -> None: ...
    def set_grid_visible(self, newGridVisibility: bool, /) -> None: ...
    def set_label_background_color(self, newLabelBackgroundColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_label_background_visible(self, newLabelBackgroundVisibility: bool, /) -> None: ...
    def set_label_border_visible(self, newLabelBorderVisibility: bool, /) -> None: ...
    def set_label_font(self, newFont: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    def set_label_text_color(self, newLabelTextColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_labels_visible(self, newLabelsVisibility: bool, /) -> None: ...
    def set_multi_highlight_color(self, newMultiHighlightColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_multi_highlight_gradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    def set_plot_area_background_color(self, newBackgroundColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_plot_area_background_visible(self, newBackgroundVisibility: bool, /) -> None: ...
    def set_series_colors(self, newSeriesColors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    def set_series_gradients(self, newSeriesGradients: collections.abc.Sequence[PySide6.QtGui.QLinearGradient], /) -> None: ...
    def set_single_highlight_color(self, newSingleHighlightColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_single_highlight_gradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    def set_theme(self, newTheme: PySide6.QtGraphs.QGraphsTheme.Theme, /, force: PySide6.QtGraphs.QGraphsTheme.ForceTheme = ...) -> None: ...
    def single_highlight_color(self, /) -> PySide6.QtGui.QColor: ...
    def single_highlight_gradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    def theme(self, /) -> PySide6.QtGraphs.QGraphsTheme.Theme: ...
    def theme_dirty(self, /) -> bool: ...


class QGraphsThemeDirtyBitField(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QGraphsThemeDirtyBitField: PySide6.QtGraphs.QGraphsThemeDirtyBitField, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...


class QHeightMapSurfaceDataProxy(PySide6.QtGraphs.QSurfaceDataProxy):

    autoScaleYChanged        : typing.ClassVar[Signal] = ... # autoScaleYChanged(bool)
    heightMapChanged         : typing.ClassVar[Signal] = ... # heightMapChanged(QImage)
    heightMapFileChanged     : typing.ClassVar[Signal] = ... # heightMapFileChanged(QString)
    maxXValueChanged         : typing.ClassVar[Signal] = ... # maxXValueChanged(float)
    maxYValueChanged         : typing.ClassVar[Signal] = ... # maxYValueChanged(float)
    maxZValueChanged         : typing.ClassVar[Signal] = ... # maxZValueChanged(float)
    minXValueChanged         : typing.ClassVar[Signal] = ... # minXValueChanged(float)
    minYValueChanged         : typing.ClassVar[Signal] = ... # minYValueChanged(float)
    minZValueChanged         : typing.ClassVar[Signal] = ... # minZValueChanged(float)

    @typing.overload
    def __init__(self, image: PySide6.QtGui.QImage, /, parent: PySide6.QtCore.QObject | None = ..., *, height_map: PySide6.QtGui.QImage | None = ..., height_map_file: str | None = ..., minXValue: float | None = ..., maxXValue: float | None = ..., minZValue: float | None = ..., maxZValue: float | None = ..., minYValue: float | None = ..., maxYValue: float | None = ..., auto_scale_y: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, filename: str, /, parent: PySide6.QtCore.QObject | None = ..., *, height_map: PySide6.QtGui.QImage | None = ..., height_map_file: str | None = ..., minXValue: float | None = ..., maxXValue: float | None = ..., minZValue: float | None = ..., maxZValue: float | None = ..., minYValue: float | None = ..., maxYValue: float | None = ..., auto_scale_y: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, height_map: PySide6.QtGui.QImage | None = ..., height_map_file: str | None = ..., minXValue: float | None = ..., maxXValue: float | None = ..., minZValue: float | None = ..., maxZValue: float | None = ..., minYValue: float | None = ..., maxYValue: float | None = ..., auto_scale_y: bool | None = ...) -> None: ...

    def auto_scale_y(self, /) -> bool: ...
    def handle_pending_resolve(self, /) -> None: ...
    def height_map(self, /) -> PySide6.QtGui.QImage: ...
    def height_map_file(self, /) -> str: ...
    def maxXValue(self, /) -> float: ...
    def maxYValue(self, /) -> float: ...
    def maxZValue(self, /) -> float: ...
    def minXValue(self, /) -> float: ...
    def minYValue(self, /) -> float: ...
    def minZValue(self, /) -> float: ...
    def setMaxXValue(self, max: float, /) -> None: ...
    def setMaxYValue(self, max: float, /) -> None: ...
    def setMaxZValue(self, max: float, /) -> None: ...
    def setMinXValue(self, min: float, /) -> None: ...
    def setMinYValue(self, min: float, /) -> None: ...
    def setMinZValue(self, min: float, /) -> None: ...
    def set_auto_scale_y(self, enabled: bool, /) -> None: ...
    def set_height_map(self, image: PySide6.QtGui.QImage, /) -> None: ...
    def set_height_map_file(self, filename: str, /) -> None: ...
    def set_value_ranges(self, minX: float, maxX: float, minZ: float, maxZ: float, /) -> None: ...


class QIntList: ...


class QItemModelBarDataProxy(PySide6.QtGraphs.QBarDataProxy):

    autoColumnCategoriesChanged: typing.ClassVar[Signal] = ... # autoColumnCategoriesChanged(bool)
    autoRowCategoriesChanged : typing.ClassVar[Signal] = ... # autoRowCategoriesChanged(bool)
    columnCategoriesChanged  : typing.ClassVar[Signal] = ... # columnCategoriesChanged()
    columnRoleChanged        : typing.ClassVar[Signal] = ... # columnRoleChanged(QString)
    columnRolePatternChanged : typing.ClassVar[Signal] = ... # columnRolePatternChanged(QRegularExpression)
    columnRoleReplaceChanged : typing.ClassVar[Signal] = ... # columnRoleReplaceChanged(QString)
    itemModelChanged         : typing.ClassVar[Signal] = ... # itemModelChanged(const QAbstractItemModel*)
    multiMatchBehaviorChanged: typing.ClassVar[Signal] = ... # multiMatchBehaviorChanged(QItemModelBarDataProxy::MultiMatchBehavior)
    rotationRoleChanged      : typing.ClassVar[Signal] = ... # rotationRoleChanged(QString)
    rotationRolePatternChanged: typing.ClassVar[Signal] = ... # rotationRolePatternChanged(QRegularExpression)
    rotationRoleReplaceChanged: typing.ClassVar[Signal] = ... # rotationRoleReplaceChanged(QString)
    rowCategoriesChanged     : typing.ClassVar[Signal] = ... # rowCategoriesChanged()
    rowRoleChanged           : typing.ClassVar[Signal] = ... # rowRoleChanged(QString)
    rowRolePatternChanged    : typing.ClassVar[Signal] = ... # rowRolePatternChanged(QRegularExpression)
    rowRoleReplaceChanged    : typing.ClassVar[Signal] = ... # rowRoleReplaceChanged(QString)
    useModelCategoriesChanged: typing.ClassVar[Signal] = ... # useModelCategoriesChanged(bool)
    valueRoleChanged         : typing.ClassVar[Signal] = ... # valueRoleChanged(QString)
    valueRolePatternChanged  : typing.ClassVar[Signal] = ... # valueRolePatternChanged(QRegularExpression)
    valueRoleReplaceChanged  : typing.ClassVar[Signal] = ... # valueRoleReplaceChanged(QString)

    class MultiMatchBehavior(enum.Enum):

        First                     = ...  # 0x0
        Last                      = ...  # 0x1
        Average                   = ...  # 0x2
        Cumulative                = ...  # 0x3


    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, value_role: str, rotation_role: str, row_categories: collections.abc.Sequence[str], column_categories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, value_role: str, rotation_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, value_role: str, row_categories: collections.abc.Sequence[str], column_categories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, rotation_role: str | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, value_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rotation_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, value_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, row_role: str | None = ..., column_role: str | None = ..., rotation_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, /, parent: PySide6.QtCore.QObject | None = ..., *, row_role: str | None = ..., column_role: str | None = ..., value_role: str | None = ..., rotation_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, item_model: PySide6.QtCore.QAbstractItemModel | None = ..., row_role: str | None = ..., column_role: str | None = ..., value_role: str | None = ..., rotation_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...

    def auto_column_categories(self, /) -> bool: ...
    def auto_row_categories(self, /) -> bool: ...
    def column_categories(self, /) -> typing.List[str]: ...
    def column_category_index(self, category: str, /) -> int: ...
    def column_role(self, /) -> str: ...
    def column_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def column_role_replace(self, /) -> str: ...
    def item_model(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    def multi_match_behavior(self, /) -> PySide6.QtGraphs.QItemModelBarDataProxy.MultiMatchBehavior: ...
    def remap(self, rowRole: str, columnRole: str, valueRole: str, rotationRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /) -> None: ...
    def rotation_role(self, /) -> str: ...
    def rotation_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def rotation_role_replace(self, /) -> str: ...
    def row_categories(self, /) -> typing.List[str]: ...
    def row_category_index(self, category: str, /) -> int: ...
    def row_role(self, /) -> str: ...
    def row_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def row_role_replace(self, /) -> str: ...
    def set_auto_column_categories(self, enable: bool, /) -> None: ...
    def set_auto_row_categories(self, enable: bool, /) -> None: ...
    def set_column_categories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def set_column_role(self, role: str, /) -> None: ...
    def set_column_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_column_role_replace(self, replace: str, /) -> None: ...
    def set_item_model(self, itemModel: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    def set_multi_match_behavior(self, behavior: PySide6.QtGraphs.QItemModelBarDataProxy.MultiMatchBehavior, /) -> None: ...
    def set_rotation_role(self, role: str, /) -> None: ...
    def set_rotation_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_rotation_role_replace(self, replace: str, /) -> None: ...
    def set_row_categories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def set_row_role(self, role: str, /) -> None: ...
    def set_row_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_row_role_replace(self, replace: str, /) -> None: ...
    def set_use_model_categories(self, enable: bool, /) -> None: ...
    def set_value_role(self, role: str, /) -> None: ...
    def set_value_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_value_role_replace(self, replace: str, /) -> None: ...
    def use_model_categories(self, /) -> bool: ...
    def value_role(self, /) -> str: ...
    def value_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def value_role_replace(self, /) -> str: ...


class QItemModelScatterDataProxy(PySide6.QtGraphs.QScatterDataProxy):

    itemModelChanged         : typing.ClassVar[Signal] = ... # itemModelChanged(const QAbstractItemModel*)
    rotationRoleChanged      : typing.ClassVar[Signal] = ... # rotationRoleChanged(QString)
    rotationRolePatternChanged: typing.ClassVar[Signal] = ... # rotationRolePatternChanged(QRegularExpression)
    rotationRoleReplaceChanged: typing.ClassVar[Signal] = ... # rotationRoleReplaceChanged(QString)
    xPosRoleChanged          : typing.ClassVar[Signal] = ... # xPosRoleChanged(QString)
    xPosRolePatternChanged   : typing.ClassVar[Signal] = ... # xPosRolePatternChanged(QRegularExpression)
    xPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # xPosRoleReplaceChanged(QString)
    yPosRoleChanged          : typing.ClassVar[Signal] = ... # yPosRoleChanged(QString)
    yPosRolePatternChanged   : typing.ClassVar[Signal] = ... # yPosRolePatternChanged(QRegularExpression)
    yPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # yPosRoleReplaceChanged(QString)
    zPosRoleChanged          : typing.ClassVar[Signal] = ... # zPosRoleChanged(QString)
    zPosRolePatternChanged   : typing.ClassVar[Signal] = ... # zPosRolePatternChanged(QRegularExpression)
    zPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # zPosRoleReplaceChanged(QString)

    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, x_pos_role: str, y_pos_role: str, z_pos_role: str, rotation_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., rotation_role_replace: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, x_pos_role: str, y_pos_role: str, z_pos_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rotation_role: str | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., rotation_role_replace: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, /, parent: PySide6.QtCore.QObject | None = ..., *, x_pos_role: str | None = ..., y_pos_role: str | None = ..., z_pos_role: str | None = ..., rotation_role: str | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., rotation_role_replace: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, item_model: PySide6.QtCore.QAbstractItemModel | None = ..., x_pos_role: str | None = ..., y_pos_role: str | None = ..., z_pos_role: str | None = ..., rotation_role: str | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., rotation_role_replace: str | None = ...) -> None: ...

    def item_model(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    def remap(self, xPosRole: str, yPosRole: str, zPosRole: str, rotationRole: str, /) -> None: ...
    def rotation_role(self, /) -> str: ...
    def rotation_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def rotation_role_replace(self, /) -> str: ...
    def setXPosRole(self, role: str, /) -> None: ...
    def setXPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def setXPosRoleReplace(self, replace: str, /) -> None: ...
    def setYPosRole(self, role: str, /) -> None: ...
    def setYPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def setYPosRoleReplace(self, replace: str, /) -> None: ...
    def setZPosRole(self, role: str, /) -> None: ...
    def setZPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def setZPosRoleReplace(self, replace: str, /) -> None: ...
    def set_item_model(self, itemModel: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    def set_rotation_role(self, role: str, /) -> None: ...
    def set_rotation_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_rotation_role_replace(self, replace: str, /) -> None: ...
    def x_pos_role(self, /) -> str: ...
    def x_pos_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def x_pos_role_replace(self, /) -> str: ...
    def y_pos_role(self, /) -> str: ...
    def y_pos_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def y_pos_role_replace(self, /) -> str: ...
    def z_pos_role(self, /) -> str: ...
    def z_pos_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def z_pos_role_replace(self, /) -> str: ...


class QItemModelSurfaceDataProxy(PySide6.QtGraphs.QSurfaceDataProxy):

    autoColumnCategoriesChanged: typing.ClassVar[Signal] = ... # autoColumnCategoriesChanged(bool)
    autoRowCategoriesChanged : typing.ClassVar[Signal] = ... # autoRowCategoriesChanged(bool)
    columnCategoriesChanged  : typing.ClassVar[Signal] = ... # columnCategoriesChanged()
    columnRoleChanged        : typing.ClassVar[Signal] = ... # columnRoleChanged(QString)
    columnRolePatternChanged : typing.ClassVar[Signal] = ... # columnRolePatternChanged(QRegularExpression)
    columnRoleReplaceChanged : typing.ClassVar[Signal] = ... # columnRoleReplaceChanged(QString)
    itemModelChanged         : typing.ClassVar[Signal] = ... # itemModelChanged(const QAbstractItemModel*)
    multiMatchBehaviorChanged: typing.ClassVar[Signal] = ... # multiMatchBehaviorChanged(QItemModelSurfaceDataProxy::MultiMatchBehavior)
    rowCategoriesChanged     : typing.ClassVar[Signal] = ... # rowCategoriesChanged()
    rowRoleChanged           : typing.ClassVar[Signal] = ... # rowRoleChanged(QString)
    rowRolePatternChanged    : typing.ClassVar[Signal] = ... # rowRolePatternChanged(QRegularExpression)
    rowRoleReplaceChanged    : typing.ClassVar[Signal] = ... # rowRoleReplaceChanged(QString)
    useModelCategoriesChanged: typing.ClassVar[Signal] = ... # useModelCategoriesChanged(bool)
    xPosRoleChanged          : typing.ClassVar[Signal] = ... # xPosRoleChanged(QString)
    xPosRolePatternChanged   : typing.ClassVar[Signal] = ... # xPosRolePatternChanged(QRegularExpression)
    xPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # xPosRoleReplaceChanged(QString)
    yPosRoleChanged          : typing.ClassVar[Signal] = ... # yPosRoleChanged(QString)
    yPosRolePatternChanged   : typing.ClassVar[Signal] = ... # yPosRolePatternChanged(QRegularExpression)
    yPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # yPosRoleReplaceChanged(QString)
    zPosRoleChanged          : typing.ClassVar[Signal] = ... # zPosRoleChanged(QString)
    zPosRolePatternChanged   : typing.ClassVar[Signal] = ... # zPosRolePatternChanged(QRegularExpression)
    zPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # zPosRoleReplaceChanged(QString)

    class MultiMatchBehavior(enum.Enum):

        First                     = ...  # 0x0
        Last                      = ...  # 0x1
        Average                   = ...  # 0x2
        CumulativeY               = ...  # 0x3


    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, x_pos_role: str, y_pos_role: str, z_pos_role: str, row_categories: collections.abc.Sequence[str], column_categories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, x_pos_role: str, y_pos_role: str, z_pos_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, y_pos_role: str, row_categories: collections.abc.Sequence[str], column_categories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, x_pos_role: str | None = ..., z_pos_role: str | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, y_pos_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, x_pos_role: str | None = ..., z_pos_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, y_pos_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, row_role: str | None = ..., column_role: str | None = ..., x_pos_role: str | None = ..., z_pos_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, /, parent: PySide6.QtCore.QObject | None = ..., *, row_role: str | None = ..., column_role: str | None = ..., x_pos_role: str | None = ..., y_pos_role: str | None = ..., z_pos_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, item_model: PySide6.QtCore.QAbstractItemModel | None = ..., row_role: str | None = ..., column_role: str | None = ..., x_pos_role: str | None = ..., y_pos_role: str | None = ..., z_pos_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...

    def auto_column_categories(self, /) -> bool: ...
    def auto_row_categories(self, /) -> bool: ...
    def column_categories(self, /) -> typing.List[str]: ...
    def column_category_index(self, category: str, /) -> int: ...
    def column_role(self, /) -> str: ...
    def column_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def column_role_replace(self, /) -> str: ...
    def item_model(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    def multi_match_behavior(self, /) -> PySide6.QtGraphs.QItemModelSurfaceDataProxy.MultiMatchBehavior: ...
    def remap(self, rowRole: str, columnRole: str, xPosRole: str, yPosRole: str, zPosRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /) -> None: ...
    def row_categories(self, /) -> typing.List[str]: ...
    def row_category_index(self, category: str, /) -> int: ...
    def row_role(self, /) -> str: ...
    def row_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def row_role_replace(self, /) -> str: ...
    def setXPosRole(self, role: str, /) -> None: ...
    def setXPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def setXPosRoleReplace(self, replace: str, /) -> None: ...
    def setYPosRole(self, role: str, /) -> None: ...
    def setYPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def setYPosRoleReplace(self, replace: str, /) -> None: ...
    def setZPosRole(self, role: str, /) -> None: ...
    def setZPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def setZPosRoleReplace(self, replace: str, /) -> None: ...
    def set_auto_column_categories(self, enable: bool, /) -> None: ...
    def set_auto_row_categories(self, enable: bool, /) -> None: ...
    def set_column_categories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def set_column_role(self, role: str, /) -> None: ...
    def set_column_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_column_role_replace(self, replace: str, /) -> None: ...
    def set_item_model(self, itemModel: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    def set_multi_match_behavior(self, behavior: PySide6.QtGraphs.QItemModelSurfaceDataProxy.MultiMatchBehavior, /) -> None: ...
    def set_row_categories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def set_row_role(self, role: str, /) -> None: ...
    def set_row_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_row_role_replace(self, replace: str, /) -> None: ...
    def set_use_model_categories(self, enable: bool, /) -> None: ...
    def use_model_categories(self, /) -> bool: ...
    def x_pos_role(self, /) -> str: ...
    def x_pos_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def x_pos_role_replace(self, /) -> str: ...
    def y_pos_role(self, /) -> str: ...
    def y_pos_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def y_pos_role_replace(self, /) -> str: ...
    def z_pos_role(self, /) -> str: ...
    def z_pos_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def z_pos_role_replace(self, /) -> str: ...


class QLegendData(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QLegendData: PySide6.QtGraphs.QLegendData, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...


class QLineSeries(PySide6.QtGraphs.QXYSeries):

    capStyleChanged          : typing.ClassVar[Signal] = ... # capStyleChanged()
    widthChanged             : typing.ClassVar[Signal] = ... # widthChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, width: float | None = ..., cap_style: PySide6.QtCore.Qt.PenCapStyle | None = ...) -> None: ...

    def cap_style(self, /) -> PySide6.QtCore.Qt.PenCapStyle: ...
    def component_complete(self, /) -> None: ...
    def set_cap_style(self, newCapStyle: PySide6.QtCore.Qt.PenCapStyle, /) -> None: ...
    def set_width(self, newWidth: float, /) -> None: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...
    def width(self, /) -> float: ...


class QLogValue3DAxisFormatter(PySide6.QtGraphs.QValue3DAxisFormatter):

    autoSubGridChanged       : typing.ClassVar[Signal] = ... # autoSubGridChanged(bool)
    baseChanged              : typing.ClassVar[Signal] = ... # baseChanged(double)
    edgeLabelsVisibleChanged : typing.ClassVar[Signal] = ... # edgeLabelsVisibleChanged(bool)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, base: float | None = ..., auto_sub_grid: bool | None = ..., edge_labels_visible: bool | None = ...) -> None: ...

    def auto_sub_grid(self, /) -> bool: ...
    def base(self, /) -> float: ...
    def create_new_instance(self, /) -> PySide6.QtGraphs.QValue3DAxisFormatter: ...
    def edge_labels_visible(self, /) -> bool: ...
    def populate_copy(self, copy: PySide6.QtGraphs.QValue3DAxisFormatter, /) -> None: ...
    def position_at(self, value: float, /) -> float: ...
    def recalculate(self, /) -> None: ...
    def set_auto_sub_grid(self, enabled: bool, /) -> None: ...
    def set_base(self, base: float, /) -> None: ...
    def set_edge_labels_visible(self, enabled: bool, /) -> None: ...
    def value_at(self, position: float, /) -> float: ...


class QPieModelMapper(PySide6.QtCore.QObject):

    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    firstChanged             : typing.ClassVar[Signal] = ... # firstChanged()
    labelsSectionChanged     : typing.ClassVar[Signal] = ... # labelsSectionChanged()
    modelChanged             : typing.ClassVar[Signal] = ... # modelChanged()
    orientationChanged       : typing.ClassVar[Signal] = ... # orientationChanged()
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged()
    valuesSectionChanged     : typing.ClassVar[Signal] = ... # valuesSectionChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, series: PySide6.QtCharts.QPieSeries | None = ..., model: PySide6.QtCore.QAbstractItemModel | None = ..., values_section: int | None = ..., labels_section: int | None = ..., first: int | None = ..., count: int | None = ..., orientation: PySide6.QtCore.Qt.Orientation | None = ...) -> None: ...

    def count(self, /) -> int: ...
    def first(self, /) -> int: ...
    def labels_section(self, /) -> int: ...
    def model(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    def on_slice_label_changed(self, /) -> None: ...
    def on_slice_value_changed(self, /) -> None: ...
    def orientation(self, /) -> PySide6.QtCore.Qt.Orientation: ...
    def series(self, /) -> PySide6.QtGraphs.QPieSeries: ...
    def set_count(self, count: int, /) -> None: ...
    def set_first(self, first: int, /) -> None: ...
    def set_labels_section(self, labelsSection: int, /) -> None: ...
    def set_model(self, model: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    def set_orientation(self, orientation: PySide6.QtCore.Qt.Orientation, /) -> None: ...
    def set_series(self, series: PySide6.QtGraphs.QPieSeries, /) -> None: ...
    def set_values_section(self, valuesSection: int, /) -> None: ...
    def values_section(self, /) -> int: ...


class QPieSeries(PySide6.QtGraphs.QAbstractSeries):

    added                    : typing.ClassVar[Signal] = ... # added(QList<QPieSlice*>)
    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    endAngleChanged          : typing.ClassVar[Signal] = ... # endAngleChanged()
    holeSizeChanged          : typing.ClassVar[Signal] = ... # holeSizeChanged()
    horizontalPositionChanged: typing.ClassVar[Signal] = ... # horizontalPositionChanged()
    pieSizeChanged           : typing.ClassVar[Signal] = ... # pieSizeChanged()
    removed                  : typing.ClassVar[Signal] = ... # removed(QList<QPieSlice*>)
    replaced                 : typing.ClassVar[Signal] = ... # replaced(QList<QPieSlice*>)
    startAngleChanged        : typing.ClassVar[Signal] = ... # startAngleChanged()
    sumChanged               : typing.ClassVar[Signal] = ... # sumChanged()
    verticalPositionChanged  : typing.ClassVar[Signal] = ... # verticalPositionChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, horizontal_position: float | None = ..., vertical_position: float | None = ..., pie_size: float | None = ..., start_angle: float | None = ..., end_angle: float | None = ..., count: int | None = ..., sum: float | None = ..., hole_size: float | None = ...) -> None: ...

    def __lshift__(self, slice: PySide6.QtGraphs.QPieSlice, /) -> PySide6.QtGraphs.QPieSeries: ...
    @typing.overload
    def append(self, slice: PySide6.QtGraphs.QPieSlice, /) -> bool: ...
    @typing.overload
    def append(self, label: str, value: float, /) -> PySide6.QtGraphs.QPieSlice: ...
    @typing.overload
    def append(self, slices: collections.abc.Sequence[PySide6.QtGraphs.QPieSlice], /) -> bool: ...
    def at(self, index: int, /) -> PySide6.QtGraphs.QPieSlice: ...
    def clear(self, /) -> None: ...
    def component_complete(self, /) -> None: ...
    def count(self, /) -> int: ...
    def end_angle(self, /) -> float: ...
    def find(self, label: str, /) -> PySide6.QtGraphs.QPieSlice: ...
    def handle_slice_change(self, /) -> None: ...
    def hole_size(self, /) -> float: ...
    def horizontal_position(self, /) -> float: ...
    def insert(self, index: int, slice: PySide6.QtGraphs.QPieSlice, /) -> bool: ...
    def is_empty(self, /) -> bool: ...
    def pie_size(self, /) -> float: ...
    @typing.overload
    def remove(self, slice: PySide6.QtGraphs.QPieSlice, /) -> bool: ...
    @typing.overload
    def remove(self, index: int, /) -> bool: ...
    def remove_multiple(self, index: int, count: int, /) -> None: ...
    @typing.overload
    def replace(self, oldSlice: PySide6.QtGraphs.QPieSlice, newSlice: PySide6.QtGraphs.QPieSlice, /) -> bool: ...
    @typing.overload
    def replace(self, slices: collections.abc.Sequence[PySide6.QtGraphs.QPieSlice], /) -> bool: ...
    @typing.overload
    def replace(self, index: int, slice: PySide6.QtGraphs.QPieSlice, /) -> bool: ...
    def set_end_angle(self, endAngle: float, /) -> None: ...
    def set_hole_size(self, holeSize: float, /) -> None: ...
    def set_horizontal_position(self, relativePosition: float, /) -> None: ...
    def set_labels_position(self, position: PySide6.QtGraphs.QPieSlice.LabelPosition, /) -> None: ...
    def set_labels_visible(self, visible: bool, /) -> None: ...
    def set_pie_size(self, relativeSize: float, /) -> None: ...
    def set_start_angle(self, startAngle: float, /) -> None: ...
    def set_vertical_position(self, relativePosition: float, /) -> None: ...
    def slices(self, /) -> typing.List[PySide6.QtGraphs.QPieSlice]: ...
    def start_angle(self, /) -> float: ...
    def sum(self, /) -> float: ...
    def take(self, slice: PySide6.QtGraphs.QPieSlice, /) -> bool: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...
    def vertical_position(self, /) -> float: ...


class QPieSlice(PySide6.QtCore.QObject):

    angleSpanChanged         : typing.ClassVar[Signal] = ... # angleSpanChanged()
    borderColorChanged       : typing.ClassVar[Signal] = ... # borderColorChanged()
    borderWidthChanged       : typing.ClassVar[Signal] = ... # borderWidthChanged()
    colorChanged             : typing.ClassVar[Signal] = ... # colorChanged()
    explodeDistanceFactorChanged: typing.ClassVar[Signal] = ... # explodeDistanceFactorChanged()
    explodedChanged          : typing.ClassVar[Signal] = ... # explodedChanged()
    labelArmLengthFactorChanged: typing.ClassVar[Signal] = ... # labelArmLengthFactorChanged()
    labelChanged             : typing.ClassVar[Signal] = ... # labelChanged()
    labelColorChanged        : typing.ClassVar[Signal] = ... # labelColorChanged()
    labelFontChanged         : typing.ClassVar[Signal] = ... # labelFontChanged()
    labelPositionChanged     : typing.ClassVar[Signal] = ... # labelPositionChanged()
    labelVisibleChanged      : typing.ClassVar[Signal] = ... # labelVisibleChanged()
    percentageChanged        : typing.ClassVar[Signal] = ... # percentageChanged()
    sliceChanged             : typing.ClassVar[Signal] = ... # sliceChanged()
    startAngleChanged        : typing.ClassVar[Signal] = ... # startAngleChanged()
    valueChanged             : typing.ClassVar[Signal] = ... # valueChanged()

    class LabelPosition(enum.Enum):

        Outside                   = ...  # 0x0
        InsideHorizontal          = ...  # 0x1
        InsideTangential          = ...  # 0x2
        InsideNormal              = ...  # 0x3


    @typing.overload
    def __init__(self, label: str, value: float, /, parent: PySide6.QtCore.QObject | None = ..., *, label_visible: bool | None = ..., label_position: PySide6.QtCharts.QPieSlice.LabelPosition | None = ..., label_color: PySide6.QtGui.QColor | None = ..., label_font: PySide6.QtGui.QFont | None = ..., label_arm_length_factor: float | None = ..., color: PySide6.QtGui.QColor | None = ..., border_color: PySide6.QtGui.QColor | None = ..., border_width: float | None = ..., exploded: bool | None = ..., explode_distance_factor: float | None = ..., percentage: float | None = ..., start_angle: float | None = ..., angle_span: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, label: str | None = ..., label_visible: bool | None = ..., label_position: PySide6.QtCharts.QPieSlice.LabelPosition | None = ..., label_color: PySide6.QtGui.QColor | None = ..., label_font: PySide6.QtGui.QFont | None = ..., label_arm_length_factor: float | None = ..., color: PySide6.QtGui.QColor | None = ..., border_color: PySide6.QtGui.QColor | None = ..., border_width: float | None = ..., value: float | None = ..., exploded: bool | None = ..., explode_distance_factor: float | None = ..., percentage: float | None = ..., start_angle: float | None = ..., angle_span: float | None = ...) -> None: ...

    def angle_span(self, /) -> float: ...
    def border_color(self, /) -> PySide6.QtGui.QColor: ...
    def border_width(self, /) -> float: ...
    def color(self, /) -> PySide6.QtGui.QColor: ...
    def explode_distance_factor(self, /) -> float: ...
    def is_exploded(self, /) -> bool: ...
    def is_label_visible(self, /) -> bool: ...
    def label(self, /) -> str: ...
    def label_arm_length_factor(self, /) -> float: ...
    def label_color(self, /) -> PySide6.QtGui.QColor: ...
    def label_font(self, /) -> PySide6.QtGui.QFont: ...
    def label_position(self, /) -> PySide6.QtGraphs.QPieSlice.LabelPosition: ...
    def percentage(self, /) -> float: ...
    def series(self, /) -> PySide6.QtGraphs.QPieSeries: ...
    def set_border_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_border_width(self, borderWidth: float, /) -> None: ...
    def set_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_explode_distance_factor(self, factor: float, /) -> None: ...
    def set_exploded(self, exploded: bool, /) -> None: ...
    def set_label(self, label: str, /) -> None: ...
    def set_label_arm_length_factor(self, factor: float, /) -> None: ...
    def set_label_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_label_font(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    def set_label_position(self, position: PySide6.QtGraphs.QPieSlice.LabelPosition, /) -> None: ...
    def set_label_visible(self, /, visible: bool = ...) -> None: ...
    def set_value(self, value: float, /) -> None: ...
    def start_angle(self, /) -> float: ...
    def value(self, /) -> float: ...


class QPointFList: ...


class QScatter3DSeries(PySide6.QtGraphs.QAbstract3DSeries):

    dataArrayChanged         : typing.ClassVar[Signal] = ... # dataArrayChanged(QScatterDataArray)
    dataProxyChanged         : typing.ClassVar[Signal] = ... # dataProxyChanged(QScatterDataProxy*)
    itemSizeChanged          : typing.ClassVar[Signal] = ... # itemSizeChanged(float)
    selectedItemChanged      : typing.ClassVar[Signal] = ... # selectedItemChanged(qsizetype)

    @typing.overload
    def __init__(self, data_proxy: PySide6.QtDataVisualization.QScatterDataProxy, /, parent: PySide6.QtCore.QObject | None = ..., *, selected_item: int | None = ..., item_size: float | None = ..., data_array: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, data_proxy: PySide6.QtDataVisualization.QScatterDataProxy | None = ..., selected_item: int | None = ..., item_size: float | None = ..., data_array: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem] | None = ...) -> None: ...

    def clear_array(self, /) -> None: ...
    def data_array(self, /) -> typing.List[PySide6.QtGraphs.QScatterDataItem]: ...
    def data_proxy(self, /) -> PySide6.QtGraphs.QScatterDataProxy: ...
    @staticmethod
    def invalid_selection_index() -> int: ...
    def item_size(self, /) -> float: ...
    def selected_item(self, /) -> int: ...
    def set_data_array(self, newDataArray: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem], /) -> None: ...
    def set_data_proxy(self, proxy: PySide6.QtGraphs.QScatterDataProxy, /) -> None: ...
    def set_item_size(self, size: float, /) -> None: ...
    def set_selected_item(self, index: int, /) -> None: ...


class QScatterDataItem(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QScatterDataItem: PySide6.QtGraphs.QScatterDataItem, /) -> None: ...
    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...
    @typing.overload
    def __init__(self, x: float, y: float, z: float, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    def rotation(self, /) -> PySide6.QtGui.QQuaternion: ...
    def set_position(self, pos: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_rotation(self, rot: PySide6.QtGui.QQuaternion, /) -> None: ...
    def set_x(self, value: float, /) -> None: ...
    def set_y(self, value: float, /) -> None: ...
    def set_z(self, value: float, /) -> None: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QScatterDataProxy(PySide6.QtGraphs.QAbstractDataProxy):

    arrayReset               : typing.ClassVar[Signal] = ... # arrayReset()
    itemCountChanged         : typing.ClassVar[Signal] = ... # itemCountChanged(qsizetype)
    itemsAdded               : typing.ClassVar[Signal] = ... # itemsAdded(qsizetype,qsizetype)
    itemsChanged             : typing.ClassVar[Signal] = ... # itemsChanged(qsizetype,qsizetype)
    itemsInserted            : typing.ClassVar[Signal] = ... # itemsInserted(qsizetype,qsizetype)
    itemsRemoved             : typing.ClassVar[Signal] = ... # itemsRemoved(qsizetype,qsizetype)
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged(QScatter3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, item_count: int | None = ..., series: PySide6.QtDataVisualization.QScatter3DSeries | None = ...) -> None: ...

    def add_item(self, item: PySide6.QtGraphs.QScatterDataItem, /) -> int: ...
    def add_items(self, items: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem], /) -> int: ...
    def insert_item(self, index: int, item: PySide6.QtGraphs.QScatterDataItem, /) -> None: ...
    def insert_items(self, index: int, items: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem], /) -> None: ...
    def item_at(self, index: int, /) -> PySide6.QtGraphs.QScatterDataItem: ...
    def item_count(self, /) -> int: ...
    def remove_items(self, index: int, removeCount: int, /) -> None: ...
    @typing.overload
    def reset_array(self, /) -> None: ...
    @typing.overload
    def reset_array(self, newArray: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem], /) -> None: ...
    def series(self, /) -> PySide6.QtGraphs.QScatter3DSeries: ...
    def set_item(self, index: int, item: PySide6.QtGraphs.QScatterDataItem, /) -> None: ...
    def set_items(self, index: int, items: collections.abc.Sequence[PySide6.QtGraphs.QScatterDataItem], /) -> None: ...


class QScatterSeries(PySide6.QtGraphs.QXYSeries):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def component_complete(self, /) -> None: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...


class QSplineSeries(PySide6.QtGraphs.QXYSeries):

    capStyleChanged          : typing.ClassVar[Signal] = ... # capStyleChanged()
    widthChanged             : typing.ClassVar[Signal] = ... # widthChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, width: float | None = ..., cap_style: PySide6.QtCore.Qt.PenCapStyle | None = ...) -> None: ...

    def cap_style(self, /) -> PySide6.QtCore.Qt.PenCapStyle: ...
    def component_complete(self, /) -> None: ...
    def get_control_points(self, /) -> typing.List[PySide6.QtCore.QPointF]: ...
    def set_cap_style(self, newCapStyle: PySide6.QtCore.Qt.PenCapStyle, /) -> None: ...
    def set_width(self, newWidth: float, /) -> None: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractSeries.SeriesType: ...
    def width(self, /) -> float: ...


class QSurface3DSeries(PySide6.QtGraphs.QAbstract3DSeries):

    dataArrayChanged         : typing.ClassVar[Signal] = ... # dataArrayChanged(QSurfaceDataArray)
    dataProxyChanged         : typing.ClassVar[Signal] = ... # dataProxyChanged(QSurfaceDataProxy*)
    drawModeChanged          : typing.ClassVar[Signal] = ... # drawModeChanged(QSurface3DSeries::DrawFlags)
    flatShadingSupportedChanged: typing.ClassVar[Signal] = ... # flatShadingSupportedChanged(bool)
    selectedPointChanged     : typing.ClassVar[Signal] = ... # selectedPointChanged(QPoint)
    shadingChanged           : typing.ClassVar[Signal] = ... # shadingChanged(Shading)
    textureChanged           : typing.ClassVar[Signal] = ... # textureChanged(QImage)
    textureFileChanged       : typing.ClassVar[Signal] = ... # textureFileChanged(QString)
    wireframeColorChanged    : typing.ClassVar[Signal] = ... # wireframeColorChanged(QColor)

    class DrawFlag(enum.Flag):

        DrawWireframe             = ...  # 0x1
        DrawSurface               = ...  # 0x2
        DrawSurfaceAndWireframe   = ...  # 0x3

    class Shading(enum.Enum):

        Smooth                    = ...  # 0x0
        Flat                      = ...  # 0x1


    @typing.overload
    def __init__(self, data_proxy: PySide6.QtDataVisualization.QSurfaceDataProxy, /, parent: PySide6.QtCore.QObject | None = ..., *, selected_point: PySide6.QtCore.QPoint | None = ..., flat_shading_supported: bool | None = ..., draw_mode: PySide6.QtGraphs.QSurface3DSeries.DrawFlag | None = ..., shading: PySide6.QtGraphs.QSurface3DSeries.Shading | None = ..., texture: PySide6.QtGui.QImage | None = ..., texture_file: str | None = ..., wireframe_color: PySide6.QtGui.QColor | None = ..., data_array: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, data_proxy: PySide6.QtDataVisualization.QSurfaceDataProxy | None = ..., selected_point: PySide6.QtCore.QPoint | None = ..., flat_shading_supported: bool | None = ..., draw_mode: PySide6.QtGraphs.QSurface3DSeries.DrawFlag | None = ..., shading: PySide6.QtGraphs.QSurface3DSeries.Shading | None = ..., texture: PySide6.QtGui.QImage | None = ..., texture_file: str | None = ..., wireframe_color: PySide6.QtGui.QColor | None = ..., data_array: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]] | None = ...) -> None: ...

    def clear_array(self, /) -> None: ...
    def clear_row(self, rowIndex: int, /) -> None: ...
    def data_array(self, /) -> typing.List[typing.List[PySide6.QtGraphs.QSurfaceDataItem]]: ...
    def data_proxy(self, /) -> PySide6.QtGraphs.QSurfaceDataProxy: ...
    def draw_mode(self, /) -> PySide6.QtGraphs.QSurface3DSeries.DrawFlag: ...
    @staticmethod
    def invalid_selection_position() -> PySide6.QtCore.QPoint: ...
    def is_flat_shading_supported(self, /) -> bool: ...
    def selected_point(self, /) -> PySide6.QtCore.QPoint: ...
    def set_data_array(self, newDataArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]], /) -> None: ...
    def set_data_proxy(self, proxy: PySide6.QtGraphs.QSurfaceDataProxy, /) -> None: ...
    def set_draw_mode(self, mode: PySide6.QtGraphs.QSurface3DSeries.DrawFlag, /) -> None: ...
    def set_selected_point(self, position: PySide6.QtCore.QPoint, /) -> None: ...
    def set_shading(self, shading: PySide6.QtGraphs.QSurface3DSeries.Shading, /) -> None: ...
    def set_texture(self, texture: PySide6.QtGui.QImage, /) -> None: ...
    def set_texture_file(self, filename: str, /) -> None: ...
    def set_wireframe_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def shading(self, /) -> PySide6.QtGraphs.QSurface3DSeries.Shading: ...
    def texture(self, /) -> PySide6.QtGui.QImage: ...
    def texture_file(self, /) -> str: ...
    def wireframe_color(self, /) -> PySide6.QtGui.QColor: ...


class QSurfaceDataItem(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QSurfaceDataItem: PySide6.QtGraphs.QSurfaceDataItem, /) -> None: ...
    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    @typing.overload
    def __init__(self, x: float, y: float, z: float, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    def set_position(self, pos: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_x(self, value: float, /) -> None: ...
    def set_y(self, value: float, /) -> None: ...
    def set_z(self, value: float, /) -> None: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QSurfaceDataProxy(PySide6.QtGraphs.QAbstractDataProxy):

    arrayReset               : typing.ClassVar[Signal] = ... # arrayReset()
    columnCountChanged       : typing.ClassVar[Signal] = ... # columnCountChanged(qsizetype)
    itemChanged              : typing.ClassVar[Signal] = ... # itemChanged(qsizetype,qsizetype)
    rowCountChanged          : typing.ClassVar[Signal] = ... # rowCountChanged(qsizetype)
    rowsAdded                : typing.ClassVar[Signal] = ... # rowsAdded(qsizetype,qsizetype)
    rowsChanged              : typing.ClassVar[Signal] = ... # rowsChanged(qsizetype,qsizetype)
    rowsInserted             : typing.ClassVar[Signal] = ... # rowsInserted(qsizetype,qsizetype)
    rowsRemoved              : typing.ClassVar[Signal] = ... # rowsRemoved(qsizetype,qsizetype)
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged(QSurface3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, row_count: int | None = ..., column_count: int | None = ..., series: PySide6.QtDataVisualization.QSurface3DSeries | None = ...) -> None: ...

    def add_row(self, row: collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem], /) -> int: ...
    def add_rows(self, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]], /) -> int: ...
    def column_count(self, /) -> int: ...
    def insert_row(self, rowIndex: int, row: collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem], /) -> None: ...
    def insert_rows(self, rowIndex: int, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]], /) -> None: ...
    @typing.overload
    def item_at(self, position: PySide6.QtCore.QPoint, /) -> PySide6.QtGraphs.QSurfaceDataItem: ...
    @typing.overload
    def item_at(self, rowIndex: int, columnIndex: int, /) -> PySide6.QtGraphs.QSurfaceDataItem: ...
    def remove_rows(self, rowIndex: int, removeCount: int, /) -> None: ...
    @typing.overload
    def reset_array(self, /) -> None: ...
    @typing.overload
    def reset_array(self, newArray: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]], /) -> None: ...
    def reset_array_np(self, x: float, deltaX: float, z: float, deltaZ: float, data: collections.abc.Sequence[typing.Any], /) -> None: ...
    def row_count(self, /) -> int: ...
    def series(self, /) -> PySide6.QtGraphs.QSurface3DSeries: ...
    @typing.overload
    def set_item(self, position: PySide6.QtCore.QPoint, item: PySide6.QtGraphs.QSurfaceDataItem, /) -> None: ...
    @typing.overload
    def set_item(self, rowIndex: int, columnIndex: int, item: PySide6.QtGraphs.QSurfaceDataItem, /) -> None: ...
    def set_row(self, rowIndex: int, row: collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem], /) -> None: ...
    def set_rows(self, rowIndex: int, rows: collections.abc.Sequence[collections.abc.Sequence[PySide6.QtGraphs.QSurfaceDataItem]], /) -> None: ...


class QValue3DAxis(PySide6.QtGraphs.QAbstract3DAxis):

    formatterChanged         : typing.ClassVar[Signal] = ... # formatterChanged(QValue3DAxisFormatter*)
    formatterDirty           : typing.ClassVar[Signal] = ... # formatterDirty()
    labelFormatChanged       : typing.ClassVar[Signal] = ... # labelFormatChanged(QString)
    reversedChanged          : typing.ClassVar[Signal] = ... # reversedChanged(bool)
    segmentCountChanged      : typing.ClassVar[Signal] = ... # segmentCountChanged(qsizetype)
    subSegmentCountChanged   : typing.ClassVar[Signal] = ... # subSegmentCountChanged(qsizetype)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, segment_count: int | None = ..., sub_segment_count: int | None = ..., label_format: str | None = ..., formatter: PySide6.QtDataVisualization.QValue3DAxisFormatter | None = ..., reversed: bool | None = ...) -> None: ...

    def formatter(self, /) -> PySide6.QtGraphs.QValue3DAxisFormatter: ...
    def grid_position_at(self, gridLine: int, /) -> float: ...
    def grid_size(self, /) -> int: ...
    def label_format(self, /) -> str: ...
    def label_position_at(self, index: int, /) -> float: ...
    def position_at(self, x: float, /) -> float: ...
    def recalculate(self, /) -> None: ...
    def reversed(self, /) -> bool: ...
    def segment_count(self, /) -> int: ...
    def set_formatter(self, formatter: PySide6.QtGraphs.QValue3DAxisFormatter, /) -> None: ...
    def set_label_format(self, format: str, /) -> None: ...
    def set_reversed(self, enable: bool, /) -> None: ...
    def set_segment_count(self, count: int, /) -> None: ...
    def set_sub_segment_count(self, count: int, /) -> None: ...
    def string_for_value(self, x: float, /) -> str: ...
    def sub_grid_position_at(self, gridLine: int, /) -> float: ...
    def sub_grid_size(self, /) -> int: ...
    def sub_segment_count(self, /) -> int: ...


class QValue3DAxisFormatter(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def allow_negatives(self, /) -> bool: ...
    def allow_zero(self, /) -> bool: ...
    def axis(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    def create_new_instance(self, /) -> PySide6.QtGraphs.QValue3DAxisFormatter: ...
    def grid_positions(self, /) -> typing.List[float]: ...
    def label_positions(self, /) -> typing.List[float]: ...
    def label_strings(self, /) -> typing.List[str]: ...
    def locale(self, /) -> PySide6.QtCore.QLocale: ...
    def mark_dirty(self, /, labelsChange: bool = ...) -> None: ...
    def populate_copy(self, copy: PySide6.QtGraphs.QValue3DAxisFormatter, /) -> None: ...
    def position_at(self, value: float, /) -> float: ...
    def recalculate(self, /) -> None: ...
    def set_allow_negatives(self, allow: bool, /) -> None: ...
    def set_allow_zero(self, allow: bool, /) -> None: ...
    def set_axis(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def set_grid_poitions(self, gridPositions: collections.abc.Sequence[float], /) -> None: ...
    def set_label_strings(self, labelStrings: collections.abc.Sequence[str], /) -> None: ...
    def set_locale(self, locale: PySide6.QtCore.QLocale | PySide6.QtCore.QLocale.Language, /) -> None: ...
    def set_sub_grid_positions(self, subGridPositions: collections.abc.Sequence[float], /) -> None: ...
    def setlabel_positions(self, labelPositions: collections.abc.Sequence[float], /) -> None: ...
    def string_for_value(self, value: float, format: str, /) -> str: ...
    def sub_grid_positions(self, /) -> typing.List[float]: ...
    def value_at(self, position: float, /) -> float: ...


class QValueAxis(PySide6.QtGraphs.QAbstractAxis):

    labelDecimalsChanged     : typing.ClassVar[Signal] = ... # labelDecimalsChanged(int)
    labelFormatChanged       : typing.ClassVar[Signal] = ... # labelFormatChanged(QString)
    maxChanged               : typing.ClassVar[Signal] = ... # maxChanged(double)
    minChanged               : typing.ClassVar[Signal] = ... # minChanged(double)
    rangeChanged             : typing.ClassVar[Signal] = ... # rangeChanged(double,double)
    subTickCountChanged      : typing.ClassVar[Signal] = ... # subTickCountChanged(qsizetype)
    tickAnchorChanged        : typing.ClassVar[Signal] = ... # tickAnchorChanged(double)
    tickIntervalChanged      : typing.ClassVar[Signal] = ... # tickIntervalChanged(double)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, min: float | None = ..., max: float | None = ..., label_format: str | None = ..., label_decimals: int | None = ..., sub_tick_count: int | None = ..., tick_anchor: float | None = ..., tick_interval: float | None = ...) -> None: ...

    def label_decimals(self, /) -> int: ...
    def label_format(self, /) -> str: ...
    def max(self, /) -> float: ...
    def min(self, /) -> float: ...
    def set_label_decimals(self, decimals: int, /) -> None: ...
    def set_label_format(self, format: str, /) -> None: ...
    def set_max(self, max: float, /) -> None: ...
    def set_min(self, min: float, /) -> None: ...
    def set_range(self, min: float, max: float, /) -> None: ...
    def set_sub_tick_count(self, count: int, /) -> None: ...
    def set_tick_anchor(self, anchor: float, /) -> None: ...
    def set_tick_interval(self, interval: float, /) -> None: ...
    def sub_tick_count(self, /) -> int: ...
    def tick_anchor(self, /) -> float: ...
    def tick_interval(self, /) -> float: ...
    def type(self, /) -> PySide6.QtGraphs.QAbstractAxis.AxisType: ...


class QXYModelMapper(PySide6.QtCore.QObject):

    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    firstChanged             : typing.ClassVar[Signal] = ... # firstChanged()
    modelChanged             : typing.ClassVar[Signal] = ... # modelChanged()
    orientationChanged       : typing.ClassVar[Signal] = ... # orientationChanged()
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged()
    xSectionChanged          : typing.ClassVar[Signal] = ... # xSectionChanged()
    ySectionChanged          : typing.ClassVar[Signal] = ... # ySectionChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, series: PySide6.QtCharts.QXYSeries | None = ..., model: PySide6.QtCore.QAbstractItemModel | None = ..., x_section: int | None = ..., y_section: int | None = ..., first: int | None = ..., count: int | None = ..., orientation: PySide6.QtCore.Qt.Orientation | None = ...) -> None: ...

    def count(self, /) -> int: ...
    def first(self, /) -> int: ...
    def model(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    def orientation(self, /) -> PySide6.QtCore.Qt.Orientation: ...
    def series(self, /) -> PySide6.QtGraphs.QXYSeries: ...
    def setXSection(self, xSection: int, /) -> None: ...
    def setYSection(self, ySection: int, /) -> None: ...
    def set_count(self, count: int, /) -> None: ...
    def set_first(self, first: int, /) -> None: ...
    def set_model(self, model: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    def set_orientation(self, orientation: PySide6.QtCore.Qt.Orientation, /) -> None: ...
    def set_series(self, series: PySide6.QtGraphs.QXYSeries, /) -> None: ...
    def x_section(self, /) -> int: ...
    def y_section(self, /) -> int: ...


class QXYSeries(PySide6.QtGraphs.QAbstractSeries):

    colorChanged             : typing.ClassVar[Signal] = ... # colorChanged(QColor)
    countChanged             : typing.ClassVar[Signal] = ... # countChanged()
    draggableChanged         : typing.ClassVar[Signal] = ... # draggableChanged()
    pointAdded               : typing.ClassVar[Signal] = ... # pointAdded(qsizetype)
    pointDelegateChanged     : typing.ClassVar[Signal] = ... # pointDelegateChanged()
    pointRemoved             : typing.ClassVar[Signal] = ... # pointRemoved(qsizetype)
    pointReplaced            : typing.ClassVar[Signal] = ... # pointReplaced(qsizetype)
    pointsRemoved            : typing.ClassVar[Signal] = ... # pointsRemoved(qsizetype,qsizetype)
    pointsReplaced           : typing.ClassVar[Signal] = ... # pointsReplaced()
    selectedColorChanged     : typing.ClassVar[Signal] = ... # selectedColorChanged(QColor)
    selectedPointsChanged    : typing.ClassVar[Signal] = ... # selectedPointsChanged()
    seriesUpdated            : typing.ClassVar[Signal] = ... # seriesUpdated()
    @typing.overload
    def __lshift__(self, points: collections.abc.Sequence[PySide6.QtCore.QPointF], /) -> PySide6.QtGraphs.QXYSeries: ...
    @typing.overload
    def __lshift__(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> PySide6.QtGraphs.QXYSeries: ...
    @typing.overload
    def append(self, points: collections.abc.Sequence[PySide6.QtCore.QPointF], /) -> None: ...
    @typing.overload
    def append(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    @typing.overload
    def append(self, x: float, y: float, /) -> None: ...
    def append_np(self, x: collections.abc.Sequence[typing.Any], y: collections.abc.Sequence[typing.Any], /) -> None: ...
    def at(self, index: int, /) -> PySide6.QtCore.QPointF: ...
    def clear(self, /) -> None: ...
    def color(self, /) -> PySide6.QtGui.QColor: ...
    def count(self, /) -> int: ...
    def deselect_all_points(self, /) -> None: ...
    def deselect_point(self, index: int, /) -> None: ...
    def deselect_points(self, indexes: collections.abc.Sequence[int], /) -> None: ...
    def find(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> int: ...
    def insert(self, index: int, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    def is_draggable(self, /) -> bool: ...
    def is_point_selected(self, index: int, /) -> bool: ...
    def point_delegate(self, /) -> PySide6.QtQml.QQmlComponent: ...
    def points(self, /) -> typing.List[PySide6.QtCore.QPointF]: ...
    def qt_qml_marker_uncreatable(self, /) -> None: ...
    @typing.overload
    def remove(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    @typing.overload
    def remove(self, index: int, /) -> None: ...
    @typing.overload
    def remove(self, x: float, y: float, /) -> None: ...
    def remove_multiple(self, index: int, count: int, /) -> None: ...
    @typing.overload
    def replace(self, points: collections.abc.Sequence[PySide6.QtCore.QPointF], /) -> None: ...
    @typing.overload
    def replace(self, oldPoint: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, newPoint: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    @typing.overload
    def replace(self, index: int, newPoint: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    @typing.overload
    def replace(self, index: int, newX: float, newY: float, /) -> None: ...
    @typing.overload
    def replace(self, oldX: float, oldY: float, newX: float, newY: float, /) -> None: ...
    def replace_np(self, x: collections.abc.Sequence[typing.Any], y: collections.abc.Sequence[typing.Any], /) -> None: ...
    def select_all_points(self, /) -> None: ...
    def select_point(self, index: int, /) -> None: ...
    def select_points(self, indexes: collections.abc.Sequence[int], /) -> None: ...
    def selected_color(self, /) -> PySide6.QtGui.QColor: ...
    def selected_points(self, /) -> typing.List[int]: ...
    def set_color(self, newColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_draggable(self, newDraggable: bool, /) -> None: ...
    def set_point_delegate(self, newPointDelegate: PySide6.QtQml.QQmlComponent, /) -> None: ...
    def set_point_selected(self, index: int, selected: bool, /) -> None: ...
    def set_selected_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def take(self, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> bool: ...
    def toggle_selection(self, indexes: collections.abc.Sequence[int], /) -> None: ...


class QtGraphs3D(Shiboken.Object):

    class CameraPreset(enum.Enum):

        NoPreset                  = ...  # 0x0
        FrontLow                  = ...  # 0x1
        Front                     = ...  # 0x2
        FrontHigh                 = ...  # 0x3
        LeftLow                   = ...  # 0x4
        Left                      = ...  # 0x5
        LeftHigh                  = ...  # 0x6
        RightLow                  = ...  # 0x7
        Right                     = ...  # 0x8
        RightHigh                 = ...  # 0x9
        BehindLow                 = ...  # 0xa
        Behind                    = ...  # 0xb
        BehindHigh                = ...  # 0xc
        IsometricLeft             = ...  # 0xd
        IsometricLeftHigh         = ...  # 0xe
        IsometricRight            = ...  # 0xf
        IsometricRightHigh        = ...  # 0x10
        DirectlyAbove             = ...  # 0x11
        DirectlyAboveCW45         = ...  # 0x12
        DirectlyAboveCCW45        = ...  # 0x13
        FrontBelow                = ...  # 0x14
        LeftBelow                 = ...  # 0x15
        RightBelow                = ...  # 0x16
        BehindBelow               = ...  # 0x17
        DirectlyBelow             = ...  # 0x18

    class ElementType(enum.Enum):

        None_                     = ...  # 0x0
        Series                    = ...  # 0x1
        AxisXLabel                = ...  # 0x2
        AxisYLabel                = ...  # 0x3
        AxisZLabel                = ...  # 0x4
        CustomItem                = ...  # 0x5

    class GridLineType(enum.Enum):

        Shader                    = ...  # 0x0
        Geometry                  = ...  # 0x1

    class OptimizationHint(enum.Flag):

        Default                   = ...  # 0x0
        Legacy                    = ...  # 0x1

    class RenderingMode(enum.Enum):

        DirectToBackground        = ...  # 0x0
        Indirect                  = ...  # 0x1

    class SelectionFlag(enum.Flag):

        None_                     = ...  # 0x0
        Item                      = ...  # 0x1
        Row                       = ...  # 0x2
        ItemAndRow                = ...  # 0x3
        Column                    = ...  # 0x4
        ItemAndColumn             = ...  # 0x5
        RowAndColumn              = ...  # 0x6
        ItemRowAndColumn          = ...  # 0x7
        Slice                     = ...  # 0x8
        MultiSeries               = ...  # 0x10

    class ShadowQuality(enum.Enum):

        None_                     = ...  # 0x0
        Low                       = ...  # 0x1
        Medium                    = ...  # 0x2
        High                      = ...  # 0x3
        SoftLow                   = ...  # 0x4
        SoftMedium                = ...  # 0x5
        SoftHigh                  = ...  # 0x6


def qDefaultSurfaceFormat(antialias: bool, /) -> PySide6.QtGui.QSurfaceFormat: ...


# eof
