# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtDataVisualization, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtDataVisualization`

import PySide6.QtDataVisualization
import PySide6.QtCore
import PySide6.QtGui

import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class Q3DBars(PySide6.QtDataVisualization.QAbstract3DGraph):

    barSeriesMarginChanged   : typing.ClassVar[Signal] = ... # barSeriesMarginChanged(QSizeF)
    barSpacingChanged        : typing.ClassVar[Signal] = ... # barSpacingChanged(QSizeF)
    barSpacingRelativeChanged: typing.ClassVar[Signal] = ... # barSpacingRelativeChanged(bool)
    barThicknessChanged      : typing.ClassVar[Signal] = ... # barThicknessChanged(float)
    columnAxisChanged        : typing.ClassVar[Signal] = ... # columnAxisChanged(QCategory3DAxis*)
    floorLevelChanged        : typing.ClassVar[Signal] = ... # floorLevelChanged(float)
    multiSeriesUniformChanged: typing.ClassVar[Signal] = ... # multiSeriesUniformChanged(bool)
    primarySeriesChanged     : typing.ClassVar[Signal] = ... # primarySeriesChanged(QBar3DSeries*)
    rowAxisChanged           : typing.ClassVar[Signal] = ... # rowAxisChanged(QCategory3DAxis*)
    selectedSeriesChanged    : typing.ClassVar[Signal] = ... # selectedSeriesChanged(QBar3DSeries*)
    valueAxisChanged         : typing.ClassVar[Signal] = ... # valueAxisChanged(QValue3DAxis*)

    def __init__(self, /, format: PySide6.QtGui.QSurfaceFormat | PySide6.QtGui.QSurfaceFormat.FormatOption | None = ..., parent: PySide6.QtGui.QWindow | None = ..., *, multi_series_uniform: bool | None = ..., bar_thickness: float | None = ..., bar_spacing: PySide6.QtCore.QSizeF | None = ..., bar_spacing_relative: bool | None = ..., bar_series_margin: PySide6.QtCore.QSizeF | None = ..., row_axis: PySide6.QtDataVisualization.QCategory3DAxis | None = ..., column_axis: PySide6.QtDataVisualization.QCategory3DAxis | None = ..., value_axis: PySide6.QtDataVisualization.QValue3DAxis | None = ..., primary_series: PySide6.QtDataVisualization.QBar3DSeries | None = ..., selected_series: PySide6.QtDataVisualization.QBar3DSeries | None = ..., floor_level: float | None = ...) -> None: ...

    def add_axis(self, axis: PySide6.QtDataVisualization.QAbstract3DAxis, /) -> None: ...
    def add_series(self, series: PySide6.QtDataVisualization.QBar3DSeries, /) -> None: ...
    def axes(self, /) -> typing.List[PySide6.QtDataVisualization.QAbstract3DAxis]: ...
    def bar_series_margin(self, /) -> PySide6.QtCore.QSizeF: ...
    def bar_spacing(self, /) -> PySide6.QtCore.QSizeF: ...
    def bar_thickness(self, /) -> float: ...
    def column_axis(self, /) -> PySide6.QtDataVisualization.QCategory3DAxis: ...
    def floor_level(self, /) -> float: ...
    def insert_series(self, index: int, series: PySide6.QtDataVisualization.QBar3DSeries, /) -> None: ...
    def is_bar_spacing_relative(self, /) -> bool: ...
    def is_multi_series_uniform(self, /) -> bool: ...
    def primary_series(self, /) -> PySide6.QtDataVisualization.QBar3DSeries: ...
    def release_axis(self, axis: PySide6.QtDataVisualization.QAbstract3DAxis, /) -> None: ...
    def remove_series(self, series: PySide6.QtDataVisualization.QBar3DSeries, /) -> None: ...
    def row_axis(self, /) -> PySide6.QtDataVisualization.QCategory3DAxis: ...
    def selected_series(self, /) -> PySide6.QtDataVisualization.QBar3DSeries: ...
    def series_list(self, /) -> typing.List[PySide6.QtDataVisualization.QBar3DSeries]: ...
    def set_bar_series_margin(self, margin: PySide6.QtCore.QSizeF | PySide6.QtCore.QSize, /) -> None: ...
    def set_bar_spacing(self, spacing: PySide6.QtCore.QSizeF | PySide6.QtCore.QSize, /) -> None: ...
    def set_bar_spacing_relative(self, relative: bool, /) -> None: ...
    def set_bar_thickness(self, thicknessRatio: float, /) -> None: ...
    def set_column_axis(self, axis: PySide6.QtDataVisualization.QCategory3DAxis, /) -> None: ...
    def set_floor_level(self, level: float, /) -> None: ...
    def set_multi_series_uniform(self, uniform: bool, /) -> None: ...
    def set_primary_series(self, series: PySide6.QtDataVisualization.QBar3DSeries, /) -> None: ...
    def set_row_axis(self, axis: PySide6.QtDataVisualization.QCategory3DAxis, /) -> None: ...
    def set_value_axis(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def value_axis(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...


class Q3DCamera(PySide6.QtDataVisualization.Q3DObject):

    cameraPresetChanged      : typing.ClassVar[Signal] = ... # cameraPresetChanged(Q3DCamera::CameraPreset)
    maxZoomLevelChanged      : typing.ClassVar[Signal] = ... # maxZoomLevelChanged(float)
    minZoomLevelChanged      : typing.ClassVar[Signal] = ... # minZoomLevelChanged(float)
    targetChanged            : typing.ClassVar[Signal] = ... # targetChanged(QVector3D)
    wrapXRotationChanged     : typing.ClassVar[Signal] = ... # wrapXRotationChanged(bool)
    wrapYRotationChanged     : typing.ClassVar[Signal] = ... # wrapYRotationChanged(bool)
    xRotationChanged         : typing.ClassVar[Signal] = ... # xRotationChanged(float)
    yRotationChanged         : typing.ClassVar[Signal] = ... # yRotationChanged(float)
    zoomLevelChanged         : typing.ClassVar[Signal] = ... # zoomLevelChanged(float)

    class CameraPreset(enum.Enum):

        CameraPresetNone          = ...  # -1
        CameraPresetFrontLow      = ...  # 0x0
        CameraPresetFront         = ...  # 0x1
        CameraPresetFrontHigh     = ...  # 0x2
        CameraPresetLeftLow       = ...  # 0x3
        CameraPresetLeft          = ...  # 0x4
        CameraPresetLeftHigh      = ...  # 0x5
        CameraPresetRightLow      = ...  # 0x6
        CameraPresetRight         = ...  # 0x7
        CameraPresetRightHigh     = ...  # 0x8
        CameraPresetBehindLow     = ...  # 0x9
        CameraPresetBehind        = ...  # 0xa
        CameraPresetBehindHigh    = ...  # 0xb
        CameraPresetIsometricLeft = ...  # 0xc
        CameraPresetIsometricLeftHigh = ...  # 0xd
        CameraPresetIsometricRight = ...  # 0xe
        CameraPresetIsometricRightHigh = ...  # 0xf
        CameraPresetDirectlyAbove = ...  # 0x10
        CameraPresetDirectlyAboveCW45 = ...  # 0x11
        CameraPresetDirectlyAboveCCW45 = ...  # 0x12
        CameraPresetFrontBelow    = ...  # 0x13
        CameraPresetLeftBelow     = ...  # 0x14
        CameraPresetRightBelow    = ...  # 0x15
        CameraPresetBehindBelow   = ...  # 0x16
        CameraPresetDirectlyBelow = ...  # 0x17


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, x_rotation: float | None = ..., y_rotation: float | None = ..., zoom_level: float | None = ..., camera_preset: PySide6.QtDataVisualization.Q3DCamera.CameraPreset | None = ..., wrapXRotation: bool | None = ..., wrapYRotation: bool | None = ..., target: PySide6.QtGui.QVector3D | None = ..., min_zoom_level: float | None = ..., max_zoom_level: float | None = ...) -> None: ...

    def camera_preset(self, /) -> PySide6.QtDataVisualization.Q3DCamera.CameraPreset: ...
    def copy_values_from(self, source: PySide6.QtDataVisualization.Q3DObject, /) -> None: ...
    def max_zoom_level(self, /) -> float: ...
    def min_zoom_level(self, /) -> float: ...
    def setWrapXRotation(self, isEnabled: bool, /) -> None: ...
    def setWrapYRotation(self, isEnabled: bool, /) -> None: ...
    def setXRotation(self, rotation: float, /) -> None: ...
    def setYRotation(self, rotation: float, /) -> None: ...
    def set_camera_position(self, horizontal: float, vertical: float, /, zoom: float = ...) -> None: ...
    def set_camera_preset(self, preset: PySide6.QtDataVisualization.Q3DCamera.CameraPreset, /) -> None: ...
    def set_max_zoom_level(self, zoomLevel: float, /) -> None: ...
    def set_min_zoom_level(self, zoomLevel: float, /) -> None: ...
    def set_target(self, target: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_zoom_level(self, zoomLevel: float, /) -> None: ...
    def target(self, /) -> PySide6.QtGui.QVector3D: ...
    def wrapXRotation(self, /) -> bool: ...
    def wrapYRotation(self, /) -> bool: ...
    def x_rotation(self, /) -> float: ...
    def y_rotation(self, /) -> float: ...
    def zoom_level(self, /) -> float: ...


class Q3DInputHandler(PySide6.QtDataVisualization.QAbstract3DInputHandler):

    rotationEnabledChanged   : typing.ClassVar[Signal] = ... # rotationEnabledChanged(bool)
    selectionEnabledChanged  : typing.ClassVar[Signal] = ... # selectionEnabledChanged(bool)
    zoomAtTargetEnabledChanged: typing.ClassVar[Signal] = ... # zoomAtTargetEnabledChanged(bool)
    zoomEnabledChanged       : typing.ClassVar[Signal] = ... # zoomEnabledChanged(bool)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, rotation_enabled: bool | None = ..., zoom_enabled: bool | None = ..., selection_enabled: bool | None = ..., zoom_at_target_enabled: bool | None = ...) -> None: ...

    def is_rotation_enabled(self, /) -> bool: ...
    def is_selection_enabled(self, /) -> bool: ...
    def is_zoom_at_target_enabled(self, /) -> bool: ...
    def is_zoom_enabled(self, /) -> bool: ...
    def mouse_move_event(self, event: PySide6.QtGui.QMouseEvent, mousePos: PySide6.QtCore.QPoint, /) -> None: ...
    def mouse_press_event(self, event: PySide6.QtGui.QMouseEvent, mousePos: PySide6.QtCore.QPoint, /) -> None: ...
    def mouse_release_event(self, event: PySide6.QtGui.QMouseEvent, mousePos: PySide6.QtCore.QPoint, /) -> None: ...
    def set_rotation_enabled(self, enable: bool, /) -> None: ...
    def set_selection_enabled(self, enable: bool, /) -> None: ...
    def set_zoom_at_target_enabled(self, enable: bool, /) -> None: ...
    def set_zoom_enabled(self, enable: bool, /) -> None: ...
    def wheel_event(self, event: PySide6.QtGui.QWheelEvent, /) -> None: ...


class Q3DLight(PySide6.QtDataVisualization.Q3DObject):

    autoPositionChanged      : typing.ClassVar[Signal] = ... # autoPositionChanged(bool)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, auto_position: bool | None = ...) -> None: ...

    def is_auto_position(self, /) -> bool: ...
    def set_auto_position(self, enabled: bool, /) -> None: ...


class Q3DObject(PySide6.QtCore.QObject):

    positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(QVector3D)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, parent_scene: PySide6.QtDataVisualization.Q3DScene | None = ..., position: PySide6.QtGui.QVector3D | None = ...) -> None: ...

    def copy_values_from(self, source: PySide6.QtDataVisualization.Q3DObject, /) -> None: ...
    def is_dirty(self, /) -> bool: ...
    def parent_scene(self, /) -> PySide6.QtDataVisualization.Q3DScene: ...
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    def set_dirty(self, dirty: bool, /) -> None: ...
    def set_position(self, position: PySide6.QtGui.QVector3D, /) -> None: ...


class Q3DScatter(PySide6.QtDataVisualization.QAbstract3DGraph):

    axisXChanged             : typing.ClassVar[Signal] = ... # axisXChanged(QValue3DAxis*)
    axisYChanged             : typing.ClassVar[Signal] = ... # axisYChanged(QValue3DAxis*)
    axisZChanged             : typing.ClassVar[Signal] = ... # axisZChanged(QValue3DAxis*)
    selectedSeriesChanged    : typing.ClassVar[Signal] = ... # selectedSeriesChanged(QScatter3DSeries*)

    def __init__(self, /, format: PySide6.QtGui.QSurfaceFormat | PySide6.QtGui.QSurfaceFormat.FormatOption | None = ..., parent: PySide6.QtGui.QWindow | None = ..., *, axis_x: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axis_y: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axis_z: PySide6.QtDataVisualization.QValue3DAxis | None = ..., selected_series: PySide6.QtDataVisualization.QScatter3DSeries | None = ...) -> None: ...

    def add_axis(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def add_series(self, series: PySide6.QtDataVisualization.QScatter3DSeries, /) -> None: ...
    def axes(self, /) -> typing.List[PySide6.QtDataVisualization.QValue3DAxis]: ...
    def axis_x(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    def axis_y(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    def axis_z(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    def release_axis(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def remove_series(self, series: PySide6.QtDataVisualization.QScatter3DSeries, /) -> None: ...
    def selected_series(self, /) -> PySide6.QtDataVisualization.QScatter3DSeries: ...
    def series_list(self, /) -> typing.List[PySide6.QtDataVisualization.QScatter3DSeries]: ...
    def set_axis_x(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def set_axis_y(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def set_axis_z(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...


class Q3DScene(PySide6.QtCore.QObject):

    activeCameraChanged      : typing.ClassVar[Signal] = ... # activeCameraChanged(Q3DCamera*)
    activeLightChanged       : typing.ClassVar[Signal] = ... # activeLightChanged(Q3DLight*)
    devicePixelRatioChanged  : typing.ClassVar[Signal] = ... # devicePixelRatioChanged(float)
    graphPositionQueryChanged: typing.ClassVar[Signal] = ... # graphPositionQueryChanged(QPoint)
    primarySubViewportChanged: typing.ClassVar[Signal] = ... # primarySubViewportChanged(QRect)
    secondarySubViewportChanged: typing.ClassVar[Signal] = ... # secondarySubViewportChanged(QRect)
    secondarySubviewOnTopChanged: typing.ClassVar[Signal] = ... # secondarySubviewOnTopChanged(bool)
    selectionQueryPositionChanged: typing.ClassVar[Signal] = ... # selectionQueryPositionChanged(QPoint)
    slicingActiveChanged     : typing.ClassVar[Signal] = ... # slicingActiveChanged(bool)
    viewportChanged          : typing.ClassVar[Signal] = ... # viewportChanged(QRect)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, viewport: PySide6.QtCore.QRect | None = ..., primary_sub_viewport: PySide6.QtCore.QRect | None = ..., secondary_sub_viewport: PySide6.QtCore.QRect | None = ..., selection_query_position: PySide6.QtCore.QPoint | None = ..., secondary_subview_on_top: bool | None = ..., slicing_active: bool | None = ..., active_camera: PySide6.QtDataVisualization.Q3DCamera | None = ..., active_light: PySide6.QtDataVisualization.Q3DLight | None = ..., device_pixel_ratio: float | None = ..., graph_position_query: PySide6.QtCore.QPoint | None = ...) -> None: ...

    def active_camera(self, /) -> PySide6.QtDataVisualization.Q3DCamera: ...
    def active_light(self, /) -> PySide6.QtDataVisualization.Q3DLight: ...
    def device_pixel_ratio(self, /) -> float: ...
    def graph_position_query(self, /) -> PySide6.QtCore.QPoint: ...
    @staticmethod
    def invalid_selection_point() -> PySide6.QtCore.QPoint: ...
    def is_point_in_primary_sub_view(self, point: PySide6.QtCore.QPoint, /) -> bool: ...
    def is_point_in_secondary_sub_view(self, point: PySide6.QtCore.QPoint, /) -> bool: ...
    def is_secondary_subview_on_top(self, /) -> bool: ...
    def is_slicing_active(self, /) -> bool: ...
    def primary_sub_viewport(self, /) -> PySide6.QtCore.QRect: ...
    def secondary_sub_viewport(self, /) -> PySide6.QtCore.QRect: ...
    def selection_query_position(self, /) -> PySide6.QtCore.QPoint: ...
    def set_active_camera(self, camera: PySide6.QtDataVisualization.Q3DCamera, /) -> None: ...
    def set_active_light(self, light: PySide6.QtDataVisualization.Q3DLight, /) -> None: ...
    def set_device_pixel_ratio(self, pixelRatio: float, /) -> None: ...
    def set_graph_position_query(self, point: PySide6.QtCore.QPoint, /) -> None: ...
    def set_primary_sub_viewport(self, primarySubViewport: PySide6.QtCore.QRect, /) -> None: ...
    def set_secondary_sub_viewport(self, secondarySubViewport: PySide6.QtCore.QRect, /) -> None: ...
    def set_secondary_subview_on_top(self, isSecondaryOnTop: bool, /) -> None: ...
    def set_selection_query_position(self, point: PySide6.QtCore.QPoint, /) -> None: ...
    def set_slicing_active(self, isSlicing: bool, /) -> None: ...
    def viewport(self, /) -> PySide6.QtCore.QRect: ...


class Q3DSurface(PySide6.QtDataVisualization.QAbstract3DGraph):

    axisXChanged             : typing.ClassVar[Signal] = ... # axisXChanged(QValue3DAxis*)
    axisYChanged             : typing.ClassVar[Signal] = ... # axisYChanged(QValue3DAxis*)
    axisZChanged             : typing.ClassVar[Signal] = ... # axisZChanged(QValue3DAxis*)
    flipHorizontalGridChanged: typing.ClassVar[Signal] = ... # flipHorizontalGridChanged(bool)
    selectedSeriesChanged    : typing.ClassVar[Signal] = ... # selectedSeriesChanged(QSurface3DSeries*)

    def __init__(self, /, format: PySide6.QtGui.QSurfaceFormat | PySide6.QtGui.QSurfaceFormat.FormatOption | None = ..., parent: PySide6.QtGui.QWindow | None = ..., *, axis_x: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axis_y: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axis_z: PySide6.QtDataVisualization.QValue3DAxis | None = ..., selected_series: PySide6.QtDataVisualization.QSurface3DSeries | None = ..., flip_horizontal_grid: bool | None = ...) -> None: ...

    def add_axis(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def add_series(self, series: PySide6.QtDataVisualization.QSurface3DSeries, /) -> None: ...
    def axes(self, /) -> typing.List[PySide6.QtDataVisualization.QValue3DAxis]: ...
    def axis_x(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    def axis_y(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    def axis_z(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    def flip_horizontal_grid(self, /) -> bool: ...
    def release_axis(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def remove_series(self, series: PySide6.QtDataVisualization.QSurface3DSeries, /) -> None: ...
    def selected_series(self, /) -> PySide6.QtDataVisualization.QSurface3DSeries: ...
    def series_list(self, /) -> typing.List[PySide6.QtDataVisualization.QSurface3DSeries]: ...
    def set_axis_x(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def set_axis_y(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def set_axis_z(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def set_flip_horizontal_grid(self, flip: bool, /) -> None: ...


class Q3DTheme(PySide6.QtCore.QObject):

    ambientLightStrengthChanged: typing.ClassVar[Signal] = ... # ambientLightStrengthChanged(float)
    backgroundColorChanged   : typing.ClassVar[Signal] = ... # backgroundColorChanged(QColor)
    backgroundEnabledChanged : typing.ClassVar[Signal] = ... # backgroundEnabledChanged(bool)
    baseColorsChanged        : typing.ClassVar[Signal] = ... # baseColorsChanged(QList<QColor>)
    baseGradientsChanged     : typing.ClassVar[Signal] = ... # baseGradientsChanged(QList<QLinearGradient>)
    colorStyleChanged        : typing.ClassVar[Signal] = ... # colorStyleChanged(Q3DTheme::ColorStyle)
    fontChanged              : typing.ClassVar[Signal] = ... # fontChanged(QFont)
    gridEnabledChanged       : typing.ClassVar[Signal] = ... # gridEnabledChanged(bool)
    gridLineColorChanged     : typing.ClassVar[Signal] = ... # gridLineColorChanged(QColor)
    highlightLightStrengthChanged: typing.ClassVar[Signal] = ... # highlightLightStrengthChanged(float)
    labelBackgroundColorChanged: typing.ClassVar[Signal] = ... # labelBackgroundColorChanged(QColor)
    labelBackgroundEnabledChanged: typing.ClassVar[Signal] = ... # labelBackgroundEnabledChanged(bool)
    labelBorderEnabledChanged: typing.ClassVar[Signal] = ... # labelBorderEnabledChanged(bool)
    labelTextColorChanged    : typing.ClassVar[Signal] = ... # labelTextColorChanged(QColor)
    lightColorChanged        : typing.ClassVar[Signal] = ... # lightColorChanged(QColor)
    lightStrengthChanged     : typing.ClassVar[Signal] = ... # lightStrengthChanged(float)
    multiHighlightColorChanged: typing.ClassVar[Signal] = ... # multiHighlightColorChanged(QColor)
    multiHighlightGradientChanged: typing.ClassVar[Signal] = ... # multiHighlightGradientChanged(QLinearGradient)
    singleHighlightColorChanged: typing.ClassVar[Signal] = ... # singleHighlightColorChanged(QColor)
    singleHighlightGradientChanged: typing.ClassVar[Signal] = ... # singleHighlightGradientChanged(QLinearGradient)
    typeChanged              : typing.ClassVar[Signal] = ... # typeChanged(Q3DTheme::Theme)
    windowColorChanged       : typing.ClassVar[Signal] = ... # windowColorChanged(QColor)

    class ColorStyle(enum.Enum):

        ColorStyleUniform         = ...  # 0x0
        ColorStyleObjectGradient  = ...  # 0x1
        ColorStyleRangeGradient   = ...  # 0x2

    class Theme(enum.Enum):

        ThemeQt                   = ...  # 0x0
        ThemePrimaryColors        = ...  # 0x1
        ThemeDigia                = ...  # 0x2
        ThemeStoneMoss            = ...  # 0x3
        ThemeArmyBlue             = ...  # 0x4
        ThemeRetro                = ...  # 0x5
        ThemeEbony                = ...  # 0x6
        ThemeIsabelle             = ...  # 0x7
        ThemeUserDefined          = ...  # 0x8


    @typing.overload
    def __init__(self, themeType: PySide6.QtDataVisualization.Q3DTheme.Theme, /, parent: PySide6.QtCore.QObject | None = ..., *, type: PySide6.QtDataVisualization.Q3DTheme.Theme | None = ..., base_colors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., background_color: PySide6.QtGui.QColor | None = ..., window_color: PySide6.QtGui.QColor | None = ..., label_text_color: PySide6.QtGui.QColor | None = ..., label_background_color: PySide6.QtGui.QColor | None = ..., grid_line_color: PySide6.QtGui.QColor | None = ..., single_highlight_color: PySide6.QtGui.QColor | None = ..., multi_highlight_color: PySide6.QtGui.QColor | None = ..., light_color: PySide6.QtGui.QColor | None = ..., base_gradients: collections.abc.Sequence[PySide6.QtGui.QLinearGradient] | None = ..., single_highlight_gradient: PySide6.QtGui.QLinearGradient | None = ..., multi_highlight_gradient: PySide6.QtGui.QLinearGradient | None = ..., light_strength: float | None = ..., ambient_light_strength: float | None = ..., highlight_light_strength: float | None = ..., label_border_enabled: bool | None = ..., font: PySide6.QtGui.QFont | None = ..., background_enabled: bool | None = ..., grid_enabled: bool | None = ..., label_background_enabled: bool | None = ..., color_style: PySide6.QtDataVisualization.Q3DTheme.ColorStyle | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, type: PySide6.QtDataVisualization.Q3DTheme.Theme | None = ..., base_colors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., background_color: PySide6.QtGui.QColor | None = ..., window_color: PySide6.QtGui.QColor | None = ..., label_text_color: PySide6.QtGui.QColor | None = ..., label_background_color: PySide6.QtGui.QColor | None = ..., grid_line_color: PySide6.QtGui.QColor | None = ..., single_highlight_color: PySide6.QtGui.QColor | None = ..., multi_highlight_color: PySide6.QtGui.QColor | None = ..., light_color: PySide6.QtGui.QColor | None = ..., base_gradients: collections.abc.Sequence[PySide6.QtGui.QLinearGradient] | None = ..., single_highlight_gradient: PySide6.QtGui.QLinearGradient | None = ..., multi_highlight_gradient: PySide6.QtGui.QLinearGradient | None = ..., light_strength: float | None = ..., ambient_light_strength: float | None = ..., highlight_light_strength: float | None = ..., label_border_enabled: bool | None = ..., font: PySide6.QtGui.QFont | None = ..., background_enabled: bool | None = ..., grid_enabled: bool | None = ..., label_background_enabled: bool | None = ..., color_style: PySide6.QtDataVisualization.Q3DTheme.ColorStyle | None = ...) -> None: ...

    def ambient_light_strength(self, /) -> float: ...
    def background_color(self, /) -> PySide6.QtGui.QColor: ...
    def base_colors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    def base_gradients(self, /) -> typing.List[PySide6.QtGui.QLinearGradient]: ...
    def color_style(self, /) -> PySide6.QtDataVisualization.Q3DTheme.ColorStyle: ...
    def font(self, /) -> PySide6.QtGui.QFont: ...
    def grid_line_color(self, /) -> PySide6.QtGui.QColor: ...
    def highlight_light_strength(self, /) -> float: ...
    def is_background_enabled(self, /) -> bool: ...
    def is_grid_enabled(self, /) -> bool: ...
    def is_label_background_enabled(self, /) -> bool: ...
    def is_label_border_enabled(self, /) -> bool: ...
    def label_background_color(self, /) -> PySide6.QtGui.QColor: ...
    def label_text_color(self, /) -> PySide6.QtGui.QColor: ...
    def light_color(self, /) -> PySide6.QtGui.QColor: ...
    def light_strength(self, /) -> float: ...
    def multi_highlight_color(self, /) -> PySide6.QtGui.QColor: ...
    def multi_highlight_gradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    def set_ambient_light_strength(self, strength: float, /) -> None: ...
    def set_background_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_background_enabled(self, enabled: bool, /) -> None: ...
    def set_base_colors(self, colors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    def set_base_gradients(self, gradients: collections.abc.Sequence[PySide6.QtGui.QLinearGradient], /) -> None: ...
    def set_color_style(self, style: PySide6.QtDataVisualization.Q3DTheme.ColorStyle, /) -> None: ...
    def set_font(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    def set_grid_enabled(self, enabled: bool, /) -> None: ...
    def set_grid_line_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_highlight_light_strength(self, strength: float, /) -> None: ...
    def set_label_background_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_label_background_enabled(self, enabled: bool, /) -> None: ...
    def set_label_border_enabled(self, enabled: bool, /) -> None: ...
    def set_label_text_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_light_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_light_strength(self, strength: float, /) -> None: ...
    def set_multi_highlight_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_multi_highlight_gradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    def set_single_highlight_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_single_highlight_gradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    def set_type(self, themeType: PySide6.QtDataVisualization.Q3DTheme.Theme, /) -> None: ...
    def set_window_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def single_highlight_color(self, /) -> PySide6.QtGui.QColor: ...
    def single_highlight_gradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    def type(self, /) -> PySide6.QtDataVisualization.Q3DTheme.Theme: ...
    def window_color(self, /) -> PySide6.QtGui.QColor: ...


class QAbstract3DAxis(PySide6.QtCore.QObject):

    autoAdjustRangeChanged   : typing.ClassVar[Signal] = ... # autoAdjustRangeChanged(bool)
    labelAutoRotationChanged : typing.ClassVar[Signal] = ... # labelAutoRotationChanged(float)
    labelsChanged            : typing.ClassVar[Signal] = ... # labelsChanged()
    maxChanged               : typing.ClassVar[Signal] = ... # maxChanged(float)
    minChanged               : typing.ClassVar[Signal] = ... # minChanged(float)
    orientationChanged       : typing.ClassVar[Signal] = ... # orientationChanged(QAbstract3DAxis::AxisOrientation)
    rangeChanged             : typing.ClassVar[Signal] = ... # rangeChanged(float,float)
    titleChanged             : typing.ClassVar[Signal] = ... # titleChanged(QString)
    titleFixedChanged        : typing.ClassVar[Signal] = ... # titleFixedChanged(bool)
    titleVisibilityChanged   : typing.ClassVar[Signal] = ... # titleVisibilityChanged(bool)

    class AxisOrientation(enum.Enum):

        AxisOrientationNone       = ...  # 0x0
        AxisOrientationX          = ...  # 0x1
        AxisOrientationY          = ...  # 0x2
        AxisOrientationZ          = ...  # 0x4

    class AxisType(enum.Enum):

        AxisTypeNone              = ...  # 0x0
        AxisTypeCategory          = ...  # 0x1
        AxisTypeValue             = ...  # 0x2


    def is_auto_adjust_range(self, /) -> bool: ...
    def is_title_fixed(self, /) -> bool: ...
    def is_title_visible(self, /) -> bool: ...
    def label_auto_rotation(self, /) -> float: ...
    def labels(self, /) -> typing.List[str]: ...
    def max(self, /) -> float: ...
    def min(self, /) -> float: ...
    def orientation(self, /) -> PySide6.QtDataVisualization.QAbstract3DAxis.AxisOrientation: ...
    def set_auto_adjust_range(self, autoAdjust: bool, /) -> None: ...
    def set_label_auto_rotation(self, angle: float, /) -> None: ...
    def set_labels(self, labels: collections.abc.Sequence[str], /) -> None: ...
    def set_max(self, max: float, /) -> None: ...
    def set_min(self, min: float, /) -> None: ...
    def set_range(self, min: float, max: float, /) -> None: ...
    def set_title(self, title: str, /) -> None: ...
    def set_title_fixed(self, fixed: bool, /) -> None: ...
    def set_title_visible(self, visible: bool, /) -> None: ...
    def title(self, /) -> str: ...
    def type(self, /) -> PySide6.QtDataVisualization.QAbstract3DAxis.AxisType: ...


class QAbstract3DGraph(PySide6.QtGui.QWindow):

    activeInputHandlerChanged: typing.ClassVar[Signal] = ... # activeInputHandlerChanged(QAbstract3DInputHandler*)
    activeThemeChanged       : typing.ClassVar[Signal] = ... # activeThemeChanged(Q3DTheme*)
    aspectRatioChanged       : typing.ClassVar[Signal] = ... # aspectRatioChanged(double)
    currentFpsChanged        : typing.ClassVar[Signal] = ... # currentFpsChanged(double)
    horizontalAspectRatioChanged: typing.ClassVar[Signal] = ... # horizontalAspectRatioChanged(double)
    localeChanged            : typing.ClassVar[Signal] = ... # localeChanged(QLocale)
    marginChanged            : typing.ClassVar[Signal] = ... # marginChanged(double)
    measureFpsChanged        : typing.ClassVar[Signal] = ... # measureFpsChanged(bool)
    optimizationHintsChanged : typing.ClassVar[Signal] = ... # optimizationHintsChanged(QAbstract3DGraph::OptimizationHints)
    orthoProjectionChanged   : typing.ClassVar[Signal] = ... # orthoProjectionChanged(bool)
    polarChanged             : typing.ClassVar[Signal] = ... # polarChanged(bool)
    queriedGraphPositionChanged: typing.ClassVar[Signal] = ... # queriedGraphPositionChanged(QVector3D)
    radialLabelOffsetChanged : typing.ClassVar[Signal] = ... # radialLabelOffsetChanged(float)
    reflectionChanged        : typing.ClassVar[Signal] = ... # reflectionChanged(bool)
    reflectivityChanged      : typing.ClassVar[Signal] = ... # reflectivityChanged(double)
    selectedElementChanged   : typing.ClassVar[Signal] = ... # selectedElementChanged(QAbstract3DGraph::ElementType)
    selectionModeChanged     : typing.ClassVar[Signal] = ... # selectionModeChanged(QAbstract3DGraph::SelectionFlags)
    shadowQualityChanged     : typing.ClassVar[Signal] = ... # shadowQualityChanged(QAbstract3DGraph::ShadowQuality)

    class ElementType(enum.Enum):

        ElementNone               = ...  # 0x0
        ElementSeries             = ...  # 0x1
        ElementAxisXLabel         = ...  # 0x2
        ElementAxisYLabel         = ...  # 0x3
        ElementAxisZLabel         = ...  # 0x4
        ElementCustomItem         = ...  # 0x5

    class OptimizationHint(enum.Flag):

        OptimizationDefault       = ...  # 0x0
        OptimizationStatic        = ...  # 0x1

    class SelectionFlag(enum.Flag):

        SelectionNone             = ...  # 0x0
        SelectionItem             = ...  # 0x1
        SelectionRow              = ...  # 0x2
        SelectionItemAndRow       = ...  # 0x3
        SelectionColumn           = ...  # 0x4
        SelectionItemAndColumn    = ...  # 0x5
        SelectionRowAndColumn     = ...  # 0x6
        SelectionItemRowAndColumn = ...  # 0x7
        SelectionSlice            = ...  # 0x8
        SelectionMultiSeries      = ...  # 0x10

    class ShadowQuality(enum.Enum):

        ShadowQualityNone         = ...  # 0x0
        ShadowQualityLow          = ...  # 0x1
        ShadowQualityMedium       = ...  # 0x2
        ShadowQualityHigh         = ...  # 0x3
        ShadowQualitySoftLow      = ...  # 0x4
        ShadowQualitySoftMedium   = ...  # 0x5
        ShadowQualitySoftHigh     = ...  # 0x6


    def active_input_handler(self, /) -> PySide6.QtDataVisualization.QAbstract3DInputHandler: ...
    def active_theme(self, /) -> PySide6.QtDataVisualization.Q3DTheme: ...
    def add_custom_item(self, item: PySide6.QtDataVisualization.QCustom3DItem, /) -> int: ...
    def add_input_handler(self, inputHandler: PySide6.QtDataVisualization.QAbstract3DInputHandler, /) -> None: ...
    def add_theme(self, theme: PySide6.QtDataVisualization.Q3DTheme, /) -> None: ...
    def aspect_ratio(self, /) -> float: ...
    def clear_selection(self, /) -> None: ...
    def current_fps(self, /) -> float: ...
    def custom_items(self, /) -> typing.List[PySide6.QtDataVisualization.QCustom3DItem]: ...
    def event(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def expose_event(self, event: PySide6.QtGui.QExposeEvent, /) -> None: ...
    def has_context(self, /) -> bool: ...
    def has_series(self, series: PySide6.QtDataVisualization.QAbstract3DSeries, /) -> bool: ...
    def horizontal_aspect_ratio(self, /) -> float: ...
    def input_handlers(self, /) -> typing.List[PySide6.QtDataVisualization.QAbstract3DInputHandler]: ...
    def is_ortho_projection(self, /) -> bool: ...
    def is_polar(self, /) -> bool: ...
    def is_reflection(self, /) -> bool: ...
    def locale(self, /) -> PySide6.QtCore.QLocale: ...
    def margin(self, /) -> float: ...
    def measure_fps(self, /) -> bool: ...
    def mouse_double_click_event(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_move_event(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_press_event(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_release_event(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def optimization_hints(self, /) -> PySide6.QtDataVisualization.QAbstract3DGraph.OptimizationHint: ...
    def queried_graph_position(self, /) -> PySide6.QtGui.QVector3D: ...
    def radial_label_offset(self, /) -> float: ...
    def reflectivity(self, /) -> float: ...
    def release_custom_item(self, item: PySide6.QtDataVisualization.QCustom3DItem, /) -> None: ...
    def release_input_handler(self, inputHandler: PySide6.QtDataVisualization.QAbstract3DInputHandler, /) -> None: ...
    def release_theme(self, theme: PySide6.QtDataVisualization.Q3DTheme, /) -> None: ...
    def remove_custom_item(self, item: PySide6.QtDataVisualization.QCustom3DItem, /) -> None: ...
    def remove_custom_item_at(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    def remove_custom_items(self, /) -> None: ...
    def render_to_image(self, /, msaaSamples: int | None = ..., imageSize: PySide6.QtCore.QSize = ...) -> PySide6.QtGui.QImage: ...
    def resize_event(self, event: PySide6.QtGui.QResizeEvent, /) -> None: ...
    def scene(self, /) -> PySide6.QtDataVisualization.Q3DScene: ...
    def selected_axis(self, /) -> PySide6.QtDataVisualization.QAbstract3DAxis: ...
    def selected_custom_item(self, /) -> PySide6.QtDataVisualization.QCustom3DItem: ...
    def selected_custom_item_index(self, /) -> int: ...
    def selected_element(self, /) -> PySide6.QtDataVisualization.QAbstract3DGraph.ElementType: ...
    def selected_label_index(self, /) -> int: ...
    def selection_mode(self, /) -> PySide6.QtDataVisualization.QAbstract3DGraph.SelectionFlag: ...
    def set_active_input_handler(self, inputHandler: PySide6.QtDataVisualization.QAbstract3DInputHandler, /) -> None: ...
    def set_active_theme(self, theme: PySide6.QtDataVisualization.Q3DTheme, /) -> None: ...
    def set_aspect_ratio(self, ratio: float, /) -> None: ...
    def set_horizontal_aspect_ratio(self, ratio: float, /) -> None: ...
    def set_locale(self, locale: PySide6.QtCore.QLocale | PySide6.QtCore.QLocale.Language, /) -> None: ...
    def set_margin(self, margin: float, /) -> None: ...
    def set_measure_fps(self, enable: bool, /) -> None: ...
    def set_optimization_hints(self, hints: PySide6.QtDataVisualization.QAbstract3DGraph.OptimizationHint, /) -> None: ...
    def set_ortho_projection(self, enable: bool, /) -> None: ...
    def set_polar(self, enable: bool, /) -> None: ...
    def set_radial_label_offset(self, offset: float, /) -> None: ...
    def set_reflection(self, enable: bool, /) -> None: ...
    def set_reflectivity(self, reflectivity: float, /) -> None: ...
    def set_selection_mode(self, mode: PySide6.QtDataVisualization.QAbstract3DGraph.SelectionFlag, /) -> None: ...
    def set_shadow_quality(self, quality: PySide6.QtDataVisualization.QAbstract3DGraph.ShadowQuality, /) -> None: ...
    def shadow_quality(self, /) -> PySide6.QtDataVisualization.QAbstract3DGraph.ShadowQuality: ...
    def shadows_supported(self, /) -> bool: ...
    def themes(self, /) -> typing.List[PySide6.QtDataVisualization.Q3DTheme]: ...
    def touch_event(self, event: PySide6.QtGui.QTouchEvent, /) -> None: ...
    def wheel_event(self, event: PySide6.QtGui.QWheelEvent, /) -> None: ...


class QAbstract3DInputHandler(PySide6.QtCore.QObject):

    inputViewChanged         : typing.ClassVar[Signal] = ... # inputViewChanged(QAbstract3DInputHandler::InputView)
    positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(QPoint)
    sceneChanged             : typing.ClassVar[Signal] = ... # sceneChanged(Q3DScene*)

    class InputView(enum.Enum):

        InputViewNone             = ...  # 0x0
        InputViewOnPrimary        = ...  # 0x1
        InputViewOnSecondary      = ...  # 0x2


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, input_view: PySide6.QtDataVisualization.QAbstract3DInputHandler.InputView | None = ..., input_position: PySide6.QtCore.QPoint | None = ..., scene: PySide6.QtDataVisualization.Q3DScene | None = ...) -> None: ...

    def input_position(self, /) -> PySide6.QtCore.QPoint: ...
    def input_view(self, /) -> PySide6.QtDataVisualization.QAbstract3DInputHandler.InputView: ...
    def mouse_double_click_event(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouse_move_event(self, event: PySide6.QtGui.QMouseEvent, mousePos: PySide6.QtCore.QPoint, /) -> None: ...
    def mouse_press_event(self, event: PySide6.QtGui.QMouseEvent, mousePos: PySide6.QtCore.QPoint, /) -> None: ...
    def mouse_release_event(self, event: PySide6.QtGui.QMouseEvent, mousePos: PySide6.QtCore.QPoint, /) -> None: ...
    def prev_distance(self, /) -> int: ...
    def previous_input_pos(self, /) -> PySide6.QtCore.QPoint: ...
    def scene(self, /) -> PySide6.QtDataVisualization.Q3DScene: ...
    def set_input_position(self, position: PySide6.QtCore.QPoint, /) -> None: ...
    def set_input_view(self, inputView: PySide6.QtDataVisualization.QAbstract3DInputHandler.InputView, /) -> None: ...
    def set_prev_distance(self, distance: int, /) -> None: ...
    def set_previous_input_pos(self, position: PySide6.QtCore.QPoint, /) -> None: ...
    def set_scene(self, scene: PySide6.QtDataVisualization.Q3DScene, /) -> None: ...
    def touch_event(self, event: PySide6.QtGui.QTouchEvent, /) -> None: ...
    def wheel_event(self, event: PySide6.QtGui.QWheelEvent, /) -> None: ...


class QAbstract3DSeries(PySide6.QtCore.QObject):

    baseColorChanged         : typing.ClassVar[Signal] = ... # baseColorChanged(QColor)
    baseGradientChanged      : typing.ClassVar[Signal] = ... # baseGradientChanged(QLinearGradient)
    colorStyleChanged        : typing.ClassVar[Signal] = ... # colorStyleChanged(Q3DTheme::ColorStyle)
    itemLabelChanged         : typing.ClassVar[Signal] = ... # itemLabelChanged(QString)
    itemLabelFormatChanged   : typing.ClassVar[Signal] = ... # itemLabelFormatChanged(QString)
    itemLabelVisibilityChanged: typing.ClassVar[Signal] = ... # itemLabelVisibilityChanged(bool)
    meshChanged              : typing.ClassVar[Signal] = ... # meshChanged(QAbstract3DSeries::Mesh)
    meshRotationChanged      : typing.ClassVar[Signal] = ... # meshRotationChanged(QQuaternion)
    meshSmoothChanged        : typing.ClassVar[Signal] = ... # meshSmoothChanged(bool)
    multiHighlightColorChanged: typing.ClassVar[Signal] = ... # multiHighlightColorChanged(QColor)
    multiHighlightGradientChanged: typing.ClassVar[Signal] = ... # multiHighlightGradientChanged(QLinearGradient)
    nameChanged              : typing.ClassVar[Signal] = ... # nameChanged(QString)
    singleHighlightColorChanged: typing.ClassVar[Signal] = ... # singleHighlightColorChanged(QColor)
    singleHighlightGradientChanged: typing.ClassVar[Signal] = ... # singleHighlightGradientChanged(QLinearGradient)
    userDefinedMeshChanged   : typing.ClassVar[Signal] = ... # userDefinedMeshChanged(QString)
    visibilityChanged        : typing.ClassVar[Signal] = ... # visibilityChanged(bool)

    class Mesh(enum.Enum):

        MeshUserDefined           = ...  # 0x0
        MeshBar                   = ...  # 0x1
        MeshCube                  = ...  # 0x2
        MeshPyramid               = ...  # 0x3
        MeshCone                  = ...  # 0x4
        MeshCylinder              = ...  # 0x5
        MeshBevelBar              = ...  # 0x6
        MeshBevelCube             = ...  # 0x7
        MeshSphere                = ...  # 0x8
        MeshMinimal               = ...  # 0x9
        MeshArrow                 = ...  # 0xa
        MeshPoint                 = ...  # 0xb

    class SeriesType(enum.Enum):

        SeriesTypeNone            = ...  # 0x0
        SeriesTypeBar             = ...  # 0x1
        SeriesTypeScatter         = ...  # 0x2
        SeriesTypeSurface         = ...  # 0x4


    def base_color(self, /) -> PySide6.QtGui.QColor: ...
    def base_gradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    def color_style(self, /) -> PySide6.QtDataVisualization.Q3DTheme.ColorStyle: ...
    def is_item_label_visible(self, /) -> bool: ...
    def is_mesh_smooth(self, /) -> bool: ...
    def is_visible(self, /) -> bool: ...
    def item_label(self, /) -> str: ...
    def item_label_format(self, /) -> str: ...
    def mesh(self, /) -> PySide6.QtDataVisualization.QAbstract3DSeries.Mesh: ...
    def mesh_rotation(self, /) -> PySide6.QtGui.QQuaternion: ...
    def multi_highlight_color(self, /) -> PySide6.QtGui.QColor: ...
    def multi_highlight_gradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    def name(self, /) -> str: ...
    def set_base_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_base_gradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    def set_color_style(self, style: PySide6.QtDataVisualization.Q3DTheme.ColorStyle, /) -> None: ...
    def set_item_label_format(self, format: str, /) -> None: ...
    def set_item_label_visible(self, visible: bool, /) -> None: ...
    def set_mesh(self, mesh: PySide6.QtDataVisualization.QAbstract3DSeries.Mesh, /) -> None: ...
    def set_mesh_axis_and_angle(self, axis: PySide6.QtGui.QVector3D, angle: float, /) -> None: ...
    def set_mesh_rotation(self, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...
    def set_mesh_smooth(self, enable: bool, /) -> None: ...
    def set_multi_highlight_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_multi_highlight_gradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    def set_name(self, name: str, /) -> None: ...
    def set_single_highlight_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_single_highlight_gradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    def set_user_defined_mesh(self, fileName: str, /) -> None: ...
    def set_visible(self, visible: bool, /) -> None: ...
    def single_highlight_color(self, /) -> PySide6.QtGui.QColor: ...
    def single_highlight_gradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    def type(self, /) -> PySide6.QtDataVisualization.QAbstract3DSeries.SeriesType: ...
    def user_defined_mesh(self, /) -> str: ...


class QAbstractDataProxy(PySide6.QtCore.QObject):

    class DataType(enum.Enum):

        DataTypeNone              = ...  # 0x0
        DataTypeBar               = ...  # 0x1
        DataTypeScatter           = ...  # 0x2
        DataTypeSurface           = ...  # 0x4


    def type(self, /) -> PySide6.QtDataVisualization.QAbstractDataProxy.DataType: ...


class QBar3DSeries(PySide6.QtDataVisualization.QAbstract3DSeries):

    dataProxyChanged         : typing.ClassVar[Signal] = ... # dataProxyChanged(QBarDataProxy*)
    meshAngleChanged         : typing.ClassVar[Signal] = ... # meshAngleChanged(float)
    rowColorsChanged         : typing.ClassVar[Signal] = ... # rowColorsChanged(QList<QColor>)
    selectedBarChanged       : typing.ClassVar[Signal] = ... # selectedBarChanged(QPoint)

    @typing.overload
    def __init__(self, data_proxy: PySide6.QtDataVisualization.QBarDataProxy, /, parent: PySide6.QtCore.QObject | None = ..., *, selected_bar: PySide6.QtCore.QPoint | None = ..., mesh_angle: float | None = ..., row_colors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, data_proxy: PySide6.QtDataVisualization.QBarDataProxy | None = ..., selected_bar: PySide6.QtCore.QPoint | None = ..., mesh_angle: float | None = ..., row_colors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ...) -> None: ...

    def data_proxy(self, /) -> PySide6.QtDataVisualization.QBarDataProxy: ...
    @staticmethod
    def invalid_selection_position() -> PySide6.QtCore.QPoint: ...
    def mesh_angle(self, /) -> float: ...
    def row_colors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    def selected_bar(self, /) -> PySide6.QtCore.QPoint: ...
    def set_data_proxy(self, proxy: PySide6.QtDataVisualization.QBarDataProxy, /) -> None: ...
    def set_mesh_angle(self, angle: float, /) -> None: ...
    def set_row_colors(self, colors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    def set_selected_bar(self, position: PySide6.QtCore.QPoint, /) -> None: ...


class QBarDataItem(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtDataVisualization.QBarDataItem, /) -> None: ...
    @typing.overload
    def __init__(self, value: float, /) -> None: ...
    @typing.overload
    def __init__(self, value: float, angle: float, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def create_extra_data(self, /) -> None: ...
    def rotation(self, /) -> float: ...
    def set_rotation(self, angle: float, /) -> None: ...
    def set_value(self, val: float, /) -> None: ...
    def value(self, /) -> float: ...


class QBarDataProxy(PySide6.QtDataVisualization.QAbstractDataProxy):

    arrayReset               : typing.ClassVar[Signal] = ... # arrayReset()
    columnLabelsChanged      : typing.ClassVar[Signal] = ... # columnLabelsChanged()
    itemChanged              : typing.ClassVar[Signal] = ... # itemChanged(int,int)
    rowCountChanged          : typing.ClassVar[Signal] = ... # rowCountChanged(int)
    rowLabelsChanged         : typing.ClassVar[Signal] = ... # rowLabelsChanged()
    rowsAdded                : typing.ClassVar[Signal] = ... # rowsAdded(int,int)
    rowsChanged              : typing.ClassVar[Signal] = ... # rowsChanged(int,int)
    rowsInserted             : typing.ClassVar[Signal] = ... # rowsInserted(int,int)
    rowsRemoved              : typing.ClassVar[Signal] = ... # rowsRemoved(int,int)
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged(QBar3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, row_count: int | None = ..., row_labels: collections.abc.Sequence[str] | None = ..., column_labels: collections.abc.Sequence[str] | None = ..., series: PySide6.QtDataVisualization.QBar3DSeries | None = ...) -> None: ...

    @typing.overload
    def add_row(self, arg__1: collections.abc.Sequence[PySide6.QtDataVisualization.QBarDataItem], /) -> int: ...
    @typing.overload
    def add_row(self, arg__1: collections.abc.Sequence[PySide6.QtDataVisualization.QBarDataItem], arg__2: str, /) -> int: ...
    @typing.overload
    def add_rows(self, rows: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], /) -> int: ...
    @typing.overload
    def add_rows(self, rows: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], labels: collections.abc.Sequence[str], /) -> int: ...
    def array(self, /) -> typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]]: ...
    def column_labels(self, /) -> typing.List[str]: ...
    @typing.overload
    def insert_row(self, arg__1: int, arg__2: collections.abc.Sequence[PySide6.QtDataVisualization.QBarDataItem], /) -> None: ...
    @typing.overload
    def insert_row(self, arg__1: int, arg__2: collections.abc.Sequence[PySide6.QtDataVisualization.QBarDataItem], arg__3: str, /) -> None: ...
    @typing.overload
    def insert_rows(self, rowIndex: int, rows: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], /) -> None: ...
    @typing.overload
    def insert_rows(self, rowIndex: int, rows: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], labels: collections.abc.Sequence[str], /) -> None: ...
    @typing.overload
    def item_at(self, position: PySide6.QtCore.QPoint, /) -> PySide6.QtDataVisualization.QBarDataItem: ...
    @typing.overload
    def item_at(self, rowIndex: int, columnIndex: int, /) -> PySide6.QtDataVisualization.QBarDataItem: ...
    def remove_rows(self, rowIndex: int, removeCount: int, /, removeLabels: bool = ...) -> None: ...
    @typing.overload
    def reset_array(self, /) -> None: ...
    @typing.overload
    def reset_array(self, arg__1: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], /) -> None: ...
    @typing.overload
    def reset_array(self, arg__1: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], arg__2: collections.abc.Sequence[str], arg__3: collections.abc.Sequence[str], /) -> None: ...
    def row_at(self, rowIndex: int, /) -> typing.List[PySide6.QtDataVisualization.QBarDataItem]: ...
    def row_count(self, /) -> int: ...
    def row_labels(self, /) -> typing.List[str]: ...
    def series(self, /) -> PySide6.QtDataVisualization.QBar3DSeries: ...
    def set_column_labels(self, labels: collections.abc.Sequence[str], /) -> None: ...
    @typing.overload
    def set_item(self, position: PySide6.QtCore.QPoint, item: PySide6.QtDataVisualization.QBarDataItem | float, /) -> None: ...
    @typing.overload
    def set_item(self, rowIndex: int, columnIndex: int, item: PySide6.QtDataVisualization.QBarDataItem | float, /) -> None: ...
    @typing.overload
    def set_row(self, arg__1: int, arg__2: collections.abc.Sequence[PySide6.QtDataVisualization.QBarDataItem], /) -> None: ...
    @typing.overload
    def set_row(self, arg__1: int, arg__2: collections.abc.Sequence[PySide6.QtDataVisualization.QBarDataItem], arg__3: str, /) -> None: ...
    def set_row_labels(self, labels: collections.abc.Sequence[str], /) -> None: ...
    @typing.overload
    def set_rows(self, rowIndex: int, rows: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], /) -> None: ...
    @typing.overload
    def set_rows(self, rowIndex: int, rows: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], labels: collections.abc.Sequence[str], /) -> None: ...


class QCategory3DAxis(PySide6.QtDataVisualization.QAbstract3DAxis):

    labelsChanged            : typing.ClassVar[Signal] = ... # labelsChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, labels: collections.abc.Sequence[str] | None = ...) -> None: ...

    def labels(self, /) -> typing.List[str]: ...
    def set_labels(self, labels: collections.abc.Sequence[str], /) -> None: ...


class QCustom3DItem(PySide6.QtCore.QObject):

    meshFileChanged          : typing.ClassVar[Signal] = ... # meshFileChanged(QString)
    positionAbsoluteChanged  : typing.ClassVar[Signal] = ... # positionAbsoluteChanged(bool)
    positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(QVector3D)
    rotationChanged          : typing.ClassVar[Signal] = ... # rotationChanged(QQuaternion)
    scalingAbsoluteChanged   : typing.ClassVar[Signal] = ... # scalingAbsoluteChanged(bool)
    scalingChanged           : typing.ClassVar[Signal] = ... # scalingChanged(QVector3D)
    shadowCastingChanged     : typing.ClassVar[Signal] = ... # shadowCastingChanged(bool)
    textureFileChanged       : typing.ClassVar[Signal] = ... # textureFileChanged(QString)
    visibleChanged           : typing.ClassVar[Signal] = ... # visibleChanged(bool)

    @typing.overload
    def __init__(self, mesh_file: str, position: PySide6.QtGui.QVector3D, scaling: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, texture: PySide6.QtGui.QImage, /, parent: PySide6.QtCore.QObject | None = ..., *, texture_file: str | None = ..., position_absolute: bool | None = ..., visible: bool | None = ..., shadow_casting: bool | None = ..., scaling_absolute: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, mesh_file: str | None = ..., texture_file: str | None = ..., position: PySide6.QtGui.QVector3D | None = ..., position_absolute: bool | None = ..., scaling: PySide6.QtGui.QVector3D | None = ..., rotation: PySide6.QtGui.QQuaternion | None = ..., visible: bool | None = ..., shadow_casting: bool | None = ..., scaling_absolute: bool | None = ...) -> None: ...

    def is_position_absolute(self, /) -> bool: ...
    def is_scaling_absolute(self, /) -> bool: ...
    def is_shadow_casting(self, /) -> bool: ...
    def is_visible(self, /) -> bool: ...
    def mesh_file(self, /) -> str: ...
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    def rotation(self, /) -> PySide6.QtGui.QQuaternion: ...
    def scaling(self, /) -> PySide6.QtGui.QVector3D: ...
    def set_mesh_file(self, meshFile: str, /) -> None: ...
    def set_position(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_position_absolute(self, positionAbsolute: bool, /) -> None: ...
    def set_rotation(self, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...
    def set_rotation_axis_and_angle(self, axis: PySide6.QtGui.QVector3D, angle: float, /) -> None: ...
    def set_scaling(self, scaling: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_scaling_absolute(self, scalingAbsolute: bool, /) -> None: ...
    def set_shadow_casting(self, enabled: bool, /) -> None: ...
    def set_texture_file(self, textureFile: str, /) -> None: ...
    def set_texture_image(self, textureImage: PySide6.QtGui.QImage, /) -> None: ...
    def set_visible(self, visible: bool, /) -> None: ...
    def texture_file(self, /) -> str: ...


class QCustom3DLabel(PySide6.QtDataVisualization.QCustom3DItem):

    backgroundColorChanged   : typing.ClassVar[Signal] = ... # backgroundColorChanged(QColor)
    backgroundEnabledChanged : typing.ClassVar[Signal] = ... # backgroundEnabledChanged(bool)
    borderEnabledChanged     : typing.ClassVar[Signal] = ... # borderEnabledChanged(bool)
    facingCameraChanged      : typing.ClassVar[Signal] = ... # facingCameraChanged(bool)
    fontChanged              : typing.ClassVar[Signal] = ... # fontChanged(QFont)
    textChanged              : typing.ClassVar[Signal] = ... # textChanged(QString)
    textColorChanged         : typing.ClassVar[Signal] = ... # textColorChanged(QColor)

    @typing.overload
    def __init__(self, text: str, font: PySide6.QtGui.QFont, position: PySide6.QtGui.QVector3D, scaling: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, /, parent: PySide6.QtCore.QObject | None = ..., *, text_color: PySide6.QtGui.QColor | None = ..., background_color: PySide6.QtGui.QColor | None = ..., border_enabled: bool | None = ..., background_enabled: bool | None = ..., facing_camera: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, text: str | None = ..., font: PySide6.QtGui.QFont | None = ..., text_color: PySide6.QtGui.QColor | None = ..., background_color: PySide6.QtGui.QColor | None = ..., border_enabled: bool | None = ..., background_enabled: bool | None = ..., facing_camera: bool | None = ...) -> None: ...

    def background_color(self, /) -> PySide6.QtGui.QColor: ...
    def font(self, /) -> PySide6.QtGui.QFont: ...
    def is_background_enabled(self, /) -> bool: ...
    def is_border_enabled(self, /) -> bool: ...
    def is_facing_camera(self, /) -> bool: ...
    def set_background_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_background_enabled(self, enabled: bool, /) -> None: ...
    def set_border_enabled(self, enabled: bool, /) -> None: ...
    def set_facing_camera(self, enabled: bool, /) -> None: ...
    def set_font(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    def set_text(self, text: str, /) -> None: ...
    def set_text_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def text(self, /) -> str: ...
    def text_color(self, /) -> PySide6.QtGui.QColor: ...


class QCustom3DVolume(PySide6.QtDataVisualization.QCustom3DItem):

    alphaMultiplierChanged   : typing.ClassVar[Signal] = ... # alphaMultiplierChanged(float)
    colorTableChanged        : typing.ClassVar[Signal] = ... # colorTableChanged()
    drawSliceFramesChanged   : typing.ClassVar[Signal] = ... # drawSliceFramesChanged(bool)
    drawSlicesChanged        : typing.ClassVar[Signal] = ... # drawSlicesChanged(bool)
    preserveOpacityChanged   : typing.ClassVar[Signal] = ... # preserveOpacityChanged(bool)
    sliceFrameColorChanged   : typing.ClassVar[Signal] = ... # sliceFrameColorChanged(QColor)
    sliceFrameGapsChanged    : typing.ClassVar[Signal] = ... # sliceFrameGapsChanged(QVector3D)
    sliceFrameThicknessesChanged: typing.ClassVar[Signal] = ... # sliceFrameThicknessesChanged(QVector3D)
    sliceFrameWidthsChanged  : typing.ClassVar[Signal] = ... # sliceFrameWidthsChanged(QVector3D)
    sliceIndexXChanged       : typing.ClassVar[Signal] = ... # sliceIndexXChanged(int)
    sliceIndexYChanged       : typing.ClassVar[Signal] = ... # sliceIndexYChanged(int)
    sliceIndexZChanged       : typing.ClassVar[Signal] = ... # sliceIndexZChanged(int)
    textureDataChanged       : typing.ClassVar[Signal] = ... # textureDataChanged(QList<uchar>*)
    textureDepthChanged      : typing.ClassVar[Signal] = ... # textureDepthChanged(int)
    textureFormatChanged     : typing.ClassVar[Signal] = ... # textureFormatChanged(QImage::Format)
    textureHeightChanged     : typing.ClassVar[Signal] = ... # textureHeightChanged(int)
    textureWidthChanged      : typing.ClassVar[Signal] = ... # textureWidthChanged(int)
    useHighDefShaderChanged  : typing.ClassVar[Signal] = ... # useHighDefShaderChanged(bool)

    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, scaling: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, texture_width: int, texture_height: int, texture_depth: int, texture_data: collections.abc.Sequence[int], textureFormat: PySide6.QtGui.QImage.Format, color_table: collections.abc.Sequence[int], /, parent: PySide6.QtCore.QObject | None = ..., *, slice_index_x: int | None = ..., slice_index_y: int | None = ..., slice_index_z: int | None = ..., alpha_multiplier: float | None = ..., preserve_opacity: bool | None = ..., use_high_def_shader: bool | None = ..., draw_slices: bool | None = ..., draw_slice_frames: bool | None = ..., slice_frame_color: PySide6.QtGui.QColor | None = ..., slice_frame_widths: PySide6.QtGui.QVector3D | None = ..., slice_frame_gaps: PySide6.QtGui.QVector3D | None = ..., slice_frame_thicknesses: PySide6.QtGui.QVector3D | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, texture_width: int | None = ..., texture_height: int | None = ..., texture_depth: int | None = ..., slice_index_x: int | None = ..., slice_index_y: int | None = ..., slice_index_z: int | None = ..., color_table: collections.abc.Sequence[int] | None = ..., texture_data: collections.abc.Sequence[int] | None = ..., alpha_multiplier: float | None = ..., preserve_opacity: bool | None = ..., use_high_def_shader: bool | None = ..., draw_slices: bool | None = ..., draw_slice_frames: bool | None = ..., slice_frame_color: PySide6.QtGui.QColor | None = ..., slice_frame_widths: PySide6.QtGui.QVector3D | None = ..., slice_frame_gaps: PySide6.QtGui.QVector3D | None = ..., slice_frame_thicknesses: PySide6.QtGui.QVector3D | None = ...) -> None: ...

    def alpha_multiplier(self, /) -> float: ...
    def color_table(self, /) -> typing.List[int]: ...
    def create_texture_data(self, images: collections.abc.Sequence[PySide6.QtGui.QImage], /) -> typing.List[int]: ...
    def draw_slice_frames(self, /) -> bool: ...
    def draw_slices(self, /) -> bool: ...
    def preserve_opacity(self, /) -> bool: ...
    def render_slice(self, axis: PySide6.QtCore.Qt.Axis, index: int, /) -> PySide6.QtGui.QImage: ...
    def set_alpha_multiplier(self, mult: float, /) -> None: ...
    def set_color_table(self, colors: collections.abc.Sequence[int], /) -> None: ...
    def set_draw_slice_frames(self, enable: bool, /) -> None: ...
    def set_draw_slices(self, enable: bool, /) -> None: ...
    def set_preserve_opacity(self, enable: bool, /) -> None: ...
    def set_slice_frame_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_slice_frame_gaps(self, values: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_slice_frame_thicknesses(self, values: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_slice_frame_widths(self, values: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_slice_index_x(self, value: int, /) -> None: ...
    def set_slice_index_y(self, value: int, /) -> None: ...
    def set_slice_index_z(self, value: int, /) -> None: ...
    def set_slice_indices(self, x: int, y: int, z: int, /) -> None: ...
    @typing.overload
    def set_sub_texture_data(self, axis: PySide6.QtCore.Qt.Axis, index: int, image: PySide6.QtGui.QImage, /) -> None: ...
    @typing.overload
    def set_sub_texture_data(self, axis: PySide6.QtCore.Qt.Axis, index: int, data: bytes | bytearray | memoryview, /) -> None: ...
    def set_texture_data(self, arg__1: collections.abc.Sequence[int], /) -> None: ...
    def set_texture_depth(self, value: int, /) -> None: ...
    def set_texture_dimensions(self, width: int, height: int, depth: int, /) -> None: ...
    def set_texture_format(self, format: PySide6.QtGui.QImage.Format, /) -> None: ...
    def set_texture_height(self, value: int, /) -> None: ...
    def set_texture_width(self, value: int, /) -> None: ...
    def set_use_high_def_shader(self, enable: bool, /) -> None: ...
    def slice_frame_color(self, /) -> PySide6.QtGui.QColor: ...
    def slice_frame_gaps(self, /) -> PySide6.QtGui.QVector3D: ...
    def slice_frame_thicknesses(self, /) -> PySide6.QtGui.QVector3D: ...
    def slice_frame_widths(self, /) -> PySide6.QtGui.QVector3D: ...
    def slice_index_x(self, /) -> int: ...
    def slice_index_y(self, /) -> int: ...
    def slice_index_z(self, /) -> int: ...
    def texture_data(self, /) -> typing.List[int]: ...
    def texture_data_width(self, /) -> int: ...
    def texture_depth(self, /) -> int: ...
    def texture_format(self, /) -> PySide6.QtGui.QImage.Format: ...
    def texture_height(self, /) -> int: ...
    def texture_width(self, /) -> int: ...
    def use_high_def_shader(self, /) -> bool: ...


class QHeightMapSurfaceDataProxy(PySide6.QtDataVisualization.QSurfaceDataProxy):

    autoScaleYChanged        : typing.ClassVar[Signal] = ... # autoScaleYChanged(bool)
    heightMapChanged         : typing.ClassVar[Signal] = ... # heightMapChanged(QImage)
    heightMapFileChanged     : typing.ClassVar[Signal] = ... # heightMapFileChanged(QString)
    maxXValueChanged         : typing.ClassVar[Signal] = ... # maxXValueChanged(float)
    maxYValueChanged         : typing.ClassVar[Signal] = ... # maxYValueChanged(float)
    maxZValueChanged         : typing.ClassVar[Signal] = ... # maxZValueChanged(float)
    minXValueChanged         : typing.ClassVar[Signal] = ... # minXValueChanged(float)
    minYValueChanged         : typing.ClassVar[Signal] = ... # minYValueChanged(float)
    minZValueChanged         : typing.ClassVar[Signal] = ... # minZValueChanged(float)

    @typing.overload
    def __init__(self, image: PySide6.QtGui.QImage, /, parent: PySide6.QtCore.QObject | None = ..., *, height_map: PySide6.QtGui.QImage | None = ..., height_map_file: str | None = ..., minXValue: float | None = ..., maxXValue: float | None = ..., minZValue: float | None = ..., maxZValue: float | None = ..., minYValue: float | None = ..., maxYValue: float | None = ..., auto_scale_y: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, filename: str, /, parent: PySide6.QtCore.QObject | None = ..., *, height_map: PySide6.QtGui.QImage | None = ..., height_map_file: str | None = ..., minXValue: float | None = ..., maxXValue: float | None = ..., minZValue: float | None = ..., maxZValue: float | None = ..., minYValue: float | None = ..., maxYValue: float | None = ..., auto_scale_y: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, height_map: PySide6.QtGui.QImage | None = ..., height_map_file: str | None = ..., minXValue: float | None = ..., maxXValue: float | None = ..., minZValue: float | None = ..., maxZValue: float | None = ..., minYValue: float | None = ..., maxYValue: float | None = ..., auto_scale_y: bool | None = ...) -> None: ...

    def auto_scale_y(self, /) -> bool: ...
    def height_map(self, /) -> PySide6.QtGui.QImage: ...
    def height_map_file(self, /) -> str: ...
    def maxXValue(self, /) -> float: ...
    def maxYValue(self, /) -> float: ...
    def maxZValue(self, /) -> float: ...
    def minXValue(self, /) -> float: ...
    def minYValue(self, /) -> float: ...
    def minZValue(self, /) -> float: ...
    def setMaxXValue(self, max: float, /) -> None: ...
    def setMaxYValue(self, max: float, /) -> None: ...
    def setMaxZValue(self, max: float, /) -> None: ...
    def setMinXValue(self, min: float, /) -> None: ...
    def setMinYValue(self, min: float, /) -> None: ...
    def setMinZValue(self, min: float, /) -> None: ...
    def set_auto_scale_y(self, enabled: bool, /) -> None: ...
    def set_height_map(self, image: PySide6.QtGui.QImage, /) -> None: ...
    def set_height_map_file(self, filename: str, /) -> None: ...
    def set_value_ranges(self, minX: float, maxX: float, minZ: float, maxZ: float, /) -> None: ...


class QIntList: ...


class QItemModelBarDataProxy(PySide6.QtDataVisualization.QBarDataProxy):

    autoColumnCategoriesChanged: typing.ClassVar[Signal] = ... # autoColumnCategoriesChanged(bool)
    autoRowCategoriesChanged : typing.ClassVar[Signal] = ... # autoRowCategoriesChanged(bool)
    columnCategoriesChanged  : typing.ClassVar[Signal] = ... # columnCategoriesChanged()
    columnRoleChanged        : typing.ClassVar[Signal] = ... # columnRoleChanged(QString)
    columnRolePatternChanged : typing.ClassVar[Signal] = ... # columnRolePatternChanged(QRegularExpression)
    columnRoleReplaceChanged : typing.ClassVar[Signal] = ... # columnRoleReplaceChanged(QString)
    itemModelChanged         : typing.ClassVar[Signal] = ... # itemModelChanged(const QAbstractItemModel*)
    multiMatchBehaviorChanged: typing.ClassVar[Signal] = ... # multiMatchBehaviorChanged(MultiMatchBehavior)
    rotationRoleChanged      : typing.ClassVar[Signal] = ... # rotationRoleChanged(QString)
    rotationRolePatternChanged: typing.ClassVar[Signal] = ... # rotationRolePatternChanged(QRegularExpression)
    rotationRoleReplaceChanged: typing.ClassVar[Signal] = ... # rotationRoleReplaceChanged(QString)
    rowCategoriesChanged     : typing.ClassVar[Signal] = ... # rowCategoriesChanged()
    rowRoleChanged           : typing.ClassVar[Signal] = ... # rowRoleChanged(QString)
    rowRolePatternChanged    : typing.ClassVar[Signal] = ... # rowRolePatternChanged(QRegularExpression)
    rowRoleReplaceChanged    : typing.ClassVar[Signal] = ... # rowRoleReplaceChanged(QString)
    useModelCategoriesChanged: typing.ClassVar[Signal] = ... # useModelCategoriesChanged(bool)
    valueRoleChanged         : typing.ClassVar[Signal] = ... # valueRoleChanged(QString)
    valueRolePatternChanged  : typing.ClassVar[Signal] = ... # valueRolePatternChanged(QRegularExpression)
    valueRoleReplaceChanged  : typing.ClassVar[Signal] = ... # valueRoleReplaceChanged(QString)

    class MultiMatchBehavior(enum.Enum):

        MMBFirst                  = ...  # 0x0
        MMBLast                   = ...  # 0x1
        MMBAverage                = ...  # 0x2
        MMBCumulative             = ...  # 0x3


    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, value_role: str, rotation_role: str, row_categories: collections.abc.Sequence[str], column_categories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, value_role: str, rotation_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, value_role: str, row_categories: collections.abc.Sequence[str], column_categories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, rotation_role: str | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, value_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rotation_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, value_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, row_role: str | None = ..., column_role: str | None = ..., rotation_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, /, parent: PySide6.QtCore.QObject | None = ..., *, row_role: str | None = ..., column_role: str | None = ..., value_role: str | None = ..., rotation_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, item_model: PySide6.QtCore.QAbstractItemModel | None = ..., row_role: str | None = ..., column_role: str | None = ..., value_role: str | None = ..., rotation_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., value_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., value_role_replace: str | None = ..., rotation_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...

    def auto_column_categories(self, /) -> bool: ...
    def auto_row_categories(self, /) -> bool: ...
    def column_categories(self, /) -> typing.List[str]: ...
    def column_category_index(self, category: str, /) -> int: ...
    def column_role(self, /) -> str: ...
    def column_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def column_role_replace(self, /) -> str: ...
    def item_model(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    def multi_match_behavior(self, /) -> PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior: ...
    def remap(self, rowRole: str, columnRole: str, valueRole: str, rotationRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /) -> None: ...
    def rotation_role(self, /) -> str: ...
    def rotation_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def rotation_role_replace(self, /) -> str: ...
    def row_categories(self, /) -> typing.List[str]: ...
    def row_category_index(self, category: str, /) -> int: ...
    def row_role(self, /) -> str: ...
    def row_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def row_role_replace(self, /) -> str: ...
    def set_auto_column_categories(self, enable: bool, /) -> None: ...
    def set_auto_row_categories(self, enable: bool, /) -> None: ...
    def set_column_categories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def set_column_role(self, role: str, /) -> None: ...
    def set_column_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_column_role_replace(self, replace: str, /) -> None: ...
    def set_item_model(self, itemModel: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    def set_multi_match_behavior(self, behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior, /) -> None: ...
    def set_rotation_role(self, role: str, /) -> None: ...
    def set_rotation_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_rotation_role_replace(self, replace: str, /) -> None: ...
    def set_row_categories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def set_row_role(self, role: str, /) -> None: ...
    def set_row_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_row_role_replace(self, replace: str, /) -> None: ...
    def set_use_model_categories(self, enable: bool, /) -> None: ...
    def set_value_role(self, role: str, /) -> None: ...
    def set_value_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_value_role_replace(self, replace: str, /) -> None: ...
    def use_model_categories(self, /) -> bool: ...
    def value_role(self, /) -> str: ...
    def value_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def value_role_replace(self, /) -> str: ...


class QItemModelScatterDataProxy(PySide6.QtDataVisualization.QScatterDataProxy):

    itemModelChanged         : typing.ClassVar[Signal] = ... # itemModelChanged(const QAbstractItemModel*)
    rotationRoleChanged      : typing.ClassVar[Signal] = ... # rotationRoleChanged(QString)
    rotationRolePatternChanged: typing.ClassVar[Signal] = ... # rotationRolePatternChanged(QRegularExpression)
    rotationRoleReplaceChanged: typing.ClassVar[Signal] = ... # rotationRoleReplaceChanged(QString)
    xPosRoleChanged          : typing.ClassVar[Signal] = ... # xPosRoleChanged(QString)
    xPosRolePatternChanged   : typing.ClassVar[Signal] = ... # xPosRolePatternChanged(QRegularExpression)
    xPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # xPosRoleReplaceChanged(QString)
    yPosRoleChanged          : typing.ClassVar[Signal] = ... # yPosRoleChanged(QString)
    yPosRolePatternChanged   : typing.ClassVar[Signal] = ... # yPosRolePatternChanged(QRegularExpression)
    yPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # yPosRoleReplaceChanged(QString)
    zPosRoleChanged          : typing.ClassVar[Signal] = ... # zPosRoleChanged(QString)
    zPosRolePatternChanged   : typing.ClassVar[Signal] = ... # zPosRolePatternChanged(QRegularExpression)
    zPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # zPosRoleReplaceChanged(QString)

    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, x_pos_role: str, y_pos_role: str, z_pos_role: str, rotation_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., rotation_role_replace: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, x_pos_role: str, y_pos_role: str, z_pos_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rotation_role: str | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., rotation_role_replace: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, /, parent: PySide6.QtCore.QObject | None = ..., *, x_pos_role: str | None = ..., y_pos_role: str | None = ..., z_pos_role: str | None = ..., rotation_role: str | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., rotation_role_replace: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, item_model: PySide6.QtCore.QAbstractItemModel | None = ..., x_pos_role: str | None = ..., y_pos_role: str | None = ..., z_pos_role: str | None = ..., rotation_role: str | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., rotation_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., rotation_role_replace: str | None = ...) -> None: ...

    def item_model(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    def remap(self, xPosRole: str, yPosRole: str, zPosRole: str, rotationRole: str, /) -> None: ...
    def rotation_role(self, /) -> str: ...
    def rotation_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def rotation_role_replace(self, /) -> str: ...
    def setXPosRole(self, role: str, /) -> None: ...
    def setXPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def setXPosRoleReplace(self, replace: str, /) -> None: ...
    def setYPosRole(self, role: str, /) -> None: ...
    def setYPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def setYPosRoleReplace(self, replace: str, /) -> None: ...
    def setZPosRole(self, role: str, /) -> None: ...
    def setZPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def setZPosRoleReplace(self, replace: str, /) -> None: ...
    def set_item_model(self, itemModel: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    def set_rotation_role(self, role: str, /) -> None: ...
    def set_rotation_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_rotation_role_replace(self, replace: str, /) -> None: ...
    def x_pos_role(self, /) -> str: ...
    def x_pos_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def x_pos_role_replace(self, /) -> str: ...
    def y_pos_role(self, /) -> str: ...
    def y_pos_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def y_pos_role_replace(self, /) -> str: ...
    def z_pos_role(self, /) -> str: ...
    def z_pos_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def z_pos_role_replace(self, /) -> str: ...


class QItemModelSurfaceDataProxy(PySide6.QtDataVisualization.QSurfaceDataProxy):

    autoColumnCategoriesChanged: typing.ClassVar[Signal] = ... # autoColumnCategoriesChanged(bool)
    autoRowCategoriesChanged : typing.ClassVar[Signal] = ... # autoRowCategoriesChanged(bool)
    columnCategoriesChanged  : typing.ClassVar[Signal] = ... # columnCategoriesChanged()
    columnRoleChanged        : typing.ClassVar[Signal] = ... # columnRoleChanged(QString)
    columnRolePatternChanged : typing.ClassVar[Signal] = ... # columnRolePatternChanged(QRegularExpression)
    columnRoleReplaceChanged : typing.ClassVar[Signal] = ... # columnRoleReplaceChanged(QString)
    itemModelChanged         : typing.ClassVar[Signal] = ... # itemModelChanged(const QAbstractItemModel*)
    multiMatchBehaviorChanged: typing.ClassVar[Signal] = ... # multiMatchBehaviorChanged(MultiMatchBehavior)
    rowCategoriesChanged     : typing.ClassVar[Signal] = ... # rowCategoriesChanged()
    rowRoleChanged           : typing.ClassVar[Signal] = ... # rowRoleChanged(QString)
    rowRolePatternChanged    : typing.ClassVar[Signal] = ... # rowRolePatternChanged(QRegularExpression)
    rowRoleReplaceChanged    : typing.ClassVar[Signal] = ... # rowRoleReplaceChanged(QString)
    useModelCategoriesChanged: typing.ClassVar[Signal] = ... # useModelCategoriesChanged(bool)
    xPosRoleChanged          : typing.ClassVar[Signal] = ... # xPosRoleChanged(QString)
    xPosRolePatternChanged   : typing.ClassVar[Signal] = ... # xPosRolePatternChanged(QRegularExpression)
    xPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # xPosRoleReplaceChanged(QString)
    yPosRoleChanged          : typing.ClassVar[Signal] = ... # yPosRoleChanged(QString)
    yPosRolePatternChanged   : typing.ClassVar[Signal] = ... # yPosRolePatternChanged(QRegularExpression)
    yPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # yPosRoleReplaceChanged(QString)
    zPosRoleChanged          : typing.ClassVar[Signal] = ... # zPosRoleChanged(QString)
    zPosRolePatternChanged   : typing.ClassVar[Signal] = ... # zPosRolePatternChanged(QRegularExpression)
    zPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # zPosRoleReplaceChanged(QString)

    class MultiMatchBehavior(enum.Enum):

        MMBFirst                  = ...  # 0x0
        MMBLast                   = ...  # 0x1
        MMBAverage                = ...  # 0x2
        MMBCumulativeY            = ...  # 0x3


    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, x_pos_role: str, y_pos_role: str, z_pos_role: str, row_categories: collections.abc.Sequence[str], column_categories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, x_pos_role: str, y_pos_role: str, z_pos_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, y_pos_role: str, row_categories: collections.abc.Sequence[str], column_categories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, x_pos_role: str | None = ..., z_pos_role: str | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, row_role: str, column_role: str, y_pos_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, x_pos_role: str | None = ..., z_pos_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, y_pos_role: str, /, parent: PySide6.QtCore.QObject | None = ..., *, row_role: str | None = ..., column_role: str | None = ..., x_pos_role: str | None = ..., z_pos_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, item_model: PySide6.QtCore.QAbstractItemModel, /, parent: PySide6.QtCore.QObject | None = ..., *, row_role: str | None = ..., column_role: str | None = ..., x_pos_role: str | None = ..., y_pos_role: str | None = ..., z_pos_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, item_model: PySide6.QtCore.QAbstractItemModel | None = ..., row_role: str | None = ..., column_role: str | None = ..., x_pos_role: str | None = ..., y_pos_role: str | None = ..., z_pos_role: str | None = ..., row_categories: collections.abc.Sequence[str] | None = ..., column_categories: collections.abc.Sequence[str] | None = ..., use_model_categories: bool | None = ..., auto_row_categories: bool | None = ..., auto_column_categories: bool | None = ..., row_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., column_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., x_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., y_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., z_pos_role_pattern: PySide6.QtCore.QRegularExpression | None = ..., row_role_replace: str | None = ..., column_role_replace: str | None = ..., x_pos_role_replace: str | None = ..., y_pos_role_replace: str | None = ..., z_pos_role_replace: str | None = ..., multi_match_behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...

    def auto_column_categories(self, /) -> bool: ...
    def auto_row_categories(self, /) -> bool: ...
    def column_categories(self, /) -> typing.List[str]: ...
    def column_category_index(self, category: str, /) -> int: ...
    def column_role(self, /) -> str: ...
    def column_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def column_role_replace(self, /) -> str: ...
    def item_model(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    def multi_match_behavior(self, /) -> PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior: ...
    def remap(self, rowRole: str, columnRole: str, xPosRole: str, yPosRole: str, zPosRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /) -> None: ...
    def row_categories(self, /) -> typing.List[str]: ...
    def row_category_index(self, category: str, /) -> int: ...
    def row_role(self, /) -> str: ...
    def row_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def row_role_replace(self, /) -> str: ...
    def setXPosRole(self, role: str, /) -> None: ...
    def setXPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def setXPosRoleReplace(self, replace: str, /) -> None: ...
    def setYPosRole(self, role: str, /) -> None: ...
    def setYPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def setYPosRoleReplace(self, replace: str, /) -> None: ...
    def setZPosRole(self, role: str, /) -> None: ...
    def setZPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def setZPosRoleReplace(self, replace: str, /) -> None: ...
    def set_auto_column_categories(self, enable: bool, /) -> None: ...
    def set_auto_row_categories(self, enable: bool, /) -> None: ...
    def set_column_categories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def set_column_role(self, role: str, /) -> None: ...
    def set_column_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_column_role_replace(self, replace: str, /) -> None: ...
    def set_item_model(self, itemModel: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    def set_multi_match_behavior(self, behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior, /) -> None: ...
    def set_row_categories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def set_row_role(self, role: str, /) -> None: ...
    def set_row_role_pattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    def set_row_role_replace(self, replace: str, /) -> None: ...
    def set_use_model_categories(self, enable: bool, /) -> None: ...
    def use_model_categories(self, /) -> bool: ...
    def x_pos_role(self, /) -> str: ...
    def x_pos_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def x_pos_role_replace(self, /) -> str: ...
    def y_pos_role(self, /) -> str: ...
    def y_pos_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def y_pos_role_replace(self, /) -> str: ...
    def z_pos_role(self, /) -> str: ...
    def z_pos_role_pattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    def z_pos_role_replace(self, /) -> str: ...


class QLogValue3DAxisFormatter(PySide6.QtDataVisualization.QValue3DAxisFormatter):

    autoSubGridChanged       : typing.ClassVar[Signal] = ... # autoSubGridChanged(bool)
    baseChanged              : typing.ClassVar[Signal] = ... # baseChanged(double)
    showEdgeLabelsChanged    : typing.ClassVar[Signal] = ... # showEdgeLabelsChanged(bool)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, base: float | None = ..., auto_sub_grid: bool | None = ..., show_edge_labels: bool | None = ...) -> None: ...

    def auto_sub_grid(self, /) -> bool: ...
    def base(self, /) -> float: ...
    def create_new_instance(self, /) -> PySide6.QtDataVisualization.QValue3DAxisFormatter: ...
    def populate_copy(self, copy: PySide6.QtDataVisualization.QValue3DAxisFormatter, /) -> None: ...
    def position_at(self, value: float, /) -> float: ...
    def recalculate(self, /) -> None: ...
    def set_auto_sub_grid(self, enabled: bool, /) -> None: ...
    def set_base(self, base: float, /) -> None: ...
    def set_show_edge_labels(self, enabled: bool, /) -> None: ...
    def show_edge_labels(self, /) -> bool: ...
    def value_at(self, position: float, /) -> float: ...


class QScatter3DSeries(PySide6.QtDataVisualization.QAbstract3DSeries):

    dataProxyChanged         : typing.ClassVar[Signal] = ... # dataProxyChanged(QScatterDataProxy*)
    itemSizeChanged          : typing.ClassVar[Signal] = ... # itemSizeChanged(float)
    selectedItemChanged      : typing.ClassVar[Signal] = ... # selectedItemChanged(int)

    @typing.overload
    def __init__(self, data_proxy: PySide6.QtDataVisualization.QScatterDataProxy, /, parent: PySide6.QtCore.QObject | None = ..., *, selected_item: int | None = ..., item_size: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, data_proxy: PySide6.QtDataVisualization.QScatterDataProxy | None = ..., selected_item: int | None = ..., item_size: float | None = ...) -> None: ...

    def data_proxy(self, /) -> PySide6.QtDataVisualization.QScatterDataProxy: ...
    @staticmethod
    def invalid_selection_index() -> int: ...
    def item_size(self, /) -> float: ...
    def selected_item(self, /) -> int: ...
    def set_data_proxy(self, proxy: PySide6.QtDataVisualization.QScatterDataProxy, /) -> None: ...
    def set_item_size(self, size: float, /) -> None: ...
    def set_selected_item(self, index: int, /) -> None: ...


class QScatterDataItem(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtDataVisualization.QScatterDataItem, /) -> None: ...
    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def create_extra_data(self, /) -> None: ...
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    def rotation(self, /) -> PySide6.QtGui.QQuaternion: ...
    def set_position(self, pos: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_rotation(self, rot: PySide6.QtGui.QQuaternion, /) -> None: ...
    def set_x(self, value: float, /) -> None: ...
    def set_y(self, value: float, /) -> None: ...
    def set_z(self, value: float, /) -> None: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QScatterDataProxy(PySide6.QtDataVisualization.QAbstractDataProxy):

    arrayReset               : typing.ClassVar[Signal] = ... # arrayReset()
    itemCountChanged         : typing.ClassVar[Signal] = ... # itemCountChanged(int)
    itemsAdded               : typing.ClassVar[Signal] = ... # itemsAdded(int,int)
    itemsChanged             : typing.ClassVar[Signal] = ... # itemsChanged(int,int)
    itemsInserted            : typing.ClassVar[Signal] = ... # itemsInserted(int,int)
    itemsRemoved             : typing.ClassVar[Signal] = ... # itemsRemoved(int,int)
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged(QScatter3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, item_count: int | None = ..., series: PySide6.QtDataVisualization.QScatter3DSeries | None = ...) -> None: ...

    def add_item(self, item: PySide6.QtDataVisualization.QScatterDataItem | PySide6.QtGui.QVector3D, /) -> int: ...
    def add_items(self, items: collections.abc.Sequence[PySide6.QtDataVisualization.QScatterDataItem], /) -> int: ...
    def array(self, /) -> typing.List[PySide6.QtDataVisualization.QScatterDataItem]: ...
    def insert_item(self, index: int, item: PySide6.QtDataVisualization.QScatterDataItem | PySide6.QtGui.QVector3D, /) -> None: ...
    def insert_items(self, index: int, items: collections.abc.Sequence[PySide6.QtDataVisualization.QScatterDataItem], /) -> None: ...
    def item_at(self, index: int, /) -> PySide6.QtDataVisualization.QScatterDataItem: ...
    def item_count(self, /) -> int: ...
    def remove_items(self, index: int, removeCount: int, /) -> None: ...
    def reset_array(self, arg__1: collections.abc.Sequence[PySide6.QtDataVisualization.QScatterDataItem], /) -> None: ...
    def series(self, /) -> PySide6.QtDataVisualization.QScatter3DSeries: ...
    def set_item(self, index: int, item: PySide6.QtDataVisualization.QScatterDataItem | PySide6.QtGui.QVector3D, /) -> None: ...
    def set_items(self, index: int, items: collections.abc.Sequence[PySide6.QtDataVisualization.QScatterDataItem], /) -> None: ...


class QSurface3DSeries(PySide6.QtDataVisualization.QAbstract3DSeries):

    dataProxyChanged         : typing.ClassVar[Signal] = ... # dataProxyChanged(QSurfaceDataProxy*)
    drawModeChanged          : typing.ClassVar[Signal] = ... # drawModeChanged(QSurface3DSeries::DrawFlags)
    flatShadingEnabledChanged: typing.ClassVar[Signal] = ... # flatShadingEnabledChanged(bool)
    flatShadingSupportedChanged: typing.ClassVar[Signal] = ... # flatShadingSupportedChanged(bool)
    selectedPointChanged     : typing.ClassVar[Signal] = ... # selectedPointChanged(QPoint)
    textureChanged           : typing.ClassVar[Signal] = ... # textureChanged(QImage)
    textureFileChanged       : typing.ClassVar[Signal] = ... # textureFileChanged(QString)
    wireframeColorChanged    : typing.ClassVar[Signal] = ... # wireframeColorChanged(QColor)

    class DrawFlag(enum.Flag):

        DrawWireframe             = ...  # 0x1
        DrawSurface               = ...  # 0x2
        DrawSurfaceAndWireframe   = ...  # 0x3


    @typing.overload
    def __init__(self, data_proxy: PySide6.QtDataVisualization.QSurfaceDataProxy, /, parent: PySide6.QtCore.QObject | None = ..., *, selected_point: PySide6.QtCore.QPoint | None = ..., flat_shading_enabled: bool | None = ..., flat_shading_supported: bool | None = ..., draw_mode: PySide6.QtDataVisualization.QSurface3DSeries.DrawFlag | None = ..., texture: PySide6.QtGui.QImage | None = ..., texture_file: str | None = ..., wireframe_color: PySide6.QtGui.QColor | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, data_proxy: PySide6.QtDataVisualization.QSurfaceDataProxy | None = ..., selected_point: PySide6.QtCore.QPoint | None = ..., flat_shading_enabled: bool | None = ..., flat_shading_supported: bool | None = ..., draw_mode: PySide6.QtDataVisualization.QSurface3DSeries.DrawFlag | None = ..., texture: PySide6.QtGui.QImage | None = ..., texture_file: str | None = ..., wireframe_color: PySide6.QtGui.QColor | None = ...) -> None: ...

    def data_proxy(self, /) -> PySide6.QtDataVisualization.QSurfaceDataProxy: ...
    def draw_mode(self, /) -> PySide6.QtDataVisualization.QSurface3DSeries.DrawFlag: ...
    @staticmethod
    def invalid_selection_position() -> PySide6.QtCore.QPoint: ...
    def is_flat_shading_enabled(self, /) -> bool: ...
    def is_flat_shading_supported(self, /) -> bool: ...
    def selected_point(self, /) -> PySide6.QtCore.QPoint: ...
    def set_data_proxy(self, proxy: PySide6.QtDataVisualization.QSurfaceDataProxy, /) -> None: ...
    def set_draw_mode(self, mode: PySide6.QtDataVisualization.QSurface3DSeries.DrawFlag, /) -> None: ...
    def set_flat_shading_enabled(self, enabled: bool, /) -> None: ...
    def set_selected_point(self, position: PySide6.QtCore.QPoint, /) -> None: ...
    def set_texture(self, texture: PySide6.QtGui.QImage, /) -> None: ...
    def set_texture_file(self, filename: str, /) -> None: ...
    def set_wireframe_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def texture(self, /) -> PySide6.QtGui.QImage: ...
    def texture_file(self, /) -> str: ...
    def wireframe_color(self, /) -> PySide6.QtGui.QColor: ...


class QSurfaceDataItem(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtDataVisualization.QSurfaceDataItem, /) -> None: ...
    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def create_extra_data(self, /) -> None: ...
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    def set_position(self, pos: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_x(self, value: float, /) -> None: ...
    def set_y(self, value: float, /) -> None: ...
    def set_z(self, value: float, /) -> None: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QSurfaceDataProxy(PySide6.QtDataVisualization.QAbstractDataProxy):

    arrayReset               : typing.ClassVar[Signal] = ... # arrayReset()
    columnCountChanged       : typing.ClassVar[Signal] = ... # columnCountChanged(int)
    itemChanged              : typing.ClassVar[Signal] = ... # itemChanged(int,int)
    rowCountChanged          : typing.ClassVar[Signal] = ... # rowCountChanged(int)
    rowsAdded                : typing.ClassVar[Signal] = ... # rowsAdded(int,int)
    rowsChanged              : typing.ClassVar[Signal] = ... # rowsChanged(int,int)
    rowsInserted             : typing.ClassVar[Signal] = ... # rowsInserted(int,int)
    rowsRemoved              : typing.ClassVar[Signal] = ... # rowsRemoved(int,int)
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged(QSurface3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, row_count: int | None = ..., column_count: int | None = ..., series: PySide6.QtDataVisualization.QSurface3DSeries | None = ...) -> None: ...

    def add_row(self, arg__1: collections.abc.Sequence[PySide6.QtDataVisualization.QSurfaceDataItem], /) -> int: ...
    def add_rows(self, rows: typing.List[typing.List[PySide6.QtDataVisualization.QSurfaceDataItem]], /) -> int: ...
    def array(self, /) -> typing.List[typing.List[PySide6.QtDataVisualization.QSurfaceDataItem]]: ...
    def column_count(self, /) -> int: ...
    def insert_row(self, arg__1: int, arg__2: collections.abc.Sequence[PySide6.QtDataVisualization.QSurfaceDataItem], /) -> None: ...
    def insert_rows(self, rowIndex: int, rows: typing.List[typing.List[PySide6.QtDataVisualization.QSurfaceDataItem]], /) -> None: ...
    @typing.overload
    def item_at(self, position: PySide6.QtCore.QPoint, /) -> PySide6.QtDataVisualization.QSurfaceDataItem: ...
    @typing.overload
    def item_at(self, rowIndex: int, columnIndex: int, /) -> PySide6.QtDataVisualization.QSurfaceDataItem: ...
    def remove_rows(self, rowIndex: int, removeCount: int, /) -> None: ...
    def reset_array(self, arg__1: typing.List[typing.List[PySide6.QtDataVisualization.QSurfaceDataItem]], /) -> None: ...
    def reset_array_np(self, x: float, deltaX: float, z: float, deltaZ: float, data: collections.abc.Sequence[typing.Any], /) -> None: ...
    def row_count(self, /) -> int: ...
    def series(self, /) -> PySide6.QtDataVisualization.QSurface3DSeries: ...
    @typing.overload
    def set_item(self, position: PySide6.QtCore.QPoint, item: PySide6.QtDataVisualization.QSurfaceDataItem | PySide6.QtGui.QVector3D, /) -> None: ...
    @typing.overload
    def set_item(self, rowIndex: int, columnIndex: int, item: PySide6.QtDataVisualization.QSurfaceDataItem | PySide6.QtGui.QVector3D, /) -> None: ...
    def set_row(self, arg__1: int, arg__2: collections.abc.Sequence[PySide6.QtDataVisualization.QSurfaceDataItem], /) -> None: ...
    def set_rows(self, rowIndex: int, rows: typing.List[typing.List[PySide6.QtDataVisualization.QSurfaceDataItem]], /) -> None: ...


class QTouch3DInputHandler(PySide6.QtDataVisualization.Q3DInputHandler):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def touch_event(self, event: PySide6.QtGui.QTouchEvent, /) -> None: ...


class QValue3DAxis(PySide6.QtDataVisualization.QAbstract3DAxis):

    formatterChanged         : typing.ClassVar[Signal] = ... # formatterChanged(QValue3DAxisFormatter*)
    labelFormatChanged       : typing.ClassVar[Signal] = ... # labelFormatChanged(QString)
    reversedChanged          : typing.ClassVar[Signal] = ... # reversedChanged(bool)
    segmentCountChanged      : typing.ClassVar[Signal] = ... # segmentCountChanged(int)
    subSegmentCountChanged   : typing.ClassVar[Signal] = ... # subSegmentCountChanged(int)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, segment_count: int | None = ..., sub_segment_count: int | None = ..., label_format: str | None = ..., formatter: PySide6.QtDataVisualization.QValue3DAxisFormatter | None = ..., reversed: bool | None = ...) -> None: ...

    def formatter(self, /) -> PySide6.QtDataVisualization.QValue3DAxisFormatter: ...
    def label_format(self, /) -> str: ...
    def reversed(self, /) -> bool: ...
    def segment_count(self, /) -> int: ...
    def set_formatter(self, formatter: PySide6.QtDataVisualization.QValue3DAxisFormatter, /) -> None: ...
    def set_label_format(self, format: str, /) -> None: ...
    def set_reversed(self, enable: bool, /) -> None: ...
    def set_segment_count(self, count: int, /) -> None: ...
    def set_sub_segment_count(self, count: int, /) -> None: ...
    def sub_segment_count(self, /) -> int: ...


class QValue3DAxisFormatter(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def allow_negatives(self, /) -> bool: ...
    def allow_zero(self, /) -> bool: ...
    def axis(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    def create_new_instance(self, /) -> PySide6.QtDataVisualization.QValue3DAxisFormatter: ...
    def grid_positions(self, /) -> typing.List[float]: ...
    def label_positions(self, /) -> typing.List[float]: ...
    def label_strings(self, /) -> typing.List[str]: ...
    def locale(self, /) -> PySide6.QtCore.QLocale: ...
    def mark_dirty(self, /, labelsChange: bool = ...) -> None: ...
    def populate_copy(self, copy: PySide6.QtDataVisualization.QValue3DAxisFormatter, /) -> None: ...
    def position_at(self, value: float, /) -> float: ...
    def recalculate(self, /) -> None: ...
    def set_allow_negatives(self, allow: bool, /) -> None: ...
    def set_allow_zero(self, allow: bool, /) -> None: ...
    def set_grid_positions(self, grid_positions: collections.abc.Sequence[float], /) -> None: ...
    def set_label_positions(self, label_positions: collections.abc.Sequence[float], /) -> None: ...
    def set_label_strings(self, label_strings: collections.abc.Sequence[str], /) -> None: ...
    def set_locale(self, locale: PySide6.QtCore.QLocale | PySide6.QtCore.QLocale.Language, /) -> None: ...
    def string_for_value(self, value: float, format: str, /) -> str: ...
    def sub_grid_positions(self, /) -> typing.List[float]: ...
    def value_at(self, position: float, /) -> float: ...


def qDefaultSurfaceFormat(antialias: bool, /) -> PySide6.QtGui.QSurfaceFormat: ...


# eof
