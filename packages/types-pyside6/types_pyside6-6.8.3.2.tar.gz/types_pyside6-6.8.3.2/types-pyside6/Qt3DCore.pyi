# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.Qt3DCore, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.Qt3DCore`

import PySide6.Qt3DCore
import PySide6.QtCore
import PySide6.QtGui

import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QIntList: ...


class Qt3DCore(Shiboken.Object):

    class QAbstractAspect(PySide6.QtCore.QObject):

        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

        def dependencies(self, /) -> typing.List[str]: ...
        def register_backend_type(self, obj: PySide6.QtCore.QMetaObject, functor: PySide6.Qt3DCore.Qt3DCore.QBackendNodeMapperPtr, /) -> None: ...
        def root_entity_id(self, /) -> PySide6.Qt3DCore.Qt3DCore.QNodeId: ...
        def schedule_single_shot_job(self, job: PySide6.Qt3DCore.Qt3DCore.QAspectJobPtr, /) -> None: ...
        def unregister_backend_type(self, arg__1: PySide6.QtCore.QMetaObject, /) -> None: ...

    class QAbstractFunctor(Shiboken.Object):

        def __init__(self, /) -> None: ...

        def id(self, /) -> int: ...

    class QAbstractSkeleton(PySide6.Qt3DCore.Qt3DCore.QNode):

        jointCountChanged        : typing.ClassVar[Signal] = ... # jointCountChanged(int)
        def joint_count(self, /) -> int: ...

    class QArmature(PySide6.Qt3DCore.Qt3DCore.QComponent):

        skeletonChanged          : typing.ClassVar[Signal] = ... # skeletonChanged(Qt3DCore::QAbstractSkeleton*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, skeleton: PySide6.Qt3DCore.Qt3DCore.QAbstractSkeleton | None = ...) -> None: ...

        def set_skeleton(self, skeleton: PySide6.Qt3DCore.Qt3DCore.QAbstractSkeleton, /) -> None: ...
        def skeleton(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAbstractSkeleton: ...

    class QAspectEngine(PySide6.QtCore.QObject):

        class RunMode(enum.Enum):

            Manual                    = ...  # 0x0
            Automatic                 = ...  # 0x1


        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

        def aspect(self, name: str, /) -> PySide6.Qt3DCore.Qt3DCore.QAbstractAspect: ...
        def aspects(self, /) -> typing.List[PySide6.Qt3DCore.Qt3DCore.QAbstractAspect]: ...
        def execute_command(self, command: str, /) -> typing.Any: ...
        def lookup_node(self, id: PySide6.Qt3DCore.Qt3DCore.QNodeId, /) -> PySide6.Qt3DCore.Qt3DCore.QNode: ...
        def lookup_nodes(self, ids: collections.abc.Sequence[PySide6.Qt3DCore.Qt3DCore.QNodeId], /) -> typing.List[PySide6.Qt3DCore.Qt3DCore.QNode]: ...
        def process_frame(self, /) -> None: ...
        @typing.overload
        def register_aspect(self, aspect: PySide6.Qt3DCore.Qt3DCore.QAbstractAspect, /) -> None: ...
        @typing.overload
        def register_aspect(self, name: str, /) -> None: ...
        def root_entity(self, /) -> PySide6.Qt3DCore.Qt3DCore.QEntityPtr: ...
        def run_mode(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAspectEngine.RunMode: ...
        def set_root_entity(self, root: PySide6.Qt3DCore.Qt3DCore.QEntityPtr, /) -> None: ...
        def set_run_mode(self, mode: PySide6.Qt3DCore.Qt3DCore.QAspectEngine.RunMode, /) -> None: ...
        @typing.overload
        def unregister_aspect(self, aspect: PySide6.Qt3DCore.Qt3DCore.QAbstractAspect, /) -> None: ...
        @typing.overload
        def unregister_aspect(self, name: str, /) -> None: ...

    class QAspectJob(Shiboken.Object):

        def __init__(self, /) -> None: ...

        def is_required(self, /) -> bool: ...
        def post_frame(self, aspectEngine: PySide6.Qt3DCore.Qt3DCore.QAspectEngine, /) -> None: ...
        def run(self, /) -> None: ...

    class QAspectJobPtr(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, pointee: PySide6.Qt3DCore.Qt3DCore.QAspectJob, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def __dir__(self, /) -> collections.abc.Iterable[str]: ...
        def __repr__(self, /) -> str: ...
        def data(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAspectJob: ...
        @typing.overload
        def reset(self, /) -> None: ...
        @typing.overload
        def reset(self, t: PySide6.Qt3DCore.Qt3DCore.QAspectJob, /) -> None: ...

    class QAttribute(PySide6.Qt3DCore.Qt3DCore.QNode):

        attributeTypeChanged     : typing.ClassVar[Signal] = ... # attributeTypeChanged(AttributeType)
        bufferChanged            : typing.ClassVar[Signal] = ... # bufferChanged(QBuffer*)
        byteOffsetChanged        : typing.ClassVar[Signal] = ... # byteOffsetChanged(uint)
        byteStrideChanged        : typing.ClassVar[Signal] = ... # byteStrideChanged(uint)
        countChanged             : typing.ClassVar[Signal] = ... # countChanged(uint)
        dataSizeChanged          : typing.ClassVar[Signal] = ... # dataSizeChanged(uint)
        dataTypeChanged          : typing.ClassVar[Signal] = ... # dataTypeChanged(VertexBaseType)
        divisorChanged           : typing.ClassVar[Signal] = ... # divisorChanged(uint)
        nameChanged              : typing.ClassVar[Signal] = ... # nameChanged(QString)
        vertexBaseTypeChanged    : typing.ClassVar[Signal] = ... # vertexBaseTypeChanged(VertexBaseType)
        vertexSizeChanged        : typing.ClassVar[Signal] = ... # vertexSizeChanged(uint)

        class AttributeType(enum.Enum):

            VertexAttribute           = ...  # 0x0
            IndexAttribute            = ...  # 0x1
            DrawIndirectAttribute     = ...  # 0x2

        class VertexBaseType(enum.Enum):

            Byte                      = ...  # 0x0
            UnsignedByte              = ...  # 0x1
            Short                     = ...  # 0x2
            UnsignedShort             = ...  # 0x3
            Int                       = ...  # 0x4
            UnsignedInt               = ...  # 0x5
            HalfFloat                 = ...  # 0x6
            Float                     = ...  # 0x7
            Double                    = ...  # 0x8


        @typing.overload
        def __init__(self, buf: PySide6.Qt3DCore.Qt3DCore.QBuffer, vertex_base_type: PySide6.Qt3DCore.Qt3DCore.QAttribute.VertexBaseType, vertex_size: int, count: int, /, offset: int | None = ..., stride: int | None = ..., parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, buffer: PySide6.Qt3DCore.Qt3DCore.QBuffer | None = ..., name: str | None = ..., byte_stride: int | None = ..., byte_offset: int | None = ..., divisor: int | None = ..., attribute_type: PySide6.Qt3DCore.Qt3DCore.QAttribute.AttributeType | None = ..., default_position_attribute_name: str | None = ..., default_normal_attribute_name: str | None = ..., default_color_attribute_name: str | None = ..., default_texture_coordinate_attribute_name: str | None = ..., default_texture_coordinate1_attribute_name: str | None = ..., default_texture_coordinate2_attribute_name: str | None = ..., default_tangent_attribute_name: str | None = ..., default_joint_indices_attribute_name: str | None = ..., default_joint_weights_attribute_name: str | None = ...) -> None: ...
        @typing.overload
        def __init__(self, buf: PySide6.Qt3DCore.Qt3DCore.QBuffer, name: str, vertex_base_type: PySide6.Qt3DCore.Qt3DCore.QAttribute.VertexBaseType, vertex_size: int, count: int, /, offset: int | None = ..., stride: int | None = ..., parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, buffer: PySide6.Qt3DCore.Qt3DCore.QBuffer | None = ..., byte_stride: int | None = ..., byte_offset: int | None = ..., divisor: int | None = ..., attribute_type: PySide6.Qt3DCore.Qt3DCore.QAttribute.AttributeType | None = ..., default_position_attribute_name: str | None = ..., default_normal_attribute_name: str | None = ..., default_color_attribute_name: str | None = ..., default_texture_coordinate_attribute_name: str | None = ..., default_texture_coordinate1_attribute_name: str | None = ..., default_texture_coordinate2_attribute_name: str | None = ..., default_tangent_attribute_name: str | None = ..., default_joint_indices_attribute_name: str | None = ..., default_joint_weights_attribute_name: str | None = ...) -> None: ...
        @typing.overload
        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, buffer: PySide6.Qt3DCore.Qt3DCore.QBuffer | None = ..., name: str | None = ..., vertex_base_type: PySide6.Qt3DCore.Qt3DCore.QAttribute.VertexBaseType | None = ..., vertex_size: int | None = ..., count: int | None = ..., byte_stride: int | None = ..., byte_offset: int | None = ..., divisor: int | None = ..., attribute_type: PySide6.Qt3DCore.Qt3DCore.QAttribute.AttributeType | None = ..., default_position_attribute_name: str | None = ..., default_normal_attribute_name: str | None = ..., default_color_attribute_name: str | None = ..., default_texture_coordinate_attribute_name: str | None = ..., default_texture_coordinate1_attribute_name: str | None = ..., default_texture_coordinate2_attribute_name: str | None = ..., default_tangent_attribute_name: str | None = ..., default_joint_indices_attribute_name: str | None = ..., default_joint_weights_attribute_name: str | None = ...) -> None: ...

        def attribute_type(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute.AttributeType: ...
        def buffer(self, /) -> PySide6.Qt3DCore.Qt3DCore.QBuffer: ...
        def byte_offset(self, /) -> int: ...
        def byte_stride(self, /) -> int: ...
        def count(self, /) -> int: ...
        @staticmethod
        def default_color_attribute_name() -> str: ...
        @staticmethod
        def default_joint_indices_attribute_name() -> str: ...
        @staticmethod
        def default_joint_weights_attribute_name() -> str: ...
        @staticmethod
        def default_normal_attribute_name() -> str: ...
        @staticmethod
        def default_position_attribute_name() -> str: ...
        @staticmethod
        def default_tangent_attribute_name() -> str: ...
        @staticmethod
        def default_texture_coordinate1_attribute_name() -> str: ...
        @staticmethod
        def default_texture_coordinate2_attribute_name() -> str: ...
        @staticmethod
        def default_texture_coordinate_attribute_name() -> str: ...
        def divisor(self, /) -> int: ...
        def name(self, /) -> str: ...
        def set_attribute_type(self, attributeType: PySide6.Qt3DCore.Qt3DCore.QAttribute.AttributeType, /) -> None: ...
        def set_buffer(self, buffer: PySide6.Qt3DCore.Qt3DCore.QBuffer, /) -> None: ...
        def set_byte_offset(self, byteOffset: int, /) -> None: ...
        def set_byte_stride(self, byteStride: int, /) -> None: ...
        def set_count(self, count: int, /) -> None: ...
        def set_divisor(self, divisor: int, /) -> None: ...
        def set_name(self, name: str, /) -> None: ...
        def set_vertex_base_type(self, type: PySide6.Qt3DCore.Qt3DCore.QAttribute.VertexBaseType, /) -> None: ...
        def set_vertex_size(self, size: int, /) -> None: ...
        def vertex_base_type(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute.VertexBaseType: ...
        def vertex_size(self, /) -> int: ...

    class QBackendNode(Shiboken.Object):

        class Mode(enum.Enum):

            ReadOnly                  = ...  # 0x0
            ReadWrite                 = ...  # 0x1


        def __init__(self, /, mode: PySide6.Qt3DCore.Qt3DCore.QBackendNode.Mode = ...) -> None: ...

        def is_enabled(self, /) -> bool: ...
        def mode(self, /) -> PySide6.Qt3DCore.Qt3DCore.QBackendNode.Mode: ...
        def peer_id(self, /) -> PySide6.Qt3DCore.Qt3DCore.QNodeId: ...
        def set_enabled(self, enabled: bool, /) -> None: ...
        def sync_from_front_end(self, frontEnd: PySide6.Qt3DCore.Qt3DCore.QNode, firstTime: bool, /) -> None: ...

    class QBackendNodeMapper(Shiboken.Object):

        def __init__(self, /) -> None: ...

        def create(self, id: PySide6.Qt3DCore.Qt3DCore.QNodeId, /) -> PySide6.Qt3DCore.Qt3DCore.QBackendNode: ...
        def destroy(self, id: PySide6.Qt3DCore.Qt3DCore.QNodeId, /) -> None: ...
        def get(self, id: PySide6.Qt3DCore.Qt3DCore.QNodeId, /) -> PySide6.Qt3DCore.Qt3DCore.QBackendNode: ...

    class QBackendNodeMapperPtr(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, pointee: PySide6.Qt3DCore.Qt3DCore.QBackendNodeMapper, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def __dir__(self, /) -> collections.abc.Iterable[str]: ...
        def __repr__(self, /) -> str: ...
        def data(self, /) -> PySide6.Qt3DCore.Qt3DCore.QBackendNodeMapper: ...
        @typing.overload
        def reset(self, /) -> None: ...
        @typing.overload
        def reset(self, t: PySide6.Qt3DCore.Qt3DCore.QBackendNodeMapper, /) -> None: ...

    class QBoundingVolume(PySide6.Qt3DCore.Qt3DCore.QComponent):

        implicitMaxPointChanged  : typing.ClassVar[Signal] = ... # implicitMaxPointChanged(QVector3D)
        implicitMinPointChanged  : typing.ClassVar[Signal] = ... # implicitMinPointChanged(QVector3D)
        implicitPointsValidChanged: typing.ClassVar[Signal] = ... # implicitPointsValidChanged(bool)
        maxPointChanged          : typing.ClassVar[Signal] = ... # maxPointChanged(QVector3D)
        minPointChanged          : typing.ClassVar[Signal] = ... # minPointChanged(QVector3D)
        viewChanged              : typing.ClassVar[Signal] = ... # viewChanged(QGeometryView*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, view: PySide6.Qt3DCore.Qt3DCore.QGeometryView | None = ..., implicit_min_point: PySide6.QtGui.QVector3D | None = ..., implicit_max_point: PySide6.QtGui.QVector3D | None = ..., implicit_points_valid: bool | None = ..., min_point: PySide6.QtGui.QVector3D | None = ..., max_point: PySide6.QtGui.QVector3D | None = ...) -> None: ...

        def are_implicit_points_valid(self, /) -> bool: ...
        def implicit_max_point(self, /) -> PySide6.QtGui.QVector3D: ...
        def implicit_min_point(self, /) -> PySide6.QtGui.QVector3D: ...
        def max_point(self, /) -> PySide6.QtGui.QVector3D: ...
        def min_point(self, /) -> PySide6.QtGui.QVector3D: ...
        def set_max_point(self, maxPoint: PySide6.QtGui.QVector3D, /) -> None: ...
        def set_min_point(self, minPoint: PySide6.QtGui.QVector3D, /) -> None: ...
        def set_view(self, view: PySide6.Qt3DCore.Qt3DCore.QGeometryView, /) -> None: ...
        def update_implicit_bounds(self, /) -> bool: ...
        def view(self, /) -> PySide6.Qt3DCore.Qt3DCore.QGeometryView: ...

    class QBuffer(PySide6.Qt3DCore.Qt3DCore.QNode):

        accessTypeChanged        : typing.ClassVar[Signal] = ... # accessTypeChanged(AccessType)
        dataAvailable            : typing.ClassVar[Signal] = ... # dataAvailable()
        dataChanged              : typing.ClassVar[Signal] = ... # dataChanged(QByteArray)
        usageChanged             : typing.ClassVar[Signal] = ... # usageChanged(UsageType)

        class AccessType(enum.Enum):

            Write                     = ...  # 0x1
            Read                      = ...  # 0x2
            ReadWrite                 = ...  # 0x3

        class UsageType(enum.Enum):

            StreamDraw                = ...  # 0x88e0
            StreamRead                = ...  # 0x88e1
            StreamCopy                = ...  # 0x88e2
            StaticDraw                = ...  # 0x88e4
            StaticRead                = ...  # 0x88e5
            StaticCopy                = ...  # 0x88e6
            DynamicDraw               = ...  # 0x88e8
            DynamicRead               = ...  # 0x88e9
            DynamicCopy               = ...  # 0x88ea


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, usage: PySide6.Qt3DCore.Qt3DCore.QBuffer.UsageType | None = ..., access_type: PySide6.Qt3DCore.Qt3DCore.QBuffer.AccessType | None = ...) -> None: ...

        def access_type(self, /) -> PySide6.Qt3DCore.Qt3DCore.QBuffer.AccessType: ...
        def data(self, /) -> PySide6.QtCore.QByteArray: ...
        def set_access_type(self, access: PySide6.Qt3DCore.Qt3DCore.QBuffer.AccessType, /) -> None: ...
        def set_data(self, bytes: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
        def set_usage(self, usage: PySide6.Qt3DCore.Qt3DCore.QBuffer.UsageType, /) -> None: ...
        def update_data(self, offset: int, bytes: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
        def usage(self, /) -> PySide6.Qt3DCore.Qt3DCore.QBuffer.UsageType: ...

    class QComponent(PySide6.Qt3DCore.Qt3DCore.QNode):

        addedToEntity            : typing.ClassVar[Signal] = ... # addedToEntity(QEntity*)
        removedFromEntity        : typing.ClassVar[Signal] = ... # removedFromEntity(QEntity*)
        shareableChanged         : typing.ClassVar[Signal] = ... # shareableChanged(bool)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, is_shareable: bool | None = ...) -> None: ...

        def entities(self, /) -> typing.List[PySide6.Qt3DCore.Qt3DCore.QEntity]: ...
        def is_shareable(self, /) -> bool: ...
        def set_shareable(self, isShareable: bool, /) -> None: ...

    class QCoreAspect(PySide6.Qt3DCore.Qt3DCore.QAbstractAspect):

        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

        def calculate_bounding_volume_job(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAspectJobPtr: ...

    class QCoreSettings(PySide6.Qt3DCore.Qt3DCore.QComponent):

        boundingVolumesEnabledChanged: typing.ClassVar[Signal] = ... # boundingVolumesEnabledChanged(bool)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, bounding_volumes_enabled: bool | None = ...) -> None: ...

        def bounding_volumes_enabled(self, /) -> bool: ...
        def set_bounding_volumes_enabled(self, boundingVolumesEnabled: bool, /) -> None: ...

    class QEntity(PySide6.Qt3DCore.Qt3DCore.QNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...

        def add_component(self, comp: PySide6.Qt3DCore.Qt3DCore.QComponent, /) -> None: ...
        def components(self, /) -> typing.List[PySide6.Qt3DCore.Qt3DCore.QComponent]: ...
        def parent_entity(self, /) -> PySide6.Qt3DCore.Qt3DCore.QEntity: ...
        def remove_component(self, comp: PySide6.Qt3DCore.Qt3DCore.QComponent, /) -> None: ...

    class QEntityPtr(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, pointee: PySide6.Qt3DCore.Qt3DCore.QEntity, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def __dir__(self, /) -> collections.abc.Iterable[str]: ...
        def __repr__(self, /) -> str: ...
        def data(self, /) -> PySide6.Qt3DCore.Qt3DCore.QEntity: ...
        @typing.overload
        def reset(self, /) -> None: ...
        @typing.overload
        def reset(self, t: PySide6.Qt3DCore.Qt3DCore.QEntity, /) -> None: ...

    class QGeometry(PySide6.Qt3DCore.Qt3DCore.QNode):

        boundingVolumePositionAttributeChanged: typing.ClassVar[Signal] = ... # boundingVolumePositionAttributeChanged(QAttribute*)
        maxExtentChanged         : typing.ClassVar[Signal] = ... # maxExtentChanged(QVector3D)
        minExtentChanged         : typing.ClassVar[Signal] = ... # minExtentChanged(QVector3D)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, bounding_volume_position_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., min_extent: PySide6.QtGui.QVector3D | None = ..., max_extent: PySide6.QtGui.QVector3D | None = ...) -> None: ...

        def add_attribute(self, attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute, /) -> None: ...
        def attributes(self, /) -> typing.List[PySide6.Qt3DCore.Qt3DCore.QAttribute]: ...
        def bounding_volume_position_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def max_extent(self, /) -> PySide6.QtGui.QVector3D: ...
        def min_extent(self, /) -> PySide6.QtGui.QVector3D: ...
        def remove_attribute(self, attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute, /) -> None: ...
        def set_bounding_volume_position_attribute(self, boundingVolumePositionAttribute: PySide6.Qt3DCore.Qt3DCore.QAttribute, /) -> None: ...

    class QGeometryView(PySide6.Qt3DCore.Qt3DCore.QNode):

        firstInstanceChanged     : typing.ClassVar[Signal] = ... # firstInstanceChanged(int)
        firstVertexChanged       : typing.ClassVar[Signal] = ... # firstVertexChanged(int)
        geometryChanged          : typing.ClassVar[Signal] = ... # geometryChanged(QGeometry*)
        indexBufferByteOffsetChanged: typing.ClassVar[Signal] = ... # indexBufferByteOffsetChanged(int)
        indexOffsetChanged       : typing.ClassVar[Signal] = ... # indexOffsetChanged(int)
        instanceCountChanged     : typing.ClassVar[Signal] = ... # instanceCountChanged(int)
        primitiveRestartEnabledChanged: typing.ClassVar[Signal] = ... # primitiveRestartEnabledChanged(bool)
        primitiveTypeChanged     : typing.ClassVar[Signal] = ... # primitiveTypeChanged(PrimitiveType)
        restartIndexValueChanged : typing.ClassVar[Signal] = ... # restartIndexValueChanged(int)
        vertexCountChanged       : typing.ClassVar[Signal] = ... # vertexCountChanged(int)
        verticesPerPatchChanged  : typing.ClassVar[Signal] = ... # verticesPerPatchChanged(int)

        class PrimitiveType(enum.Enum):

            Points                    = ...  # 0x0
            Lines                     = ...  # 0x1
            LineLoop                  = ...  # 0x2
            LineStrip                 = ...  # 0x3
            Triangles                 = ...  # 0x4
            TriangleStrip             = ...  # 0x5
            TriangleFan               = ...  # 0x6
            LinesAdjacency            = ...  # 0xa
            LineStripAdjacency        = ...  # 0xb
            TrianglesAdjacency        = ...  # 0xc
            TriangleStripAdjacency    = ...  # 0xd
            Patches                   = ...  # 0xe


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, instance_count: int | None = ..., vertex_count: int | None = ..., index_offset: int | None = ..., first_instance: int | None = ..., first_vertex: int | None = ..., index_buffer_byte_offset: int | None = ..., restart_index_value: int | None = ..., vertices_per_patch: int | None = ..., primitive_restart_enabled: bool | None = ..., geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry | None = ..., primitive_type: PySide6.Qt3DCore.Qt3DCore.QGeometryView.PrimitiveType | None = ...) -> None: ...

        def first_instance(self, /) -> int: ...
        def first_vertex(self, /) -> int: ...
        def geometry(self, /) -> PySide6.Qt3DCore.Qt3DCore.QGeometry: ...
        def index_buffer_byte_offset(self, /) -> int: ...
        def index_offset(self, /) -> int: ...
        def instance_count(self, /) -> int: ...
        def primitive_restart_enabled(self, /) -> bool: ...
        def primitive_type(self, /) -> PySide6.Qt3DCore.Qt3DCore.QGeometryView.PrimitiveType: ...
        def restart_index_value(self, /) -> int: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_first_vertex(self, firstVertex: int, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_index_buffer_byte_offset(self, offset: int, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_instance_count(self, instanceCount: int, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DCore.Qt3DCore.QGeometryView.PrimitiveType, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def set_vertices_per_patch(self, verticesPerPatch: int, /) -> None: ...
        def vertex_count(self, /) -> int: ...
        def vertices_per_patch(self, /) -> int: ...

    class QJoint(PySide6.Qt3DCore.Qt3DCore.QNode):

        inverseBindMatrixChanged : typing.ClassVar[Signal] = ... # inverseBindMatrixChanged(QMatrix4x4)
        nameChanged              : typing.ClassVar[Signal] = ... # nameChanged(QString)
        rotationChanged          : typing.ClassVar[Signal] = ... # rotationChanged(QQuaternion)
        rotationXChanged         : typing.ClassVar[Signal] = ... # rotationXChanged(float)
        rotationYChanged         : typing.ClassVar[Signal] = ... # rotationYChanged(float)
        rotationZChanged         : typing.ClassVar[Signal] = ... # rotationZChanged(float)
        scaleChanged             : typing.ClassVar[Signal] = ... # scaleChanged(QVector3D)
        translationChanged       : typing.ClassVar[Signal] = ... # translationChanged(QVector3D)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, scale: PySide6.QtGui.QVector3D | None = ..., rotation: PySide6.QtGui.QQuaternion | None = ..., translation: PySide6.QtGui.QVector3D | None = ..., inverse_bind_matrix: PySide6.QtGui.QMatrix4x4 | None = ..., rotation_x: float | None = ..., rotation_y: float | None = ..., rotation_z: float | None = ..., name: str | None = ...) -> None: ...

        def add_child_joint(self, joint: PySide6.Qt3DCore.Qt3DCore.QJoint, /) -> None: ...
        def child_joints(self, /) -> typing.List[PySide6.Qt3DCore.Qt3DCore.QJoint]: ...
        def inverse_bind_matrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
        def name(self, /) -> str: ...
        def remove_child_joint(self, joint: PySide6.Qt3DCore.Qt3DCore.QJoint, /) -> None: ...
        def rotation(self, /) -> PySide6.QtGui.QQuaternion: ...
        def rotation_x(self, /) -> float: ...
        def rotation_y(self, /) -> float: ...
        def rotation_z(self, /) -> float: ...
        def scale(self, /) -> PySide6.QtGui.QVector3D: ...
        def set_inverse_bind_matrix(self, inverseBindMatrix: PySide6.QtGui.QMatrix4x4 | PySide6.QtGui.QTransform, /) -> None: ...
        def set_name(self, name: str, /) -> None: ...
        def set_rotation(self, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...
        def set_rotation_x(self, rotationX: float, /) -> None: ...
        def set_rotation_y(self, rotationY: float, /) -> None: ...
        def set_rotation_z(self, rotationZ: float, /) -> None: ...
        def set_scale(self, scale: PySide6.QtGui.QVector3D, /) -> None: ...
        def set_to_identity(self, /) -> None: ...
        def set_translation(self, translation: PySide6.QtGui.QVector3D, /) -> None: ...
        def translation(self, /) -> PySide6.QtGui.QVector3D: ...

    class QNode(PySide6.QtCore.QObject):

        enabledChanged           : typing.ClassVar[Signal] = ... # enabledChanged(bool)
        nodeDestroyed            : typing.ClassVar[Signal] = ... # nodeDestroyed()
        parentChanged            : typing.ClassVar[Signal] = ... # parentChanged(QObject*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, enabled: bool | None = ...) -> None: ...

        def block_notifications(self, block: bool, /) -> bool: ...
        def child_nodes(self, /) -> typing.List[PySide6.Qt3DCore.Qt3DCore.QNode]: ...
        def id(self, /) -> PySide6.Qt3DCore.Qt3DCore.QNodeId: ...
        def is_enabled(self, /) -> bool: ...
        def notifications_blocked(self, /) -> bool: ...
        def parent_node(self, /) -> PySide6.Qt3DCore.Qt3DCore.QNode: ...
        def set_enabled(self, isEnabled: bool, /) -> None: ...
        def set_parent(self, parent: PySide6.Qt3DCore.Qt3DCore.QNode, /) -> None: ...

    class QNodeId(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, QNodeId: PySide6.Qt3DCore.Qt3DCore.QNodeId, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def __eq__(self, other: PySide6.Qt3DCore.Qt3DCore.QNodeId, /) -> bool: ...
        def __gt__(self, other: PySide6.Qt3DCore.Qt3DCore.QNodeId, /) -> bool: ...
        def __lt__(self, other: PySide6.Qt3DCore.Qt3DCore.QNodeId, /) -> bool: ...
        def __ne__(self, other: PySide6.Qt3DCore.Qt3DCore.QNodeId, /) -> bool: ...
        def __repr__(self, /) -> str: ...
        @staticmethod
        def create_id() -> PySide6.Qt3DCore.Qt3DCore.QNodeId: ...
        def id(self, /) -> int: ...
        def is_null(self, /) -> bool: ...

    class QNodeIdTypePair(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, _id: PySide6.Qt3DCore.Qt3DCore.QNodeId, _type: PySide6.QtCore.QMetaObject, /) -> None: ...
        @typing.overload
        def __init__(self, QNodeIdTypePair: PySide6.Qt3DCore.Qt3DCore.QNodeIdTypePair, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...

    class QSkeleton(PySide6.Qt3DCore.Qt3DCore.QAbstractSkeleton):

        rootJointChanged         : typing.ClassVar[Signal] = ... # rootJointChanged(Qt3DCore::QJoint*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, root_joint: PySide6.Qt3DCore.Qt3DCore.QJoint | None = ...) -> None: ...

        def root_joint(self, /) -> PySide6.Qt3DCore.Qt3DCore.QJoint: ...
        def set_root_joint(self, rootJoint: PySide6.Qt3DCore.Qt3DCore.QJoint, /) -> None: ...

    class QSkeletonLoader(PySide6.Qt3DCore.Qt3DCore.QAbstractSkeleton):

        createJointsEnabledChanged: typing.ClassVar[Signal] = ... # createJointsEnabledChanged(bool)
        rootJointChanged         : typing.ClassVar[Signal] = ... # rootJointChanged(Qt3DCore::QJoint*)
        sourceChanged            : typing.ClassVar[Signal] = ... # sourceChanged(QUrl)
        statusChanged            : typing.ClassVar[Signal] = ... # statusChanged(Status)

        class Status(enum.Enum):

            NotReady                  = ...  # 0x0
            Ready                     = ...  # 0x1
            Error                     = ...  # 0x2


        @typing.overload
        def __init__(self, source: PySide6.QtCore.QUrl, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, status: PySide6.Qt3DCore.Qt3DCore.QSkeletonLoader.Status | None = ..., create_joints_enabled: bool | None = ..., root_joint: PySide6.Qt3DCore.Qt3DCore.QJoint | None = ...) -> None: ...
        @typing.overload
        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, source: PySide6.QtCore.QUrl | None = ..., status: PySide6.Qt3DCore.Qt3DCore.QSkeletonLoader.Status | None = ..., create_joints_enabled: bool | None = ..., root_joint: PySide6.Qt3DCore.Qt3DCore.QJoint | None = ...) -> None: ...

        def is_create_joints_enabled(self, /) -> bool: ...
        def root_joint(self, /) -> PySide6.Qt3DCore.Qt3DCore.QJoint: ...
        def set_create_joints_enabled(self, enabled: bool, /) -> None: ...
        def set_source(self, source: PySide6.QtCore.QUrl | str, /) -> None: ...
        def source(self, /) -> PySide6.QtCore.QUrl: ...
        def status(self, /) -> PySide6.Qt3DCore.Qt3DCore.QSkeletonLoader.Status: ...

    class QTransform(PySide6.Qt3DCore.Qt3DCore.QComponent):

        matrixChanged            : typing.ClassVar[Signal] = ... # matrixChanged()
        rotationChanged          : typing.ClassVar[Signal] = ... # rotationChanged(QQuaternion)
        rotationXChanged         : typing.ClassVar[Signal] = ... # rotationXChanged(float)
        rotationYChanged         : typing.ClassVar[Signal] = ... # rotationYChanged(float)
        rotationZChanged         : typing.ClassVar[Signal] = ... # rotationZChanged(float)
        scale3DChanged           : typing.ClassVar[Signal] = ... # scale3DChanged(QVector3D)
        scaleChanged             : typing.ClassVar[Signal] = ... # scaleChanged(float)
        translationChanged       : typing.ClassVar[Signal] = ... # translationChanged(QVector3D)
        worldMatrixChanged       : typing.ClassVar[Signal] = ... # worldMatrixChanged(QMatrix4x4)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, matrix: PySide6.QtGui.QMatrix4x4 | None = ..., scale: float | None = ..., scale3_d: PySide6.QtGui.QVector3D | None = ..., rotation: PySide6.QtGui.QQuaternion | None = ..., translation: PySide6.QtGui.QVector3D | None = ..., rotation_x: float | None = ..., rotation_y: float | None = ..., rotation_z: float | None = ..., world_matrix: PySide6.QtGui.QMatrix4x4 | None = ...) -> None: ...

        @staticmethod
        def from_axes(xAxis: PySide6.QtGui.QVector3D, yAxis: PySide6.QtGui.QVector3D, zAxis: PySide6.QtGui.QVector3D, /) -> PySide6.QtGui.QQuaternion: ...
        @typing.overload
        @staticmethod
        def from_axes_and_angles(axis1: PySide6.QtGui.QVector3D, angle1: float, axis2: PySide6.QtGui.QVector3D, angle2: float, /) -> PySide6.QtGui.QQuaternion: ...
        @typing.overload
        @staticmethod
        def from_axes_and_angles(axis1: PySide6.QtGui.QVector3D, angle1: float, axis2: PySide6.QtGui.QVector3D, angle2: float, axis3: PySide6.QtGui.QVector3D, angle3: float, /) -> PySide6.QtGui.QQuaternion: ...
        @typing.overload
        @staticmethod
        def from_axis_and_angle(axis: PySide6.QtGui.QVector3D, angle: float, /) -> PySide6.QtGui.QQuaternion: ...
        @typing.overload
        @staticmethod
        def from_axis_and_angle(x: float, y: float, z: float, angle: float, /) -> PySide6.QtGui.QQuaternion: ...
        @typing.overload
        @staticmethod
        def from_euler_angles(eulerAngles: PySide6.QtGui.QVector3D, /) -> PySide6.QtGui.QQuaternion: ...
        @typing.overload
        @staticmethod
        def from_euler_angles(pitch: float, yaw: float, roll: float, /) -> PySide6.QtGui.QQuaternion: ...
        def matrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...
        @staticmethod
        def rotate_around(point: PySide6.QtGui.QVector3D, angle: float, axis: PySide6.QtGui.QVector3D, /) -> PySide6.QtGui.QMatrix4x4: ...
        @staticmethod
        def rotate_from_axes(xAxis: PySide6.QtGui.QVector3D, yAxis: PySide6.QtGui.QVector3D, zAxis: PySide6.QtGui.QVector3D, /) -> PySide6.QtGui.QMatrix4x4: ...
        def rotation(self, /) -> PySide6.QtGui.QQuaternion: ...
        def rotation_x(self, /) -> float: ...
        def rotation_y(self, /) -> float: ...
        def rotation_z(self, /) -> float: ...
        def scale(self, /) -> float: ...
        def scale3_d(self, /) -> PySide6.QtGui.QVector3D: ...
        def set_matrix(self, matrix: PySide6.QtGui.QMatrix4x4 | PySide6.QtGui.QTransform, /) -> None: ...
        def set_rotation(self, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...
        def set_rotation_x(self, rotationX: float, /) -> None: ...
        def set_rotation_y(self, rotationY: float, /) -> None: ...
        def set_rotation_z(self, rotationZ: float, /) -> None: ...
        def set_scale(self, scale: float, /) -> None: ...
        def set_scale3_d(self, scale: PySide6.QtGui.QVector3D, /) -> None: ...
        def set_translation(self, translation: PySide6.QtGui.QVector3D, /) -> None: ...
        def translation(self, /) -> PySide6.QtGui.QVector3D: ...
        def world_matrix(self, /) -> PySide6.QtGui.QMatrix4x4: ...


    @staticmethod
    def q_hash(id: PySide6.Qt3DCore.Qt3DCore.QNodeId, /, seed: int | None = ...) -> int: ...
    @staticmethod
    def q_id_for_node(node: PySide6.Qt3DCore.Qt3DCore.QNode, /) -> PySide6.Qt3DCore.Qt3DCore.QNodeId: ...


# eof
