# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtDataVisualization, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtDataVisualization`

import PySide6.QtDataVisualization
import PySide6.QtCore
import PySide6.QtGui

import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class Q3DBars(PySide6.QtDataVisualization.QAbstract3DGraph):

    barSeriesMarginChanged   : typing.ClassVar[Signal] = ... # barSeriesMarginChanged(QSizeF)
    barSpacingChanged        : typing.ClassVar[Signal] = ... # barSpacingChanged(QSizeF)
    barSpacingRelativeChanged: typing.ClassVar[Signal] = ... # barSpacingRelativeChanged(bool)
    barThicknessChanged      : typing.ClassVar[Signal] = ... # barThicknessChanged(float)
    columnAxisChanged        : typing.ClassVar[Signal] = ... # columnAxisChanged(QCategory3DAxis*)
    floorLevelChanged        : typing.ClassVar[Signal] = ... # floorLevelChanged(float)
    multiSeriesUniformChanged: typing.ClassVar[Signal] = ... # multiSeriesUniformChanged(bool)
    primarySeriesChanged     : typing.ClassVar[Signal] = ... # primarySeriesChanged(QBar3DSeries*)
    rowAxisChanged           : typing.ClassVar[Signal] = ... # rowAxisChanged(QCategory3DAxis*)
    selectedSeriesChanged    : typing.ClassVar[Signal] = ... # selectedSeriesChanged(QBar3DSeries*)
    valueAxisChanged         : typing.ClassVar[Signal] = ... # valueAxisChanged(QValue3DAxis*)

    def __init__(self, /, format: PySide6.QtGui.QSurfaceFormat | PySide6.QtGui.QSurfaceFormat.FormatOption | None = ..., parent: PySide6.QtGui.QWindow | None = ..., *, multiSeriesUniform: bool | None = ..., barThickness: float | None = ..., barSpacing: PySide6.QtCore.QSizeF | None = ..., barSpacingRelative: bool | None = ..., barSeriesMargin: PySide6.QtCore.QSizeF | None = ..., rowAxis: PySide6.QtDataVisualization.QCategory3DAxis | None = ..., columnAxis: PySide6.QtDataVisualization.QCategory3DAxis | None = ..., valueAxis: PySide6.QtDataVisualization.QValue3DAxis | None = ..., primarySeries: PySide6.QtDataVisualization.QBar3DSeries | None = ..., selectedSeries: PySide6.QtDataVisualization.QBar3DSeries | None = ..., floorLevel: float | None = ...) -> None: ...

    def addAxis(self, axis: PySide6.QtDataVisualization.QAbstract3DAxis, /) -> None: ...
    def addSeries(self, series: PySide6.QtDataVisualization.QBar3DSeries, /) -> None: ...
    def axes(self, /) -> typing.List[PySide6.QtDataVisualization.QAbstract3DAxis]: ...
    @property
    def barSeriesMargin(self, /) -> PySide6.QtCore.QSizeF: ...
    @barSeriesMargin.setter
    def barSeriesMargin(self, margin: PySide6.QtCore.QSizeF | PySide6.QtCore.QSize, /) -> None: ...
    @property
    def barSpacing(self, /) -> PySide6.QtCore.QSizeF: ...
    @barSpacing.setter
    def barSpacing(self, spacing: PySide6.QtCore.QSizeF | PySide6.QtCore.QSize, /) -> None: ...
    @property
    def barSpacingRelative(self, /) -> bool: ...
    @barSpacingRelative.setter
    def barSpacingRelative(self, relative: bool, /) -> None: ...
    @property
    def barThickness(self, /) -> float: ...
    @barThickness.setter
    def barThickness(self, thicknessRatio: float, /) -> None: ...
    @property
    def columnAxis(self, /) -> PySide6.QtDataVisualization.QCategory3DAxis: ...
    @columnAxis.setter
    def columnAxis(self, axis: PySide6.QtDataVisualization.QCategory3DAxis, /) -> None: ...
    @property
    def floorLevel(self, /) -> float: ...
    @floorLevel.setter
    def floorLevel(self, level: float, /) -> None: ...
    def insertSeries(self, index: int, series: PySide6.QtDataVisualization.QBar3DSeries, /) -> None: ...
    @property
    def multiSeriesUniform(self, /) -> bool: ...
    @multiSeriesUniform.setter
    def multiSeriesUniform(self, uniform: bool, /) -> None: ...
    @property
    def primarySeries(self, /) -> PySide6.QtDataVisualization.QBar3DSeries: ...
    @primarySeries.setter
    def primarySeries(self, series: PySide6.QtDataVisualization.QBar3DSeries, /) -> None: ...
    def releaseAxis(self, axis: PySide6.QtDataVisualization.QAbstract3DAxis, /) -> None: ...
    def removeSeries(self, series: PySide6.QtDataVisualization.QBar3DSeries, /) -> None: ...
    @property
    def rowAxis(self, /) -> PySide6.QtDataVisualization.QCategory3DAxis: ...
    @rowAxis.setter
    def rowAxis(self, axis: PySide6.QtDataVisualization.QCategory3DAxis, /) -> None: ...
    @property
    def selectedSeries(self, /) -> PySide6.QtDataVisualization.QBar3DSeries: ...
    def seriesList(self, /) -> typing.List[PySide6.QtDataVisualization.QBar3DSeries]: ...
    @property
    def valueAxis(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    @valueAxis.setter
    def valueAxis(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...


class Q3DCamera(PySide6.QtDataVisualization.Q3DObject):

    cameraPresetChanged      : typing.ClassVar[Signal] = ... # cameraPresetChanged(Q3DCamera::CameraPreset)
    maxZoomLevelChanged      : typing.ClassVar[Signal] = ... # maxZoomLevelChanged(float)
    minZoomLevelChanged      : typing.ClassVar[Signal] = ... # minZoomLevelChanged(float)
    targetChanged            : typing.ClassVar[Signal] = ... # targetChanged(QVector3D)
    wrapXRotationChanged     : typing.ClassVar[Signal] = ... # wrapXRotationChanged(bool)
    wrapYRotationChanged     : typing.ClassVar[Signal] = ... # wrapYRotationChanged(bool)
    xRotationChanged         : typing.ClassVar[Signal] = ... # xRotationChanged(float)
    yRotationChanged         : typing.ClassVar[Signal] = ... # yRotationChanged(float)
    zoomLevelChanged         : typing.ClassVar[Signal] = ... # zoomLevelChanged(float)

    class CameraPreset(enum.Enum):

        CameraPresetNone          = ...  # -1
        CameraPresetFrontLow      = ...  # 0x0
        CameraPresetFront         = ...  # 0x1
        CameraPresetFrontHigh     = ...  # 0x2
        CameraPresetLeftLow       = ...  # 0x3
        CameraPresetLeft          = ...  # 0x4
        CameraPresetLeftHigh      = ...  # 0x5
        CameraPresetRightLow      = ...  # 0x6
        CameraPresetRight         = ...  # 0x7
        CameraPresetRightHigh     = ...  # 0x8
        CameraPresetBehindLow     = ...  # 0x9
        CameraPresetBehind        = ...  # 0xa
        CameraPresetBehindHigh    = ...  # 0xb
        CameraPresetIsometricLeft = ...  # 0xc
        CameraPresetIsometricLeftHigh = ...  # 0xd
        CameraPresetIsometricRight = ...  # 0xe
        CameraPresetIsometricRightHigh = ...  # 0xf
        CameraPresetDirectlyAbove = ...  # 0x10
        CameraPresetDirectlyAboveCW45 = ...  # 0x11
        CameraPresetDirectlyAboveCCW45 = ...  # 0x12
        CameraPresetFrontBelow    = ...  # 0x13
        CameraPresetLeftBelow     = ...  # 0x14
        CameraPresetRightBelow    = ...  # 0x15
        CameraPresetBehindBelow   = ...  # 0x16
        CameraPresetDirectlyBelow = ...  # 0x17


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, xRotation: float | None = ..., yRotation: float | None = ..., zoomLevel: float | None = ..., cameraPreset: PySide6.QtDataVisualization.Q3DCamera.CameraPreset | None = ..., wrapXRotation: bool | None = ..., wrapYRotation: bool | None = ..., target: PySide6.QtGui.QVector3D | None = ..., minZoomLevel: float | None = ..., maxZoomLevel: float | None = ...) -> None: ...

    @property
    def cameraPreset(self, /) -> PySide6.QtDataVisualization.Q3DCamera.CameraPreset: ...
    @cameraPreset.setter
    def cameraPreset(self, preset: PySide6.QtDataVisualization.Q3DCamera.CameraPreset, /) -> None: ...
    def copyValuesFrom(self, source: PySide6.QtDataVisualization.Q3DObject, /) -> None: ...
    @property
    def maxZoomLevel(self, /) -> float: ...
    @maxZoomLevel.setter
    def maxZoomLevel(self, zoomLevel: float, /) -> None: ...
    @property
    def minZoomLevel(self, /) -> float: ...
    @minZoomLevel.setter
    def minZoomLevel(self, zoomLevel: float, /) -> None: ...
    def setCameraPosition(self, horizontal: float, vertical: float, /, zoom: float = ...) -> None: ...
    @property
    def target(self, /) -> PySide6.QtGui.QVector3D: ...
    @target.setter
    def target(self, target: PySide6.QtGui.QVector3D, /) -> None: ...
    @property
    def wrapXRotation(self, /) -> bool: ...
    @wrapXRotation.setter
    def wrapXRotation(self, isEnabled: bool, /) -> None: ...
    @property
    def wrapYRotation(self, /) -> bool: ...
    @wrapYRotation.setter
    def wrapYRotation(self, isEnabled: bool, /) -> None: ...
    @property
    def xRotation(self, /) -> float: ...
    @xRotation.setter
    def xRotation(self, rotation: float, /) -> None: ...
    @property
    def yRotation(self, /) -> float: ...
    @yRotation.setter
    def yRotation(self, rotation: float, /) -> None: ...
    @property
    def zoomLevel(self, /) -> float: ...
    @zoomLevel.setter
    def zoomLevel(self, zoomLevel: float, /) -> None: ...


class Q3DInputHandler(PySide6.QtDataVisualization.QAbstract3DInputHandler):

    rotationEnabledChanged   : typing.ClassVar[Signal] = ... # rotationEnabledChanged(bool)
    selectionEnabledChanged  : typing.ClassVar[Signal] = ... # selectionEnabledChanged(bool)
    zoomAtTargetEnabledChanged: typing.ClassVar[Signal] = ... # zoomAtTargetEnabledChanged(bool)
    zoomEnabledChanged       : typing.ClassVar[Signal] = ... # zoomEnabledChanged(bool)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, rotationEnabled: bool | None = ..., zoomEnabled: bool | None = ..., selectionEnabled: bool | None = ..., zoomAtTargetEnabled: bool | None = ...) -> None: ...

    def mouseMoveEvent(self, event: PySide6.QtGui.QMouseEvent, mousePos: PySide6.QtCore.QPoint, /) -> None: ...
    def mousePressEvent(self, event: PySide6.QtGui.QMouseEvent, mousePos: PySide6.QtCore.QPoint, /) -> None: ...
    def mouseReleaseEvent(self, event: PySide6.QtGui.QMouseEvent, mousePos: PySide6.QtCore.QPoint, /) -> None: ...
    @property
    def rotationEnabled(self, /) -> bool: ...
    @rotationEnabled.setter
    def rotationEnabled(self, enable: bool, /) -> None: ...
    @property
    def selectionEnabled(self, /) -> bool: ...
    @selectionEnabled.setter
    def selectionEnabled(self, enable: bool, /) -> None: ...
    def wheelEvent(self, event: PySide6.QtGui.QWheelEvent, /) -> None: ...
    @property
    def zoomAtTargetEnabled(self, /) -> bool: ...
    @zoomAtTargetEnabled.setter
    def zoomAtTargetEnabled(self, enable: bool, /) -> None: ...
    @property
    def zoomEnabled(self, /) -> bool: ...
    @zoomEnabled.setter
    def zoomEnabled(self, enable: bool, /) -> None: ...


class Q3DLight(PySide6.QtDataVisualization.Q3DObject):

    autoPositionChanged      : typing.ClassVar[Signal] = ... # autoPositionChanged(bool)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, autoPosition: bool | None = ...) -> None: ...

    @property
    def autoPosition(self, /) -> bool: ...
    @autoPosition.setter
    def autoPosition(self, enabled: bool, /) -> None: ...


class Q3DObject(PySide6.QtCore.QObject):

    positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(QVector3D)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, parentScene: PySide6.QtDataVisualization.Q3DScene | None = ..., position: PySide6.QtGui.QVector3D | None = ...) -> None: ...

    def copyValuesFrom(self, source: PySide6.QtDataVisualization.Q3DObject, /) -> None: ...
    def isDirty(self, /) -> bool: ...
    @property
    def parentScene(self, /) -> PySide6.QtDataVisualization.Q3DScene: ...
    @property
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    @position.setter
    def position(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    def setDirty(self, dirty: bool, /) -> None: ...


class Q3DScatter(PySide6.QtDataVisualization.QAbstract3DGraph):

    axisXChanged             : typing.ClassVar[Signal] = ... # axisXChanged(QValue3DAxis*)
    axisYChanged             : typing.ClassVar[Signal] = ... # axisYChanged(QValue3DAxis*)
    axisZChanged             : typing.ClassVar[Signal] = ... # axisZChanged(QValue3DAxis*)
    selectedSeriesChanged    : typing.ClassVar[Signal] = ... # selectedSeriesChanged(QScatter3DSeries*)

    def __init__(self, /, format: PySide6.QtGui.QSurfaceFormat | PySide6.QtGui.QSurfaceFormat.FormatOption | None = ..., parent: PySide6.QtGui.QWindow | None = ..., *, axisX: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axisY: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axisZ: PySide6.QtDataVisualization.QValue3DAxis | None = ..., selectedSeries: PySide6.QtDataVisualization.QScatter3DSeries | None = ...) -> None: ...

    def addAxis(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def addSeries(self, series: PySide6.QtDataVisualization.QScatter3DSeries, /) -> None: ...
    def axes(self, /) -> typing.List[PySide6.QtDataVisualization.QValue3DAxis]: ...
    @property
    def axisX(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    @axisX.setter
    def axisX(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    @property
    def axisY(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    @axisY.setter
    def axisY(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    @property
    def axisZ(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    @axisZ.setter
    def axisZ(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def releaseAxis(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def removeSeries(self, series: PySide6.QtDataVisualization.QScatter3DSeries, /) -> None: ...
    @property
    def selectedSeries(self, /) -> PySide6.QtDataVisualization.QScatter3DSeries: ...
    def seriesList(self, /) -> typing.List[PySide6.QtDataVisualization.QScatter3DSeries]: ...


class Q3DScene(PySide6.QtCore.QObject):

    activeCameraChanged      : typing.ClassVar[Signal] = ... # activeCameraChanged(Q3DCamera*)
    activeLightChanged       : typing.ClassVar[Signal] = ... # activeLightChanged(Q3DLight*)
    devicePixelRatioChanged  : typing.ClassVar[Signal] = ... # devicePixelRatioChanged(float)
    graphPositionQueryChanged: typing.ClassVar[Signal] = ... # graphPositionQueryChanged(QPoint)
    primarySubViewportChanged: typing.ClassVar[Signal] = ... # primarySubViewportChanged(QRect)
    secondarySubViewportChanged: typing.ClassVar[Signal] = ... # secondarySubViewportChanged(QRect)
    secondarySubviewOnTopChanged: typing.ClassVar[Signal] = ... # secondarySubviewOnTopChanged(bool)
    selectionQueryPositionChanged: typing.ClassVar[Signal] = ... # selectionQueryPositionChanged(QPoint)
    slicingActiveChanged     : typing.ClassVar[Signal] = ... # slicingActiveChanged(bool)
    viewportChanged          : typing.ClassVar[Signal] = ... # viewportChanged(QRect)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, viewport: PySide6.QtCore.QRect | None = ..., primarySubViewport: PySide6.QtCore.QRect | None = ..., secondarySubViewport: PySide6.QtCore.QRect | None = ..., selectionQueryPosition: PySide6.QtCore.QPoint | None = ..., secondarySubviewOnTop: bool | None = ..., slicingActive: bool | None = ..., activeCamera: PySide6.QtDataVisualization.Q3DCamera | None = ..., activeLight: PySide6.QtDataVisualization.Q3DLight | None = ..., devicePixelRatio: float | None = ..., graphPositionQuery: PySide6.QtCore.QPoint | None = ...) -> None: ...

    @property
    def activeCamera(self, /) -> PySide6.QtDataVisualization.Q3DCamera: ...
    @activeCamera.setter
    def activeCamera(self, camera: PySide6.QtDataVisualization.Q3DCamera, /) -> None: ...
    @property
    def activeLight(self, /) -> PySide6.QtDataVisualization.Q3DLight: ...
    @activeLight.setter
    def activeLight(self, light: PySide6.QtDataVisualization.Q3DLight, /) -> None: ...
    @property
    def devicePixelRatio(self, /) -> float: ...
    @devicePixelRatio.setter
    def devicePixelRatio(self, pixelRatio: float, /) -> None: ...
    @property
    def graphPositionQuery(self, /) -> PySide6.QtCore.QPoint: ...
    @graphPositionQuery.setter
    def graphPositionQuery(self, point: PySide6.QtCore.QPoint, /) -> None: ...
    @staticmethod
    def invalidSelectionPoint() -> PySide6.QtCore.QPoint: ...
    def isPointInPrimarySubView(self, point: PySide6.QtCore.QPoint, /) -> bool: ...
    def isPointInSecondarySubView(self, point: PySide6.QtCore.QPoint, /) -> bool: ...
    @property
    def primarySubViewport(self, /) -> PySide6.QtCore.QRect: ...
    @primarySubViewport.setter
    def primarySubViewport(self, primarySubViewport: PySide6.QtCore.QRect, /) -> None: ...
    @property
    def secondarySubViewport(self, /) -> PySide6.QtCore.QRect: ...
    @secondarySubViewport.setter
    def secondarySubViewport(self, secondarySubViewport: PySide6.QtCore.QRect, /) -> None: ...
    @property
    def secondarySubviewOnTop(self, /) -> bool: ...
    @secondarySubviewOnTop.setter
    def secondarySubviewOnTop(self, isSecondaryOnTop: bool, /) -> None: ...
    @property
    def selectionQueryPosition(self, /) -> PySide6.QtCore.QPoint: ...
    @selectionQueryPosition.setter
    def selectionQueryPosition(self, point: PySide6.QtCore.QPoint, /) -> None: ...
    @property
    def slicingActive(self, /) -> bool: ...
    @slicingActive.setter
    def slicingActive(self, isSlicing: bool, /) -> None: ...
    @property
    def viewport(self, /) -> PySide6.QtCore.QRect: ...


class Q3DSurface(PySide6.QtDataVisualization.QAbstract3DGraph):

    axisXChanged             : typing.ClassVar[Signal] = ... # axisXChanged(QValue3DAxis*)
    axisYChanged             : typing.ClassVar[Signal] = ... # axisYChanged(QValue3DAxis*)
    axisZChanged             : typing.ClassVar[Signal] = ... # axisZChanged(QValue3DAxis*)
    flipHorizontalGridChanged: typing.ClassVar[Signal] = ... # flipHorizontalGridChanged(bool)
    selectedSeriesChanged    : typing.ClassVar[Signal] = ... # selectedSeriesChanged(QSurface3DSeries*)

    def __init__(self, /, format: PySide6.QtGui.QSurfaceFormat | PySide6.QtGui.QSurfaceFormat.FormatOption | None = ..., parent: PySide6.QtGui.QWindow | None = ..., *, axisX: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axisY: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axisZ: PySide6.QtDataVisualization.QValue3DAxis | None = ..., selectedSeries: PySide6.QtDataVisualization.QSurface3DSeries | None = ..., flipHorizontalGrid: bool | None = ...) -> None: ...

    def addAxis(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def addSeries(self, series: PySide6.QtDataVisualization.QSurface3DSeries, /) -> None: ...
    def axes(self, /) -> typing.List[PySide6.QtDataVisualization.QValue3DAxis]: ...
    @property
    def axisX(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    @axisX.setter
    def axisX(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    @property
    def axisY(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    @axisY.setter
    def axisY(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    @property
    def axisZ(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    @axisZ.setter
    def axisZ(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    @property
    def flipHorizontalGrid(self, /) -> bool: ...
    @flipHorizontalGrid.setter
    def flipHorizontalGrid(self, flip: bool, /) -> None: ...
    def releaseAxis(self, axis: PySide6.QtDataVisualization.QValue3DAxis, /) -> None: ...
    def removeSeries(self, series: PySide6.QtDataVisualization.QSurface3DSeries, /) -> None: ...
    @property
    def selectedSeries(self, /) -> PySide6.QtDataVisualization.QSurface3DSeries: ...
    def seriesList(self, /) -> typing.List[PySide6.QtDataVisualization.QSurface3DSeries]: ...


class Q3DTheme(PySide6.QtCore.QObject):

    ambientLightStrengthChanged: typing.ClassVar[Signal] = ... # ambientLightStrengthChanged(float)
    backgroundColorChanged   : typing.ClassVar[Signal] = ... # backgroundColorChanged(QColor)
    backgroundEnabledChanged : typing.ClassVar[Signal] = ... # backgroundEnabledChanged(bool)
    baseColorsChanged        : typing.ClassVar[Signal] = ... # baseColorsChanged(QList<QColor>)
    baseGradientsChanged     : typing.ClassVar[Signal] = ... # baseGradientsChanged(QList<QLinearGradient>)
    colorStyleChanged        : typing.ClassVar[Signal] = ... # colorStyleChanged(Q3DTheme::ColorStyle)
    fontChanged              : typing.ClassVar[Signal] = ... # fontChanged(QFont)
    gridEnabledChanged       : typing.ClassVar[Signal] = ... # gridEnabledChanged(bool)
    gridLineColorChanged     : typing.ClassVar[Signal] = ... # gridLineColorChanged(QColor)
    highlightLightStrengthChanged: typing.ClassVar[Signal] = ... # highlightLightStrengthChanged(float)
    labelBackgroundColorChanged: typing.ClassVar[Signal] = ... # labelBackgroundColorChanged(QColor)
    labelBackgroundEnabledChanged: typing.ClassVar[Signal] = ... # labelBackgroundEnabledChanged(bool)
    labelBorderEnabledChanged: typing.ClassVar[Signal] = ... # labelBorderEnabledChanged(bool)
    labelTextColorChanged    : typing.ClassVar[Signal] = ... # labelTextColorChanged(QColor)
    lightColorChanged        : typing.ClassVar[Signal] = ... # lightColorChanged(QColor)
    lightStrengthChanged     : typing.ClassVar[Signal] = ... # lightStrengthChanged(float)
    multiHighlightColorChanged: typing.ClassVar[Signal] = ... # multiHighlightColorChanged(QColor)
    multiHighlightGradientChanged: typing.ClassVar[Signal] = ... # multiHighlightGradientChanged(QLinearGradient)
    singleHighlightColorChanged: typing.ClassVar[Signal] = ... # singleHighlightColorChanged(QColor)
    singleHighlightGradientChanged: typing.ClassVar[Signal] = ... # singleHighlightGradientChanged(QLinearGradient)
    typeChanged              : typing.ClassVar[Signal] = ... # typeChanged(Q3DTheme::Theme)
    windowColorChanged       : typing.ClassVar[Signal] = ... # windowColorChanged(QColor)

    class ColorStyle(enum.Enum):

        ColorStyleUniform         = ...  # 0x0
        ColorStyleObjectGradient  = ...  # 0x1
        ColorStyleRangeGradient   = ...  # 0x2

    class Theme(enum.Enum):

        ThemeQt                   = ...  # 0x0
        ThemePrimaryColors        = ...  # 0x1
        ThemeDigia                = ...  # 0x2
        ThemeStoneMoss            = ...  # 0x3
        ThemeArmyBlue             = ...  # 0x4
        ThemeRetro                = ...  # 0x5
        ThemeEbony                = ...  # 0x6
        ThemeIsabelle             = ...  # 0x7
        ThemeUserDefined          = ...  # 0x8


    @typing.overload
    def __init__(self, themeType: PySide6.QtDataVisualization.Q3DTheme.Theme, /, parent: PySide6.QtCore.QObject | None = ..., *, type: PySide6.QtDataVisualization.Q3DTheme.Theme | None = ..., baseColors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., backgroundColor: PySide6.QtGui.QColor | None = ..., windowColor: PySide6.QtGui.QColor | None = ..., labelTextColor: PySide6.QtGui.QColor | None = ..., labelBackgroundColor: PySide6.QtGui.QColor | None = ..., gridLineColor: PySide6.QtGui.QColor | None = ..., singleHighlightColor: PySide6.QtGui.QColor | None = ..., multiHighlightColor: PySide6.QtGui.QColor | None = ..., lightColor: PySide6.QtGui.QColor | None = ..., baseGradients: collections.abc.Sequence[PySide6.QtGui.QLinearGradient] | None = ..., singleHighlightGradient: PySide6.QtGui.QLinearGradient | None = ..., multiHighlightGradient: PySide6.QtGui.QLinearGradient | None = ..., lightStrength: float | None = ..., ambientLightStrength: float | None = ..., highlightLightStrength: float | None = ..., labelBorderEnabled: bool | None = ..., font: PySide6.QtGui.QFont | None = ..., backgroundEnabled: bool | None = ..., gridEnabled: bool | None = ..., labelBackgroundEnabled: bool | None = ..., colorStyle: PySide6.QtDataVisualization.Q3DTheme.ColorStyle | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, type: PySide6.QtDataVisualization.Q3DTheme.Theme | None = ..., baseColors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ..., backgroundColor: PySide6.QtGui.QColor | None = ..., windowColor: PySide6.QtGui.QColor | None = ..., labelTextColor: PySide6.QtGui.QColor | None = ..., labelBackgroundColor: PySide6.QtGui.QColor | None = ..., gridLineColor: PySide6.QtGui.QColor | None = ..., singleHighlightColor: PySide6.QtGui.QColor | None = ..., multiHighlightColor: PySide6.QtGui.QColor | None = ..., lightColor: PySide6.QtGui.QColor | None = ..., baseGradients: collections.abc.Sequence[PySide6.QtGui.QLinearGradient] | None = ..., singleHighlightGradient: PySide6.QtGui.QLinearGradient | None = ..., multiHighlightGradient: PySide6.QtGui.QLinearGradient | None = ..., lightStrength: float | None = ..., ambientLightStrength: float | None = ..., highlightLightStrength: float | None = ..., labelBorderEnabled: bool | None = ..., font: PySide6.QtGui.QFont | None = ..., backgroundEnabled: bool | None = ..., gridEnabled: bool | None = ..., labelBackgroundEnabled: bool | None = ..., colorStyle: PySide6.QtDataVisualization.Q3DTheme.ColorStyle | None = ...) -> None: ...

    @property
    def ambientLightStrength(self, /) -> float: ...
    @ambientLightStrength.setter
    def ambientLightStrength(self, strength: float, /) -> None: ...
    @property
    def backgroundColor(self, /) -> PySide6.QtGui.QColor: ...
    @backgroundColor.setter
    def backgroundColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def backgroundEnabled(self, /) -> bool: ...
    @backgroundEnabled.setter
    def backgroundEnabled(self, enabled: bool, /) -> None: ...
    @property
    def baseColors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    @baseColors.setter
    def baseColors(self, colors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    @property
    def baseGradients(self, /) -> typing.List[PySide6.QtGui.QLinearGradient]: ...
    @baseGradients.setter
    def baseGradients(self, gradients: collections.abc.Sequence[PySide6.QtGui.QLinearGradient], /) -> None: ...
    @property
    def colorStyle(self, /) -> PySide6.QtDataVisualization.Q3DTheme.ColorStyle: ...
    @colorStyle.setter
    def colorStyle(self, style: PySide6.QtDataVisualization.Q3DTheme.ColorStyle, /) -> None: ...
    @property
    def font(self, /) -> PySide6.QtGui.QFont: ...
    @font.setter
    def font(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    @property
    def gridEnabled(self, /) -> bool: ...
    @gridEnabled.setter
    def gridEnabled(self, enabled: bool, /) -> None: ...
    @property
    def gridLineColor(self, /) -> PySide6.QtGui.QColor: ...
    @gridLineColor.setter
    def gridLineColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def highlightLightStrength(self, /) -> float: ...
    @highlightLightStrength.setter
    def highlightLightStrength(self, strength: float, /) -> None: ...
    @property
    def labelBackgroundColor(self, /) -> PySide6.QtGui.QColor: ...
    @labelBackgroundColor.setter
    def labelBackgroundColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def labelBackgroundEnabled(self, /) -> bool: ...
    @labelBackgroundEnabled.setter
    def labelBackgroundEnabled(self, enabled: bool, /) -> None: ...
    @property
    def labelBorderEnabled(self, /) -> bool: ...
    @labelBorderEnabled.setter
    def labelBorderEnabled(self, enabled: bool, /) -> None: ...
    @property
    def labelTextColor(self, /) -> PySide6.QtGui.QColor: ...
    @labelTextColor.setter
    def labelTextColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def lightColor(self, /) -> PySide6.QtGui.QColor: ...
    @lightColor.setter
    def lightColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def lightStrength(self, /) -> float: ...
    @lightStrength.setter
    def lightStrength(self, strength: float, /) -> None: ...
    @property
    def multiHighlightColor(self, /) -> PySide6.QtGui.QColor: ...
    @multiHighlightColor.setter
    def multiHighlightColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def multiHighlightGradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    @multiHighlightGradient.setter
    def multiHighlightGradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    @property
    def singleHighlightColor(self, /) -> PySide6.QtGui.QColor: ...
    @singleHighlightColor.setter
    def singleHighlightColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def singleHighlightGradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    @singleHighlightGradient.setter
    def singleHighlightGradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    @property
    def type(self, /) -> PySide6.QtDataVisualization.Q3DTheme.Theme: ...
    @type.setter
    def type(self, themeType: PySide6.QtDataVisualization.Q3DTheme.Theme, /) -> None: ...
    @property
    def windowColor(self, /) -> PySide6.QtGui.QColor: ...
    @windowColor.setter
    def windowColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...


class QAbstract3DAxis(PySide6.QtCore.QObject):

    autoAdjustRangeChanged   : typing.ClassVar[Signal] = ... # autoAdjustRangeChanged(bool)
    labelAutoRotationChanged : typing.ClassVar[Signal] = ... # labelAutoRotationChanged(float)
    labelsChanged            : typing.ClassVar[Signal] = ... # labelsChanged()
    maxChanged               : typing.ClassVar[Signal] = ... # maxChanged(float)
    minChanged               : typing.ClassVar[Signal] = ... # minChanged(float)
    orientationChanged       : typing.ClassVar[Signal] = ... # orientationChanged(QAbstract3DAxis::AxisOrientation)
    rangeChanged             : typing.ClassVar[Signal] = ... # rangeChanged(float,float)
    titleChanged             : typing.ClassVar[Signal] = ... # titleChanged(QString)
    titleFixedChanged        : typing.ClassVar[Signal] = ... # titleFixedChanged(bool)
    titleVisibilityChanged   : typing.ClassVar[Signal] = ... # titleVisibilityChanged(bool)

    class AxisOrientation(enum.Enum):

        AxisOrientationNone       = ...  # 0x0
        AxisOrientationX          = ...  # 0x1
        AxisOrientationY          = ...  # 0x2
        AxisOrientationZ          = ...  # 0x4

    class AxisType(enum.Enum):

        AxisTypeNone              = ...  # 0x0
        AxisTypeCategory          = ...  # 0x1
        AxisTypeValue             = ...  # 0x2


    @property
    def autoAdjustRange(self, /) -> bool: ...
    @autoAdjustRange.setter
    def autoAdjustRange(self, autoAdjust: bool, /) -> None: ...
    @property
    def labelAutoRotation(self, /) -> float: ...
    @labelAutoRotation.setter
    def labelAutoRotation(self, angle: float, /) -> None: ...
    @property
    def labels(self, /) -> typing.List[str]: ...
    @labels.setter
    def labels(self, labels: collections.abc.Sequence[str], /) -> None: ...
    @property
    def max(self, /) -> float: ...
    @max.setter
    def max(self, max: float, /) -> None: ...
    @property
    def min(self, /) -> float: ...
    @min.setter
    def min(self, min: float, /) -> None: ...
    @property
    def orientation(self, /) -> PySide6.QtDataVisualization.QAbstract3DAxis.AxisOrientation: ...
    def setRange(self, min: float, max: float, /) -> None: ...
    @property
    def title(self, /) -> str: ...
    @title.setter
    def title(self, title: str, /) -> None: ...
    @property
    def titleFixed(self, /) -> bool: ...
    @titleFixed.setter
    def titleFixed(self, fixed: bool, /) -> None: ...
    @property
    def titleVisible(self, /) -> bool: ...
    @titleVisible.setter
    def titleVisible(self, visible: bool, /) -> None: ...
    @property
    def type(self, /) -> PySide6.QtDataVisualization.QAbstract3DAxis.AxisType: ...


class QAbstract3DGraph(PySide6.QtGui.QWindow):

    activeInputHandlerChanged: typing.ClassVar[Signal] = ... # activeInputHandlerChanged(QAbstract3DInputHandler*)
    activeThemeChanged       : typing.ClassVar[Signal] = ... # activeThemeChanged(Q3DTheme*)
    aspectRatioChanged       : typing.ClassVar[Signal] = ... # aspectRatioChanged(double)
    currentFpsChanged        : typing.ClassVar[Signal] = ... # currentFpsChanged(double)
    horizontalAspectRatioChanged: typing.ClassVar[Signal] = ... # horizontalAspectRatioChanged(double)
    localeChanged            : typing.ClassVar[Signal] = ... # localeChanged(QLocale)
    marginChanged            : typing.ClassVar[Signal] = ... # marginChanged(double)
    measureFpsChanged        : typing.ClassVar[Signal] = ... # measureFpsChanged(bool)
    optimizationHintsChanged : typing.ClassVar[Signal] = ... # optimizationHintsChanged(QAbstract3DGraph::OptimizationHints)
    orthoProjectionChanged   : typing.ClassVar[Signal] = ... # orthoProjectionChanged(bool)
    polarChanged             : typing.ClassVar[Signal] = ... # polarChanged(bool)
    queriedGraphPositionChanged: typing.ClassVar[Signal] = ... # queriedGraphPositionChanged(QVector3D)
    radialLabelOffsetChanged : typing.ClassVar[Signal] = ... # radialLabelOffsetChanged(float)
    reflectionChanged        : typing.ClassVar[Signal] = ... # reflectionChanged(bool)
    reflectivityChanged      : typing.ClassVar[Signal] = ... # reflectivityChanged(double)
    selectedElementChanged   : typing.ClassVar[Signal] = ... # selectedElementChanged(QAbstract3DGraph::ElementType)
    selectionModeChanged     : typing.ClassVar[Signal] = ... # selectionModeChanged(QAbstract3DGraph::SelectionFlags)
    shadowQualityChanged     : typing.ClassVar[Signal] = ... # shadowQualityChanged(QAbstract3DGraph::ShadowQuality)

    class ElementType(enum.Enum):

        ElementNone               = ...  # 0x0
        ElementSeries             = ...  # 0x1
        ElementAxisXLabel         = ...  # 0x2
        ElementAxisYLabel         = ...  # 0x3
        ElementAxisZLabel         = ...  # 0x4
        ElementCustomItem         = ...  # 0x5

    class OptimizationHint(enum.Flag):

        OptimizationDefault       = ...  # 0x0
        OptimizationStatic        = ...  # 0x1

    class SelectionFlag(enum.Flag):

        SelectionNone             = ...  # 0x0
        SelectionItem             = ...  # 0x1
        SelectionRow              = ...  # 0x2
        SelectionItemAndRow       = ...  # 0x3
        SelectionColumn           = ...  # 0x4
        SelectionItemAndColumn    = ...  # 0x5
        SelectionRowAndColumn     = ...  # 0x6
        SelectionItemRowAndColumn = ...  # 0x7
        SelectionSlice            = ...  # 0x8
        SelectionMultiSeries      = ...  # 0x10

    class ShadowQuality(enum.Enum):

        ShadowQualityNone         = ...  # 0x0
        ShadowQualityLow          = ...  # 0x1
        ShadowQualityMedium       = ...  # 0x2
        ShadowQualityHigh         = ...  # 0x3
        ShadowQualitySoftLow      = ...  # 0x4
        ShadowQualitySoftMedium   = ...  # 0x5
        ShadowQualitySoftHigh     = ...  # 0x6


    @property
    def activeInputHandler(self, /) -> PySide6.QtDataVisualization.QAbstract3DInputHandler: ...
    @activeInputHandler.setter
    def activeInputHandler(self, inputHandler: PySide6.QtDataVisualization.QAbstract3DInputHandler, /) -> None: ...
    @property
    def activeTheme(self, /) -> PySide6.QtDataVisualization.Q3DTheme: ...
    @activeTheme.setter
    def activeTheme(self, theme: PySide6.QtDataVisualization.Q3DTheme, /) -> None: ...
    def addCustomItem(self, item: PySide6.QtDataVisualization.QCustom3DItem, /) -> int: ...
    def addInputHandler(self, inputHandler: PySide6.QtDataVisualization.QAbstract3DInputHandler, /) -> None: ...
    def addTheme(self, theme: PySide6.QtDataVisualization.Q3DTheme, /) -> None: ...
    @property
    def aspectRatio(self, /) -> float: ...
    @aspectRatio.setter
    def aspectRatio(self, ratio: float, /) -> None: ...
    def clearSelection(self, /) -> None: ...
    @property
    def currentFps(self, /) -> float: ...
    def customItems(self, /) -> typing.List[PySide6.QtDataVisualization.QCustom3DItem]: ...
    def event(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def exposeEvent(self, event: PySide6.QtGui.QExposeEvent, /) -> None: ...
    def hasContext(self, /) -> bool: ...
    def hasSeries(self, series: PySide6.QtDataVisualization.QAbstract3DSeries, /) -> bool: ...
    @property
    def horizontalAspectRatio(self, /) -> float: ...
    @horizontalAspectRatio.setter
    def horizontalAspectRatio(self, ratio: float, /) -> None: ...
    def inputHandlers(self, /) -> typing.List[PySide6.QtDataVisualization.QAbstract3DInputHandler]: ...
    @property
    def locale(self, /) -> PySide6.QtCore.QLocale: ...
    @locale.setter
    def locale(self, locale: PySide6.QtCore.QLocale | PySide6.QtCore.QLocale.Language, /) -> None: ...
    @property
    def margin(self, /) -> float: ...
    @margin.setter
    def margin(self, margin: float, /) -> None: ...
    @property
    def measureFps(self, /) -> bool: ...
    @measureFps.setter
    def measureFps(self, enable: bool, /) -> None: ...
    def mouseDoubleClickEvent(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouseMoveEvent(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mousePressEvent(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouseReleaseEvent(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    @property
    def optimizationHints(self, /) -> PySide6.QtDataVisualization.QAbstract3DGraph.OptimizationHint: ...
    @optimizationHints.setter
    def optimizationHints(self, hints: PySide6.QtDataVisualization.QAbstract3DGraph.OptimizationHint, /) -> None: ...
    @property
    def orthoProjection(self, /) -> bool: ...
    @orthoProjection.setter
    def orthoProjection(self, enable: bool, /) -> None: ...
    @property
    def polar(self, /) -> bool: ...
    @polar.setter
    def polar(self, enable: bool, /) -> None: ...
    @property
    def queriedGraphPosition(self, /) -> PySide6.QtGui.QVector3D: ...
    @property
    def radialLabelOffset(self, /) -> float: ...
    @radialLabelOffset.setter
    def radialLabelOffset(self, offset: float, /) -> None: ...
    @property
    def reflection(self, /) -> bool: ...
    @reflection.setter
    def reflection(self, enable: bool, /) -> None: ...
    @property
    def reflectivity(self, /) -> float: ...
    @reflectivity.setter
    def reflectivity(self, reflectivity: float, /) -> None: ...
    def releaseCustomItem(self, item: PySide6.QtDataVisualization.QCustom3DItem, /) -> None: ...
    def releaseInputHandler(self, inputHandler: PySide6.QtDataVisualization.QAbstract3DInputHandler, /) -> None: ...
    def releaseTheme(self, theme: PySide6.QtDataVisualization.Q3DTheme, /) -> None: ...
    def removeCustomItem(self, item: PySide6.QtDataVisualization.QCustom3DItem, /) -> None: ...
    def removeCustomItemAt(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    def removeCustomItems(self, /) -> None: ...
    def renderToImage(self, /, msaaSamples: int | None = ..., imageSize: PySide6.QtCore.QSize = ...) -> PySide6.QtGui.QImage: ...
    def resizeEvent(self, event: PySide6.QtGui.QResizeEvent, /) -> None: ...
    @property
    def scene(self, /) -> PySide6.QtDataVisualization.Q3DScene: ...
    def selectedAxis(self, /) -> PySide6.QtDataVisualization.QAbstract3DAxis: ...
    def selectedCustomItem(self, /) -> PySide6.QtDataVisualization.QCustom3DItem: ...
    def selectedCustomItemIndex(self, /) -> int: ...
    @property
    def selectedElement(self, /) -> PySide6.QtDataVisualization.QAbstract3DGraph.ElementType: ...
    def selectedLabelIndex(self, /) -> int: ...
    @property
    def selectionMode(self, /) -> PySide6.QtDataVisualization.QAbstract3DGraph.SelectionFlag: ...
    @selectionMode.setter
    def selectionMode(self, mode: PySide6.QtDataVisualization.QAbstract3DGraph.SelectionFlag, /) -> None: ...
    @property
    def shadowQuality(self, /) -> PySide6.QtDataVisualization.QAbstract3DGraph.ShadowQuality: ...
    @shadowQuality.setter
    def shadowQuality(self, quality: PySide6.QtDataVisualization.QAbstract3DGraph.ShadowQuality, /) -> None: ...
    def shadowsSupported(self, /) -> bool: ...
    def themes(self, /) -> typing.List[PySide6.QtDataVisualization.Q3DTheme]: ...
    def touchEvent(self, event: PySide6.QtGui.QTouchEvent, /) -> None: ...
    def wheelEvent(self, event: PySide6.QtGui.QWheelEvent, /) -> None: ...


class QAbstract3DInputHandler(PySide6.QtCore.QObject):

    inputViewChanged         : typing.ClassVar[Signal] = ... # inputViewChanged(QAbstract3DInputHandler::InputView)
    positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(QPoint)
    sceneChanged             : typing.ClassVar[Signal] = ... # sceneChanged(Q3DScene*)

    class InputView(enum.Enum):

        InputViewNone             = ...  # 0x0
        InputViewOnPrimary        = ...  # 0x1
        InputViewOnSecondary      = ...  # 0x2


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, inputView: PySide6.QtDataVisualization.QAbstract3DInputHandler.InputView | None = ..., inputPosition: PySide6.QtCore.QPoint | None = ..., scene: PySide6.QtDataVisualization.Q3DScene | None = ...) -> None: ...

    @property
    def inputPosition(self, /) -> PySide6.QtCore.QPoint: ...
    @inputPosition.setter
    def inputPosition(self, position: PySide6.QtCore.QPoint, /) -> None: ...
    @property
    def inputView(self, /) -> PySide6.QtDataVisualization.QAbstract3DInputHandler.InputView: ...
    @inputView.setter
    def inputView(self, inputView: PySide6.QtDataVisualization.QAbstract3DInputHandler.InputView, /) -> None: ...
    def mouseDoubleClickEvent(self, event: PySide6.QtGui.QMouseEvent, /) -> None: ...
    def mouseMoveEvent(self, event: PySide6.QtGui.QMouseEvent, mousePos: PySide6.QtCore.QPoint, /) -> None: ...
    def mousePressEvent(self, event: PySide6.QtGui.QMouseEvent, mousePos: PySide6.QtCore.QPoint, /) -> None: ...
    def mouseReleaseEvent(self, event: PySide6.QtGui.QMouseEvent, mousePos: PySide6.QtCore.QPoint, /) -> None: ...
    def prevDistance(self, /) -> int: ...
    def previousInputPos(self, /) -> PySide6.QtCore.QPoint: ...
    @property
    def scene(self, /) -> PySide6.QtDataVisualization.Q3DScene: ...
    @scene.setter
    def scene(self, scene: PySide6.QtDataVisualization.Q3DScene, /) -> None: ...
    def setPrevDistance(self, distance: int, /) -> None: ...
    def setPreviousInputPos(self, position: PySide6.QtCore.QPoint, /) -> None: ...
    def touchEvent(self, event: PySide6.QtGui.QTouchEvent, /) -> None: ...
    def wheelEvent(self, event: PySide6.QtGui.QWheelEvent, /) -> None: ...


class QAbstract3DSeries(PySide6.QtCore.QObject):

    baseColorChanged         : typing.ClassVar[Signal] = ... # baseColorChanged(QColor)
    baseGradientChanged      : typing.ClassVar[Signal] = ... # baseGradientChanged(QLinearGradient)
    colorStyleChanged        : typing.ClassVar[Signal] = ... # colorStyleChanged(Q3DTheme::ColorStyle)
    itemLabelChanged         : typing.ClassVar[Signal] = ... # itemLabelChanged(QString)
    itemLabelFormatChanged   : typing.ClassVar[Signal] = ... # itemLabelFormatChanged(QString)
    itemLabelVisibilityChanged: typing.ClassVar[Signal] = ... # itemLabelVisibilityChanged(bool)
    meshChanged              : typing.ClassVar[Signal] = ... # meshChanged(QAbstract3DSeries::Mesh)
    meshRotationChanged      : typing.ClassVar[Signal] = ... # meshRotationChanged(QQuaternion)
    meshSmoothChanged        : typing.ClassVar[Signal] = ... # meshSmoothChanged(bool)
    multiHighlightColorChanged: typing.ClassVar[Signal] = ... # multiHighlightColorChanged(QColor)
    multiHighlightGradientChanged: typing.ClassVar[Signal] = ... # multiHighlightGradientChanged(QLinearGradient)
    nameChanged              : typing.ClassVar[Signal] = ... # nameChanged(QString)
    singleHighlightColorChanged: typing.ClassVar[Signal] = ... # singleHighlightColorChanged(QColor)
    singleHighlightGradientChanged: typing.ClassVar[Signal] = ... # singleHighlightGradientChanged(QLinearGradient)
    userDefinedMeshChanged   : typing.ClassVar[Signal] = ... # userDefinedMeshChanged(QString)
    visibilityChanged        : typing.ClassVar[Signal] = ... # visibilityChanged(bool)

    class Mesh(enum.Enum):

        MeshUserDefined           = ...  # 0x0
        MeshBar                   = ...  # 0x1
        MeshCube                  = ...  # 0x2
        MeshPyramid               = ...  # 0x3
        MeshCone                  = ...  # 0x4
        MeshCylinder              = ...  # 0x5
        MeshBevelBar              = ...  # 0x6
        MeshBevelCube             = ...  # 0x7
        MeshSphere                = ...  # 0x8
        MeshMinimal               = ...  # 0x9
        MeshArrow                 = ...  # 0xa
        MeshPoint                 = ...  # 0xb

    class SeriesType(enum.Enum):

        SeriesTypeNone            = ...  # 0x0
        SeriesTypeBar             = ...  # 0x1
        SeriesTypeScatter         = ...  # 0x2
        SeriesTypeSurface         = ...  # 0x4


    @property
    def baseColor(self, /) -> PySide6.QtGui.QColor: ...
    @baseColor.setter
    def baseColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def baseGradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    @baseGradient.setter
    def baseGradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    @property
    def colorStyle(self, /) -> PySide6.QtDataVisualization.Q3DTheme.ColorStyle: ...
    @colorStyle.setter
    def colorStyle(self, style: PySide6.QtDataVisualization.Q3DTheme.ColorStyle, /) -> None: ...
    @property
    def itemLabel(self, /) -> str: ...
    @property
    def itemLabelFormat(self, /) -> str: ...
    @itemLabelFormat.setter
    def itemLabelFormat(self, format: str, /) -> None: ...
    @property
    def itemLabelVisible(self, /) -> bool: ...
    @itemLabelVisible.setter
    def itemLabelVisible(self, visible: bool, /) -> None: ...
    @property
    def mesh(self, /) -> PySide6.QtDataVisualization.QAbstract3DSeries.Mesh: ...
    @mesh.setter
    def mesh(self, mesh: PySide6.QtDataVisualization.QAbstract3DSeries.Mesh, /) -> None: ...
    @property
    def meshRotation(self, /) -> PySide6.QtGui.QQuaternion: ...
    @meshRotation.setter
    def meshRotation(self, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...
    @property
    def meshSmooth(self, /) -> bool: ...
    @meshSmooth.setter
    def meshSmooth(self, enable: bool, /) -> None: ...
    @property
    def multiHighlightColor(self, /) -> PySide6.QtGui.QColor: ...
    @multiHighlightColor.setter
    def multiHighlightColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def multiHighlightGradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    @multiHighlightGradient.setter
    def multiHighlightGradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    @property
    def name(self, /) -> str: ...
    @name.setter
    def name(self, name: str, /) -> None: ...
    def setMeshAxisAndAngle(self, axis: PySide6.QtGui.QVector3D, angle: float, /) -> None: ...
    @property
    def singleHighlightColor(self, /) -> PySide6.QtGui.QColor: ...
    @singleHighlightColor.setter
    def singleHighlightColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def singleHighlightGradient(self, /) -> PySide6.QtGui.QLinearGradient: ...
    @singleHighlightGradient.setter
    def singleHighlightGradient(self, gradient: PySide6.QtGui.QLinearGradient, /) -> None: ...
    @property
    def type(self, /) -> PySide6.QtDataVisualization.QAbstract3DSeries.SeriesType: ...
    @property
    def userDefinedMesh(self, /) -> str: ...
    @userDefinedMesh.setter
    def userDefinedMesh(self, fileName: str, /) -> None: ...
    @property
    def visible(self, /) -> bool: ...
    @visible.setter
    def visible(self, visible: bool, /) -> None: ...


class QAbstractDataProxy(PySide6.QtCore.QObject):

    class DataType(enum.Enum):

        DataTypeNone              = ...  # 0x0
        DataTypeBar               = ...  # 0x1
        DataTypeScatter           = ...  # 0x2
        DataTypeSurface           = ...  # 0x4


    @property
    def type(self, /) -> PySide6.QtDataVisualization.QAbstractDataProxy.DataType: ...


class QBar3DSeries(PySide6.QtDataVisualization.QAbstract3DSeries):

    dataProxyChanged         : typing.ClassVar[Signal] = ... # dataProxyChanged(QBarDataProxy*)
    meshAngleChanged         : typing.ClassVar[Signal] = ... # meshAngleChanged(float)
    rowColorsChanged         : typing.ClassVar[Signal] = ... # rowColorsChanged(QList<QColor>)
    selectedBarChanged       : typing.ClassVar[Signal] = ... # selectedBarChanged(QPoint)

    @typing.overload
    def __init__(self, dataProxy: PySide6.QtDataVisualization.QBarDataProxy, /, parent: PySide6.QtCore.QObject | None = ..., *, selectedBar: PySide6.QtCore.QPoint | None = ..., meshAngle: float | None = ..., rowColors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, dataProxy: PySide6.QtDataVisualization.QBarDataProxy | None = ..., selectedBar: PySide6.QtCore.QPoint | None = ..., meshAngle: float | None = ..., rowColors: collections.abc.Sequence[PySide6.QtGui.QColor] | None = ...) -> None: ...

    @property
    def dataProxy(self, /) -> PySide6.QtDataVisualization.QBarDataProxy: ...
    @dataProxy.setter
    def dataProxy(self, proxy: PySide6.QtDataVisualization.QBarDataProxy, /) -> None: ...
    @staticmethod
    def invalidSelectionPosition() -> PySide6.QtCore.QPoint: ...
    @property
    def meshAngle(self, /) -> float: ...
    @meshAngle.setter
    def meshAngle(self, angle: float, /) -> None: ...
    @property
    def rowColors(self, /) -> typing.List[PySide6.QtGui.QColor]: ...
    @rowColors.setter
    def rowColors(self, colors: collections.abc.Sequence[PySide6.QtGui.QColor], /) -> None: ...
    @property
    def selectedBar(self, /) -> PySide6.QtCore.QPoint: ...
    @selectedBar.setter
    def selectedBar(self, position: PySide6.QtCore.QPoint, /) -> None: ...


class QBarDataItem(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtDataVisualization.QBarDataItem, /) -> None: ...
    @typing.overload
    def __init__(self, value: float, /) -> None: ...
    @typing.overload
    def __init__(self, value: float, angle: float, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def createExtraData(self, /) -> None: ...
    def rotation(self, /) -> float: ...
    def setRotation(self, angle: float, /) -> None: ...
    def setValue(self, val: float, /) -> None: ...
    def value(self, /) -> float: ...


class QBarDataProxy(PySide6.QtDataVisualization.QAbstractDataProxy):

    arrayReset               : typing.ClassVar[Signal] = ... # arrayReset()
    columnLabelsChanged      : typing.ClassVar[Signal] = ... # columnLabelsChanged()
    itemChanged              : typing.ClassVar[Signal] = ... # itemChanged(int,int)
    rowCountChanged          : typing.ClassVar[Signal] = ... # rowCountChanged(int)
    rowLabelsChanged         : typing.ClassVar[Signal] = ... # rowLabelsChanged()
    rowsAdded                : typing.ClassVar[Signal] = ... # rowsAdded(int,int)
    rowsChanged              : typing.ClassVar[Signal] = ... # rowsChanged(int,int)
    rowsInserted             : typing.ClassVar[Signal] = ... # rowsInserted(int,int)
    rowsRemoved              : typing.ClassVar[Signal] = ... # rowsRemoved(int,int)
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged(QBar3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, rowCount: int | None = ..., rowLabels: collections.abc.Sequence[str] | None = ..., columnLabels: collections.abc.Sequence[str] | None = ..., series: PySide6.QtDataVisualization.QBar3DSeries | None = ...) -> None: ...

    @typing.overload
    def addRow(self, arg__1: collections.abc.Sequence[PySide6.QtDataVisualization.QBarDataItem], /) -> int: ...
    @typing.overload
    def addRow(self, arg__1: collections.abc.Sequence[PySide6.QtDataVisualization.QBarDataItem], arg__2: str, /) -> int: ...
    @typing.overload
    def addRows(self, rows: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], /) -> int: ...
    @typing.overload
    def addRows(self, rows: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], labels: collections.abc.Sequence[str], /) -> int: ...
    def array(self, /) -> typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]]: ...
    @property
    def columnLabels(self, /) -> typing.List[str]: ...
    @columnLabels.setter
    def columnLabels(self, labels: collections.abc.Sequence[str], /) -> None: ...
    @typing.overload
    def insertRow(self, arg__1: int, arg__2: collections.abc.Sequence[PySide6.QtDataVisualization.QBarDataItem], /) -> None: ...
    @typing.overload
    def insertRow(self, arg__1: int, arg__2: collections.abc.Sequence[PySide6.QtDataVisualization.QBarDataItem], arg__3: str, /) -> None: ...
    @typing.overload
    def insertRows(self, rowIndex: int, rows: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], /) -> None: ...
    @typing.overload
    def insertRows(self, rowIndex: int, rows: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], labels: collections.abc.Sequence[str], /) -> None: ...
    @typing.overload
    def itemAt(self, position: PySide6.QtCore.QPoint, /) -> PySide6.QtDataVisualization.QBarDataItem: ...
    @typing.overload
    def itemAt(self, rowIndex: int, columnIndex: int, /) -> PySide6.QtDataVisualization.QBarDataItem: ...
    def removeRows(self, rowIndex: int, removeCount: int, /, removeLabels: bool = ...) -> None: ...
    @typing.overload
    def resetArray(self, /) -> None: ...
    @typing.overload
    def resetArray(self, arg__1: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], /) -> None: ...
    @typing.overload
    def resetArray(self, arg__1: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], arg__2: collections.abc.Sequence[str], arg__3: collections.abc.Sequence[str], /) -> None: ...
    def rowAt(self, rowIndex: int, /) -> typing.List[PySide6.QtDataVisualization.QBarDataItem]: ...
    @property
    def rowCount(self, /) -> int: ...
    @property
    def rowLabels(self, /) -> typing.List[str]: ...
    @rowLabels.setter
    def rowLabels(self, labels: collections.abc.Sequence[str], /) -> None: ...
    @property
    def series(self, /) -> PySide6.QtDataVisualization.QBar3DSeries: ...
    @typing.overload
    def setItem(self, position: PySide6.QtCore.QPoint, item: PySide6.QtDataVisualization.QBarDataItem | float, /) -> None: ...
    @typing.overload
    def setItem(self, rowIndex: int, columnIndex: int, item: PySide6.QtDataVisualization.QBarDataItem | float, /) -> None: ...
    @typing.overload
    def setRow(self, arg__1: int, arg__2: collections.abc.Sequence[PySide6.QtDataVisualization.QBarDataItem], /) -> None: ...
    @typing.overload
    def setRow(self, arg__1: int, arg__2: collections.abc.Sequence[PySide6.QtDataVisualization.QBarDataItem], arg__3: str, /) -> None: ...
    @typing.overload
    def setRows(self, rowIndex: int, rows: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], /) -> None: ...
    @typing.overload
    def setRows(self, rowIndex: int, rows: typing.List[typing.List[PySide6.QtDataVisualization.QBarDataItem]], labels: collections.abc.Sequence[str], /) -> None: ...


class QCategory3DAxis(PySide6.QtDataVisualization.QAbstract3DAxis):

    labelsChanged            : typing.ClassVar[Signal] = ... # labelsChanged()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, labels: collections.abc.Sequence[str] | None = ...) -> None: ...

    @property
    def labels(self, /) -> typing.List[str]: ...
    @labels.setter
    def labels(self, labels: collections.abc.Sequence[str], /) -> None: ...


class QCustom3DItem(PySide6.QtCore.QObject):

    meshFileChanged          : typing.ClassVar[Signal] = ... # meshFileChanged(QString)
    positionAbsoluteChanged  : typing.ClassVar[Signal] = ... # positionAbsoluteChanged(bool)
    positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(QVector3D)
    rotationChanged          : typing.ClassVar[Signal] = ... # rotationChanged(QQuaternion)
    scalingAbsoluteChanged   : typing.ClassVar[Signal] = ... # scalingAbsoluteChanged(bool)
    scalingChanged           : typing.ClassVar[Signal] = ... # scalingChanged(QVector3D)
    shadowCastingChanged     : typing.ClassVar[Signal] = ... # shadowCastingChanged(bool)
    textureFileChanged       : typing.ClassVar[Signal] = ... # textureFileChanged(QString)
    visibleChanged           : typing.ClassVar[Signal] = ... # visibleChanged(bool)

    @typing.overload
    def __init__(self, meshFile: str, position: PySide6.QtGui.QVector3D, scaling: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, texture: PySide6.QtGui.QImage, /, parent: PySide6.QtCore.QObject | None = ..., *, textureFile: str | None = ..., positionAbsolute: bool | None = ..., visible: bool | None = ..., shadowCasting: bool | None = ..., scalingAbsolute: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, meshFile: str | None = ..., textureFile: str | None = ..., position: PySide6.QtGui.QVector3D | None = ..., positionAbsolute: bool | None = ..., scaling: PySide6.QtGui.QVector3D | None = ..., rotation: PySide6.QtGui.QQuaternion | None = ..., visible: bool | None = ..., shadowCasting: bool | None = ..., scalingAbsolute: bool | None = ...) -> None: ...

    @property
    def meshFile(self, /) -> str: ...
    @meshFile.setter
    def meshFile(self, meshFile: str, /) -> None: ...
    @property
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    @position.setter
    def position(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    @property
    def positionAbsolute(self, /) -> bool: ...
    @positionAbsolute.setter
    def positionAbsolute(self, positionAbsolute: bool, /) -> None: ...
    @property
    def rotation(self, /) -> PySide6.QtGui.QQuaternion: ...
    @rotation.setter
    def rotation(self, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...
    @property
    def scaling(self, /) -> PySide6.QtGui.QVector3D: ...
    @scaling.setter
    def scaling(self, scaling: PySide6.QtGui.QVector3D, /) -> None: ...
    @property
    def scalingAbsolute(self, /) -> bool: ...
    @scalingAbsolute.setter
    def scalingAbsolute(self, scalingAbsolute: bool, /) -> None: ...
    def setRotationAxisAndAngle(self, axis: PySide6.QtGui.QVector3D, angle: float, /) -> None: ...
    def setTextureImage(self, textureImage: PySide6.QtGui.QImage, /) -> None: ...
    @property
    def shadowCasting(self, /) -> bool: ...
    @shadowCasting.setter
    def shadowCasting(self, enabled: bool, /) -> None: ...
    @property
    def textureFile(self, /) -> str: ...
    @textureFile.setter
    def textureFile(self, textureFile: str, /) -> None: ...
    @property
    def visible(self, /) -> bool: ...
    @visible.setter
    def visible(self, visible: bool, /) -> None: ...


class QCustom3DLabel(PySide6.QtDataVisualization.QCustom3DItem):

    backgroundColorChanged   : typing.ClassVar[Signal] = ... # backgroundColorChanged(QColor)
    backgroundEnabledChanged : typing.ClassVar[Signal] = ... # backgroundEnabledChanged(bool)
    borderEnabledChanged     : typing.ClassVar[Signal] = ... # borderEnabledChanged(bool)
    facingCameraChanged      : typing.ClassVar[Signal] = ... # facingCameraChanged(bool)
    fontChanged              : typing.ClassVar[Signal] = ... # fontChanged(QFont)
    textChanged              : typing.ClassVar[Signal] = ... # textChanged(QString)
    textColorChanged         : typing.ClassVar[Signal] = ... # textColorChanged(QColor)

    @typing.overload
    def __init__(self, text: str, font: PySide6.QtGui.QFont, position: PySide6.QtGui.QVector3D, scaling: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, /, parent: PySide6.QtCore.QObject | None = ..., *, textColor: PySide6.QtGui.QColor | None = ..., backgroundColor: PySide6.QtGui.QColor | None = ..., borderEnabled: bool | None = ..., backgroundEnabled: bool | None = ..., facingCamera: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, text: str | None = ..., font: PySide6.QtGui.QFont | None = ..., textColor: PySide6.QtGui.QColor | None = ..., backgroundColor: PySide6.QtGui.QColor | None = ..., borderEnabled: bool | None = ..., backgroundEnabled: bool | None = ..., facingCamera: bool | None = ...) -> None: ...

    @property
    def backgroundColor(self, /) -> PySide6.QtGui.QColor: ...
    @backgroundColor.setter
    def backgroundColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def backgroundEnabled(self, /) -> bool: ...
    @backgroundEnabled.setter
    def backgroundEnabled(self, enabled: bool, /) -> None: ...
    @property
    def borderEnabled(self, /) -> bool: ...
    @borderEnabled.setter
    def borderEnabled(self, enabled: bool, /) -> None: ...
    @property
    def facingCamera(self, /) -> bool: ...
    @facingCamera.setter
    def facingCamera(self, enabled: bool, /) -> None: ...
    @property
    def font(self, /) -> PySide6.QtGui.QFont: ...
    @font.setter
    def font(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
    @property
    def text(self, /) -> str: ...
    @text.setter
    def text(self, text: str, /) -> None: ...
    @property
    def textColor(self, /) -> PySide6.QtGui.QColor: ...
    @textColor.setter
    def textColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...


class QCustom3DVolume(PySide6.QtDataVisualization.QCustom3DItem):

    alphaMultiplierChanged   : typing.ClassVar[Signal] = ... # alphaMultiplierChanged(float)
    colorTableChanged        : typing.ClassVar[Signal] = ... # colorTableChanged()
    drawSliceFramesChanged   : typing.ClassVar[Signal] = ... # drawSliceFramesChanged(bool)
    drawSlicesChanged        : typing.ClassVar[Signal] = ... # drawSlicesChanged(bool)
    preserveOpacityChanged   : typing.ClassVar[Signal] = ... # preserveOpacityChanged(bool)
    sliceFrameColorChanged   : typing.ClassVar[Signal] = ... # sliceFrameColorChanged(QColor)
    sliceFrameGapsChanged    : typing.ClassVar[Signal] = ... # sliceFrameGapsChanged(QVector3D)
    sliceFrameThicknessesChanged: typing.ClassVar[Signal] = ... # sliceFrameThicknessesChanged(QVector3D)
    sliceFrameWidthsChanged  : typing.ClassVar[Signal] = ... # sliceFrameWidthsChanged(QVector3D)
    sliceIndexXChanged       : typing.ClassVar[Signal] = ... # sliceIndexXChanged(int)
    sliceIndexYChanged       : typing.ClassVar[Signal] = ... # sliceIndexYChanged(int)
    sliceIndexZChanged       : typing.ClassVar[Signal] = ... # sliceIndexZChanged(int)
    textureDataChanged       : typing.ClassVar[Signal] = ... # textureDataChanged(QList<uchar>*)
    textureDepthChanged      : typing.ClassVar[Signal] = ... # textureDepthChanged(int)
    textureFormatChanged     : typing.ClassVar[Signal] = ... # textureFormatChanged(QImage::Format)
    textureHeightChanged     : typing.ClassVar[Signal] = ... # textureHeightChanged(int)
    textureWidthChanged      : typing.ClassVar[Signal] = ... # textureWidthChanged(int)
    useHighDefShaderChanged  : typing.ClassVar[Signal] = ... # useHighDefShaderChanged(bool)

    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, scaling: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, textureWidth: int, textureHeight: int, textureDepth: int, textureData: collections.abc.Sequence[int], textureFormat: PySide6.QtGui.QImage.Format, colorTable: collections.abc.Sequence[int], /, parent: PySide6.QtCore.QObject | None = ..., *, sliceIndexX: int | None = ..., sliceIndexY: int | None = ..., sliceIndexZ: int | None = ..., alphaMultiplier: float | None = ..., preserveOpacity: bool | None = ..., useHighDefShader: bool | None = ..., drawSlices: bool | None = ..., drawSliceFrames: bool | None = ..., sliceFrameColor: PySide6.QtGui.QColor | None = ..., sliceFrameWidths: PySide6.QtGui.QVector3D | None = ..., sliceFrameGaps: PySide6.QtGui.QVector3D | None = ..., sliceFrameThicknesses: PySide6.QtGui.QVector3D | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, textureWidth: int | None = ..., textureHeight: int | None = ..., textureDepth: int | None = ..., sliceIndexX: int | None = ..., sliceIndexY: int | None = ..., sliceIndexZ: int | None = ..., colorTable: collections.abc.Sequence[int] | None = ..., textureData: collections.abc.Sequence[int] | None = ..., alphaMultiplier: float | None = ..., preserveOpacity: bool | None = ..., useHighDefShader: bool | None = ..., drawSlices: bool | None = ..., drawSliceFrames: bool | None = ..., sliceFrameColor: PySide6.QtGui.QColor | None = ..., sliceFrameWidths: PySide6.QtGui.QVector3D | None = ..., sliceFrameGaps: PySide6.QtGui.QVector3D | None = ..., sliceFrameThicknesses: PySide6.QtGui.QVector3D | None = ...) -> None: ...

    @property
    def alphaMultiplier(self, /) -> float: ...
    @alphaMultiplier.setter
    def alphaMultiplier(self, mult: float, /) -> None: ...
    @property
    def colorTable(self, /) -> typing.List[int]: ...
    @colorTable.setter
    def colorTable(self, colors: collections.abc.Sequence[int], /) -> None: ...
    def createTextureData(self, images: collections.abc.Sequence[PySide6.QtGui.QImage], /) -> typing.List[int]: ...
    @property
    def drawSliceFrames(self, /) -> bool: ...
    @drawSliceFrames.setter
    def drawSliceFrames(self, enable: bool, /) -> None: ...
    @property
    def drawSlices(self, /) -> bool: ...
    @drawSlices.setter
    def drawSlices(self, enable: bool, /) -> None: ...
    @property
    def preserveOpacity(self, /) -> bool: ...
    @preserveOpacity.setter
    def preserveOpacity(self, enable: bool, /) -> None: ...
    def renderSlice(self, axis: PySide6.QtCore.Qt.Axis, index: int, /) -> PySide6.QtGui.QImage: ...
    def setSliceIndices(self, x: int, y: int, z: int, /) -> None: ...
    @typing.overload
    def setSubTextureData(self, axis: PySide6.QtCore.Qt.Axis, index: int, image: PySide6.QtGui.QImage, /) -> None: ...
    @typing.overload
    def setSubTextureData(self, axis: PySide6.QtCore.Qt.Axis, index: int, data: bytes | bytearray | memoryview, /) -> None: ...
    def setTextureDimensions(self, width: int, height: int, depth: int, /) -> None: ...
    def setTextureFormat(self, format: PySide6.QtGui.QImage.Format, /) -> None: ...
    @property
    def sliceFrameColor(self, /) -> PySide6.QtGui.QColor: ...
    @sliceFrameColor.setter
    def sliceFrameColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def sliceFrameGaps(self, /) -> PySide6.QtGui.QVector3D: ...
    @sliceFrameGaps.setter
    def sliceFrameGaps(self, values: PySide6.QtGui.QVector3D, /) -> None: ...
    @property
    def sliceFrameThicknesses(self, /) -> PySide6.QtGui.QVector3D: ...
    @sliceFrameThicknesses.setter
    def sliceFrameThicknesses(self, values: PySide6.QtGui.QVector3D, /) -> None: ...
    @property
    def sliceFrameWidths(self, /) -> PySide6.QtGui.QVector3D: ...
    @sliceFrameWidths.setter
    def sliceFrameWidths(self, values: PySide6.QtGui.QVector3D, /) -> None: ...
    @property
    def sliceIndexX(self, /) -> int: ...
    @sliceIndexX.setter
    def sliceIndexX(self, value: int, /) -> None: ...
    @property
    def sliceIndexY(self, /) -> int: ...
    @sliceIndexY.setter
    def sliceIndexY(self, value: int, /) -> None: ...
    @property
    def sliceIndexZ(self, /) -> int: ...
    @sliceIndexZ.setter
    def sliceIndexZ(self, value: int, /) -> None: ...
    @property
    def textureData(self, /) -> typing.List[int]: ...
    @textureData.setter
    def textureData(self, arg__1: collections.abc.Sequence[int], /) -> None: ...
    def textureDataWidth(self, /) -> int: ...
    @property
    def textureDepth(self, /) -> int: ...
    @textureDepth.setter
    def textureDepth(self, value: int, /) -> None: ...
    def textureFormat(self, /) -> PySide6.QtGui.QImage.Format: ...
    @property
    def textureHeight(self, /) -> int: ...
    @textureHeight.setter
    def textureHeight(self, value: int, /) -> None: ...
    @property
    def textureWidth(self, /) -> int: ...
    @textureWidth.setter
    def textureWidth(self, value: int, /) -> None: ...
    @property
    def useHighDefShader(self, /) -> bool: ...
    @useHighDefShader.setter
    def useHighDefShader(self, enable: bool, /) -> None: ...


class QHeightMapSurfaceDataProxy(PySide6.QtDataVisualization.QSurfaceDataProxy):

    autoScaleYChanged        : typing.ClassVar[Signal] = ... # autoScaleYChanged(bool)
    heightMapChanged         : typing.ClassVar[Signal] = ... # heightMapChanged(QImage)
    heightMapFileChanged     : typing.ClassVar[Signal] = ... # heightMapFileChanged(QString)
    maxXValueChanged         : typing.ClassVar[Signal] = ... # maxXValueChanged(float)
    maxYValueChanged         : typing.ClassVar[Signal] = ... # maxYValueChanged(float)
    maxZValueChanged         : typing.ClassVar[Signal] = ... # maxZValueChanged(float)
    minXValueChanged         : typing.ClassVar[Signal] = ... # minXValueChanged(float)
    minYValueChanged         : typing.ClassVar[Signal] = ... # minYValueChanged(float)
    minZValueChanged         : typing.ClassVar[Signal] = ... # minZValueChanged(float)

    @typing.overload
    def __init__(self, image: PySide6.QtGui.QImage, /, parent: PySide6.QtCore.QObject | None = ..., *, heightMap: PySide6.QtGui.QImage | None = ..., heightMapFile: str | None = ..., minXValue: float | None = ..., maxXValue: float | None = ..., minZValue: float | None = ..., maxZValue: float | None = ..., minYValue: float | None = ..., maxYValue: float | None = ..., autoScaleY: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, filename: str, /, parent: PySide6.QtCore.QObject | None = ..., *, heightMap: PySide6.QtGui.QImage | None = ..., heightMapFile: str | None = ..., minXValue: float | None = ..., maxXValue: float | None = ..., minZValue: float | None = ..., maxZValue: float | None = ..., minYValue: float | None = ..., maxYValue: float | None = ..., autoScaleY: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, heightMap: PySide6.QtGui.QImage | None = ..., heightMapFile: str | None = ..., minXValue: float | None = ..., maxXValue: float | None = ..., minZValue: float | None = ..., maxZValue: float | None = ..., minYValue: float | None = ..., maxYValue: float | None = ..., autoScaleY: bool | None = ...) -> None: ...

    @property
    def autoScaleY(self, /) -> bool: ...
    @autoScaleY.setter
    def autoScaleY(self, enabled: bool, /) -> None: ...
    @property
    def heightMap(self, /) -> PySide6.QtGui.QImage: ...
    @heightMap.setter
    def heightMap(self, image: PySide6.QtGui.QImage, /) -> None: ...
    @property
    def heightMapFile(self, /) -> str: ...
    @heightMapFile.setter
    def heightMapFile(self, filename: str, /) -> None: ...
    @property
    def maxXValue(self, /) -> float: ...
    @maxXValue.setter
    def maxXValue(self, max: float, /) -> None: ...
    @property
    def maxYValue(self, /) -> float: ...
    @maxYValue.setter
    def maxYValue(self, max: float, /) -> None: ...
    @property
    def maxZValue(self, /) -> float: ...
    @maxZValue.setter
    def maxZValue(self, max: float, /) -> None: ...
    @property
    def minXValue(self, /) -> float: ...
    @minXValue.setter
    def minXValue(self, min: float, /) -> None: ...
    @property
    def minYValue(self, /) -> float: ...
    @minYValue.setter
    def minYValue(self, min: float, /) -> None: ...
    @property
    def minZValue(self, /) -> float: ...
    @minZValue.setter
    def minZValue(self, min: float, /) -> None: ...
    def setValueRanges(self, minX: float, maxX: float, minZ: float, maxZ: float, /) -> None: ...


class QIntList: ...


class QItemModelBarDataProxy(PySide6.QtDataVisualization.QBarDataProxy):

    autoColumnCategoriesChanged: typing.ClassVar[Signal] = ... # autoColumnCategoriesChanged(bool)
    autoRowCategoriesChanged : typing.ClassVar[Signal] = ... # autoRowCategoriesChanged(bool)
    columnCategoriesChanged  : typing.ClassVar[Signal] = ... # columnCategoriesChanged()
    columnRoleChanged        : typing.ClassVar[Signal] = ... # columnRoleChanged(QString)
    columnRolePatternChanged : typing.ClassVar[Signal] = ... # columnRolePatternChanged(QRegularExpression)
    columnRoleReplaceChanged : typing.ClassVar[Signal] = ... # columnRoleReplaceChanged(QString)
    itemModelChanged         : typing.ClassVar[Signal] = ... # itemModelChanged(const QAbstractItemModel*)
    multiMatchBehaviorChanged: typing.ClassVar[Signal] = ... # multiMatchBehaviorChanged(MultiMatchBehavior)
    rotationRoleChanged      : typing.ClassVar[Signal] = ... # rotationRoleChanged(QString)
    rotationRolePatternChanged: typing.ClassVar[Signal] = ... # rotationRolePatternChanged(QRegularExpression)
    rotationRoleReplaceChanged: typing.ClassVar[Signal] = ... # rotationRoleReplaceChanged(QString)
    rowCategoriesChanged     : typing.ClassVar[Signal] = ... # rowCategoriesChanged()
    rowRoleChanged           : typing.ClassVar[Signal] = ... # rowRoleChanged(QString)
    rowRolePatternChanged    : typing.ClassVar[Signal] = ... # rowRolePatternChanged(QRegularExpression)
    rowRoleReplaceChanged    : typing.ClassVar[Signal] = ... # rowRoleReplaceChanged(QString)
    useModelCategoriesChanged: typing.ClassVar[Signal] = ... # useModelCategoriesChanged(bool)
    valueRoleChanged         : typing.ClassVar[Signal] = ... # valueRoleChanged(QString)
    valueRolePatternChanged  : typing.ClassVar[Signal] = ... # valueRolePatternChanged(QRegularExpression)
    valueRoleReplaceChanged  : typing.ClassVar[Signal] = ... # valueRoleReplaceChanged(QString)

    class MultiMatchBehavior(enum.Enum):

        MMBFirst                  = ...  # 0x0
        MMBLast                   = ...  # 0x1
        MMBAverage                = ...  # 0x2
        MMBCumulative             = ...  # 0x3


    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, valueRole: str, rotationRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, valueRole: str, rotationRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, valueRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, rotationRole: str | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, valueRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rotationRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, valueRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rowRole: str | None = ..., columnRole: str | None = ..., rotationRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, /, parent: PySide6.QtCore.QObject | None = ..., *, rowRole: str | None = ..., columnRole: str | None = ..., valueRole: str | None = ..., rotationRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, itemModel: PySide6.QtCore.QAbstractItemModel | None = ..., rowRole: str | None = ..., columnRole: str | None = ..., valueRole: str | None = ..., rotationRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., valueRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., valueRoleReplace: str | None = ..., rotationRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior | None = ...) -> None: ...

    @property
    def autoColumnCategories(self, /) -> bool: ...
    @autoColumnCategories.setter
    def autoColumnCategories(self, enable: bool, /) -> None: ...
    @property
    def autoRowCategories(self, /) -> bool: ...
    @autoRowCategories.setter
    def autoRowCategories(self, enable: bool, /) -> None: ...
    @property
    def columnCategories(self, /) -> typing.List[str]: ...
    @columnCategories.setter
    def columnCategories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def columnCategoryIndex(self, category: str, /) -> int: ...
    @property
    def columnRole(self, /) -> str: ...
    @columnRole.setter
    def columnRole(self, role: str, /) -> None: ...
    @property
    def columnRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @columnRolePattern.setter
    def columnRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def columnRoleReplace(self, /) -> str: ...
    @columnRoleReplace.setter
    def columnRoleReplace(self, replace: str, /) -> None: ...
    @property
    def itemModel(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    @itemModel.setter
    def itemModel(self, itemModel: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    @property
    def multiMatchBehavior(self, /) -> PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior: ...
    @multiMatchBehavior.setter
    def multiMatchBehavior(self, behavior: PySide6.QtDataVisualization.QItemModelBarDataProxy.MultiMatchBehavior, /) -> None: ...
    def remap(self, rowRole: str, columnRole: str, valueRole: str, rotationRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /) -> None: ...
    @property
    def rotationRole(self, /) -> str: ...
    @rotationRole.setter
    def rotationRole(self, role: str, /) -> None: ...
    @property
    def rotationRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @rotationRolePattern.setter
    def rotationRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def rotationRoleReplace(self, /) -> str: ...
    @rotationRoleReplace.setter
    def rotationRoleReplace(self, replace: str, /) -> None: ...
    @property
    def rowCategories(self, /) -> typing.List[str]: ...
    @rowCategories.setter
    def rowCategories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def rowCategoryIndex(self, category: str, /) -> int: ...
    @property
    def rowRole(self, /) -> str: ...
    @rowRole.setter
    def rowRole(self, role: str, /) -> None: ...
    @property
    def rowRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @rowRolePattern.setter
    def rowRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def rowRoleReplace(self, /) -> str: ...
    @rowRoleReplace.setter
    def rowRoleReplace(self, replace: str, /) -> None: ...
    @property
    def useModelCategories(self, /) -> bool: ...
    @useModelCategories.setter
    def useModelCategories(self, enable: bool, /) -> None: ...
    @property
    def valueRole(self, /) -> str: ...
    @valueRole.setter
    def valueRole(self, role: str, /) -> None: ...
    @property
    def valueRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @valueRolePattern.setter
    def valueRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def valueRoleReplace(self, /) -> str: ...
    @valueRoleReplace.setter
    def valueRoleReplace(self, replace: str, /) -> None: ...


class QItemModelScatterDataProxy(PySide6.QtDataVisualization.QScatterDataProxy):

    itemModelChanged         : typing.ClassVar[Signal] = ... # itemModelChanged(const QAbstractItemModel*)
    rotationRoleChanged      : typing.ClassVar[Signal] = ... # rotationRoleChanged(QString)
    rotationRolePatternChanged: typing.ClassVar[Signal] = ... # rotationRolePatternChanged(QRegularExpression)
    rotationRoleReplaceChanged: typing.ClassVar[Signal] = ... # rotationRoleReplaceChanged(QString)
    xPosRoleChanged          : typing.ClassVar[Signal] = ... # xPosRoleChanged(QString)
    xPosRolePatternChanged   : typing.ClassVar[Signal] = ... # xPosRolePatternChanged(QRegularExpression)
    xPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # xPosRoleReplaceChanged(QString)
    yPosRoleChanged          : typing.ClassVar[Signal] = ... # yPosRoleChanged(QString)
    yPosRolePatternChanged   : typing.ClassVar[Signal] = ... # yPosRolePatternChanged(QRegularExpression)
    yPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # yPosRoleReplaceChanged(QString)
    zPosRoleChanged          : typing.ClassVar[Signal] = ... # zPosRoleChanged(QString)
    zPosRolePatternChanged   : typing.ClassVar[Signal] = ... # zPosRolePatternChanged(QRegularExpression)
    zPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # zPosRoleReplaceChanged(QString)

    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, xPosRole: str, yPosRole: str, zPosRole: str, rotationRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., rotationRoleReplace: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, xPosRole: str, yPosRole: str, zPosRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rotationRole: str | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., rotationRoleReplace: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, /, parent: PySide6.QtCore.QObject | None = ..., *, xPosRole: str | None = ..., yPosRole: str | None = ..., zPosRole: str | None = ..., rotationRole: str | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., rotationRoleReplace: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, itemModel: PySide6.QtCore.QAbstractItemModel | None = ..., xPosRole: str | None = ..., yPosRole: str | None = ..., zPosRole: str | None = ..., rotationRole: str | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rotationRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., rotationRoleReplace: str | None = ...) -> None: ...

    @property
    def itemModel(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    @itemModel.setter
    def itemModel(self, itemModel: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    def remap(self, xPosRole: str, yPosRole: str, zPosRole: str, rotationRole: str, /) -> None: ...
    @property
    def rotationRole(self, /) -> str: ...
    @rotationRole.setter
    def rotationRole(self, role: str, /) -> None: ...
    @property
    def rotationRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @rotationRolePattern.setter
    def rotationRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def rotationRoleReplace(self, /) -> str: ...
    @rotationRoleReplace.setter
    def rotationRoleReplace(self, replace: str, /) -> None: ...
    @property
    def xPosRole(self, /) -> str: ...
    @xPosRole.setter
    def xPosRole(self, role: str, /) -> None: ...
    @property
    def xPosRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @xPosRolePattern.setter
    def xPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def xPosRoleReplace(self, /) -> str: ...
    @xPosRoleReplace.setter
    def xPosRoleReplace(self, replace: str, /) -> None: ...
    @property
    def yPosRole(self, /) -> str: ...
    @yPosRole.setter
    def yPosRole(self, role: str, /) -> None: ...
    @property
    def yPosRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @yPosRolePattern.setter
    def yPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def yPosRoleReplace(self, /) -> str: ...
    @yPosRoleReplace.setter
    def yPosRoleReplace(self, replace: str, /) -> None: ...
    @property
    def zPosRole(self, /) -> str: ...
    @zPosRole.setter
    def zPosRole(self, role: str, /) -> None: ...
    @property
    def zPosRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @zPosRolePattern.setter
    def zPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def zPosRoleReplace(self, /) -> str: ...
    @zPosRoleReplace.setter
    def zPosRoleReplace(self, replace: str, /) -> None: ...


class QItemModelSurfaceDataProxy(PySide6.QtDataVisualization.QSurfaceDataProxy):

    autoColumnCategoriesChanged: typing.ClassVar[Signal] = ... # autoColumnCategoriesChanged(bool)
    autoRowCategoriesChanged : typing.ClassVar[Signal] = ... # autoRowCategoriesChanged(bool)
    columnCategoriesChanged  : typing.ClassVar[Signal] = ... # columnCategoriesChanged()
    columnRoleChanged        : typing.ClassVar[Signal] = ... # columnRoleChanged(QString)
    columnRolePatternChanged : typing.ClassVar[Signal] = ... # columnRolePatternChanged(QRegularExpression)
    columnRoleReplaceChanged : typing.ClassVar[Signal] = ... # columnRoleReplaceChanged(QString)
    itemModelChanged         : typing.ClassVar[Signal] = ... # itemModelChanged(const QAbstractItemModel*)
    multiMatchBehaviorChanged: typing.ClassVar[Signal] = ... # multiMatchBehaviorChanged(MultiMatchBehavior)
    rowCategoriesChanged     : typing.ClassVar[Signal] = ... # rowCategoriesChanged()
    rowRoleChanged           : typing.ClassVar[Signal] = ... # rowRoleChanged(QString)
    rowRolePatternChanged    : typing.ClassVar[Signal] = ... # rowRolePatternChanged(QRegularExpression)
    rowRoleReplaceChanged    : typing.ClassVar[Signal] = ... # rowRoleReplaceChanged(QString)
    useModelCategoriesChanged: typing.ClassVar[Signal] = ... # useModelCategoriesChanged(bool)
    xPosRoleChanged          : typing.ClassVar[Signal] = ... # xPosRoleChanged(QString)
    xPosRolePatternChanged   : typing.ClassVar[Signal] = ... # xPosRolePatternChanged(QRegularExpression)
    xPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # xPosRoleReplaceChanged(QString)
    yPosRoleChanged          : typing.ClassVar[Signal] = ... # yPosRoleChanged(QString)
    yPosRolePatternChanged   : typing.ClassVar[Signal] = ... # yPosRolePatternChanged(QRegularExpression)
    yPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # yPosRoleReplaceChanged(QString)
    zPosRoleChanged          : typing.ClassVar[Signal] = ... # zPosRoleChanged(QString)
    zPosRolePatternChanged   : typing.ClassVar[Signal] = ... # zPosRolePatternChanged(QRegularExpression)
    zPosRoleReplaceChanged   : typing.ClassVar[Signal] = ... # zPosRoleReplaceChanged(QString)

    class MultiMatchBehavior(enum.Enum):

        MMBFirst                  = ...  # 0x0
        MMBLast                   = ...  # 0x1
        MMBAverage                = ...  # 0x2
        MMBCumulativeY            = ...  # 0x3


    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, xPosRole: str, yPosRole: str, zPosRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, xPosRole: str, yPosRole: str, zPosRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, yPosRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /, parent: PySide6.QtCore.QObject | None = ..., *, xPosRole: str | None = ..., zPosRole: str | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, rowRole: str, columnRole: str, yPosRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, xPosRole: str | None = ..., zPosRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, yPosRole: str, /, parent: PySide6.QtCore.QObject | None = ..., *, rowRole: str | None = ..., columnRole: str | None = ..., xPosRole: str | None = ..., zPosRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, itemModel: PySide6.QtCore.QAbstractItemModel, /, parent: PySide6.QtCore.QObject | None = ..., *, rowRole: str | None = ..., columnRole: str | None = ..., xPosRole: str | None = ..., yPosRole: str | None = ..., zPosRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, itemModel: PySide6.QtCore.QAbstractItemModel | None = ..., rowRole: str | None = ..., columnRole: str | None = ..., xPosRole: str | None = ..., yPosRole: str | None = ..., zPosRole: str | None = ..., rowCategories: collections.abc.Sequence[str] | None = ..., columnCategories: collections.abc.Sequence[str] | None = ..., useModelCategories: bool | None = ..., autoRowCategories: bool | None = ..., autoColumnCategories: bool | None = ..., rowRolePattern: PySide6.QtCore.QRegularExpression | None = ..., columnRolePattern: PySide6.QtCore.QRegularExpression | None = ..., xPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., yPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., zPosRolePattern: PySide6.QtCore.QRegularExpression | None = ..., rowRoleReplace: str | None = ..., columnRoleReplace: str | None = ..., xPosRoleReplace: str | None = ..., yPosRoleReplace: str | None = ..., zPosRoleReplace: str | None = ..., multiMatchBehavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior | None = ...) -> None: ...

    @property
    def autoColumnCategories(self, /) -> bool: ...
    @autoColumnCategories.setter
    def autoColumnCategories(self, enable: bool, /) -> None: ...
    @property
    def autoRowCategories(self, /) -> bool: ...
    @autoRowCategories.setter
    def autoRowCategories(self, enable: bool, /) -> None: ...
    @property
    def columnCategories(self, /) -> typing.List[str]: ...
    @columnCategories.setter
    def columnCategories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def columnCategoryIndex(self, category: str, /) -> int: ...
    @property
    def columnRole(self, /) -> str: ...
    @columnRole.setter
    def columnRole(self, role: str, /) -> None: ...
    @property
    def columnRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @columnRolePattern.setter
    def columnRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def columnRoleReplace(self, /) -> str: ...
    @columnRoleReplace.setter
    def columnRoleReplace(self, replace: str, /) -> None: ...
    @property
    def itemModel(self, /) -> PySide6.QtCore.QAbstractItemModel: ...
    @itemModel.setter
    def itemModel(self, itemModel: PySide6.QtCore.QAbstractItemModel, /) -> None: ...
    @property
    def multiMatchBehavior(self, /) -> PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior: ...
    @multiMatchBehavior.setter
    def multiMatchBehavior(self, behavior: PySide6.QtDataVisualization.QItemModelSurfaceDataProxy.MultiMatchBehavior, /) -> None: ...
    def remap(self, rowRole: str, columnRole: str, xPosRole: str, yPosRole: str, zPosRole: str, rowCategories: collections.abc.Sequence[str], columnCategories: collections.abc.Sequence[str], /) -> None: ...
    @property
    def rowCategories(self, /) -> typing.List[str]: ...
    @rowCategories.setter
    def rowCategories(self, categories: collections.abc.Sequence[str], /) -> None: ...
    def rowCategoryIndex(self, category: str, /) -> int: ...
    @property
    def rowRole(self, /) -> str: ...
    @rowRole.setter
    def rowRole(self, role: str, /) -> None: ...
    @property
    def rowRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @rowRolePattern.setter
    def rowRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def rowRoleReplace(self, /) -> str: ...
    @rowRoleReplace.setter
    def rowRoleReplace(self, replace: str, /) -> None: ...
    @property
    def useModelCategories(self, /) -> bool: ...
    @useModelCategories.setter
    def useModelCategories(self, enable: bool, /) -> None: ...
    @property
    def xPosRole(self, /) -> str: ...
    @xPosRole.setter
    def xPosRole(self, role: str, /) -> None: ...
    @property
    def xPosRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @xPosRolePattern.setter
    def xPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def xPosRoleReplace(self, /) -> str: ...
    @xPosRoleReplace.setter
    def xPosRoleReplace(self, replace: str, /) -> None: ...
    @property
    def yPosRole(self, /) -> str: ...
    @yPosRole.setter
    def yPosRole(self, role: str, /) -> None: ...
    @property
    def yPosRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @yPosRolePattern.setter
    def yPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def yPosRoleReplace(self, /) -> str: ...
    @yPosRoleReplace.setter
    def yPosRoleReplace(self, replace: str, /) -> None: ...
    @property
    def zPosRole(self, /) -> str: ...
    @zPosRole.setter
    def zPosRole(self, role: str, /) -> None: ...
    @property
    def zPosRolePattern(self, /) -> PySide6.QtCore.QRegularExpression: ...
    @zPosRolePattern.setter
    def zPosRolePattern(self, pattern: PySide6.QtCore.QRegularExpression | str, /) -> None: ...
    @property
    def zPosRoleReplace(self, /) -> str: ...
    @zPosRoleReplace.setter
    def zPosRoleReplace(self, replace: str, /) -> None: ...


class QLogValue3DAxisFormatter(PySide6.QtDataVisualization.QValue3DAxisFormatter):

    autoSubGridChanged       : typing.ClassVar[Signal] = ... # autoSubGridChanged(bool)
    baseChanged              : typing.ClassVar[Signal] = ... # baseChanged(double)
    showEdgeLabelsChanged    : typing.ClassVar[Signal] = ... # showEdgeLabelsChanged(bool)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, base: float | None = ..., autoSubGrid: bool | None = ..., showEdgeLabels: bool | None = ...) -> None: ...

    @property
    def autoSubGrid(self, /) -> bool: ...
    @autoSubGrid.setter
    def autoSubGrid(self, enabled: bool, /) -> None: ...
    @property
    def base(self, /) -> float: ...
    @base.setter
    def base(self, base: float, /) -> None: ...
    def createNewInstance(self, /) -> PySide6.QtDataVisualization.QValue3DAxisFormatter: ...
    def populateCopy(self, copy: PySide6.QtDataVisualization.QValue3DAxisFormatter, /) -> None: ...
    def positionAt(self, value: float, /) -> float: ...
    def recalculate(self, /) -> None: ...
    @property
    def showEdgeLabels(self, /) -> bool: ...
    @showEdgeLabels.setter
    def showEdgeLabels(self, enabled: bool, /) -> None: ...
    def valueAt(self, position: float, /) -> float: ...


class QScatter3DSeries(PySide6.QtDataVisualization.QAbstract3DSeries):

    dataProxyChanged         : typing.ClassVar[Signal] = ... # dataProxyChanged(QScatterDataProxy*)
    itemSizeChanged          : typing.ClassVar[Signal] = ... # itemSizeChanged(float)
    selectedItemChanged      : typing.ClassVar[Signal] = ... # selectedItemChanged(int)

    @typing.overload
    def __init__(self, dataProxy: PySide6.QtDataVisualization.QScatterDataProxy, /, parent: PySide6.QtCore.QObject | None = ..., *, selectedItem: int | None = ..., itemSize: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, dataProxy: PySide6.QtDataVisualization.QScatterDataProxy | None = ..., selectedItem: int | None = ..., itemSize: float | None = ...) -> None: ...

    @property
    def dataProxy(self, /) -> PySide6.QtDataVisualization.QScatterDataProxy: ...
    @dataProxy.setter
    def dataProxy(self, proxy: PySide6.QtDataVisualization.QScatterDataProxy, /) -> None: ...
    @staticmethod
    def invalidSelectionIndex() -> int: ...
    @property
    def itemSize(self, /) -> float: ...
    @itemSize.setter
    def itemSize(self, size: float, /) -> None: ...
    @property
    def selectedItem(self, /) -> int: ...
    @selectedItem.setter
    def selectedItem(self, index: int, /) -> None: ...


class QScatterDataItem(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtDataVisualization.QScatterDataItem, /) -> None: ...
    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, rotation: PySide6.QtGui.QQuaternion, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def createExtraData(self, /) -> None: ...
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    def rotation(self, /) -> PySide6.QtGui.QQuaternion: ...
    def setPosition(self, pos: PySide6.QtGui.QVector3D, /) -> None: ...
    def setRotation(self, rot: PySide6.QtGui.QQuaternion, /) -> None: ...
    def setX(self, value: float, /) -> None: ...
    def setY(self, value: float, /) -> None: ...
    def setZ(self, value: float, /) -> None: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QScatterDataProxy(PySide6.QtDataVisualization.QAbstractDataProxy):

    arrayReset               : typing.ClassVar[Signal] = ... # arrayReset()
    itemCountChanged         : typing.ClassVar[Signal] = ... # itemCountChanged(int)
    itemsAdded               : typing.ClassVar[Signal] = ... # itemsAdded(int,int)
    itemsChanged             : typing.ClassVar[Signal] = ... # itemsChanged(int,int)
    itemsInserted            : typing.ClassVar[Signal] = ... # itemsInserted(int,int)
    itemsRemoved             : typing.ClassVar[Signal] = ... # itemsRemoved(int,int)
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged(QScatter3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, itemCount: int | None = ..., series: PySide6.QtDataVisualization.QScatter3DSeries | None = ...) -> None: ...

    def addItem(self, item: PySide6.QtDataVisualization.QScatterDataItem | PySide6.QtGui.QVector3D, /) -> int: ...
    def addItems(self, items: collections.abc.Sequence[PySide6.QtDataVisualization.QScatterDataItem], /) -> int: ...
    def array(self, /) -> typing.List[PySide6.QtDataVisualization.QScatterDataItem]: ...
    def insertItem(self, index: int, item: PySide6.QtDataVisualization.QScatterDataItem | PySide6.QtGui.QVector3D, /) -> None: ...
    def insertItems(self, index: int, items: collections.abc.Sequence[PySide6.QtDataVisualization.QScatterDataItem], /) -> None: ...
    def itemAt(self, index: int, /) -> PySide6.QtDataVisualization.QScatterDataItem: ...
    @property
    def itemCount(self, /) -> int: ...
    def removeItems(self, index: int, removeCount: int, /) -> None: ...
    def resetArray(self, arg__1: collections.abc.Sequence[PySide6.QtDataVisualization.QScatterDataItem], /) -> None: ...
    @property
    def series(self, /) -> PySide6.QtDataVisualization.QScatter3DSeries: ...
    def setItem(self, index: int, item: PySide6.QtDataVisualization.QScatterDataItem | PySide6.QtGui.QVector3D, /) -> None: ...
    def setItems(self, index: int, items: collections.abc.Sequence[PySide6.QtDataVisualization.QScatterDataItem], /) -> None: ...


class QSurface3DSeries(PySide6.QtDataVisualization.QAbstract3DSeries):

    dataProxyChanged         : typing.ClassVar[Signal] = ... # dataProxyChanged(QSurfaceDataProxy*)
    drawModeChanged          : typing.ClassVar[Signal] = ... # drawModeChanged(QSurface3DSeries::DrawFlags)
    flatShadingEnabledChanged: typing.ClassVar[Signal] = ... # flatShadingEnabledChanged(bool)
    flatShadingSupportedChanged: typing.ClassVar[Signal] = ... # flatShadingSupportedChanged(bool)
    selectedPointChanged     : typing.ClassVar[Signal] = ... # selectedPointChanged(QPoint)
    textureChanged           : typing.ClassVar[Signal] = ... # textureChanged(QImage)
    textureFileChanged       : typing.ClassVar[Signal] = ... # textureFileChanged(QString)
    wireframeColorChanged    : typing.ClassVar[Signal] = ... # wireframeColorChanged(QColor)

    class DrawFlag(enum.Flag):

        DrawWireframe             = ...  # 0x1
        DrawSurface               = ...  # 0x2
        DrawSurfaceAndWireframe   = ...  # 0x3


    @typing.overload
    def __init__(self, dataProxy: PySide6.QtDataVisualization.QSurfaceDataProxy, /, parent: PySide6.QtCore.QObject | None = ..., *, selectedPoint: PySide6.QtCore.QPoint | None = ..., flatShadingEnabled: bool | None = ..., flatShadingSupported: bool | None = ..., drawMode: PySide6.QtDataVisualization.QSurface3DSeries.DrawFlag | None = ..., texture: PySide6.QtGui.QImage | None = ..., textureFile: str | None = ..., wireframeColor: PySide6.QtGui.QColor | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, dataProxy: PySide6.QtDataVisualization.QSurfaceDataProxy | None = ..., selectedPoint: PySide6.QtCore.QPoint | None = ..., flatShadingEnabled: bool | None = ..., flatShadingSupported: bool | None = ..., drawMode: PySide6.QtDataVisualization.QSurface3DSeries.DrawFlag | None = ..., texture: PySide6.QtGui.QImage | None = ..., textureFile: str | None = ..., wireframeColor: PySide6.QtGui.QColor | None = ...) -> None: ...

    @property
    def dataProxy(self, /) -> PySide6.QtDataVisualization.QSurfaceDataProxy: ...
    @dataProxy.setter
    def dataProxy(self, proxy: PySide6.QtDataVisualization.QSurfaceDataProxy, /) -> None: ...
    @property
    def drawMode(self, /) -> PySide6.QtDataVisualization.QSurface3DSeries.DrawFlag: ...
    @drawMode.setter
    def drawMode(self, mode: PySide6.QtDataVisualization.QSurface3DSeries.DrawFlag, /) -> None: ...
    @property
    def flatShadingEnabled(self, /) -> bool: ...
    @flatShadingEnabled.setter
    def flatShadingEnabled(self, enabled: bool, /) -> None: ...
    @property
    def flatShadingSupported(self, /) -> bool: ...
    @staticmethod
    def invalidSelectionPosition() -> PySide6.QtCore.QPoint: ...
    @property
    def selectedPoint(self, /) -> PySide6.QtCore.QPoint: ...
    @selectedPoint.setter
    def selectedPoint(self, position: PySide6.QtCore.QPoint, /) -> None: ...
    @property
    def texture(self, /) -> PySide6.QtGui.QImage: ...
    @texture.setter
    def texture(self, texture: PySide6.QtGui.QImage, /) -> None: ...
    @property
    def textureFile(self, /) -> str: ...
    @textureFile.setter
    def textureFile(self, filename: str, /) -> None: ...
    @property
    def wireframeColor(self, /) -> PySide6.QtGui.QColor: ...
    @wireframeColor.setter
    def wireframeColor(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...


class QSurfaceDataItem(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtDataVisualization.QSurfaceDataItem, /) -> None: ...
    @typing.overload
    def __init__(self, position: PySide6.QtGui.QVector3D, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def createExtraData(self, /) -> None: ...
    def position(self, /) -> PySide6.QtGui.QVector3D: ...
    def setPosition(self, pos: PySide6.QtGui.QVector3D, /) -> None: ...
    def setX(self, value: float, /) -> None: ...
    def setY(self, value: float, /) -> None: ...
    def setZ(self, value: float, /) -> None: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QSurfaceDataProxy(PySide6.QtDataVisualization.QAbstractDataProxy):

    arrayReset               : typing.ClassVar[Signal] = ... # arrayReset()
    columnCountChanged       : typing.ClassVar[Signal] = ... # columnCountChanged(int)
    itemChanged              : typing.ClassVar[Signal] = ... # itemChanged(int,int)
    rowCountChanged          : typing.ClassVar[Signal] = ... # rowCountChanged(int)
    rowsAdded                : typing.ClassVar[Signal] = ... # rowsAdded(int,int)
    rowsChanged              : typing.ClassVar[Signal] = ... # rowsChanged(int,int)
    rowsInserted             : typing.ClassVar[Signal] = ... # rowsInserted(int,int)
    rowsRemoved              : typing.ClassVar[Signal] = ... # rowsRemoved(int,int)
    seriesChanged            : typing.ClassVar[Signal] = ... # seriesChanged(QSurface3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, rowCount: int | None = ..., columnCount: int | None = ..., series: PySide6.QtDataVisualization.QSurface3DSeries | None = ...) -> None: ...

    def addRow(self, arg__1: collections.abc.Sequence[PySide6.QtDataVisualization.QSurfaceDataItem], /) -> int: ...
    def addRows(self, rows: typing.List[typing.List[PySide6.QtDataVisualization.QSurfaceDataItem]], /) -> int: ...
    def array(self, /) -> typing.List[typing.List[PySide6.QtDataVisualization.QSurfaceDataItem]]: ...
    @property
    def columnCount(self, /) -> int: ...
    def insertRow(self, arg__1: int, arg__2: collections.abc.Sequence[PySide6.QtDataVisualization.QSurfaceDataItem], /) -> None: ...
    def insertRows(self, rowIndex: int, rows: typing.List[typing.List[PySide6.QtDataVisualization.QSurfaceDataItem]], /) -> None: ...
    @typing.overload
    def itemAt(self, position: PySide6.QtCore.QPoint, /) -> PySide6.QtDataVisualization.QSurfaceDataItem: ...
    @typing.overload
    def itemAt(self, rowIndex: int, columnIndex: int, /) -> PySide6.QtDataVisualization.QSurfaceDataItem: ...
    def removeRows(self, rowIndex: int, removeCount: int, /) -> None: ...
    def resetArray(self, arg__1: typing.List[typing.List[PySide6.QtDataVisualization.QSurfaceDataItem]], /) -> None: ...
    def resetArrayNp(self, x: float, deltaX: float, z: float, deltaZ: float, data: collections.abc.Sequence[typing.Any], /) -> None: ...
    @property
    def rowCount(self, /) -> int: ...
    @property
    def series(self, /) -> PySide6.QtDataVisualization.QSurface3DSeries: ...
    @typing.overload
    def setItem(self, position: PySide6.QtCore.QPoint, item: PySide6.QtDataVisualization.QSurfaceDataItem | PySide6.QtGui.QVector3D, /) -> None: ...
    @typing.overload
    def setItem(self, rowIndex: int, columnIndex: int, item: PySide6.QtDataVisualization.QSurfaceDataItem | PySide6.QtGui.QVector3D, /) -> None: ...
    def setRow(self, arg__1: int, arg__2: collections.abc.Sequence[PySide6.QtDataVisualization.QSurfaceDataItem], /) -> None: ...
    def setRows(self, rowIndex: int, rows: typing.List[typing.List[PySide6.QtDataVisualization.QSurfaceDataItem]], /) -> None: ...


class QTouch3DInputHandler(PySide6.QtDataVisualization.Q3DInputHandler):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def touchEvent(self, event: PySide6.QtGui.QTouchEvent, /) -> None: ...


class QValue3DAxis(PySide6.QtDataVisualization.QAbstract3DAxis):

    formatterChanged         : typing.ClassVar[Signal] = ... # formatterChanged(QValue3DAxisFormatter*)
    labelFormatChanged       : typing.ClassVar[Signal] = ... # labelFormatChanged(QString)
    reversedChanged          : typing.ClassVar[Signal] = ... # reversedChanged(bool)
    segmentCountChanged      : typing.ClassVar[Signal] = ... # segmentCountChanged(int)
    subSegmentCountChanged   : typing.ClassVar[Signal] = ... # subSegmentCountChanged(int)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, segmentCount: int | None = ..., subSegmentCount: int | None = ..., labelFormat: str | None = ..., formatter: PySide6.QtDataVisualization.QValue3DAxisFormatter | None = ..., reversed: bool | None = ...) -> None: ...

    @property
    def formatter(self, /) -> PySide6.QtDataVisualization.QValue3DAxisFormatter: ...
    @formatter.setter
    def formatter(self, formatter: PySide6.QtDataVisualization.QValue3DAxisFormatter, /) -> None: ...
    @property
    def labelFormat(self, /) -> str: ...
    @labelFormat.setter
    def labelFormat(self, format: str, /) -> None: ...
    @property
    def reversed(self, /) -> bool: ...
    @reversed.setter
    def reversed(self, enable: bool, /) -> None: ...
    @property
    def segmentCount(self, /) -> int: ...
    @segmentCount.setter
    def segmentCount(self, count: int, /) -> None: ...
    @property
    def subSegmentCount(self, /) -> int: ...
    @subSegmentCount.setter
    def subSegmentCount(self, count: int, /) -> None: ...


class QValue3DAxisFormatter(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def allowNegatives(self, /) -> bool: ...
    def allowZero(self, /) -> bool: ...
    def axis(self, /) -> PySide6.QtDataVisualization.QValue3DAxis: ...
    def createNewInstance(self, /) -> PySide6.QtDataVisualization.QValue3DAxisFormatter: ...
    def gridPositions(self, /) -> typing.List[float]: ...
    def labelPositions(self, /) -> typing.List[float]: ...
    def labelStrings(self, /) -> typing.List[str]: ...
    def locale(self, /) -> PySide6.QtCore.QLocale: ...
    def markDirty(self, /, labelsChange: bool = ...) -> None: ...
    def populateCopy(self, copy: PySide6.QtDataVisualization.QValue3DAxisFormatter, /) -> None: ...
    def positionAt(self, value: float, /) -> float: ...
    def recalculate(self, /) -> None: ...
    def setAllowNegatives(self, allow: bool, /) -> None: ...
    def setAllowZero(self, allow: bool, /) -> None: ...
    def setGridPositions(self, grid_positions: collections.abc.Sequence[float], /) -> None: ...
    def setLabelPositions(self, label_positions: collections.abc.Sequence[float], /) -> None: ...
    def setLabelStrings(self, label_strings: collections.abc.Sequence[str], /) -> None: ...
    def setLocale(self, locale: PySide6.QtCore.QLocale | PySide6.QtCore.QLocale.Language, /) -> None: ...
    def stringForValue(self, value: float, format: str, /) -> str: ...
    def subGridPositions(self, /) -> typing.List[float]: ...
    def valueAt(self, position: float, /) -> float: ...


def qDefaultSurfaceFormat(antialias: bool, /) -> PySide6.QtGui.QSurfaceFormat: ...


# eof
