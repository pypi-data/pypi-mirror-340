# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtGraphsWidgets, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtGraphsWidgets`

import PySide6.QtGraphsWidgets
import PySide6.QtCore
import PySide6.QtGui
import PySide6.QtQuick
import PySide6.QtQuickWidgets
import PySide6.QtDataVisualization
import PySide6.QtGraphs

import typing
from PySide6.QtCore import Signal


class Q3DBarsWidgetItem(PySide6.QtGraphsWidgets.Q3DGraphsWidgetItem):

    barSeriesMarginChanged   : typing.ClassVar[Signal] = ... # barSeriesMarginChanged(QSizeF)
    barSpacingChanged        : typing.ClassVar[Signal] = ... # barSpacingChanged(QSizeF)
    barSpacingRelativeChanged: typing.ClassVar[Signal] = ... # barSpacingRelativeChanged(bool)
    barThicknessChanged      : typing.ClassVar[Signal] = ... # barThicknessChanged(float)
    columnAxisChanged        : typing.ClassVar[Signal] = ... # columnAxisChanged(QCategory3DAxis*)
    floorLevelChanged        : typing.ClassVar[Signal] = ... # floorLevelChanged(float)
    multiSeriesUniformChanged: typing.ClassVar[Signal] = ... # multiSeriesUniformChanged(bool)
    primarySeriesChanged     : typing.ClassVar[Signal] = ... # primarySeriesChanged(QBar3DSeries*)
    rowAxisChanged           : typing.ClassVar[Signal] = ... # rowAxisChanged(QCategory3DAxis*)
    selectedSeriesChanged    : typing.ClassVar[Signal] = ... # selectedSeriesChanged(QBar3DSeries*)
    valueAxisChanged         : typing.ClassVar[Signal] = ... # valueAxisChanged(QValue3DAxis*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, multiSeriesUniform: bool | None = ..., barThickness: float | None = ..., barSpacing: PySide6.QtCore.QSizeF | None = ..., barSpacingRelative: bool | None = ..., barSeriesMargin: PySide6.QtCore.QSizeF | None = ..., rowAxis: PySide6.QtDataVisualization.QCategory3DAxis | None = ..., columnAxis: PySide6.QtDataVisualization.QCategory3DAxis | None = ..., valueAxis: PySide6.QtDataVisualization.QValue3DAxis | None = ..., primarySeries: PySide6.QtDataVisualization.QBar3DSeries | None = ..., selectedSeries: PySide6.QtDataVisualization.QBar3DSeries | None = ..., floorLevel: float | None = ...) -> None: ...

    def addAxis(self, axis: PySide6.QtGraphs.QAbstract3DAxis, /) -> None: ...
    def addSeries(self, series: PySide6.QtGraphs.QBar3DSeries, /) -> None: ...
    def axes(self, /) -> typing.List[PySide6.QtGraphs.QAbstract3DAxis]: ...
    @property
    def barSeriesMargin(self, /) -> PySide6.QtCore.QSizeF: ...
    @barSeriesMargin.setter
    def barSeriesMargin(self, margin: PySide6.QtCore.QSizeF | PySide6.QtCore.QSize, /) -> None: ...
    @property
    def barSpacing(self, /) -> PySide6.QtCore.QSizeF: ...
    @barSpacing.setter
    def barSpacing(self, spacing: PySide6.QtCore.QSizeF | PySide6.QtCore.QSize, /) -> None: ...
    @property
    def barSpacingRelative(self, /) -> bool: ...
    @barSpacingRelative.setter
    def barSpacingRelative(self, relative: bool, /) -> None: ...
    @property
    def barThickness(self, /) -> float: ...
    @barThickness.setter
    def barThickness(self, thicknessRatio: float, /) -> None: ...
    @property
    def columnAxis(self, /) -> PySide6.QtGraphs.QCategory3DAxis: ...
    @columnAxis.setter
    def columnAxis(self, axis: PySide6.QtGraphs.QCategory3DAxis, /) -> None: ...
    def event(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    @property
    def floorLevel(self, /) -> float: ...
    @floorLevel.setter
    def floorLevel(self, level: float, /) -> None: ...
    def insertSeries(self, index: int, series: PySide6.QtGraphs.QBar3DSeries, /) -> None: ...
    @property
    def multiSeriesUniform(self, /) -> bool: ...
    @multiSeriesUniform.setter
    def multiSeriesUniform(self, uniform: bool, /) -> None: ...
    @property
    def primarySeries(self, /) -> PySide6.QtGraphs.QBar3DSeries: ...
    @primarySeries.setter
    def primarySeries(self, series: PySide6.QtGraphs.QBar3DSeries, /) -> None: ...
    def releaseAxis(self, axis: PySide6.QtGraphs.QAbstract3DAxis, /) -> None: ...
    def removeSeries(self, series: PySide6.QtGraphs.QBar3DSeries, /) -> None: ...
    @property
    def rowAxis(self, /) -> PySide6.QtGraphs.QCategory3DAxis: ...
    @rowAxis.setter
    def rowAxis(self, axis: PySide6.QtGraphs.QCategory3DAxis, /) -> None: ...
    @property
    def selectedSeries(self, /) -> PySide6.QtGraphs.QBar3DSeries: ...
    def seriesList(self, /) -> typing.List[PySide6.QtGraphs.QBar3DSeries]: ...
    @property
    def valueAxis(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    @valueAxis.setter
    def valueAxis(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...


class Q3DGraphsWidgetItem(PySide6.QtCore.QObject):

    activeThemeChanged       : typing.ClassVar[Signal] = ... # activeThemeChanged(QGraphsTheme*)
    ambientLightStrengthChanged: typing.ClassVar[Signal] = ... # ambientLightStrengthChanged()
    aspectRatioChanged       : typing.ClassVar[Signal] = ... # aspectRatioChanged(double)
    cameraPresetChanged      : typing.ClassVar[Signal] = ... # cameraPresetChanged(QtGraphs3D::CameraPreset)
    cameraTargetPositionChanged: typing.ClassVar[Signal] = ... # cameraTargetPositionChanged(QVector3D)
    cameraXRotationChanged   : typing.ClassVar[Signal] = ... # cameraXRotationChanged(float)
    cameraYRotationChanged   : typing.ClassVar[Signal] = ... # cameraYRotationChanged(float)
    cameraZoomLevelChanged   : typing.ClassVar[Signal] = ... # cameraZoomLevelChanged(float)
    currentFpsChanged        : typing.ClassVar[Signal] = ... # currentFpsChanged(int)
    doubleTapped             : typing.ClassVar[Signal] = ... # doubleTapped(QEventPoint,Qt::MouseButton)
    dragged                  : typing.ClassVar[Signal] = ... # dragged(QVector2D)
    gridLineTypeChanged      : typing.ClassVar[Signal] = ... # gridLineTypeChanged()
    horizontalAspectRatioChanged: typing.ClassVar[Signal] = ... # horizontalAspectRatioChanged(double)
    labelMarginChanged       : typing.ClassVar[Signal] = ... # labelMarginChanged(float)
    lightColorChanged        : typing.ClassVar[Signal] = ... # lightColorChanged()
    lightStrengthChanged     : typing.ClassVar[Signal] = ... # lightStrengthChanged()
    localeChanged            : typing.ClassVar[Signal] = ... # localeChanged(QLocale)
    longPressed              : typing.ClassVar[Signal] = ... # longPressed()
    marginChanged            : typing.ClassVar[Signal] = ... # marginChanged(double)
    maxCameraXRotationChanged: typing.ClassVar[Signal] = ... # maxCameraXRotationChanged(float)
    maxCameraYRotationChanged: typing.ClassVar[Signal] = ... # maxCameraYRotationChanged(float)
    maxCameraZoomLevelChanged: typing.ClassVar[Signal] = ... # maxCameraZoomLevelChanged(float)
    measureFpsChanged        : typing.ClassVar[Signal] = ... # measureFpsChanged(bool)
    minCameraXRotationChanged: typing.ClassVar[Signal] = ... # minCameraXRotationChanged(float)
    minCameraYRotationChanged: typing.ClassVar[Signal] = ... # minCameraYRotationChanged(float)
    minCameraZoomLevelChanged: typing.ClassVar[Signal] = ... # minCameraZoomLevelChanged(float)
    mouseMove                : typing.ClassVar[Signal] = ... # mouseMove(QPoint)
    msaaSamplesChanged       : typing.ClassVar[Signal] = ... # msaaSamplesChanged(int)
    optimizationHintChanged  : typing.ClassVar[Signal] = ... # optimizationHintChanged(QtGraphs3D::OptimizationHint)
    orthoProjectionChanged   : typing.ClassVar[Signal] = ... # orthoProjectionChanged(bool)
    pinch                    : typing.ClassVar[Signal] = ... # pinch(double)
    polarChanged             : typing.ClassVar[Signal] = ... # polarChanged(bool)
    queriedGraphPositionChanged: typing.ClassVar[Signal] = ... # queriedGraphPositionChanged(QVector3D)
    radialLabelOffsetChanged : typing.ClassVar[Signal] = ... # radialLabelOffsetChanged(float)
    rotationEnabledChanged   : typing.ClassVar[Signal] = ... # rotationEnabledChanged(bool)
    selectedElementChanged   : typing.ClassVar[Signal] = ... # selectedElementChanged(QtGraphs3D::ElementType)
    selectionEnabledChanged  : typing.ClassVar[Signal] = ... # selectionEnabledChanged(bool)
    selectionModeChanged     : typing.ClassVar[Signal] = ... # selectionModeChanged(QtGraphs3D::SelectionFlags)
    shadowQualityChanged     : typing.ClassVar[Signal] = ... # shadowQualityChanged(QtGraphs3D::ShadowQuality)
    shadowStrengthChanged    : typing.ClassVar[Signal] = ... # shadowStrengthChanged()
    tapped                   : typing.ClassVar[Signal] = ... # tapped(QEventPoint,Qt::MouseButton)
    wheel                    : typing.ClassVar[Signal] = ... # wheel(QWheelEvent*)
    wrapCameraXRotationChanged: typing.ClassVar[Signal] = ... # wrapCameraXRotationChanged(bool)
    wrapCameraYRotationChanged: typing.ClassVar[Signal] = ... # wrapCameraYRotationChanged(bool)
    zoomAtTargetEnabledChanged: typing.ClassVar[Signal] = ... # zoomAtTargetEnabledChanged(bool)
    zoomEnabledChanged       : typing.ClassVar[Signal] = ... # zoomEnabledChanged(bool)
    @property
    def activeTheme(self, /) -> PySide6.QtGraphs.QGraphsTheme: ...
    @activeTheme.setter
    def activeTheme(self, activeTheme: PySide6.QtGraphs.QGraphsTheme, /) -> None: ...
    def addCustomItem(self, item: PySide6.QtGraphs.QCustom3DItem, /) -> int: ...
    def addTheme(self, theme: PySide6.QtGraphs.QGraphsTheme, /) -> None: ...
    @property
    def ambientLightStrength(self, /) -> float: ...
    @ambientLightStrength.setter
    def ambientLightStrength(self, newAmbientLightStrength: float, /) -> None: ...
    @property
    def aspectRatio(self, /) -> float: ...
    @aspectRatio.setter
    def aspectRatio(self, ratio: float, /) -> None: ...
    @property
    def cameraPreset(self, /) -> PySide6.QtGraphs.QtGraphs3D.CameraPreset: ...
    @cameraPreset.setter
    def cameraPreset(self, preset: PySide6.QtGraphs.QtGraphs3D.CameraPreset, /) -> None: ...
    @property
    def cameraTargetPosition(self, /) -> PySide6.QtGui.QVector3D: ...
    @cameraTargetPosition.setter
    def cameraTargetPosition(self, target: PySide6.QtGui.QVector3D, /) -> None: ...
    @property
    def cameraXRotation(self, /) -> float: ...
    @cameraXRotation.setter
    def cameraXRotation(self, rotation: float, /) -> None: ...
    @property
    def cameraYRotation(self, /) -> float: ...
    @cameraYRotation.setter
    def cameraYRotation(self, rotation: float, /) -> None: ...
    @property
    def cameraZoomLevel(self, /) -> float: ...
    @cameraZoomLevel.setter
    def cameraZoomLevel(self, level: float, /) -> None: ...
    def clearSelection(self, /) -> None: ...
    @property
    def currentFps(self, /) -> int: ...
    def customItems(self, /) -> typing.List[PySide6.QtGraphs.QCustom3DItem]: ...
    def doPicking(self, point: PySide6.QtCore.QPoint, /) -> None: ...
    def event(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def eventFilter(self, obj: PySide6.QtCore.QObject, event: PySide6.QtCore.QEvent, /) -> bool: ...
    @property
    def gridLineType(self, /) -> PySide6.QtGraphs.QtGraphs3D.GridLineType: ...
    @gridLineType.setter
    def gridLineType(self, gridLineType: PySide6.QtGraphs.QtGraphs3D.GridLineType, /) -> None: ...
    def hasSeries(self, series: PySide6.QtGraphs.QAbstract3DSeries, /) -> bool: ...
    @property
    def horizontalAspectRatio(self, /) -> float: ...
    @horizontalAspectRatio.setter
    def horizontalAspectRatio(self, ratio: float, /) -> None: ...
    @property
    def labelMargin(self, /) -> float: ...
    @labelMargin.setter
    def labelMargin(self, margin: float, /) -> None: ...
    @property
    def lightColor(self, /) -> PySide6.QtGui.QColor: ...
    @lightColor.setter
    def lightColor(self, newLightColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    @property
    def lightStrength(self, /) -> float: ...
    @lightStrength.setter
    def lightStrength(self, newLightStrength: float, /) -> None: ...
    @property
    def locale(self, /) -> PySide6.QtCore.QLocale: ...
    @locale.setter
    def locale(self, locale: PySide6.QtCore.QLocale | PySide6.QtCore.QLocale.Language, /) -> None: ...
    @property
    def margin(self, /) -> float: ...
    @margin.setter
    def margin(self, margin: float, /) -> None: ...
    @property
    def maxCameraXRotation(self, /) -> float: ...
    @maxCameraXRotation.setter
    def maxCameraXRotation(self, rotation: float, /) -> None: ...
    @property
    def maxCameraYRotation(self, /) -> float: ...
    @maxCameraYRotation.setter
    def maxCameraYRotation(self, rotation: float, /) -> None: ...
    @property
    def maxCameraZoomLevel(self, /) -> float: ...
    @maxCameraZoomLevel.setter
    def maxCameraZoomLevel(self, level: float, /) -> None: ...
    @property
    def measureFps(self, /) -> bool: ...
    @measureFps.setter
    def measureFps(self, enable: bool, /) -> None: ...
    @property
    def minCameraXRotation(self, /) -> float: ...
    @minCameraXRotation.setter
    def minCameraXRotation(self, rotation: float, /) -> None: ...
    @property
    def minCameraYRotation(self, /) -> float: ...
    @minCameraYRotation.setter
    def minCameraYRotation(self, rotation: float, /) -> None: ...
    @property
    def minCameraZoomLevel(self, /) -> float: ...
    @minCameraZoomLevel.setter
    def minCameraZoomLevel(self, level: float, /) -> None: ...
    @property
    def msaaSamples(self, /) -> int: ...
    @msaaSamples.setter
    def msaaSamples(self, samples: int, /) -> None: ...
    @property
    def optimizationHint(self, /) -> PySide6.QtGraphs.QtGraphs3D.OptimizationHint: ...
    @optimizationHint.setter
    def optimizationHint(self, hint: PySide6.QtGraphs.QtGraphs3D.OptimizationHint, /) -> None: ...
    @property
    def orthoProjection(self, /) -> bool: ...
    @orthoProjection.setter
    def orthoProjection(self, enable: bool, /) -> None: ...
    @property
    def polar(self, /) -> bool: ...
    @polar.setter
    def polar(self, enable: bool, /) -> None: ...
    @property
    def queriedGraphPosition(self, /) -> PySide6.QtGui.QVector3D: ...
    @property
    def radialLabelOffset(self, /) -> float: ...
    @radialLabelOffset.setter
    def radialLabelOffset(self, offset: float, /) -> None: ...
    def releaseCustomItem(self, item: PySide6.QtGraphs.QCustom3DItem, /) -> None: ...
    def releaseTheme(self, theme: PySide6.QtGraphs.QGraphsTheme, /) -> None: ...
    def removeCustomItem(self, item: PySide6.QtGraphs.QCustom3DItem, /) -> None: ...
    def removeCustomItemAt(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    def removeCustomItems(self, /) -> None: ...
    def renderToImage(self, /, imageSize: PySide6.QtCore.QSize = ...) -> typing.Tuple[PySide6.QtQuick.QQuickItemGrabResult]: ...
    @property
    def rotationEnabled(self, /) -> bool: ...
    @rotationEnabled.setter
    def rotationEnabled(self, enable: bool, /) -> None: ...
    @property
    def scene(self, /) -> PySide6.QtGraphs.Q3DScene: ...
    def selectedAxis(self, /) -> PySide6.QtGraphs.QAbstract3DAxis: ...
    def selectedCustomItem(self, /) -> PySide6.QtGraphs.QCustom3DItem: ...
    def selectedCustomItemIndex(self, /) -> int: ...
    @property
    def selectedElement(self, /) -> PySide6.QtGraphs.QtGraphs3D.ElementType: ...
    def selectedLabelIndex(self, /) -> int: ...
    @property
    def selectionEnabled(self, /) -> bool: ...
    @selectionEnabled.setter
    def selectionEnabled(self, enable: bool, /) -> None: ...
    @property
    def selectionMode(self, /) -> PySide6.QtGraphs.QtGraphs3D.SelectionFlag: ...
    @selectionMode.setter
    def selectionMode(self, selectionMode: PySide6.QtGraphs.QtGraphs3D.SelectionFlag, /) -> None: ...
    def setCameraPosition(self, horizontal: float, vertical: float, /, zoom: float = ...) -> None: ...
    def setDefaultInputHandler(self, /) -> None: ...
    def setDragButton(self, button: PySide6.QtCore.Qt.MouseButton, /) -> None: ...
    def setWidget(self, widget: PySide6.QtQuickWidgets.QQuickWidget, /) -> None: ...
    @property
    def shadowQuality(self, /) -> PySide6.QtGraphs.QtGraphs3D.ShadowQuality: ...
    @shadowQuality.setter
    def shadowQuality(self, shadowQuality: PySide6.QtGraphs.QtGraphs3D.ShadowQuality, /) -> None: ...
    @property
    def shadowStrength(self, /) -> float: ...
    @shadowStrength.setter
    def shadowStrength(self, newShadowStrength: float, /) -> None: ...
    def themes(self, /) -> typing.List[PySide6.QtGraphs.QGraphsTheme]: ...
    def unsetDefaultDragHandler(self, /) -> None: ...
    def unsetDefaultInputHandler(self, /) -> None: ...
    def unsetDefaultPinchHandler(self, /) -> None: ...
    def unsetDefaultTapHandler(self, /) -> None: ...
    def unsetDefaultWheelHandler(self, /) -> None: ...
    def widget(self, /) -> PySide6.QtQuickWidgets.QQuickWidget: ...
    @property
    def wrapCameraXRotation(self, /) -> bool: ...
    @wrapCameraXRotation.setter
    def wrapCameraXRotation(self, wrap: bool, /) -> None: ...
    @property
    def wrapCameraYRotation(self, /) -> bool: ...
    @wrapCameraYRotation.setter
    def wrapCameraYRotation(self, wrap: bool, /) -> None: ...
    @property
    def zoomAtTargetEnabled(self, /) -> bool: ...
    @zoomAtTargetEnabled.setter
    def zoomAtTargetEnabled(self, enable: bool, /) -> None: ...
    @property
    def zoomEnabled(self, /) -> bool: ...
    @zoomEnabled.setter
    def zoomEnabled(self, enable: bool, /) -> None: ...


class Q3DScatterWidgetItem(PySide6.QtGraphsWidgets.Q3DGraphsWidgetItem):

    axisXChanged             : typing.ClassVar[Signal] = ... # axisXChanged(QValue3DAxis*)
    axisYChanged             : typing.ClassVar[Signal] = ... # axisYChanged(QValue3DAxis*)
    axisZChanged             : typing.ClassVar[Signal] = ... # axisZChanged(QValue3DAxis*)
    selectedSeriesChanged    : typing.ClassVar[Signal] = ... # selectedSeriesChanged(QScatter3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, axisX: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axisY: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axisZ: PySide6.QtDataVisualization.QValue3DAxis | None = ..., selectedSeries: PySide6.QtDataVisualization.QScatter3DSeries | None = ...) -> None: ...

    def addAxis(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def addSeries(self, series: PySide6.QtGraphs.QScatter3DSeries, /) -> None: ...
    def axes(self, /) -> typing.List[PySide6.QtGraphs.QValue3DAxis]: ...
    @property
    def axisX(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    @axisX.setter
    def axisX(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    @property
    def axisY(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    @axisY.setter
    def axisY(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    @property
    def axisZ(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    @axisZ.setter
    def axisZ(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def event(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def releaseAxis(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def removeSeries(self, series: PySide6.QtGraphs.QScatter3DSeries, /) -> None: ...
    @property
    def selectedSeries(self, /) -> PySide6.QtGraphs.QScatter3DSeries: ...
    def seriesList(self, /) -> typing.List[PySide6.QtGraphs.QScatter3DSeries]: ...


class Q3DSurfaceWidgetItem(PySide6.QtGraphsWidgets.Q3DGraphsWidgetItem):

    axisXChanged             : typing.ClassVar[Signal] = ... # axisXChanged(QValue3DAxis*)
    axisYChanged             : typing.ClassVar[Signal] = ... # axisYChanged(QValue3DAxis*)
    axisZChanged             : typing.ClassVar[Signal] = ... # axisZChanged(QValue3DAxis*)
    flipHorizontalGridChanged: typing.ClassVar[Signal] = ... # flipHorizontalGridChanged(bool)
    selectedSeriesChanged    : typing.ClassVar[Signal] = ... # selectedSeriesChanged(QSurface3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, axisX: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axisY: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axisZ: PySide6.QtDataVisualization.QValue3DAxis | None = ..., selectedSeries: PySide6.QtDataVisualization.QSurface3DSeries | None = ..., flipHorizontalGrid: bool | None = ...) -> None: ...

    def addAxis(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def addSeries(self, series: PySide6.QtGraphs.QSurface3DSeries, /) -> None: ...
    def axes(self, /) -> typing.List[PySide6.QtGraphs.QValue3DAxis]: ...
    @property
    def axisX(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    @axisX.setter
    def axisX(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    @property
    def axisY(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    @axisY.setter
    def axisY(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    @property
    def axisZ(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    @axisZ.setter
    def axisZ(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def event(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    @property
    def flipHorizontalGrid(self, /) -> bool: ...
    @flipHorizontalGrid.setter
    def flipHorizontalGrid(self, flip: bool, /) -> None: ...
    def releaseAxis(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def removeSeries(self, series: PySide6.QtGraphs.QSurface3DSeries, /) -> None: ...
    @property
    def selectedSeries(self, /) -> PySide6.QtGraphs.QSurface3DSeries: ...
    def seriesList(self, /) -> typing.List[PySide6.QtGraphs.QSurface3DSeries]: ...


class QIntList: ...


# eof
