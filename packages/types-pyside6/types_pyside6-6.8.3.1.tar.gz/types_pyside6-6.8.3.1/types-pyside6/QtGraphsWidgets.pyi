# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtGraphsWidgets, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtGraphsWidgets`

import PySide6.QtGraphsWidgets
import PySide6.QtCore
import PySide6.QtGui
import PySide6.QtQuick
import PySide6.QtQuickWidgets
import PySide6.QtDataVisualization
import PySide6.QtGraphs

import typing
from PySide6.QtCore import Signal


class Q3DBarsWidgetItem(PySide6.QtGraphsWidgets.Q3DGraphsWidgetItem):

    barSeriesMarginChanged   : typing.ClassVar[Signal] = ... # barSeriesMarginChanged(QSizeF)
    barSpacingChanged        : typing.ClassVar[Signal] = ... # barSpacingChanged(QSizeF)
    barSpacingRelativeChanged: typing.ClassVar[Signal] = ... # barSpacingRelativeChanged(bool)
    barThicknessChanged      : typing.ClassVar[Signal] = ... # barThicknessChanged(float)
    columnAxisChanged        : typing.ClassVar[Signal] = ... # columnAxisChanged(QCategory3DAxis*)
    floorLevelChanged        : typing.ClassVar[Signal] = ... # floorLevelChanged(float)
    multiSeriesUniformChanged: typing.ClassVar[Signal] = ... # multiSeriesUniformChanged(bool)
    primarySeriesChanged     : typing.ClassVar[Signal] = ... # primarySeriesChanged(QBar3DSeries*)
    rowAxisChanged           : typing.ClassVar[Signal] = ... # rowAxisChanged(QCategory3DAxis*)
    selectedSeriesChanged    : typing.ClassVar[Signal] = ... # selectedSeriesChanged(QBar3DSeries*)
    valueAxisChanged         : typing.ClassVar[Signal] = ... # valueAxisChanged(QValue3DAxis*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, multi_series_uniform: bool | None = ..., bar_thickness: float | None = ..., bar_spacing: PySide6.QtCore.QSizeF | None = ..., bar_spacing_relative: bool | None = ..., bar_series_margin: PySide6.QtCore.QSizeF | None = ..., row_axis: PySide6.QtDataVisualization.QCategory3DAxis | None = ..., column_axis: PySide6.QtDataVisualization.QCategory3DAxis | None = ..., value_axis: PySide6.QtDataVisualization.QValue3DAxis | None = ..., primary_series: PySide6.QtDataVisualization.QBar3DSeries | None = ..., selected_series: PySide6.QtDataVisualization.QBar3DSeries | None = ..., floor_level: float | None = ...) -> None: ...

    def add_axis(self, axis: PySide6.QtGraphs.QAbstract3DAxis, /) -> None: ...
    def add_series(self, series: PySide6.QtGraphs.QBar3DSeries, /) -> None: ...
    def axes(self, /) -> typing.List[PySide6.QtGraphs.QAbstract3DAxis]: ...
    def bar_series_margin(self, /) -> PySide6.QtCore.QSizeF: ...
    def bar_spacing(self, /) -> PySide6.QtCore.QSizeF: ...
    def bar_thickness(self, /) -> float: ...
    def column_axis(self, /) -> PySide6.QtGraphs.QCategory3DAxis: ...
    def event(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def floor_level(self, /) -> float: ...
    def insert_series(self, index: int, series: PySide6.QtGraphs.QBar3DSeries, /) -> None: ...
    def is_bar_spacing_relative(self, /) -> bool: ...
    def is_multi_series_uniform(self, /) -> bool: ...
    def primary_series(self, /) -> PySide6.QtGraphs.QBar3DSeries: ...
    def release_axis(self, axis: PySide6.QtGraphs.QAbstract3DAxis, /) -> None: ...
    def remove_series(self, series: PySide6.QtGraphs.QBar3DSeries, /) -> None: ...
    def row_axis(self, /) -> PySide6.QtGraphs.QCategory3DAxis: ...
    def selected_series(self, /) -> PySide6.QtGraphs.QBar3DSeries: ...
    def series_list(self, /) -> typing.List[PySide6.QtGraphs.QBar3DSeries]: ...
    def set_bar_series_margin(self, margin: PySide6.QtCore.QSizeF | PySide6.QtCore.QSize, /) -> None: ...
    def set_bar_spacing(self, spacing: PySide6.QtCore.QSizeF | PySide6.QtCore.QSize, /) -> None: ...
    def set_bar_spacing_relative(self, relative: bool, /) -> None: ...
    def set_bar_thickness(self, thicknessRatio: float, /) -> None: ...
    def set_column_axis(self, axis: PySide6.QtGraphs.QCategory3DAxis, /) -> None: ...
    def set_floor_level(self, level: float, /) -> None: ...
    def set_multi_series_uniform(self, uniform: bool, /) -> None: ...
    def set_primary_series(self, series: PySide6.QtGraphs.QBar3DSeries, /) -> None: ...
    def set_row_axis(self, axis: PySide6.QtGraphs.QCategory3DAxis, /) -> None: ...
    def set_value_axis(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def value_axis(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...


class Q3DGraphsWidgetItem(PySide6.QtCore.QObject):

    activeThemeChanged       : typing.ClassVar[Signal] = ... # activeThemeChanged(QGraphsTheme*)
    ambientLightStrengthChanged: typing.ClassVar[Signal] = ... # ambientLightStrengthChanged()
    aspectRatioChanged       : typing.ClassVar[Signal] = ... # aspectRatioChanged(double)
    cameraPresetChanged      : typing.ClassVar[Signal] = ... # cameraPresetChanged(QtGraphs3D::CameraPreset)
    cameraTargetPositionChanged: typing.ClassVar[Signal] = ... # cameraTargetPositionChanged(QVector3D)
    cameraXRotationChanged   : typing.ClassVar[Signal] = ... # cameraXRotationChanged(float)
    cameraYRotationChanged   : typing.ClassVar[Signal] = ... # cameraYRotationChanged(float)
    cameraZoomLevelChanged   : typing.ClassVar[Signal] = ... # cameraZoomLevelChanged(float)
    currentFpsChanged        : typing.ClassVar[Signal] = ... # currentFpsChanged(int)
    doubleTapped             : typing.ClassVar[Signal] = ... # doubleTapped(QEventPoint,Qt::MouseButton)
    dragged                  : typing.ClassVar[Signal] = ... # dragged(QVector2D)
    gridLineTypeChanged      : typing.ClassVar[Signal] = ... # gridLineTypeChanged()
    horizontalAspectRatioChanged: typing.ClassVar[Signal] = ... # horizontalAspectRatioChanged(double)
    labelMarginChanged       : typing.ClassVar[Signal] = ... # labelMarginChanged(float)
    lightColorChanged        : typing.ClassVar[Signal] = ... # lightColorChanged()
    lightStrengthChanged     : typing.ClassVar[Signal] = ... # lightStrengthChanged()
    localeChanged            : typing.ClassVar[Signal] = ... # localeChanged(QLocale)
    longPressed              : typing.ClassVar[Signal] = ... # longPressed()
    marginChanged            : typing.ClassVar[Signal] = ... # marginChanged(double)
    maxCameraXRotationChanged: typing.ClassVar[Signal] = ... # maxCameraXRotationChanged(float)
    maxCameraYRotationChanged: typing.ClassVar[Signal] = ... # maxCameraYRotationChanged(float)
    maxCameraZoomLevelChanged: typing.ClassVar[Signal] = ... # maxCameraZoomLevelChanged(float)
    measureFpsChanged        : typing.ClassVar[Signal] = ... # measureFpsChanged(bool)
    minCameraXRotationChanged: typing.ClassVar[Signal] = ... # minCameraXRotationChanged(float)
    minCameraYRotationChanged: typing.ClassVar[Signal] = ... # minCameraYRotationChanged(float)
    minCameraZoomLevelChanged: typing.ClassVar[Signal] = ... # minCameraZoomLevelChanged(float)
    mouseMove                : typing.ClassVar[Signal] = ... # mouseMove(QPoint)
    msaaSamplesChanged       : typing.ClassVar[Signal] = ... # msaaSamplesChanged(int)
    optimizationHintChanged  : typing.ClassVar[Signal] = ... # optimizationHintChanged(QtGraphs3D::OptimizationHint)
    orthoProjectionChanged   : typing.ClassVar[Signal] = ... # orthoProjectionChanged(bool)
    pinch                    : typing.ClassVar[Signal] = ... # pinch(double)
    polarChanged             : typing.ClassVar[Signal] = ... # polarChanged(bool)
    queriedGraphPositionChanged: typing.ClassVar[Signal] = ... # queriedGraphPositionChanged(QVector3D)
    radialLabelOffsetChanged : typing.ClassVar[Signal] = ... # radialLabelOffsetChanged(float)
    rotationEnabledChanged   : typing.ClassVar[Signal] = ... # rotationEnabledChanged(bool)
    selectedElementChanged   : typing.ClassVar[Signal] = ... # selectedElementChanged(QtGraphs3D::ElementType)
    selectionEnabledChanged  : typing.ClassVar[Signal] = ... # selectionEnabledChanged(bool)
    selectionModeChanged     : typing.ClassVar[Signal] = ... # selectionModeChanged(QtGraphs3D::SelectionFlags)
    shadowQualityChanged     : typing.ClassVar[Signal] = ... # shadowQualityChanged(QtGraphs3D::ShadowQuality)
    shadowStrengthChanged    : typing.ClassVar[Signal] = ... # shadowStrengthChanged()
    tapped                   : typing.ClassVar[Signal] = ... # tapped(QEventPoint,Qt::MouseButton)
    wheel                    : typing.ClassVar[Signal] = ... # wheel(QWheelEvent*)
    wrapCameraXRotationChanged: typing.ClassVar[Signal] = ... # wrapCameraXRotationChanged(bool)
    wrapCameraYRotationChanged: typing.ClassVar[Signal] = ... # wrapCameraYRotationChanged(bool)
    zoomAtTargetEnabledChanged: typing.ClassVar[Signal] = ... # zoomAtTargetEnabledChanged(bool)
    zoomEnabledChanged       : typing.ClassVar[Signal] = ... # zoomEnabledChanged(bool)
    def active_theme(self, /) -> PySide6.QtGraphs.QGraphsTheme: ...
    def add_custom_item(self, item: PySide6.QtGraphs.QCustom3DItem, /) -> int: ...
    def add_theme(self, theme: PySide6.QtGraphs.QGraphsTheme, /) -> None: ...
    def ambient_light_strength(self, /) -> float: ...
    def aspect_ratio(self, /) -> float: ...
    def cameraXRotation(self, /) -> float: ...
    def cameraYRotation(self, /) -> float: ...
    def camera_preset(self, /) -> PySide6.QtGraphs.QtGraphs3D.CameraPreset: ...
    def camera_target_position(self, /) -> PySide6.QtGui.QVector3D: ...
    def camera_zoom_level(self, /) -> float: ...
    def clear_selection(self, /) -> None: ...
    def current_fps(self, /) -> int: ...
    def custom_items(self, /) -> typing.List[PySide6.QtGraphs.QCustom3DItem]: ...
    def do_picking(self, point: PySide6.QtCore.QPoint, /) -> None: ...
    def event(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def event_filter(self, obj: PySide6.QtCore.QObject, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def grid_line_type(self, /) -> PySide6.QtGraphs.QtGraphs3D.GridLineType: ...
    def has_series(self, series: PySide6.QtGraphs.QAbstract3DSeries, /) -> bool: ...
    def horizontal_aspect_ratio(self, /) -> float: ...
    def is_ortho_projection(self, /) -> bool: ...
    def is_polar(self, /) -> bool: ...
    def is_rotation_enabled(self, /) -> bool: ...
    def is_selection_enabled(self, /) -> bool: ...
    def is_zoom_at_target_enabled(self, /) -> bool: ...
    def is_zoom_enabled(self, /) -> bool: ...
    def label_margin(self, /) -> float: ...
    def light_color(self, /) -> PySide6.QtGui.QColor: ...
    def light_strength(self, /) -> float: ...
    def locale(self, /) -> PySide6.QtCore.QLocale: ...
    def margin(self, /) -> float: ...
    def maxCameraXRotation(self, /) -> float: ...
    def maxCameraYRotation(self, /) -> float: ...
    def max_camera_zoom_level(self, /) -> float: ...
    def measure_fps(self, /) -> bool: ...
    def minCameraXRotation(self, /) -> float: ...
    def minCameraYRotation(self, /) -> float: ...
    def min_camera_zoom_level(self, /) -> float: ...
    def msaa_samples(self, /) -> int: ...
    def optimization_hint(self, /) -> PySide6.QtGraphs.QtGraphs3D.OptimizationHint: ...
    def queried_graph_position(self, /) -> PySide6.QtGui.QVector3D: ...
    def radial_label_offset(self, /) -> float: ...
    def release_custom_item(self, item: PySide6.QtGraphs.QCustom3DItem, /) -> None: ...
    def release_theme(self, theme: PySide6.QtGraphs.QGraphsTheme, /) -> None: ...
    def remove_custom_item(self, item: PySide6.QtGraphs.QCustom3DItem, /) -> None: ...
    def remove_custom_item_at(self, position: PySide6.QtGui.QVector3D, /) -> None: ...
    def remove_custom_items(self, /) -> None: ...
    def render_to_image(self, /, imageSize: PySide6.QtCore.QSize = ...) -> typing.Tuple[PySide6.QtQuick.QQuickItemGrabResult]: ...
    def scene(self, /) -> PySide6.QtGraphs.Q3DScene: ...
    def selected_axis(self, /) -> PySide6.QtGraphs.QAbstract3DAxis: ...
    def selected_custom_item(self, /) -> PySide6.QtGraphs.QCustom3DItem: ...
    def selected_custom_item_index(self, /) -> int: ...
    def selected_element(self, /) -> PySide6.QtGraphs.QtGraphs3D.ElementType: ...
    def selected_label_index(self, /) -> int: ...
    def selection_mode(self, /) -> PySide6.QtGraphs.QtGraphs3D.SelectionFlag: ...
    def setCameraXRotation(self, rotation: float, /) -> None: ...
    def setCameraYRotation(self, rotation: float, /) -> None: ...
    def setMaxCameraXRotation(self, rotation: float, /) -> None: ...
    def setMaxCameraYRotation(self, rotation: float, /) -> None: ...
    def setMinCameraXRotation(self, rotation: float, /) -> None: ...
    def setMinCameraYRotation(self, rotation: float, /) -> None: ...
    def setWrapCameraXRotation(self, wrap: bool, /) -> None: ...
    def setWrapCameraYRotation(self, wrap: bool, /) -> None: ...
    def set_active_theme(self, activeTheme: PySide6.QtGraphs.QGraphsTheme, /) -> None: ...
    def set_ambient_light_strength(self, newAmbientLightStrength: float, /) -> None: ...
    def set_aspect_ratio(self, ratio: float, /) -> None: ...
    def set_camera_position(self, horizontal: float, vertical: float, /, zoom: float = ...) -> None: ...
    def set_camera_preset(self, preset: PySide6.QtGraphs.QtGraphs3D.CameraPreset, /) -> None: ...
    def set_camera_target_position(self, target: PySide6.QtGui.QVector3D, /) -> None: ...
    def set_camera_zoom_level(self, level: float, /) -> None: ...
    def set_default_input_handler(self, /) -> None: ...
    def set_drag_button(self, button: PySide6.QtCore.Qt.MouseButton, /) -> None: ...
    def set_grid_line_type(self, gridLineType: PySide6.QtGraphs.QtGraphs3D.GridLineType, /) -> None: ...
    def set_horizontal_aspect_ratio(self, ratio: float, /) -> None: ...
    def set_label_margin(self, margin: float, /) -> None: ...
    def set_light_color(self, newLightColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
    def set_light_strength(self, newLightStrength: float, /) -> None: ...
    def set_locale(self, locale: PySide6.QtCore.QLocale | PySide6.QtCore.QLocale.Language, /) -> None: ...
    def set_margin(self, margin: float, /) -> None: ...
    def set_max_camera_zoom_level(self, level: float, /) -> None: ...
    def set_measure_fps(self, enable: bool, /) -> None: ...
    def set_min_camera_zoom_level(self, level: float, /) -> None: ...
    def set_msaa_samples(self, samples: int, /) -> None: ...
    def set_optimization_hint(self, hint: PySide6.QtGraphs.QtGraphs3D.OptimizationHint, /) -> None: ...
    def set_ortho_projection(self, enable: bool, /) -> None: ...
    def set_polar(self, enable: bool, /) -> None: ...
    def set_radial_label_offset(self, offset: float, /) -> None: ...
    def set_rotation_enabled(self, enable: bool, /) -> None: ...
    def set_selection_enabled(self, enable: bool, /) -> None: ...
    def set_selection_mode(self, selectionMode: PySide6.QtGraphs.QtGraphs3D.SelectionFlag, /) -> None: ...
    def set_shadow_quality(self, shadowQuality: PySide6.QtGraphs.QtGraphs3D.ShadowQuality, /) -> None: ...
    def set_shadow_strength(self, newShadowStrength: float, /) -> None: ...
    def set_widget(self, widget: PySide6.QtQuickWidgets.QQuickWidget, /) -> None: ...
    def set_zoom_at_target_enabled(self, enable: bool, /) -> None: ...
    def set_zoom_enabled(self, enable: bool, /) -> None: ...
    def shadow_quality(self, /) -> PySide6.QtGraphs.QtGraphs3D.ShadowQuality: ...
    def shadow_strength(self, /) -> float: ...
    def themes(self, /) -> typing.List[PySide6.QtGraphs.QGraphsTheme]: ...
    def unset_default_drag_handler(self, /) -> None: ...
    def unset_default_input_handler(self, /) -> None: ...
    def unset_default_pinch_handler(self, /) -> None: ...
    def unset_default_tap_handler(self, /) -> None: ...
    def unset_default_wheel_handler(self, /) -> None: ...
    def widget(self, /) -> PySide6.QtQuickWidgets.QQuickWidget: ...
    def wrapCameraXRotation(self, /) -> bool: ...
    def wrapCameraYRotation(self, /) -> bool: ...


class Q3DScatterWidgetItem(PySide6.QtGraphsWidgets.Q3DGraphsWidgetItem):

    axisXChanged             : typing.ClassVar[Signal] = ... # axisXChanged(QValue3DAxis*)
    axisYChanged             : typing.ClassVar[Signal] = ... # axisYChanged(QValue3DAxis*)
    axisZChanged             : typing.ClassVar[Signal] = ... # axisZChanged(QValue3DAxis*)
    selectedSeriesChanged    : typing.ClassVar[Signal] = ... # selectedSeriesChanged(QScatter3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, axis_x: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axis_y: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axis_z: PySide6.QtDataVisualization.QValue3DAxis | None = ..., selected_series: PySide6.QtDataVisualization.QScatter3DSeries | None = ...) -> None: ...

    def add_axis(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def add_series(self, series: PySide6.QtGraphs.QScatter3DSeries, /) -> None: ...
    def axes(self, /) -> typing.List[PySide6.QtGraphs.QValue3DAxis]: ...
    def axis_x(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    def axis_y(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    def axis_z(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    def event(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def release_axis(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def remove_series(self, series: PySide6.QtGraphs.QScatter3DSeries, /) -> None: ...
    def selected_series(self, /) -> PySide6.QtGraphs.QScatter3DSeries: ...
    def series_list(self, /) -> typing.List[PySide6.QtGraphs.QScatter3DSeries]: ...
    def set_axis_x(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def set_axis_y(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def set_axis_z(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...


class Q3DSurfaceWidgetItem(PySide6.QtGraphsWidgets.Q3DGraphsWidgetItem):

    axisXChanged             : typing.ClassVar[Signal] = ... # axisXChanged(QValue3DAxis*)
    axisYChanged             : typing.ClassVar[Signal] = ... # axisYChanged(QValue3DAxis*)
    axisZChanged             : typing.ClassVar[Signal] = ... # axisZChanged(QValue3DAxis*)
    flipHorizontalGridChanged: typing.ClassVar[Signal] = ... # flipHorizontalGridChanged(bool)
    selectedSeriesChanged    : typing.ClassVar[Signal] = ... # selectedSeriesChanged(QSurface3DSeries*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, axis_x: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axis_y: PySide6.QtDataVisualization.QValue3DAxis | None = ..., axis_z: PySide6.QtDataVisualization.QValue3DAxis | None = ..., selected_series: PySide6.QtDataVisualization.QSurface3DSeries | None = ..., flip_horizontal_grid: bool | None = ...) -> None: ...

    def add_axis(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def add_series(self, series: PySide6.QtGraphs.QSurface3DSeries, /) -> None: ...
    def axes(self, /) -> typing.List[PySide6.QtGraphs.QValue3DAxis]: ...
    def axis_x(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    def axis_y(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    def axis_z(self, /) -> PySide6.QtGraphs.QValue3DAxis: ...
    def event(self, event: PySide6.QtCore.QEvent, /) -> bool: ...
    def flip_horizontal_grid(self, /) -> bool: ...
    def release_axis(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def remove_series(self, series: PySide6.QtGraphs.QSurface3DSeries, /) -> None: ...
    def selected_series(self, /) -> PySide6.QtGraphs.QSurface3DSeries: ...
    def series_list(self, /) -> typing.List[PySide6.QtGraphs.QSurface3DSeries]: ...
    def set_axis_x(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def set_axis_y(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def set_axis_z(self, axis: PySide6.QtGraphs.QValue3DAxis, /) -> None: ...
    def set_flip_horizontal_grid(self, flip: bool, /) -> None: ...


class QIntList: ...


# eof
