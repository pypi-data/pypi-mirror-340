# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtSvg, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtSvg`

import PySide6.QtSvg
import PySide6.QtCore
import PySide6.QtGui

import enum
import typing
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QIntList: ...


class QSvgGenerator(PySide6.QtGui.QPaintDevice):

    class SvgVersion(enum.Enum):

        SvgTiny12                 = ...  # 0x0
        Svg11                     = ...  # 0x1


    @typing.overload
    def __init__(self, version: PySide6.QtSvg.QSvgGenerator.SvgVersion, /, *, size: PySide6.QtCore.QSize | None = ..., view_box: PySide6.QtCore.QRectF | None = ..., title: str | None = ..., description: str | None = ..., file_name: str | None = ..., output_device: PySide6.QtCore.QIODevice | None = ..., resolution: int | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, size: PySide6.QtCore.QSize | None = ..., view_box: PySide6.QtCore.QRectF | None = ..., title: str | None = ..., description: str | None = ..., file_name: str | None = ..., output_device: PySide6.QtCore.QIODevice | None = ..., resolution: int | None = ...) -> None: ...

    def description(self, /) -> str: ...
    def file_name(self, /) -> str: ...
    def metric(self, metric: PySide6.QtGui.QPaintDevice.PaintDeviceMetric, /) -> int: ...
    def output_device(self, /) -> PySide6.QtCore.QIODevice: ...
    def paint_engine(self, /) -> PySide6.QtGui.QPaintEngine: ...
    def resolution(self, /) -> int: ...
    def set_description(self, description: str, /) -> None: ...
    def set_file_name(self, fileName: str, /) -> None: ...
    def set_output_device(self, outputDevice: PySide6.QtCore.QIODevice, /) -> None: ...
    def set_resolution(self, dpi: int, /) -> None: ...
    def set_size(self, size: PySide6.QtCore.QSize, /) -> None: ...
    def set_title(self, title: str, /) -> None: ...
    @typing.overload
    def set_view_box(self, viewBox: PySide6.QtCore.QRect, /) -> None: ...
    @typing.overload
    def set_view_box(self, viewBox: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    def size(self, /) -> PySide6.QtCore.QSize: ...
    def svg_version(self, /) -> PySide6.QtSvg.QSvgGenerator.SvgVersion: ...
    def title(self, /) -> str: ...
    def view_box(self, /) -> PySide6.QtCore.QRect: ...
    def view_box_f(self, /) -> PySide6.QtCore.QRectF: ...


class QSvgRenderer(PySide6.QtCore.QObject):

    repaintNeeded            : typing.ClassVar[Signal] = ... # repaintNeeded()

    @typing.overload
    def __init__(self, contents: PySide6.QtCore.QXmlStreamReader, /, parent: PySide6.QtCore.QObject | None = ..., *, view_box: PySide6.QtCore.QRectF | None = ..., frames_per_second: int | None = ..., current_frame: int | None = ..., aspect_ratio_mode: PySide6.QtCore.Qt.AspectRatioMode | None = ..., options: PySide6.QtSvg.QtSvg.Option | None = ..., animation_enabled: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, filename: str, /, parent: PySide6.QtCore.QObject | None = ..., *, view_box: PySide6.QtCore.QRectF | None = ..., frames_per_second: int | None = ..., current_frame: int | None = ..., aspect_ratio_mode: PySide6.QtCore.Qt.AspectRatioMode | None = ..., options: PySide6.QtSvg.QtSvg.Option | None = ..., animation_enabled: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, view_box: PySide6.QtCore.QRectF | None = ..., frames_per_second: int | None = ..., current_frame: int | None = ..., aspect_ratio_mode: PySide6.QtCore.Qt.AspectRatioMode | None = ..., options: PySide6.QtSvg.QtSvg.Option | None = ..., animation_enabled: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, contents: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /, parent: PySide6.QtCore.QObject | None = ..., *, view_box: PySide6.QtCore.QRectF | None = ..., frames_per_second: int | None = ..., current_frame: int | None = ..., aspect_ratio_mode: PySide6.QtCore.Qt.AspectRatioMode | None = ..., options: PySide6.QtSvg.QtSvg.Option | None = ..., animation_enabled: bool | None = ...) -> None: ...

    def animated(self, /) -> bool: ...
    def animation_duration(self, /) -> int: ...
    def aspect_ratio_mode(self, /) -> PySide6.QtCore.Qt.AspectRatioMode: ...
    def bounds_on_element(self, id: str, /) -> PySide6.QtCore.QRectF: ...
    def current_frame(self, /) -> int: ...
    def default_size(self, /) -> PySide6.QtCore.QSize: ...
    def element_exists(self, id: str, /) -> bool: ...
    def frames_per_second(self, /) -> int: ...
    def is_animation_enabled(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    @typing.overload
    def load(self, contents: PySide6.QtCore.QXmlStreamReader, /) -> bool: ...
    @typing.overload
    def load(self, filename: str, /) -> bool: ...
    @typing.overload
    def load(self, contents: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> bool: ...
    def options(self, /) -> PySide6.QtSvg.QtSvg.Option: ...
    @typing.overload
    def render(self, p: PySide6.QtGui.QPainter, /) -> None: ...
    @typing.overload
    def render(self, p: PySide6.QtGui.QPainter, elementId: str, /, bounds: PySide6.QtCore.QRectF | PySide6.QtCore.QRect = ...) -> None: ...
    @typing.overload
    def render(self, p: PySide6.QtGui.QPainter, bounds: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    def set_animation_enabled(self, enable: bool, /) -> None: ...
    def set_aspect_ratio_mode(self, mode: PySide6.QtCore.Qt.AspectRatioMode, /) -> None: ...
    def set_current_frame(self, arg__1: int, /) -> None: ...
    @staticmethod
    def set_default_options(flags: PySide6.QtSvg.QtSvg.Option, /) -> None: ...
    def set_frames_per_second(self, num: int, /) -> None: ...
    def set_options(self, flags: PySide6.QtSvg.QtSvg.Option, /) -> None: ...
    @typing.overload
    def set_view_box(self, viewbox: PySide6.QtCore.QRect, /) -> None: ...
    @typing.overload
    def set_view_box(self, viewbox: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
    def transform_for_element(self, id: str, /) -> PySide6.QtGui.QTransform: ...
    def view_box(self, /) -> PySide6.QtCore.QRect: ...
    def view_box_f(self, /) -> PySide6.QtCore.QRectF: ...


class QtSvg(Shiboken.Object):

    class Option(enum.Flag):

        NoOption                  = ...  # 0x0
        Tiny12FeaturesOnly        = ...  # 0x1
        AssumeTrustedSource       = ...  # 0x2


# eof
