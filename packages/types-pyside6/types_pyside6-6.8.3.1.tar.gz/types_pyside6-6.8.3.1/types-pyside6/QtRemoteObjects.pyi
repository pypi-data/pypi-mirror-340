# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtRemoteObjects, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtRemoteObjects`

import PySide6.QtRemoteObjects
import PySide6.QtCore
import PySide6.QtNetwork

import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QAbstractItemModelReplica(PySide6.QtCore.QAbstractItemModel):

    initialized              : typing.ClassVar[Signal] = ... # initialized()
    def available_roles(self, /) -> typing.List[int]: ...
    def column_count(self, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> int: ...
    def data(self, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /, role: int = ...) -> typing.Any: ...
    def flags(self, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /) -> PySide6.QtCore.Qt.ItemFlag: ...
    def has_children(self, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> bool: ...
    def has_data(self, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, role: int, /) -> bool: ...
    def header_data(self, section: int, orientation: PySide6.QtCore.Qt.Orientation, role: int, /) -> typing.Any: ...
    def index(self, row: int, column: int, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> PySide6.QtCore.QModelIndex: ...
    def is_initialized(self, /) -> bool: ...
    def multi_data(self, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, roleDataSpan: PySide6.QtCore.QModelRoleDataSpan | PySide6.QtCore.QModelRoleData, /) -> None: ...
    @typing.overload
    def parent(self, /) -> PySide6.QtCore.QObject: ...
    @typing.overload
    def parent(self, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /) -> PySide6.QtCore.QModelIndex: ...
    def role_names(self, /) -> typing.Dict[int, PySide6.QtCore.QByteArray]: ...
    def root_cache_size(self, /) -> int: ...
    def row_count(self, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> int: ...
    def selection_model(self, /) -> PySide6.QtCore.QItemSelectionModel: ...
    def set_data(self, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, value: typing.Any, /, role: int = ...) -> bool: ...
    def set_root_cache_size(self, rootCacheSize: int, /) -> None: ...


class QConnectionAbstractServer(PySide6.QtCore.QObject):

    newConnection            : typing.ClassVar[Signal] = ... # newConnection()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def address(self, /) -> PySide6.QtCore.QUrl: ...
    def close(self, /) -> None: ...
    def configure_new_connection(self, /) -> PySide6.QtRemoteObjects.QtROServerIoDevice: ...
    def has_pending_connections(self, /) -> bool: ...
    def listen(self, address: PySide6.QtCore.QUrl | str, /) -> bool: ...
    def next_pending_connection(self, /) -> PySide6.QtRemoteObjects.QtROServerIoDevice: ...
    def server_error(self, /) -> PySide6.QtNetwork.QAbstractSocket.SocketError: ...


class QIntList: ...


class QRemoteObjectAbstractPersistedStore(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def restore_properties(self, repName: str, repSig: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> typing.List[typing.Any]: ...
    def save_properties(self, repName: str, repSig: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, values: collections.abc.Sequence[typing.Any], /) -> None: ...


class QRemoteObjectDynamicReplica(PySide6.QtRemoteObjects.QRemoteObjectReplica): ...


class QRemoteObjectHost(PySide6.QtRemoteObjects.QRemoteObjectHostBase):

    hostUrlChanged           : typing.ClassVar[Signal] = ... # hostUrlChanged()

    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, host_url: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, address: PySide6.QtCore.QUrl | str, parent: PySide6.QtCore.QObject, /, *, host_url: PySide6.QtCore.QUrl | None = ...) -> None: ...
    @typing.overload
    def __init__(self, address: PySide6.QtCore.QUrl | str, /, registryAddress: PySide6.QtCore.QUrl | str = ..., allowedSchemas: PySide6.QtRemoteObjects.QRemoteObjectHostBase.AllowedSchemas = ..., parent: PySide6.QtCore.QObject | None = ..., *, host_url: PySide6.QtCore.QUrl | None = ...) -> None: ...

    def host_url(self, /) -> PySide6.QtCore.QUrl: ...
    def set_host_url(self, hostAddress: PySide6.QtCore.QUrl | str, /, allowedSchemas: PySide6.QtRemoteObjects.QRemoteObjectHostBase.AllowedSchemas = ...) -> bool: ...
    @staticmethod
    def set_local_server_options(options: PySide6.QtNetwork.QLocalServer.SocketOption, /) -> None: ...


class QRemoteObjectHostBase(PySide6.QtRemoteObjects.QRemoteObjectNode):

    class AllowedSchemas(enum.Enum):

        BuiltInSchemasOnly        = ...  # 0x0
        AllowExternalRegistration = ...  # 0x1


    def add_host_side_connection(self, ioDevice: PySide6.QtCore.QIODevice, /) -> None: ...
    def disable_remoting(self, remoteObject: PySide6.QtCore.QObject, /) -> bool: ...
    @typing.overload
    def enable_remoting(self, model: PySide6.QtCore.QAbstractItemModel, name: str, roles: collections.abc.Sequence[int], /, selectionModel: PySide6.QtCore.QItemSelectionModel | None = ...) -> bool: ...
    @typing.overload
    def enable_remoting(self, object: PySide6.QtCore.QObject, /, name: str = ...) -> bool: ...
    def host_url(self, /) -> PySide6.QtCore.QUrl: ...
    def proxy(self, registryUrl: PySide6.QtCore.QUrl | str, /, hostUrl: PySide6.QtCore.QUrl | str = ...) -> bool: ...
    def reverse_proxy(self, /) -> bool: ...
    def set_host_url(self, hostAddress: PySide6.QtCore.QUrl | str, /, allowedSchemas: PySide6.QtRemoteObjects.QRemoteObjectHostBase.AllowedSchemas = ...) -> bool: ...
    def set_name(self, name: str, /) -> None: ...


class QRemoteObjectNode(PySide6.QtCore.QObject):

    error                    : typing.ClassVar[Signal] = ... # error(QRemoteObjectNode::ErrorCode)
    heartbeatIntervalChanged : typing.ClassVar[Signal] = ... # heartbeatIntervalChanged(int)
    remoteObjectAdded        : typing.ClassVar[Signal] = ... # remoteObjectAdded(QRemoteObjectSourceLocation)
    remoteObjectRemoved      : typing.ClassVar[Signal] = ... # remoteObjectRemoved(QRemoteObjectSourceLocation)

    class ErrorCode(enum.Enum):

        NoError                   = ...  # 0x0
        RegistryNotAcquired       = ...  # 0x1
        RegistryAlreadyHosted     = ...  # 0x2
        NodeIsNoServer            = ...  # 0x3
        ServerAlreadyCreated      = ...  # 0x4
        UnintendedRegistryHosting = ...  # 0x5
        OperationNotValidOnClientNode = ...  # 0x6
        SourceNotRegistered       = ...  # 0x7
        MissingObjectName         = ...  # 0x8
        HostUrlInvalid            = ...  # 0x9
        ProtocolMismatch          = ...  # 0xa
        ListenFailed              = ...  # 0xb
        SocketAccessError         = ...  # 0xc


    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, registry_url: PySide6.QtCore.QUrl | None = ..., persisted_store: PySide6.QtRemoteObjects.QRemoteObjectAbstractPersistedStore | None = ..., heartbeat_interval: int | None = ...) -> None: ...
    @typing.overload
    def __init__(self, registryAddress: PySide6.QtCore.QUrl | str, /, parent: PySide6.QtCore.QObject | None = ..., *, registry_url: PySide6.QtCore.QUrl | None = ..., persisted_store: PySide6.QtRemoteObjects.QRemoteObjectAbstractPersistedStore | None = ..., heartbeat_interval: int | None = ...) -> None: ...

    def acquire_dynamic(self, name: str, /) -> PySide6.QtRemoteObjects.QRemoteObjectDynamicReplica: ...
    def acquire_model(self, name: str, /, action: PySide6.QtRemoteObjects.QtRemoteObjects.InitialAction = ..., rolesHint: collections.abc.Sequence[int] = ...) -> PySide6.QtRemoteObjects.QAbstractItemModelReplica: ...
    def add_client_side_connection(self, ioDevice: PySide6.QtCore.QIODevice, /) -> None: ...
    def connect_to_node(self, address: PySide6.QtCore.QUrl | str, /) -> bool: ...
    def heartbeat_interval(self, /) -> int: ...
    def instances(self, typeName: str, /) -> typing.List[str]: ...
    def last_error(self, /) -> PySide6.QtRemoteObjects.QRemoteObjectNode.ErrorCode: ...
    def persisted_store(self, /) -> PySide6.QtRemoteObjects.QRemoteObjectAbstractPersistedStore: ...
    def registry(self, /) -> PySide6.QtRemoteObjects.QRemoteObjectRegistry: ...
    def registry_url(self, /) -> PySide6.QtCore.QUrl: ...
    def set_heartbeat_interval(self, interval: int, /) -> None: ...
    def set_name(self, name: str, /) -> None: ...
    def set_persisted_store(self, persistedStore: PySide6.QtRemoteObjects.QRemoteObjectAbstractPersistedStore, /) -> None: ...
    def set_registry_url(self, registryAddress: PySide6.QtCore.QUrl | str, /) -> bool: ...
    def timer_event(self, arg__1: PySide6.QtCore.QTimerEvent, /) -> None: ...
    def wait_for_registry(self, /, timeout: int = ...) -> bool: ...


class QRemoteObjectPendingCall(Shiboken.Object):

    class Error(enum.Enum):

        NoError                   = ...  # 0x0
        InvalidMessage            = ...  # 0x1


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtRemoteObjects.QRemoteObjectPendingCall, /) -> None: ...

    def error(self, /) -> PySide6.QtRemoteObjects.QRemoteObjectPendingCall.Error: ...
    @staticmethod
    def from_completed_call(returnValue: typing.Any, /) -> PySide6.QtRemoteObjects.QRemoteObjectPendingCall: ...
    def is_finished(self, /) -> bool: ...
    def return_value(self, /) -> typing.Any: ...
    def wait_for_finished(self, /, timeout: int = ...) -> bool: ...


class QRemoteObjectPendingCallWatcher(PySide6.QtCore.QObject, PySide6.QtRemoteObjects.QRemoteObjectPendingCall):

    finished                 : typing.ClassVar[Signal] = ... # finished(QRemoteObjectPendingCallWatcher*)

    def __init__(self, call: PySide6.QtRemoteObjects.QRemoteObjectPendingCall, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def is_finished(self, /) -> bool: ...
    def wait_for_finished(self, /) -> None: ...


class QRemoteObjectRegistry(PySide6.QtRemoteObjects.QRemoteObjectReplica):

    remoteObjectAdded        : typing.ClassVar[Signal] = ... # remoteObjectAdded(QRemoteObjectSourceLocation)
    remoteObjectRemoved      : typing.ClassVar[Signal] = ... # remoteObjectRemoved(QRemoteObjectSourceLocation)
    def add_source(self, entry: typing.Tuple[str, PySide6.QtRemoteObjects.QRemoteObjectSourceLocationInfo], /) -> None: ...
    def initialize(self, /) -> None: ...
    def push_to_registry_if_needed(self, /) -> None: ...
    @staticmethod
    def register_metatypes() -> None: ...
    def remove_source(self, entry: typing.Tuple[str, PySide6.QtRemoteObjects.QRemoteObjectSourceLocationInfo], /) -> None: ...
    def source_locations(self, /) -> typing.Dict[str, PySide6.QtRemoteObjects.QRemoteObjectSourceLocationInfo]: ...


class QRemoteObjectRegistryHost(PySide6.QtRemoteObjects.QRemoteObjectHostBase):

    def __init__(self, /, registryAddress: PySide6.QtCore.QUrl | str = ..., parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def set_registry_url(self, registryUrl: PySide6.QtCore.QUrl | str, /) -> bool: ...


class QRemoteObjectReplica(PySide6.QtCore.QObject):

    initialized              : typing.ClassVar[Signal] = ... # initialized()
    notified                 : typing.ClassVar[Signal] = ... # notified()
    stateChanged             : typing.ClassVar[Signal] = ... # stateChanged(State,State)

    class State(enum.Enum):

        Uninitialized             = ...  # 0x0
        Default                   = ...  # 0x1
        Valid                     = ...  # 0x2
        Suspect                   = ...  # 0x3
        SignatureMismatch         = ...  # 0x4


    def __init__(self, /, *, node: PySide6.QtRemoteObjects.QRemoteObjectNode | None = ..., state: PySide6.QtRemoteObjects.QRemoteObjectReplica.State | None = ...) -> None: ...

    def initialize(self, /) -> None: ...
    def initialize_node(self, node: PySide6.QtRemoteObjects.QRemoteObjectNode, /, name: str = ...) -> None: ...
    def is_initialized(self, /) -> bool: ...
    def is_replica_valid(self, /) -> bool: ...
    def node(self, /) -> PySide6.QtRemoteObjects.QRemoteObjectNode: ...
    def persist_properties(self, repName: str, repSig: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, props: collections.abc.Sequence[typing.Any], /) -> None: ...
    def prop_as_variant(self, i: int, /) -> typing.Any: ...
    def retrieve_properties(self, repName: str, repSig: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> typing.List[typing.Any]: ...
    def send(self, call: PySide6.QtCore.QMetaObject.Call, index: int, args: collections.abc.Sequence[typing.Any], /) -> None: ...
    def send_with_reply(self, call: PySide6.QtCore.QMetaObject.Call, index: int, args: collections.abc.Sequence[typing.Any], /) -> PySide6.QtRemoteObjects.QRemoteObjectPendingCall: ...
    def set_child(self, i: int, arg__2: typing.Any, /) -> None: ...
    def set_node(self, node: PySide6.QtRemoteObjects.QRemoteObjectNode, /) -> None: ...
    def state(self, /) -> PySide6.QtRemoteObjects.QRemoteObjectReplica.State: ...
    def wait_for_source(self, /, timeout: int = ...) -> bool: ...


class QRemoteObjectSettingsStore(PySide6.QtRemoteObjects.QRemoteObjectAbstractPersistedStore):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def restore_properties(self, repName: str, repSig: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> typing.List[typing.Any]: ...
    def save_properties(self, repName: str, repSig: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, values: collections.abc.Sequence[typing.Any], /) -> None: ...


class QRemoteObjectSourceLocationInfo(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QRemoteObjectSourceLocationInfo: PySide6.QtRemoteObjects.QRemoteObjectSourceLocationInfo, /) -> None: ...
    @typing.overload
    def __init__(self, typeName_: str, hostUrl_: PySide6.QtCore.QUrl | str, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtRemoteObjects.QRemoteObjectSourceLocationInfo, /) -> bool: ...
    def __lshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def __ne__(self, other: PySide6.QtRemoteObjects.QRemoteObjectSourceLocationInfo, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def __rshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...


class QtROClientFactory(Shiboken.Object):
    def create(self, url: PySide6.QtCore.QUrl | str, /, parent: PySide6.QtCore.QObject | None = ...) -> PySide6.QtRemoteObjects.QtROClientIoDevice: ...
    @staticmethod
    def instance() -> PySide6.QtRemoteObjects.QtROClientFactory: ...
    def is_valid(self, url: PySide6.QtCore.QUrl | str, /) -> bool: ...


class QtROClientIoDevice(PySide6.QtRemoteObjects.QtROIoDeviceBase):

    setError                 : typing.ClassVar[Signal] = ... # setError(QRemoteObjectNode::ErrorCode)
    shouldReconnect          : typing.ClassVar[Signal] = ... # shouldReconnect(QtROClientIoDevice*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def connect_to_server(self, /) -> None: ...
    def device_type(self, /) -> str: ...
    def disconnect_from_server(self, /) -> None: ...
    def do_disconnect_from_server(self, /) -> None: ...
    def set_url(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    def url(self, /) -> PySide6.QtCore.QUrl: ...


class QtROIoDeviceBase(PySide6.QtCore.QObject):

    disconnected             : typing.ClassVar[Signal] = ... # disconnected()
    readyRead                : typing.ClassVar[Signal] = ... # readyRead()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def add_source(self, arg__1: str, /) -> None: ...
    def bytes_available(self, /) -> int: ...
    def close(self, /) -> None: ...
    def connection(self, /) -> PySide6.QtCore.QIODevice: ...
    def device_type(self, /) -> str: ...
    def do_close(self, /) -> None: ...
    def initialize_data_stream(self, /) -> None: ...
    def is_closing(self, /) -> bool: ...
    def is_open(self, /) -> bool: ...
    def read(self, arg__1: PySide6.QtRemoteObjects.QtRemoteObjects.QRemoteObjectPacketTypeEnum, arg__2: str, /) -> bool: ...
    def remote_objects(self, /) -> typing.Set[str]: ...
    def remove_source(self, arg__1: str, /) -> None: ...
    @typing.overload
    def write(self, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    @typing.overload
    def write(self, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, arg__2: int, /) -> None: ...


class QtROServerFactory(Shiboken.Object):
    def create(self, url: PySide6.QtCore.QUrl | str, /, parent: PySide6.QtCore.QObject | None = ...) -> PySide6.QtRemoteObjects.QConnectionAbstractServer: ...
    @staticmethod
    def instance() -> PySide6.QtRemoteObjects.QtROServerFactory: ...
    def is_valid(self, url: PySide6.QtCore.QUrl | str, /) -> bool: ...


class QtROServerIoDevice(PySide6.QtRemoteObjects.QtROIoDeviceBase):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def device_type(self, /) -> str: ...


class QtRemoteObjects(Shiboken.Object):

    class InitialAction(enum.Enum):

        FetchRootSize             = ...  # 0x0
        PrefetchData              = ...  # 0x1

    class QRemoteObjectPacketTypeEnum(enum.Enum):

        Invalid                   = ...  # 0x0
        Handshake                 = ...  # 0x1
        InitPacket                = ...  # 0x2
        InitDynamicPacket         = ...  # 0x3
        AddObject                 = ...  # 0x4
        RemoveObject              = ...  # 0x5
        InvokePacket              = ...  # 0x6
        InvokeReplyPacket         = ...  # 0x7
        PropertyChangePacket      = ...  # 0x8
        ObjectList                = ...  # 0x9
        Ping                      = ...  # 0xa
        Pong                      = ...  # 0xb


    @typing.overload
    @staticmethod
    def copy_stored_properties(mo: PySide6.QtCore.QMetaObject, src: PySide6.QtCore.QDataStream, dst: int, /) -> None: ...
    @typing.overload
    @staticmethod
    def copy_stored_properties(mo: PySide6.QtCore.QMetaObject, src: int, dst: PySide6.QtCore.QDataStream, /) -> None: ...
    @typing.overload
    @staticmethod
    def copy_stored_properties(mo: PySide6.QtCore.QMetaObject, src: int, dst: int, /) -> None: ...


# eof
