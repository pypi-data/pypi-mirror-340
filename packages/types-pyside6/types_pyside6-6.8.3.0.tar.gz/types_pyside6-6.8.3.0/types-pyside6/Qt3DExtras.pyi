# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.Qt3DExtras, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.Qt3DExtras`

import PySide6.Qt3DExtras
import PySide6.QtCore
import PySide6.QtGui
import PySide6.Qt3DCore
import PySide6.Qt3DRender

import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QIntList: ...


class Qt3DExtras(Shiboken.Object):

    class QAbstractCameraController(PySide6.Qt3DCore.Qt3DCore.QEntity):

        accelerationChanged      : typing.ClassVar[Signal] = ... # accelerationChanged(float)
        cameraChanged            : typing.ClassVar[Signal] = ... # cameraChanged()
        decelerationChanged      : typing.ClassVar[Signal] = ... # decelerationChanged(float)
        linearSpeedChanged       : typing.ClassVar[Signal] = ... # linearSpeedChanged()
        lookSpeedChanged         : typing.ClassVar[Signal] = ... # lookSpeedChanged()

        class InputState(Shiboken.Object):

            @typing.overload
            def __init__(self, /) -> None: ...
            @typing.overload
            def __init__(self, InputState: PySide6.Qt3DExtras.Qt3DExtras.QAbstractCameraController.InputState, /) -> None: ...

            def __copy__(self, /) -> typing.Self: ...


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, camera: PySide6.Qt3DRender.Qt3DRender.QCamera | None = ..., linear_speed: float | None = ..., look_speed: float | None = ..., acceleration: float | None = ..., deceleration: float | None = ...) -> None: ...

        def acceleration(self, /) -> float: ...
        def camera(self, /) -> PySide6.Qt3DRender.Qt3DRender.QCamera: ...
        def deceleration(self, /) -> float: ...
        def linear_speed(self, /) -> float: ...
        def look_speed(self, /) -> float: ...
        def set_acceleration(self, acceleration: float, /) -> None: ...
        def set_camera(self, camera: PySide6.Qt3DRender.Qt3DRender.QCamera, /) -> None: ...
        def set_deceleration(self, deceleration: float, /) -> None: ...
        def set_linear_speed(self, linearSpeed: float, /) -> None: ...
        def set_look_speed(self, lookSpeed: float, /) -> None: ...

    class QAbstractSpriteSheet(PySide6.Qt3DCore.Qt3DCore.QNode):

        currentIndexChanged      : typing.ClassVar[Signal] = ... # currentIndexChanged(int)
        textureChanged           : typing.ClassVar[Signal] = ... # textureChanged(Qt3DRender::QAbstractTexture*)
        textureTransformChanged  : typing.ClassVar[Signal] = ... # textureTransformChanged(QMatrix3x3)
        def current_index(self, /) -> int: ...
        def set_current_index(self, currentIndex: int, /) -> None: ...
        def set_texture(self, texture: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...
        def texture(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        def texture_transform(self, /) -> PySide6.QtGui.QMatrix3x3: ...

    class QConeGeometry(PySide6.Qt3DCore.Qt3DCore.QGeometry):

        bottomRadiusChanged      : typing.ClassVar[Signal] = ... # bottomRadiusChanged(float)
        hasBottomEndcapChanged   : typing.ClassVar[Signal] = ... # hasBottomEndcapChanged(bool)
        hasTopEndcapChanged      : typing.ClassVar[Signal] = ... # hasTopEndcapChanged(bool)
        lengthChanged            : typing.ClassVar[Signal] = ... # lengthChanged(float)
        ringsChanged             : typing.ClassVar[Signal] = ... # ringsChanged(int)
        slicesChanged            : typing.ClassVar[Signal] = ... # slicesChanged(int)
        topRadiusChanged         : typing.ClassVar[Signal] = ... # topRadiusChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, has_top_endcap: bool | None = ..., has_bottom_endcap: bool | None = ..., rings: int | None = ..., slices: int | None = ..., top_radius: float | None = ..., bottom_radius: float | None = ..., length: float | None = ..., position_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., normal_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., tex_coord_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., index_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ...) -> None: ...

        def bottom_radius(self, /) -> float: ...
        def has_bottom_endcap(self, /) -> bool: ...
        def has_top_endcap(self, /) -> bool: ...
        def index_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def length(self, /) -> float: ...
        def normal_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def position_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def rings(self, /) -> int: ...
        def set_bottom_radius(self, bottomRadius: float, /) -> None: ...
        def set_has_bottom_endcap(self, hasBottomEndcap: bool, /) -> None: ...
        def set_has_top_endcap(self, hasTopEndcap: bool, /) -> None: ...
        def set_length(self, length: float, /) -> None: ...
        def set_rings(self, rings: int, /) -> None: ...
        def set_slices(self, slices: int, /) -> None: ...
        def set_top_radius(self, topRadius: float, /) -> None: ...
        def slices(self, /) -> int: ...
        def tex_coord_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def top_radius(self, /) -> float: ...
        def update_indices(self, /) -> None: ...
        def update_vertices(self, /) -> None: ...

    class QConeGeometryView(PySide6.Qt3DCore.Qt3DCore.QGeometryView):

        bottomRadiusChanged      : typing.ClassVar[Signal] = ... # bottomRadiusChanged(float)
        hasBottomEndcapChanged   : typing.ClassVar[Signal] = ... # hasBottomEndcapChanged(bool)
        hasTopEndcapChanged      : typing.ClassVar[Signal] = ... # hasTopEndcapChanged(bool)
        lengthChanged            : typing.ClassVar[Signal] = ... # lengthChanged(float)
        ringsChanged             : typing.ClassVar[Signal] = ... # ringsChanged(int)
        slicesChanged            : typing.ClassVar[Signal] = ... # slicesChanged(int)
        topRadiusChanged         : typing.ClassVar[Signal] = ... # topRadiusChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rings: int | None = ..., slices: int | None = ..., has_top_endcap: bool | None = ..., has_bottom_endcap: bool | None = ..., top_radius: float | None = ..., bottom_radius: float | None = ..., length: float | None = ...) -> None: ...

        def bottom_radius(self, /) -> float: ...
        def has_bottom_endcap(self, /) -> bool: ...
        def has_top_endcap(self, /) -> bool: ...
        def length(self, /) -> float: ...
        def rings(self, /) -> int: ...
        def set_bottom_radius(self, bottomRadius: float, /) -> None: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_has_bottom_endcap(self, hasBottomEndcap: bool, /) -> None: ...
        def set_has_top_endcap(self, hasTopEndcap: bool, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_instance_count(self, instanceCount: int, /) -> None: ...
        def set_length(self, length: float, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DCore.Qt3DCore.QGeometryView.PrimitiveType, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_rings(self, rings: int, /) -> None: ...
        def set_slices(self, slices: int, /) -> None: ...
        def set_top_radius(self, topRadius: float, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def slices(self, /) -> int: ...
        def top_radius(self, /) -> float: ...

    class QConeMesh(PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer):

        bottomRadiusChanged      : typing.ClassVar[Signal] = ... # bottomRadiusChanged(float)
        hasBottomEndcapChanged   : typing.ClassVar[Signal] = ... # hasBottomEndcapChanged(bool)
        hasTopEndcapChanged      : typing.ClassVar[Signal] = ... # hasTopEndcapChanged(bool)
        lengthChanged            : typing.ClassVar[Signal] = ... # lengthChanged(float)
        ringsChanged             : typing.ClassVar[Signal] = ... # ringsChanged(int)
        slicesChanged            : typing.ClassVar[Signal] = ... # slicesChanged(int)
        topRadiusChanged         : typing.ClassVar[Signal] = ... # topRadiusChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rings: int | None = ..., slices: int | None = ..., has_top_endcap: bool | None = ..., has_bottom_endcap: bool | None = ..., top_radius: float | None = ..., bottom_radius: float | None = ..., length: float | None = ...) -> None: ...

        def bottom_radius(self, /) -> float: ...
        def has_bottom_endcap(self, /) -> bool: ...
        def has_top_endcap(self, /) -> bool: ...
        def length(self, /) -> float: ...
        def rings(self, /) -> int: ...
        def set_bottom_radius(self, bottomRadius: float, /) -> None: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_has_bottom_endcap(self, hasBottomEndcap: bool, /) -> None: ...
        def set_has_top_endcap(self, hasTopEndcap: bool, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_instance_count(self, instanceCount: int, /) -> None: ...
        def set_length(self, length: float, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveType, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_rings(self, rings: int, /) -> None: ...
        def set_slices(self, slices: int, /) -> None: ...
        def set_top_radius(self, topRadius: float, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def slices(self, /) -> int: ...
        def top_radius(self, /) -> float: ...

    class QCuboidGeometry(PySide6.Qt3DCore.Qt3DCore.QGeometry):

        xExtentChanged           : typing.ClassVar[Signal] = ... # xExtentChanged(float)
        xyMeshResolutionChanged  : typing.ClassVar[Signal] = ... # xyMeshResolutionChanged(QSize)
        xzMeshResolutionChanged  : typing.ClassVar[Signal] = ... # xzMeshResolutionChanged(QSize)
        yExtentChanged           : typing.ClassVar[Signal] = ... # yExtentChanged(float)
        yzMeshResolutionChanged  : typing.ClassVar[Signal] = ... # yzMeshResolutionChanged(QSize)
        zExtentChanged           : typing.ClassVar[Signal] = ... # zExtentChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, x_extent: float | None = ..., y_extent: float | None = ..., z_extent: float | None = ..., xy_mesh_resolution: PySide6.QtCore.QSize | None = ..., yz_mesh_resolution: PySide6.QtCore.QSize | None = ..., xz_mesh_resolution: PySide6.QtCore.QSize | None = ..., position_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., normal_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., tex_coord_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., tangent_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., index_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ...) -> None: ...

        def index_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def normal_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def position_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def setXExtent(self, xExtent: float, /) -> None: ...
        def setXYMeshResolution(self, resolution: PySide6.QtCore.QSize, /) -> None: ...
        def setXZMeshResolution(self, resolution: PySide6.QtCore.QSize, /) -> None: ...
        def setYExtent(self, yExtent: float, /) -> None: ...
        def setYZMeshResolution(self, resolution: PySide6.QtCore.QSize, /) -> None: ...
        def setZExtent(self, zExtent: float, /) -> None: ...
        def tangent_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def tex_coord_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def update_indices(self, /) -> None: ...
        def update_vertices(self, /) -> None: ...
        def x_extent(self, /) -> float: ...
        def xy_mesh_resolution(self, /) -> PySide6.QtCore.QSize: ...
        def xz_mesh_resolution(self, /) -> PySide6.QtCore.QSize: ...
        def y_extent(self, /) -> float: ...
        def yz_mesh_resolution(self, /) -> PySide6.QtCore.QSize: ...
        def z_extent(self, /) -> float: ...

    class QCuboidGeometryView(PySide6.Qt3DCore.Qt3DCore.QGeometryView):

        xExtentChanged           : typing.ClassVar[Signal] = ... # xExtentChanged(float)
        xyMeshResolutionChanged  : typing.ClassVar[Signal] = ... # xyMeshResolutionChanged(QSize)
        xzMeshResolutionChanged  : typing.ClassVar[Signal] = ... # xzMeshResolutionChanged(QSize)
        yExtentChanged           : typing.ClassVar[Signal] = ... # yExtentChanged(float)
        yzMeshResolutionChanged  : typing.ClassVar[Signal] = ... # yzMeshResolutionChanged(QSize)
        zExtentChanged           : typing.ClassVar[Signal] = ... # zExtentChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, x_extent: float | None = ..., y_extent: float | None = ..., z_extent: float | None = ..., yz_mesh_resolution: PySide6.QtCore.QSize | None = ..., xz_mesh_resolution: PySide6.QtCore.QSize | None = ..., xy_mesh_resolution: PySide6.QtCore.QSize | None = ...) -> None: ...

        def setXExtent(self, xExtent: float, /) -> None: ...
        def setXYMeshResolution(self, resolution: PySide6.QtCore.QSize, /) -> None: ...
        def setXZMeshResolution(self, resolution: PySide6.QtCore.QSize, /) -> None: ...
        def setYExtent(self, yExtent: float, /) -> None: ...
        def setYZMeshResolution(self, resolution: PySide6.QtCore.QSize, /) -> None: ...
        def setZExtent(self, zExtent: float, /) -> None: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_instance_count(self, instanceCount: int, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DCore.Qt3DCore.QGeometryView.PrimitiveType, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def x_extent(self, /) -> float: ...
        def xy_mesh_resolution(self, /) -> PySide6.QtCore.QSize: ...
        def xz_mesh_resolution(self, /) -> PySide6.QtCore.QSize: ...
        def y_extent(self, /) -> float: ...
        def yz_mesh_resolution(self, /) -> PySide6.QtCore.QSize: ...
        def z_extent(self, /) -> float: ...

    class QCuboidMesh(PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer):

        xExtentChanged           : typing.ClassVar[Signal] = ... # xExtentChanged(float)
        xyMeshResolutionChanged  : typing.ClassVar[Signal] = ... # xyMeshResolutionChanged(QSize)
        xzMeshResolutionChanged  : typing.ClassVar[Signal] = ... # xzMeshResolutionChanged(QSize)
        yExtentChanged           : typing.ClassVar[Signal] = ... # yExtentChanged(float)
        yzMeshResolutionChanged  : typing.ClassVar[Signal] = ... # yzMeshResolutionChanged(QSize)
        zExtentChanged           : typing.ClassVar[Signal] = ... # zExtentChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, x_extent: float | None = ..., y_extent: float | None = ..., z_extent: float | None = ..., yz_mesh_resolution: PySide6.QtCore.QSize | None = ..., xz_mesh_resolution: PySide6.QtCore.QSize | None = ..., xy_mesh_resolution: PySide6.QtCore.QSize | None = ...) -> None: ...

        def setXExtent(self, xExtent: float, /) -> None: ...
        def setXYMeshResolution(self, resolution: PySide6.QtCore.QSize, /) -> None: ...
        def setXZMeshResolution(self, resolution: PySide6.QtCore.QSize, /) -> None: ...
        def setYExtent(self, yExtent: float, /) -> None: ...
        def setYZMeshResolution(self, resolution: PySide6.QtCore.QSize, /) -> None: ...
        def setZExtent(self, zExtent: float, /) -> None: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_instance_count(self, instanceCount: int, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveType, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def x_extent(self, /) -> float: ...
        def xy_mesh_resolution(self, /) -> PySide6.QtCore.QSize: ...
        def xz_mesh_resolution(self, /) -> PySide6.QtCore.QSize: ...
        def y_extent(self, /) -> float: ...
        def yz_mesh_resolution(self, /) -> PySide6.QtCore.QSize: ...
        def z_extent(self, /) -> float: ...

    class QCylinderGeometry(PySide6.Qt3DCore.Qt3DCore.QGeometry):

        lengthChanged            : typing.ClassVar[Signal] = ... # lengthChanged(float)
        radiusChanged            : typing.ClassVar[Signal] = ... # radiusChanged(float)
        ringsChanged             : typing.ClassVar[Signal] = ... # ringsChanged(int)
        slicesChanged            : typing.ClassVar[Signal] = ... # slicesChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rings: int | None = ..., slices: int | None = ..., radius: float | None = ..., length: float | None = ..., position_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., normal_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., tex_coord_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., index_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ...) -> None: ...

        def index_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def length(self, /) -> float: ...
        def normal_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def position_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def radius(self, /) -> float: ...
        def rings(self, /) -> int: ...
        def set_length(self, length: float, /) -> None: ...
        def set_radius(self, radius: float, /) -> None: ...
        def set_rings(self, rings: int, /) -> None: ...
        def set_slices(self, slices: int, /) -> None: ...
        def slices(self, /) -> int: ...
        def tex_coord_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def update_indices(self, /) -> None: ...
        def update_vertices(self, /) -> None: ...

    class QCylinderGeometryView(PySide6.Qt3DCore.Qt3DCore.QGeometryView):

        lengthChanged            : typing.ClassVar[Signal] = ... # lengthChanged(float)
        radiusChanged            : typing.ClassVar[Signal] = ... # radiusChanged(float)
        ringsChanged             : typing.ClassVar[Signal] = ... # ringsChanged(int)
        slicesChanged            : typing.ClassVar[Signal] = ... # slicesChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rings: int | None = ..., slices: int | None = ..., radius: float | None = ..., length: float | None = ...) -> None: ...

        def length(self, /) -> float: ...
        def radius(self, /) -> float: ...
        def rings(self, /) -> int: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_instance_count(self, instanceCount: int, /) -> None: ...
        def set_length(self, length: float, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DCore.Qt3DCore.QGeometryView.PrimitiveType, /) -> None: ...
        def set_radius(self, radius: float, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_rings(self, rings: int, /) -> None: ...
        def set_slices(self, slices: int, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def slices(self, /) -> int: ...

    class QCylinderMesh(PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer):

        lengthChanged            : typing.ClassVar[Signal] = ... # lengthChanged(float)
        radiusChanged            : typing.ClassVar[Signal] = ... # radiusChanged(float)
        ringsChanged             : typing.ClassVar[Signal] = ... # ringsChanged(int)
        slicesChanged            : typing.ClassVar[Signal] = ... # slicesChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rings: int | None = ..., slices: int | None = ..., radius: float | None = ..., length: float | None = ...) -> None: ...

        def length(self, /) -> float: ...
        def radius(self, /) -> float: ...
        def rings(self, /) -> int: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_instance_count(self, instanceCount: int, /) -> None: ...
        def set_length(self, length: float, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveType, /) -> None: ...
        def set_radius(self, radius: float, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_rings(self, rings: int, /) -> None: ...
        def set_slices(self, slices: int, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def slices(self, /) -> int: ...

    class QDiffuseMapMaterial(PySide6.Qt3DRender.Qt3DRender.QMaterial):

        ambientChanged           : typing.ClassVar[Signal] = ... # ambientChanged(QColor)
        diffuseChanged           : typing.ClassVar[Signal] = ... # diffuseChanged(Qt3DRender::QAbstractTexture*)
        shininessChanged         : typing.ClassVar[Signal] = ... # shininessChanged(float)
        specularChanged          : typing.ClassVar[Signal] = ... # specularChanged(QColor)
        textureScaleChanged      : typing.ClassVar[Signal] = ... # textureScaleChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, ambient: PySide6.QtGui.QColor | None = ..., specular: PySide6.QtGui.QColor | None = ..., shininess: float | None = ..., diffuse: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ..., texture_scale: float | None = ...) -> None: ...

        def ambient(self, /) -> PySide6.QtGui.QColor: ...
        def diffuse(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        def set_ambient(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_diffuse(self, diffuse: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...
        def set_shininess(self, shininess: float, /) -> None: ...
        def set_specular(self, specular: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_texture_scale(self, textureScale: float, /) -> None: ...
        def shininess(self, /) -> float: ...
        def specular(self, /) -> PySide6.QtGui.QColor: ...
        def texture_scale(self, /) -> float: ...

    class QDiffuseSpecularMapMaterial(PySide6.Qt3DRender.Qt3DRender.QMaterial):

        ambientChanged           : typing.ClassVar[Signal] = ... # ambientChanged(QColor)
        diffuseChanged           : typing.ClassVar[Signal] = ... # diffuseChanged(Qt3DRender::QAbstractTexture*)
        shininessChanged         : typing.ClassVar[Signal] = ... # shininessChanged(float)
        specularChanged          : typing.ClassVar[Signal] = ... # specularChanged(Qt3DRender::QAbstractTexture*)
        textureScaleChanged      : typing.ClassVar[Signal] = ... # textureScaleChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, ambient: PySide6.QtGui.QColor | None = ..., shininess: float | None = ..., specular: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ..., diffuse: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ..., texture_scale: float | None = ...) -> None: ...

        def ambient(self, /) -> PySide6.QtGui.QColor: ...
        def diffuse(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        def set_ambient(self, ambient: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_diffuse(self, diffuse: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...
        def set_shininess(self, shininess: float, /) -> None: ...
        def set_specular(self, specular: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...
        def set_texture_scale(self, textureScale: float, /) -> None: ...
        def shininess(self, /) -> float: ...
        def specular(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        def texture_scale(self, /) -> float: ...

    class QDiffuseSpecularMaterial(PySide6.Qt3DRender.Qt3DRender.QMaterial):

        alphaBlendingEnabledChanged: typing.ClassVar[Signal] = ... # alphaBlendingEnabledChanged(bool)
        ambientChanged           : typing.ClassVar[Signal] = ... # ambientChanged(QColor)
        diffuseChanged           : typing.ClassVar[Signal] = ... # diffuseChanged(QVariant)
        normalChanged            : typing.ClassVar[Signal] = ... # normalChanged(QVariant)
        shininessChanged         : typing.ClassVar[Signal] = ... # shininessChanged(float)
        specularChanged          : typing.ClassVar[Signal] = ... # specularChanged(QVariant)
        textureScaleChanged      : typing.ClassVar[Signal] = ... # textureScaleChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, ambient: PySide6.QtGui.QColor | None = ..., diffuse: typing.Any | None = ..., specular: typing.Any | None = ..., shininess: float | None = ..., normal: typing.Any | None = ..., texture_scale: float | None = ..., alpha_blending: bool | None = ...) -> None: ...

        def ambient(self, /) -> PySide6.QtGui.QColor: ...
        def diffuse(self, /) -> typing.Any: ...
        def is_alpha_blending_enabled(self, /) -> bool: ...
        def normal(self, /) -> typing.Any: ...
        def set_alpha_blending_enabled(self, enabled: bool, /) -> None: ...
        def set_ambient(self, ambient: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_diffuse(self, diffuse: typing.Any, /) -> None: ...
        def set_normal(self, normal: typing.Any, /) -> None: ...
        def set_shininess(self, shininess: float, /) -> None: ...
        def set_specular(self, specular: typing.Any, /) -> None: ...
        def set_texture_scale(self, textureScale: float, /) -> None: ...
        def shininess(self, /) -> float: ...
        def specular(self, /) -> typing.Any: ...
        def texture_scale(self, /) -> float: ...

    class QExtrudedTextGeometry(PySide6.Qt3DCore.Qt3DCore.QGeometry):

        depthChanged             : typing.ClassVar[Signal] = ... # depthChanged(float)
        fontChanged              : typing.ClassVar[Signal] = ... # fontChanged(QFont)
        textChanged              : typing.ClassVar[Signal] = ... # textChanged(QString)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, text: str | None = ..., font: PySide6.QtGui.QFont | None = ..., extrusion_length: float | None = ..., position_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., normal_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., index_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ...) -> None: ...

        def extrusion_length(self, /) -> float: ...
        def font(self, /) -> PySide6.QtGui.QFont: ...
        def index_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def normal_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def position_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def set_depth(self, extrusionLength: float, /) -> None: ...
        def set_font(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
        def set_text(self, text: str, /) -> None: ...
        def text(self, /) -> str: ...

    class QExtrudedTextMesh(PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer):

        depthChanged             : typing.ClassVar[Signal] = ... # depthChanged(float)
        fontChanged              : typing.ClassVar[Signal] = ... # fontChanged(QFont)
        textChanged              : typing.ClassVar[Signal] = ... # textChanged(QString)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, text: str | None = ..., font: PySide6.QtGui.QFont | None = ..., depth: float | None = ...) -> None: ...

        def depth(self, /) -> float: ...
        def font(self, /) -> PySide6.QtGui.QFont: ...
        def set_depth(self, depth: float, /) -> None: ...
        def set_font(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
        def set_text(self, text: str, /) -> None: ...
        def text(self, /) -> str: ...

    class QFirstPersonCameraController(PySide6.Qt3DExtras.Qt3DExtras.QAbstractCameraController):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QForwardRenderer(PySide6.Qt3DRender.Qt3DRender.QTechniqueFilter):

        buffersToClearChanged    : typing.ClassVar[Signal] = ... # buffersToClearChanged(Qt3DRender::QClearBuffers::BufferType)
        cameraChanged            : typing.ClassVar[Signal] = ... # cameraChanged(Qt3DCore::QEntity*)
        clearColorChanged        : typing.ClassVar[Signal] = ... # clearColorChanged(QColor)
        externalRenderTargetSizeChanged: typing.ClassVar[Signal] = ... # externalRenderTargetSizeChanged(QSize)
        frustumCullingEnabledChanged: typing.ClassVar[Signal] = ... # frustumCullingEnabledChanged(bool)
        gammaChanged             : typing.ClassVar[Signal] = ... # gammaChanged(float)
        showDebugOverlayChanged  : typing.ClassVar[Signal] = ... # showDebugOverlayChanged(bool)
        surfaceChanged           : typing.ClassVar[Signal] = ... # surfaceChanged(QObject*)
        viewportRectChanged      : typing.ClassVar[Signal] = ... # viewportRectChanged(QRectF)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, surface: PySide6.QtCore.QObject | None = ..., window: PySide6.QtCore.QObject | None = ..., viewport_rect: PySide6.QtCore.QRectF | None = ..., clear_color: PySide6.QtGui.QColor | None = ..., buffers_to_clear: PySide6.Qt3DRender.Qt3DRender.QClearBuffers.BufferType | None = ..., camera: PySide6.Qt3DCore.Qt3DCore.QEntity | None = ..., external_render_target_size: PySide6.QtCore.QSize | None = ..., frustum_culling: bool | None = ..., gamma: float | None = ..., show_debug_overlay: bool | None = ...) -> None: ...

        def buffers_to_clear(self, /) -> PySide6.Qt3DRender.Qt3DRender.QClearBuffers.BufferType: ...
        def camera(self, /) -> PySide6.Qt3DCore.Qt3DCore.QEntity: ...
        def clear_color(self, /) -> PySide6.QtGui.QColor: ...
        def external_render_target_size(self, /) -> PySide6.QtCore.QSize: ...
        def gamma(self, /) -> float: ...
        def is_frustum_culling_enabled(self, /) -> bool: ...
        def set_buffers_to_clear(self, arg__1: PySide6.Qt3DRender.Qt3DRender.QClearBuffers.BufferType, /) -> None: ...
        def set_camera(self, camera: PySide6.Qt3DCore.Qt3DCore.QEntity, /) -> None: ...
        def set_clear_color(self, clearColor: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_external_render_target_size(self, size: PySide6.QtCore.QSize, /) -> None: ...
        def set_frustum_culling_enabled(self, enabled: bool, /) -> None: ...
        def set_gamma(self, gamma: float, /) -> None: ...
        def set_show_debug_overlay(self, showDebugOverlay: bool, /) -> None: ...
        def set_surface(self, surface: PySide6.QtCore.QObject, /) -> None: ...
        def set_viewport_rect(self, viewportRect: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, /) -> None: ...
        def show_debug_overlay(self, /) -> bool: ...
        def surface(self, /) -> PySide6.QtCore.QObject: ...
        def viewport_rect(self, /) -> PySide6.QtCore.QRectF: ...

    class QGoochMaterial(PySide6.Qt3DRender.Qt3DRender.QMaterial):

        alphaChanged             : typing.ClassVar[Signal] = ... # alphaChanged(float)
        betaChanged              : typing.ClassVar[Signal] = ... # betaChanged(float)
        coolChanged              : typing.ClassVar[Signal] = ... # coolChanged(QColor)
        diffuseChanged           : typing.ClassVar[Signal] = ... # diffuseChanged(QColor)
        shininessChanged         : typing.ClassVar[Signal] = ... # shininessChanged(float)
        specularChanged          : typing.ClassVar[Signal] = ... # specularChanged(QColor)
        warmChanged              : typing.ClassVar[Signal] = ... # warmChanged(QColor)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, diffuse: PySide6.QtGui.QColor | None = ..., specular: PySide6.QtGui.QColor | None = ..., cool: PySide6.QtGui.QColor | None = ..., warm: PySide6.QtGui.QColor | None = ..., alpha: float | None = ..., beta: float | None = ..., shininess: float | None = ...) -> None: ...

        def alpha(self, /) -> float: ...
        def beta(self, /) -> float: ...
        def cool(self, /) -> PySide6.QtGui.QColor: ...
        def diffuse(self, /) -> PySide6.QtGui.QColor: ...
        def set_alpha(self, alpha: float, /) -> None: ...
        def set_beta(self, beta: float, /) -> None: ...
        def set_cool(self, cool: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_diffuse(self, diffuse: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_shininess(self, shininess: float, /) -> None: ...
        def set_specular(self, specular: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_warm(self, warm: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def shininess(self, /) -> float: ...
        def specular(self, /) -> PySide6.QtGui.QColor: ...
        def warm(self, /) -> PySide6.QtGui.QColor: ...

    class QMetalRoughMaterial(PySide6.Qt3DRender.Qt3DRender.QMaterial):

        ambientOcclusionChanged  : typing.ClassVar[Signal] = ... # ambientOcclusionChanged(QVariant)
        baseColorChanged         : typing.ClassVar[Signal] = ... # baseColorChanged(QVariant)
        metalnessChanged         : typing.ClassVar[Signal] = ... # metalnessChanged(QVariant)
        normalChanged            : typing.ClassVar[Signal] = ... # normalChanged(QVariant)
        roughnessChanged         : typing.ClassVar[Signal] = ... # roughnessChanged(QVariant)
        textureScaleChanged      : typing.ClassVar[Signal] = ... # textureScaleChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, base_color: typing.Any | None = ..., metalness: typing.Any | None = ..., roughness: typing.Any | None = ..., ambient_occlusion: typing.Any | None = ..., normal: typing.Any | None = ..., texture_scale: float | None = ...) -> None: ...

        def ambient_occlusion(self, /) -> typing.Any: ...
        def base_color(self, /) -> typing.Any: ...
        def metalness(self, /) -> typing.Any: ...
        def normal(self, /) -> typing.Any: ...
        def roughness(self, /) -> typing.Any: ...
        def set_ambient_occlusion(self, ambientOcclusion: typing.Any, /) -> None: ...
        def set_base_color(self, baseColor: typing.Any, /) -> None: ...
        def set_metalness(self, metalness: typing.Any, /) -> None: ...
        def set_normal(self, normal: typing.Any, /) -> None: ...
        def set_roughness(self, roughness: typing.Any, /) -> None: ...
        def set_texture_scale(self, textureScale: float, /) -> None: ...
        def texture_scale(self, /) -> float: ...

    class QMorphPhongMaterial(PySide6.Qt3DRender.Qt3DRender.QMaterial):

        ambientChanged           : typing.ClassVar[Signal] = ... # ambientChanged(QColor)
        diffuseChanged           : typing.ClassVar[Signal] = ... # diffuseChanged(QColor)
        interpolatorChanged      : typing.ClassVar[Signal] = ... # interpolatorChanged(float)
        shininessChanged         : typing.ClassVar[Signal] = ... # shininessChanged(float)
        specularChanged          : typing.ClassVar[Signal] = ... # specularChanged(QColor)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, ambient: PySide6.QtGui.QColor | None = ..., diffuse: PySide6.QtGui.QColor | None = ..., specular: PySide6.QtGui.QColor | None = ..., shininess: float | None = ..., interpolator: float | None = ...) -> None: ...

        def ambient(self, /) -> PySide6.QtGui.QColor: ...
        def diffuse(self, /) -> PySide6.QtGui.QColor: ...
        def interpolator(self, /) -> float: ...
        def set_ambient(self, ambient: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_diffuse(self, diffuse: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_interpolator(self, interpolator: float, /) -> None: ...
        def set_shininess(self, shininess: float, /) -> None: ...
        def set_specular(self, specular: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def shininess(self, /) -> float: ...
        def specular(self, /) -> PySide6.QtGui.QColor: ...

    class QNormalDiffuseMapAlphaMaterial(PySide6.Qt3DExtras.Qt3DExtras.QNormalDiffuseMapMaterial):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QNormalDiffuseMapMaterial(PySide6.Qt3DRender.Qt3DRender.QMaterial):

        ambientChanged           : typing.ClassVar[Signal] = ... # ambientChanged(QColor)
        diffuseChanged           : typing.ClassVar[Signal] = ... # diffuseChanged(Qt3DRender::QAbstractTexture*)
        normalChanged            : typing.ClassVar[Signal] = ... # normalChanged(Qt3DRender::QAbstractTexture*)
        shininessChanged         : typing.ClassVar[Signal] = ... # shininessChanged(float)
        specularChanged          : typing.ClassVar[Signal] = ... # specularChanged(QColor)
        textureScaleChanged      : typing.ClassVar[Signal] = ... # textureScaleChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, ambient: PySide6.QtGui.QColor | None = ..., specular: PySide6.QtGui.QColor | None = ..., diffuse: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ..., normal: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ..., shininess: float | None = ..., texture_scale: float | None = ...) -> None: ...

        def ambient(self, /) -> PySide6.QtGui.QColor: ...
        def diffuse(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        def normal(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        def set_ambient(self, ambient: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_diffuse(self, diffuse: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...
        def set_normal(self, normal: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...
        def set_shininess(self, shininess: float, /) -> None: ...
        def set_specular(self, specular: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_texture_scale(self, textureScale: float, /) -> None: ...
        def shininess(self, /) -> float: ...
        def specular(self, /) -> PySide6.QtGui.QColor: ...
        def texture_scale(self, /) -> float: ...

    class QNormalDiffuseSpecularMapMaterial(PySide6.Qt3DRender.Qt3DRender.QMaterial):

        ambientChanged           : typing.ClassVar[Signal] = ... # ambientChanged(QColor)
        diffuseChanged           : typing.ClassVar[Signal] = ... # diffuseChanged(Qt3DRender::QAbstractTexture*)
        normalChanged            : typing.ClassVar[Signal] = ... # normalChanged(Qt3DRender::QAbstractTexture*)
        shininessChanged         : typing.ClassVar[Signal] = ... # shininessChanged(float)
        specularChanged          : typing.ClassVar[Signal] = ... # specularChanged(Qt3DRender::QAbstractTexture*)
        textureScaleChanged      : typing.ClassVar[Signal] = ... # textureScaleChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, ambient: PySide6.QtGui.QColor | None = ..., diffuse: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ..., normal: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ..., specular: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ..., shininess: float | None = ..., texture_scale: float | None = ...) -> None: ...

        def ambient(self, /) -> PySide6.QtGui.QColor: ...
        def diffuse(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        def normal(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        def set_ambient(self, ambient: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_diffuse(self, diffuse: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...
        def set_normal(self, normal: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...
        def set_shininess(self, shininess: float, /) -> None: ...
        def set_specular(self, specular: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...
        def set_texture_scale(self, textureScale: float, /) -> None: ...
        def shininess(self, /) -> float: ...
        def specular(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        def texture_scale(self, /) -> float: ...

    class QOrbitCameraController(PySide6.Qt3DExtras.Qt3DExtras.QAbstractCameraController):

        inversePanChanged        : typing.ClassVar[Signal] = ... # inversePanChanged(bool)
        inverseTiltChanged       : typing.ClassVar[Signal] = ... # inverseTiltChanged(bool)
        inverseXTranslateChanged : typing.ClassVar[Signal] = ... # inverseXTranslateChanged(bool)
        inverseYTranslateChanged : typing.ClassVar[Signal] = ... # inverseYTranslateChanged(bool)
        upVectorChanged          : typing.ClassVar[Signal] = ... # upVectorChanged(QVector3D)
        zoomInLimitChanged       : typing.ClassVar[Signal] = ... # zoomInLimitChanged()
        zoomTranslateViewCenterChanged: typing.ClassVar[Signal] = ... # zoomTranslateViewCenterChanged(bool)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, zoom_in_limit: float | None = ..., up_vector: PySide6.QtGui.QVector3D | None = ..., inverseXTranslate: bool | None = ..., inverseYTranslate: bool | None = ..., inverse_pan: bool | None = ..., inverse_tilt: bool | None = ..., zoom_translate_view_center: bool | None = ...) -> None: ...

        def inverseXTranslate(self, /) -> bool: ...
        def inverseYTranslate(self, /) -> bool: ...
        def inverse_pan(self, /) -> bool: ...
        def inverse_tilt(self, /) -> bool: ...
        def setInverseXTranslate(self, isInverse: bool, /) -> None: ...
        def setInverseYTranslate(self, isInverse: bool, /) -> None: ...
        def set_inverse_pan(self, isInverse: bool, /) -> None: ...
        def set_inverse_tilt(self, isInverse: bool, /) -> None: ...
        def set_up_vector(self, upVector: PySide6.QtGui.QVector3D, /) -> None: ...
        def set_zoom_in_limit(self, zoomInLimit: float, /) -> None: ...
        def set_zoom_translate_view_center(self, isTranslate: bool, /) -> None: ...
        def up_vector(self, /) -> PySide6.QtGui.QVector3D: ...
        def zoom_in_limit(self, /) -> float: ...
        def zoom_translate_view_center(self, /) -> bool: ...

    class QPerVertexColorMaterial(PySide6.Qt3DRender.Qt3DRender.QMaterial):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QPhongAlphaMaterial(PySide6.Qt3DRender.Qt3DRender.QMaterial):

        alphaChanged             : typing.ClassVar[Signal] = ... # alphaChanged(float)
        ambientChanged           : typing.ClassVar[Signal] = ... # ambientChanged(QColor)
        blendFunctionArgChanged  : typing.ClassVar[Signal] = ... # blendFunctionArgChanged(Qt3DRender::QBlendEquation::BlendFunction)
        destinationAlphaArgChanged: typing.ClassVar[Signal] = ... # destinationAlphaArgChanged(Qt3DRender::QBlendEquationArguments::Blending)
        destinationRgbArgChanged : typing.ClassVar[Signal] = ... # destinationRgbArgChanged(Qt3DRender::QBlendEquationArguments::Blending)
        diffuseChanged           : typing.ClassVar[Signal] = ... # diffuseChanged(QColor)
        shininessChanged         : typing.ClassVar[Signal] = ... # shininessChanged(float)
        sourceAlphaArgChanged    : typing.ClassVar[Signal] = ... # sourceAlphaArgChanged(Qt3DRender::QBlendEquationArguments::Blending)
        sourceRgbArgChanged      : typing.ClassVar[Signal] = ... # sourceRgbArgChanged(Qt3DRender::QBlendEquationArguments::Blending)
        specularChanged          : typing.ClassVar[Signal] = ... # specularChanged(QColor)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, ambient: PySide6.QtGui.QColor | None = ..., diffuse: PySide6.QtGui.QColor | None = ..., specular: PySide6.QtGui.QColor | None = ..., shininess: float | None = ..., alpha: float | None = ..., source_rgb_arg: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending | None = ..., destination_rgb_arg: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending | None = ..., source_alpha_arg: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending | None = ..., destination_alpha_arg: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending | None = ..., blend_function_arg: PySide6.Qt3DRender.Qt3DRender.QBlendEquation.BlendFunction | None = ...) -> None: ...

        def alpha(self, /) -> float: ...
        def ambient(self, /) -> PySide6.QtGui.QColor: ...
        def blend_function_arg(self, /) -> PySide6.Qt3DRender.Qt3DRender.QBlendEquation.BlendFunction: ...
        def destination_alpha_arg(self, /) -> PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending: ...
        def destination_rgb_arg(self, /) -> PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending: ...
        def diffuse(self, /) -> PySide6.QtGui.QColor: ...
        def set_alpha(self, alpha: float, /) -> None: ...
        def set_ambient(self, ambient: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_blend_function_arg(self, blendFunctionArg: PySide6.Qt3DRender.Qt3DRender.QBlendEquation.BlendFunction, /) -> None: ...
        def set_destination_alpha_arg(self, destinationAlphaArg: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending, /) -> None: ...
        def set_destination_rgb_arg(self, destinationRgbArg: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending, /) -> None: ...
        def set_diffuse(self, diffuse: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_shininess(self, shininess: float, /) -> None: ...
        def set_source_alpha_arg(self, sourceAlphaArg: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending, /) -> None: ...
        def set_source_rgb_arg(self, sourceRgbArg: PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending, /) -> None: ...
        def set_specular(self, specular: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def shininess(self, /) -> float: ...
        def source_alpha_arg(self, /) -> PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending: ...
        def source_rgb_arg(self, /) -> PySide6.Qt3DRender.Qt3DRender.QBlendEquationArguments.Blending: ...
        def specular(self, /) -> PySide6.QtGui.QColor: ...

    class QPhongMaterial(PySide6.Qt3DRender.Qt3DRender.QMaterial):

        ambientChanged           : typing.ClassVar[Signal] = ... # ambientChanged(QColor)
        diffuseChanged           : typing.ClassVar[Signal] = ... # diffuseChanged(QColor)
        shininessChanged         : typing.ClassVar[Signal] = ... # shininessChanged(float)
        specularChanged          : typing.ClassVar[Signal] = ... # specularChanged(QColor)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, ambient: PySide6.QtGui.QColor | None = ..., diffuse: PySide6.QtGui.QColor | None = ..., specular: PySide6.QtGui.QColor | None = ..., shininess: float | None = ...) -> None: ...

        def ambient(self, /) -> PySide6.QtGui.QColor: ...
        def diffuse(self, /) -> PySide6.QtGui.QColor: ...
        def set_ambient(self, ambient: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_diffuse(self, diffuse: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_shininess(self, shininess: float, /) -> None: ...
        def set_specular(self, specular: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def shininess(self, /) -> float: ...
        def specular(self, /) -> PySide6.QtGui.QColor: ...

    class QPlaneGeometry(PySide6.Qt3DCore.Qt3DCore.QGeometry):

        heightChanged            : typing.ClassVar[Signal] = ... # heightChanged(float)
        mirroredChanged          : typing.ClassVar[Signal] = ... # mirroredChanged(bool)
        resolutionChanged        : typing.ClassVar[Signal] = ... # resolutionChanged(QSize)
        widthChanged             : typing.ClassVar[Signal] = ... # widthChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, width: float | None = ..., height: float | None = ..., resolution: PySide6.QtCore.QSize | None = ..., mirrored: bool | None = ..., position_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., normal_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., tex_coord_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., tangent_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., index_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ...) -> None: ...

        def height(self, /) -> float: ...
        def index_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def mirrored(self, /) -> bool: ...
        def normal_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def position_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def resolution(self, /) -> PySide6.QtCore.QSize: ...
        def set_height(self, height: float, /) -> None: ...
        def set_mirrored(self, mirrored: bool, /) -> None: ...
        def set_resolution(self, resolution: PySide6.QtCore.QSize, /) -> None: ...
        def set_width(self, width: float, /) -> None: ...
        def tangent_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def tex_coord_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def update_indices(self, /) -> None: ...
        def update_vertices(self, /) -> None: ...
        def width(self, /) -> float: ...

    class QPlaneGeometryView(PySide6.Qt3DCore.Qt3DCore.QGeometryView):

        heightChanged            : typing.ClassVar[Signal] = ... # heightChanged(float)
        meshResolutionChanged    : typing.ClassVar[Signal] = ... # meshResolutionChanged(QSize)
        mirroredChanged          : typing.ClassVar[Signal] = ... # mirroredChanged(bool)
        widthChanged             : typing.ClassVar[Signal] = ... # widthChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, width: float | None = ..., height: float | None = ..., mesh_resolution: PySide6.QtCore.QSize | None = ..., mirrored: bool | None = ...) -> None: ...

        def height(self, /) -> float: ...
        def mesh_resolution(self, /) -> PySide6.QtCore.QSize: ...
        def mirrored(self, /) -> bool: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_height(self, height: float, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_instance_count(self, instanceCount: int, /) -> None: ...
        def set_mesh_resolution(self, resolution: PySide6.QtCore.QSize, /) -> None: ...
        def set_mirrored(self, mirrored: bool, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DCore.Qt3DCore.QGeometryView.PrimitiveType, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def set_width(self, width: float, /) -> None: ...
        def width(self, /) -> float: ...

    class QPlaneMesh(PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer):

        heightChanged            : typing.ClassVar[Signal] = ... # heightChanged(float)
        meshResolutionChanged    : typing.ClassVar[Signal] = ... # meshResolutionChanged(QSize)
        mirroredChanged          : typing.ClassVar[Signal] = ... # mirroredChanged(bool)
        widthChanged             : typing.ClassVar[Signal] = ... # widthChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, width: float | None = ..., height: float | None = ..., mesh_resolution: PySide6.QtCore.QSize | None = ..., mirrored: bool | None = ...) -> None: ...

        def height(self, /) -> float: ...
        def mesh_resolution(self, /) -> PySide6.QtCore.QSize: ...
        def mirrored(self, /) -> bool: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_height(self, height: float, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_instance_count(self, instanceCount: int, /) -> None: ...
        def set_mesh_resolution(self, resolution: PySide6.QtCore.QSize, /) -> None: ...
        def set_mirrored(self, mirrored: bool, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveType, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def set_width(self, width: float, /) -> None: ...
        def width(self, /) -> float: ...

    class QSkyboxEntity(PySide6.Qt3DCore.Qt3DCore.QEntity):

        baseNameChanged          : typing.ClassVar[Signal] = ... # baseNameChanged(QString)
        extensionChanged         : typing.ClassVar[Signal] = ... # extensionChanged(QString)
        gammaCorrectEnabledChanged: typing.ClassVar[Signal] = ... # gammaCorrectEnabledChanged(bool)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, base_name: str | None = ..., extension: str | None = ..., gamma_correct: bool | None = ...) -> None: ...

        def base_name(self, /) -> str: ...
        def extension(self, /) -> str: ...
        def is_gamma_correct_enabled(self, /) -> bool: ...
        def set_base_name(self, path: str, /) -> None: ...
        def set_extension(self, extension: str, /) -> None: ...
        def set_gamma_correct_enabled(self, enabled: bool, /) -> None: ...

    class QSphereGeometry(PySide6.Qt3DCore.Qt3DCore.QGeometry):

        generateTangentsChanged  : typing.ClassVar[Signal] = ... # generateTangentsChanged(bool)
        radiusChanged            : typing.ClassVar[Signal] = ... # radiusChanged(float)
        ringsChanged             : typing.ClassVar[Signal] = ... # ringsChanged(int)
        slicesChanged            : typing.ClassVar[Signal] = ... # slicesChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rings: int | None = ..., slices: int | None = ..., radius: float | None = ..., generate_tangents: bool | None = ..., position_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., normal_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., tex_coord_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., tangent_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., index_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ...) -> None: ...

        def generate_tangents(self, /) -> bool: ...
        def index_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def normal_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def position_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def radius(self, /) -> float: ...
        def rings(self, /) -> int: ...
        def set_generate_tangents(self, gen: bool, /) -> None: ...
        def set_radius(self, radius: float, /) -> None: ...
        def set_rings(self, rings: int, /) -> None: ...
        def set_slices(self, slices: int, /) -> None: ...
        def slices(self, /) -> int: ...
        def tangent_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def tex_coord_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def update_indices(self, /) -> None: ...
        def update_vertices(self, /) -> None: ...

    class QSphereGeometryView(PySide6.Qt3DCore.Qt3DCore.QGeometryView):

        generateTangentsChanged  : typing.ClassVar[Signal] = ... # generateTangentsChanged(bool)
        radiusChanged            : typing.ClassVar[Signal] = ... # radiusChanged(float)
        ringsChanged             : typing.ClassVar[Signal] = ... # ringsChanged(int)
        slicesChanged            : typing.ClassVar[Signal] = ... # slicesChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rings: int | None = ..., slices: int | None = ..., radius: float | None = ..., generate_tangents: bool | None = ...) -> None: ...

        def generate_tangents(self, /) -> bool: ...
        def radius(self, /) -> float: ...
        def rings(self, /) -> int: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_generate_tangents(self, gen: bool, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DCore.Qt3DCore.QGeometryView.PrimitiveType, /) -> None: ...
        def set_radius(self, radius: float, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_rings(self, rings: int, /) -> None: ...
        def set_slices(self, slices: int, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def slices(self, /) -> int: ...

    class QSphereMesh(PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer):

        generateTangentsChanged  : typing.ClassVar[Signal] = ... # generateTangentsChanged(bool)
        radiusChanged            : typing.ClassVar[Signal] = ... # radiusChanged(float)
        ringsChanged             : typing.ClassVar[Signal] = ... # ringsChanged(int)
        slicesChanged            : typing.ClassVar[Signal] = ... # slicesChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rings: int | None = ..., slices: int | None = ..., radius: float | None = ..., generate_tangents: bool | None = ...) -> None: ...

        def generate_tangents(self, /) -> bool: ...
        def radius(self, /) -> float: ...
        def rings(self, /) -> int: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_generate_tangents(self, gen: bool, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveType, /) -> None: ...
        def set_radius(self, radius: float, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_rings(self, rings: int, /) -> None: ...
        def set_slices(self, slices: int, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def slices(self, /) -> int: ...

    class QSpriteGrid(PySide6.Qt3DExtras.Qt3DExtras.QAbstractSpriteSheet):

        columnsChanged           : typing.ClassVar[Signal] = ... # columnsChanged(int)
        rowsChanged              : typing.ClassVar[Signal] = ... # rowsChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rows: int | None = ..., columns: int | None = ...) -> None: ...

        def columns(self, /) -> int: ...
        def rows(self, /) -> int: ...
        def set_columns(self, columns: int, /) -> None: ...
        def set_rows(self, rows: int, /) -> None: ...

    class QSpriteSheet(PySide6.Qt3DExtras.Qt3DExtras.QAbstractSpriteSheet):

        spritesChanged           : typing.ClassVar[Signal] = ... # spritesChanged(QList<QSpriteSheetItem*>)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, sprites: collections.abc.Sequence[PySide6.Qt3DExtras.Qt3DExtras.QSpriteSheetItem] | None = ...) -> None: ...

        @typing.overload
        def add_sprite(self, sprite: PySide6.Qt3DExtras.Qt3DExtras.QSpriteSheetItem, /) -> None: ...
        @typing.overload
        def add_sprite(self, x: int, y: int, width: int, height: int, /) -> PySide6.Qt3DExtras.Qt3DExtras.QSpriteSheetItem: ...
        def remove_sprite(self, sprite: PySide6.Qt3DExtras.Qt3DExtras.QSpriteSheetItem, /) -> None: ...
        def set_sprites(self, sprites: collections.abc.Sequence[PySide6.Qt3DExtras.Qt3DExtras.QSpriteSheetItem], /) -> None: ...
        def sprites(self, /) -> typing.List[PySide6.Qt3DExtras.Qt3DExtras.QSpriteSheetItem]: ...

    class QSpriteSheetItem(PySide6.Qt3DCore.Qt3DCore.QNode):

        heightChanged            : typing.ClassVar[Signal] = ... # heightChanged(int)
        widthChanged             : typing.ClassVar[Signal] = ... # widthChanged(int)
        xChanged                 : typing.ClassVar[Signal] = ... # xChanged(int)
        yChanged                 : typing.ClassVar[Signal] = ... # yChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, x: int | None = ..., y: int | None = ..., width: int | None = ..., height: int | None = ...) -> None: ...

        def height(self, /) -> int: ...
        def set_height(self, height: int, /) -> None: ...
        def set_width(self, width: int, /) -> None: ...
        def set_x(self, x: int, /) -> None: ...
        def set_y(self, y: int, /) -> None: ...
        def width(self, /) -> int: ...
        def x(self, /) -> int: ...
        def y(self, /) -> int: ...

    class QText2DEntity(PySide6.Qt3DCore.Qt3DCore.QEntity):

        colorChanged             : typing.ClassVar[Signal] = ... # colorChanged(QColor)
        fontChanged              : typing.ClassVar[Signal] = ... # fontChanged(QFont)
        heightChanged            : typing.ClassVar[Signal] = ... # heightChanged(float)
        textChanged              : typing.ClassVar[Signal] = ... # textChanged(QString)
        widthChanged             : typing.ClassVar[Signal] = ... # widthChanged(float)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, font: PySide6.QtGui.QFont | None = ..., text: str | None = ..., color: PySide6.QtGui.QColor | None = ..., width: float | None = ..., height: float | None = ..., alignment: PySide6.QtCore.Qt.AlignmentFlag | None = ...) -> None: ...

        def alignment(self, /) -> PySide6.QtCore.Qt.AlignmentFlag: ...
        def color(self, /) -> PySide6.QtGui.QColor: ...
        def font(self, /) -> PySide6.QtGui.QFont: ...
        def height(self, /) -> float: ...
        def set_alignment(self, alignment: PySide6.QtCore.Qt.AlignmentFlag, /) -> None: ...
        def set_color(self, color: PySide6.QtGui.QColor | str | PySide6.QtGui.QRgba64 | typing.Any | PySide6.QtCore.Qt.GlobalColor | int, /) -> None: ...
        def set_font(self, font: PySide6.QtGui.QFont | str | collections.abc.Sequence[str], /) -> None: ...
        def set_height(self, height: float, /) -> None: ...
        def set_text(self, text: str, /) -> None: ...
        def set_width(self, width: float, /) -> None: ...
        def text(self, /) -> str: ...
        def width(self, /) -> float: ...

    class QTextureMaterial(PySide6.Qt3DRender.Qt3DRender.QMaterial):

        alphaBlendingEnabledChanged: typing.ClassVar[Signal] = ... # alphaBlendingEnabledChanged(bool)
        textureChanged           : typing.ClassVar[Signal] = ... # textureChanged(Qt3DRender::QAbstractTexture*)
        textureOffsetChanged     : typing.ClassVar[Signal] = ... # textureOffsetChanged(QVector2D)
        textureTransformChanged  : typing.ClassVar[Signal] = ... # textureTransformChanged(QMatrix3x3)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, texture: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture | None = ..., texture_offset: PySide6.QtGui.QVector2D | None = ..., texture_transform: PySide6.QtGui.QMatrix3x3 | None = ..., alpha_blending: bool | None = ...) -> None: ...

        def is_alpha_blending_enabled(self, /) -> bool: ...
        def set_alpha_blending_enabled(self, enabled: bool, /) -> None: ...
        def set_texture(self, texture: PySide6.Qt3DRender.Qt3DRender.QAbstractTexture, /) -> None: ...
        def set_texture_offset(self, textureOffset: PySide6.QtGui.QVector2D, /) -> None: ...
        def set_texture_transform(self, matrix: PySide6.QtGui.QMatrix3x3, /) -> None: ...
        def texture(self, /) -> PySide6.Qt3DRender.Qt3DRender.QAbstractTexture: ...
        def texture_offset(self, /) -> PySide6.QtGui.QVector2D: ...
        def texture_transform(self, /) -> PySide6.QtGui.QMatrix3x3: ...

    class QTorusGeometry(PySide6.Qt3DCore.Qt3DCore.QGeometry):

        minorRadiusChanged       : typing.ClassVar[Signal] = ... # minorRadiusChanged(float)
        radiusChanged            : typing.ClassVar[Signal] = ... # radiusChanged(float)
        ringsChanged             : typing.ClassVar[Signal] = ... # ringsChanged(int)
        slicesChanged            : typing.ClassVar[Signal] = ... # slicesChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rings: int | None = ..., slices: int | None = ..., radius: float | None = ..., minor_radius: float | None = ..., position_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., normal_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., tex_coord_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ..., index_attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute | None = ...) -> None: ...

        def index_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def minor_radius(self, /) -> float: ...
        def normal_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def position_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def radius(self, /) -> float: ...
        def rings(self, /) -> int: ...
        def set_minor_radius(self, minorRadius: float, /) -> None: ...
        def set_radius(self, radius: float, /) -> None: ...
        def set_rings(self, rings: int, /) -> None: ...
        def set_slices(self, slices: int, /) -> None: ...
        def slices(self, /) -> int: ...
        def tex_coord_attribute(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAttribute: ...
        def update_indices(self, /) -> None: ...
        def update_vertices(self, /) -> None: ...

    class QTorusGeometryView(PySide6.Qt3DCore.Qt3DCore.QGeometryView):

        minorRadiusChanged       : typing.ClassVar[Signal] = ... # minorRadiusChanged(float)
        radiusChanged            : typing.ClassVar[Signal] = ... # radiusChanged(float)
        ringsChanged             : typing.ClassVar[Signal] = ... # ringsChanged(int)
        slicesChanged            : typing.ClassVar[Signal] = ... # slicesChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rings: int | None = ..., slices: int | None = ..., radius: float | None = ..., minor_radius: float | None = ...) -> None: ...

        def minor_radius(self, /) -> float: ...
        def radius(self, /) -> float: ...
        def rings(self, /) -> int: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_instance_count(self, instanceCount: int, /) -> None: ...
        def set_minor_radius(self, minorRadius: float, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DCore.Qt3DCore.QGeometryView.PrimitiveType, /) -> None: ...
        def set_radius(self, radius: float, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_rings(self, rings: int, /) -> None: ...
        def set_slices(self, slices: int, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def slices(self, /) -> int: ...

    class QTorusMesh(PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer):

        minorRadiusChanged       : typing.ClassVar[Signal] = ... # minorRadiusChanged(float)
        radiusChanged            : typing.ClassVar[Signal] = ... # radiusChanged(float)
        ringsChanged             : typing.ClassVar[Signal] = ... # ringsChanged(int)
        slicesChanged            : typing.ClassVar[Signal] = ... # slicesChanged(int)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, rings: int | None = ..., slices: int | None = ..., radius: float | None = ..., minor_radius: float | None = ...) -> None: ...

        def minor_radius(self, /) -> float: ...
        def radius(self, /) -> float: ...
        def rings(self, /) -> int: ...
        def set_first_instance(self, firstInstance: int, /) -> None: ...
        def set_geometry(self, geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, /) -> None: ...
        def set_index_offset(self, indexOffset: int, /) -> None: ...
        def set_instance_count(self, instanceCount: int, /) -> None: ...
        def set_minor_radius(self, minorRadius: float, /) -> None: ...
        def set_primitive_restart_enabled(self, enabled: bool, /) -> None: ...
        def set_primitive_type(self, primitiveType: PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveType, /) -> None: ...
        def set_radius(self, radius: float, /) -> None: ...
        def set_restart_index_value(self, index: int, /) -> None: ...
        def set_rings(self, rings: int, /) -> None: ...
        def set_slices(self, slices: int, /) -> None: ...
        def set_vertex_count(self, vertexCount: int, /) -> None: ...
        def slices(self, /) -> int: ...

    class Qt3DWindow(PySide6.QtGui.QWindow):

        def __init__(self, /, screen: PySide6.QtGui.QScreen | None = ..., arg__2: PySide6.Qt3DRender.Qt3DRender.API = ...) -> None: ...

        def active_frame_graph(self, /) -> PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode: ...
        def camera(self, /) -> PySide6.Qt3DRender.Qt3DRender.QCamera: ...
        def default_frame_graph(self, /) -> PySide6.Qt3DExtras.Qt3DExtras.QForwardRenderer: ...
        def event(self, e: PySide6.QtCore.QEvent, /) -> bool: ...
        @typing.overload
        def register_aspect(self, aspect: PySide6.Qt3DCore.Qt3DCore.QAbstractAspect, /) -> None: ...
        @typing.overload
        def register_aspect(self, name: str, /) -> None: ...
        def render_settings(self, /) -> PySide6.Qt3DRender.Qt3DRender.QRenderSettings: ...
        def resize_event(self, arg__1: PySide6.QtGui.QResizeEvent, /) -> None: ...
        def set_active_frame_graph(self, activeFrameGraph: PySide6.Qt3DRender.Qt3DRender.QFrameGraphNode, /) -> None: ...
        def set_root_entity(self, root: PySide6.Qt3DCore.Qt3DCore.QEntity, /) -> None: ...
        def show_event(self, e: PySide6.QtGui.QShowEvent, /) -> None: ...


    @staticmethod
    def setup_window_surface(window: PySide6.QtGui.QWindow, arg__2: PySide6.Qt3DRender.Qt3DRender.API, /) -> None: ...


# eof
