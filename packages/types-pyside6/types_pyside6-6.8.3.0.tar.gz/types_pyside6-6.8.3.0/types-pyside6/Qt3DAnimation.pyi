# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.Qt3DAnimation, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.Qt3DAnimation`

import PySide6.Qt3DAnimation
import PySide6.QtCore
import PySide6.QtGui
import PySide6.Qt3DCore
import PySide6.Qt3DRender

import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QIntList: ...


class Qt3DAnimation(Shiboken.Object):

    class QAbstractAnimation(PySide6.QtCore.QObject):

        animationNameChanged     : typing.ClassVar[Signal] = ... # animationNameChanged(QString)
        durationChanged          : typing.ClassVar[Signal] = ... # durationChanged(float)
        positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(float)

        class AnimationType(enum.Enum):

            KeyframeAnimation         = ...  # 0x1
            MorphingAnimation         = ...  # 0x2
            VertexBlendAnimation      = ...  # 0x3


        def animation_name(self, /) -> str: ...
        def animation_type(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimation.AnimationType: ...
        def duration(self, /) -> float: ...
        def position(self, /) -> float: ...
        def set_animation_name(self, name: str, /) -> None: ...
        def set_duration(self, duration: float, /) -> None: ...
        def set_position(self, position: float, /) -> None: ...

    class QAbstractAnimationClip(PySide6.Qt3DCore.Qt3DCore.QNode):

        durationChanged          : typing.ClassVar[Signal] = ... # durationChanged(float)
        def duration(self, /) -> float: ...

    class QAbstractChannelMapping(PySide6.Qt3DCore.Qt3DCore.QNode): ...

    class QAbstractClipAnimator(PySide6.Qt3DCore.Qt3DCore.QComponent):

        channelMapperChanged     : typing.ClassVar[Signal] = ... # channelMapperChanged(Qt3DAnimation::QChannelMapper*)
        clockChanged             : typing.ClassVar[Signal] = ... # clockChanged(Qt3DAnimation::QClock*)
        loopCountChanged         : typing.ClassVar[Signal] = ... # loopCountChanged(int)
        normalizedTimeChanged    : typing.ClassVar[Signal] = ... # normalizedTimeChanged(float)
        runningChanged           : typing.ClassVar[Signal] = ... # runningChanged(bool)

        class Loops(enum.Enum):

            Infinite                  = ...  # -1


        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, running: bool | None = ..., loops: int | None = ..., channel_mapper: PySide6.Qt3DAnimation.Qt3DAnimation.QChannelMapper | None = ..., clock: PySide6.Qt3DAnimation.Qt3DAnimation.QClock | None = ..., normalized_time: float | None = ...) -> None: ...

        def channel_mapper(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QChannelMapper: ...
        def clock(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QClock: ...
        def is_running(self, /) -> bool: ...
        def loop_count(self, /) -> int: ...
        def normalized_time(self, /) -> float: ...
        def set_channel_mapper(self, channelMapper: PySide6.Qt3DAnimation.Qt3DAnimation.QChannelMapper, /) -> None: ...
        def set_clock(self, clock: PySide6.Qt3DAnimation.Qt3DAnimation.QClock, /) -> None: ...
        def set_loop_count(self, loops: int, /) -> None: ...
        def set_normalized_time(self, timeFraction: float, /) -> None: ...
        def set_running(self, running: bool, /) -> None: ...
        def start(self, /) -> None: ...
        def stop(self, /) -> None: ...

    class QAbstractClipBlendNode(PySide6.Qt3DCore.Qt3DCore.QNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...


    class QAdditiveClipBlend(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode):

        additiveClipChanged      : typing.ClassVar[Signal] = ... # additiveClipChanged(Qt3DAnimation::QAbstractClipBlendNode*)
        additiveFactorChanged    : typing.ClassVar[Signal] = ... # additiveFactorChanged(float)
        baseClipChanged          : typing.ClassVar[Signal] = ... # baseClipChanged(Qt3DAnimation::QAbstractClipBlendNode*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, base_clip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode | None = ..., additive_clip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode | None = ..., additive_factor: float | None = ...) -> None: ...

        def additive_clip(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode: ...
        def additive_factor(self, /) -> float: ...
        def base_clip(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode: ...
        def set_additive_clip(self, additiveClip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode, /) -> None: ...
        def set_additive_factor(self, additiveFactor: float, /) -> None: ...
        def set_base_clip(self, baseClip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode, /) -> None: ...

    class QAnimationAspect(PySide6.Qt3DCore.Qt3DCore.QAbstractAspect):

        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...


    class QAnimationCallback(Shiboken.Object):

        class Flag(enum.Flag):

            OnOwningThread            = ...  # 0x0
            OnThreadPool              = ...  # 0x1


        def __init__(self, /) -> None: ...

        def value_changed(self, value: typing.Any, /) -> None: ...

    class QAnimationClip(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimationClip):

        clipDataChanged          : typing.ClassVar[Signal] = ... # clipDataChanged(Qt3DAnimation::QAnimationClipData)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, clip_data: PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationClipData | None = ...) -> None: ...

        def clip_data(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationClipData: ...
        def set_clip_data(self, clipData: PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationClipData, /) -> None: ...

    class QAnimationClipData(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, arg__1: PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationClipData, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def __eq__(self, rhs: PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationClipData, /) -> bool: ...
        def __ne__(self, rhs: PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationClipData, /) -> bool: ...
        def append_channel(self, c: PySide6.Qt3DAnimation.Qt3DAnimation.QChannel, /) -> None: ...
        def begin(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QChannel: ...
        def cbegin(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QChannel: ...
        def cend(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QChannel: ...
        def channel_count(self, /) -> int: ...
        def clear_channels(self, /) -> None: ...
        def end(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QChannel: ...
        def insert_channel(self, index: int, c: PySide6.Qt3DAnimation.Qt3DAnimation.QChannel, /) -> None: ...
        def is_valid(self, /) -> bool: ...
        def name(self, /) -> str: ...
        def remove_channel(self, index: int, /) -> None: ...
        def set_name(self, name: str, /) -> None: ...

    class QAnimationClipLoader(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimationClip):

        sourceChanged            : typing.ClassVar[Signal] = ... # sourceChanged(QUrl)
        statusChanged            : typing.ClassVar[Signal] = ... # statusChanged(Status)

        class Status(enum.Enum):

            NotReady                  = ...  # 0x0
            Ready                     = ...  # 0x1
            Error                     = ...  # 0x2


        @typing.overload
        def __init__(self, source: PySide6.QtCore.QUrl, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, status: PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationClipLoader.Status | None = ...) -> None: ...
        @typing.overload
        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, source: PySide6.QtCore.QUrl | None = ..., status: PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationClipLoader.Status | None = ...) -> None: ...

        def set_source(self, source: PySide6.QtCore.QUrl | str, /) -> None: ...
        def source(self, /) -> PySide6.QtCore.QUrl: ...
        def status(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationClipLoader.Status: ...

    class QAnimationController(PySide6.QtCore.QObject):

        activeAnimationGroupChanged: typing.ClassVar[Signal] = ... # activeAnimationGroupChanged(int)
        entityChanged            : typing.ClassVar[Signal] = ... # entityChanged(Qt3DCore::QEntity*)
        positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(float)
        positionOffsetChanged    : typing.ClassVar[Signal] = ... # positionOffsetChanged(float)
        positionScaleChanged     : typing.ClassVar[Signal] = ... # positionScaleChanged(float)
        recursiveChanged         : typing.ClassVar[Signal] = ... # recursiveChanged(bool)

        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, active_animation_group: int | None = ..., position: float | None = ..., position_scale: float | None = ..., position_offset: float | None = ..., entity: PySide6.Qt3DCore.Qt3DCore.QEntity | None = ..., recursive: bool | None = ...) -> None: ...

        def active_animation_group(self, /) -> int: ...
        def add_animation_group(self, animationGroups: PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationGroup, /) -> None: ...
        def animation_group_list(self, /) -> typing.List[PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationGroup]: ...
        def entity(self, /) -> PySide6.Qt3DCore.Qt3DCore.QEntity: ...
        def get_animation_index(self, name: str, /) -> int: ...
        def get_group(self, index: int, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationGroup: ...
        def position(self, /) -> float: ...
        def position_offset(self, /) -> float: ...
        def position_scale(self, /) -> float: ...
        def recursive(self, /) -> bool: ...
        def remove_animation_group(self, animationGroups: PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationGroup, /) -> None: ...
        def set_active_animation_group(self, index: int, /) -> None: ...
        def set_animation_groups(self, animationGroups: collections.abc.Sequence[PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationGroup], /) -> None: ...
        def set_entity(self, entity: PySide6.Qt3DCore.Qt3DCore.QEntity, /) -> None: ...
        def set_position(self, position: float, /) -> None: ...
        def set_position_offset(self, offset: float, /) -> None: ...
        def set_position_scale(self, scale: float, /) -> None: ...
        def set_recursive(self, recursive: bool, /) -> None: ...

    class QAnimationGroup(PySide6.QtCore.QObject):

        durationChanged          : typing.ClassVar[Signal] = ... # durationChanged(float)
        nameChanged              : typing.ClassVar[Signal] = ... # nameChanged(QString)
        positionChanged          : typing.ClassVar[Signal] = ... # positionChanged(float)

        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, name: str | None = ..., position: float | None = ..., duration: float | None = ...) -> None: ...

        def add_animation(self, animation: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimation, /) -> None: ...
        def animation_list(self, /) -> typing.List[PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimation]: ...
        def duration(self, /) -> float: ...
        def name(self, /) -> str: ...
        def position(self, /) -> float: ...
        def remove_animation(self, animation: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimation, /) -> None: ...
        def set_animations(self, animations: collections.abc.Sequence[PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimation], /) -> None: ...
        def set_name(self, name: str, /) -> None: ...
        def set_position(self, position: float, /) -> None: ...

    class QBlendedClipAnimator(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipAnimator):

        blendTreeChanged         : typing.ClassVar[Signal] = ... # blendTreeChanged(QAbstractClipBlendNode*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, blend_tree: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode | None = ...) -> None: ...

        def blend_tree(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode: ...
        def set_blend_tree(self, blendTree: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode, /) -> None: ...

    class QCallbackMapping(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractChannelMapping):

        channelNameChanged       : typing.ClassVar[Signal] = ... # channelNameChanged(QString)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, channel_name: str | None = ...) -> None: ...

        def callback(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationCallback: ...
        def channel_name(self, /) -> str: ...
        def set_callback(self, type: int, callback: PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationCallback, /, flags: PySide6.Qt3DAnimation.Qt3DAnimation.QAnimationCallback.Flag = ...) -> None: ...
        def set_channel_name(self, channelName: str, /) -> None: ...

    class QChannel(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, arg__1: PySide6.Qt3DAnimation.Qt3DAnimation.QChannel, /) -> None: ...
        @typing.overload
        def __init__(self, name: str, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def append_channel_component(self, component: PySide6.Qt3DAnimation.Qt3DAnimation.QChannelComponent, /) -> None: ...
        def begin(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QChannelComponent: ...
        def cbegin(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QChannelComponent: ...
        def cend(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QChannelComponent: ...
        def channel_component_count(self, /) -> int: ...
        def clear_channel_components(self, /) -> None: ...
        def end(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QChannelComponent: ...
        def insert_channel_component(self, index: int, component: PySide6.Qt3DAnimation.Qt3DAnimation.QChannelComponent, /) -> None: ...
        def joint_index(self, /) -> int: ...
        def name(self, /) -> str: ...
        def remove_channel_component(self, index: int, /) -> None: ...
        def set_joint_index(self, jointIndex: int, /) -> None: ...
        def set_name(self, name: str, /) -> None: ...

    class QChannelComponent(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, arg__1: PySide6.Qt3DAnimation.Qt3DAnimation.QChannelComponent, /) -> None: ...
        @typing.overload
        def __init__(self, name: str, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def append_key_frame(self, kf: PySide6.Qt3DAnimation.Qt3DAnimation.QKeyFrame, /) -> None: ...
        def begin(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QKeyFrame: ...
        def cbegin(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QKeyFrame: ...
        def cend(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QKeyFrame: ...
        def clear_key_frames(self, /) -> None: ...
        def end(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QKeyFrame: ...
        def insert_key_frame(self, index: int, kf: PySide6.Qt3DAnimation.Qt3DAnimation.QKeyFrame, /) -> None: ...
        def key_frame_count(self, /) -> int: ...
        def name(self, /) -> str: ...
        def remove_key_frame(self, index: int, /) -> None: ...
        def set_name(self, name: str, /) -> None: ...

    class QChannelMapper(PySide6.Qt3DCore.Qt3DCore.QNode):

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...

        def add_mapping(self, mapping: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractChannelMapping, /) -> None: ...
        def mappings(self, /) -> typing.List[PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractChannelMapping]: ...
        def remove_mapping(self, mapping: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractChannelMapping, /) -> None: ...

    class QChannelMapping(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractChannelMapping):

        channelNameChanged       : typing.ClassVar[Signal] = ... # channelNameChanged(QString)
        propertyChanged          : typing.ClassVar[Signal] = ... # propertyChanged(QString)
        targetChanged            : typing.ClassVar[Signal] = ... # targetChanged(Qt3DCore::QNode*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, channel_name: str | None = ..., target: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., property: str | None = ...) -> None: ...

        def channel_name(self, /) -> str: ...
        def property(self, /) -> str: ...
        def set_channel_name(self, channelName: str, /) -> None: ...
        def set_property(self, property: str, /) -> None: ...
        def set_target(self, target: PySide6.Qt3DCore.Qt3DCore.QNode, /) -> None: ...
        def target(self, /) -> PySide6.Qt3DCore.Qt3DCore.QNode: ...

    class QClipAnimator(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipAnimator):

        clipChanged              : typing.ClassVar[Signal] = ... # clipChanged(Qt3DAnimation::QAbstractAnimationClip*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, clip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimationClip | None = ...) -> None: ...

        def clip(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimationClip: ...
        def set_clip(self, clip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimationClip, /) -> None: ...

    class QClipBlendValue(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode):

        clipChanged              : typing.ClassVar[Signal] = ... # clipChanged(Qt3DAnimation::QAbstractAnimationClip*)

        @typing.overload
        def __init__(self, clip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimationClip, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ...) -> None: ...
        @typing.overload
        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, clip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimationClip | None = ...) -> None: ...

        def clip(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimationClip: ...
        def set_clip(self, clip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimationClip, /) -> None: ...

    class QClock(PySide6.Qt3DCore.Qt3DCore.QNode):

        playbackRateChanged      : typing.ClassVar[Signal] = ... # playbackRateChanged(double)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, playback_rate: float | None = ...) -> None: ...

        def playback_rate(self, /) -> float: ...
        def set_playback_rate(self, playbackRate: float, /) -> None: ...

    class QKeyFrame(Shiboken.Object):

        class InterpolationType(enum.Enum):

            ConstantInterpolation     = ...  # 0x0
            LinearInterpolation       = ...  # 0x1
            BezierInterpolation       = ...  # 0x2


        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, coords: PySide6.QtGui.QVector2D, /) -> None: ...
        @typing.overload
        def __init__(self, coords: PySide6.QtGui.QVector2D, lh: PySide6.QtGui.QVector2D, rh: PySide6.QtGui.QVector2D, /) -> None: ...

        def __eq__(self, rhs: PySide6.Qt3DAnimation.Qt3DAnimation.QKeyFrame, /) -> bool: ...
        def __ne__(self, rhs: PySide6.Qt3DAnimation.Qt3DAnimation.QKeyFrame, /) -> bool: ...
        def coordinates(self, /) -> PySide6.QtGui.QVector2D: ...
        def interpolation_type(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QKeyFrame.InterpolationType: ...
        def left_control_point(self, /) -> PySide6.QtGui.QVector2D: ...
        def right_control_point(self, /) -> PySide6.QtGui.QVector2D: ...
        def set_coordinates(self, coords: PySide6.QtGui.QVector2D, /) -> None: ...
        def set_interpolation_type(self, interp: PySide6.Qt3DAnimation.Qt3DAnimation.QKeyFrame.InterpolationType, /) -> None: ...
        def set_left_control_point(self, lh: PySide6.QtGui.QVector2D, /) -> None: ...
        def set_right_control_point(self, rh: PySide6.QtGui.QVector2D, /) -> None: ...

    class QKeyframeAnimation(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimation):

        easingChanged            : typing.ClassVar[Signal] = ... # easingChanged(QEasingCurve)
        endModeChanged           : typing.ClassVar[Signal] = ... # endModeChanged(QKeyframeAnimation::RepeatMode)
        framePositionsChanged    : typing.ClassVar[Signal] = ... # framePositionsChanged(QList<float>)
        startModeChanged         : typing.ClassVar[Signal] = ... # startModeChanged(QKeyframeAnimation::RepeatMode)
        targetChanged            : typing.ClassVar[Signal] = ... # targetChanged(Qt3DCore::QTransform*)
        targetNameChanged        : typing.ClassVar[Signal] = ... # targetNameChanged(QString)

        class RepeatMode(enum.Enum):

            None_                     = ...  # 0x0
            Constant                  = ...  # 0x1
            Repeat                    = ...  # 0x2


        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, frame_positions: collections.abc.Sequence[float] | None = ..., target: PySide6.Qt3DCore.Qt3DCore.QTransform | None = ..., easing: PySide6.QtCore.QEasingCurve | None = ..., target_name: str | None = ..., start_mode: PySide6.Qt3DAnimation.Qt3DAnimation.QKeyframeAnimation.RepeatMode | None = ..., end_mode: PySide6.Qt3DAnimation.Qt3DAnimation.QKeyframeAnimation.RepeatMode | None = ...) -> None: ...

        def add_keyframe(self, keyframe: PySide6.Qt3DCore.Qt3DCore.QTransform, /) -> None: ...
        def easing(self, /) -> PySide6.QtCore.QEasingCurve: ...
        def end_mode(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QKeyframeAnimation.RepeatMode: ...
        def frame_positions(self, /) -> typing.List[float]: ...
        def keyframe_list(self, /) -> typing.List[PySide6.Qt3DCore.Qt3DCore.QTransform]: ...
        def remove_keyframe(self, keyframe: PySide6.Qt3DCore.Qt3DCore.QTransform, /) -> None: ...
        def set_easing(self, easing: PySide6.QtCore.QEasingCurve | PySide6.QtCore.QEasingCurve.Type, /) -> None: ...
        def set_end_mode(self, mode: PySide6.Qt3DAnimation.Qt3DAnimation.QKeyframeAnimation.RepeatMode, /) -> None: ...
        def set_frame_positions(self, positions: collections.abc.Sequence[float], /) -> None: ...
        def set_keyframes(self, keyframes: collections.abc.Sequence[PySide6.Qt3DCore.Qt3DCore.QTransform], /) -> None: ...
        def set_start_mode(self, mode: PySide6.Qt3DAnimation.Qt3DAnimation.QKeyframeAnimation.RepeatMode, /) -> None: ...
        def set_target(self, target: PySide6.Qt3DCore.Qt3DCore.QTransform, /) -> None: ...
        def set_target_name(self, name: str, /) -> None: ...
        def start_mode(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QKeyframeAnimation.RepeatMode: ...
        def target(self, /) -> PySide6.Qt3DCore.Qt3DCore.QTransform: ...
        def target_name(self, /) -> str: ...

    class QLerpClipBlend(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode):

        blendFactorChanged       : typing.ClassVar[Signal] = ... # blendFactorChanged(float)
        endClipChanged           : typing.ClassVar[Signal] = ... # endClipChanged(Qt3DAnimation::QAbstractClipBlendNode*)
        startClipChanged         : typing.ClassVar[Signal] = ... # startClipChanged(Qt3DAnimation::QAbstractClipBlendNode*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, start_clip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode | None = ..., end_clip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode | None = ..., blend_factor: float | None = ...) -> None: ...

        def blend_factor(self, /) -> float: ...
        def end_clip(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode: ...
        def set_blend_factor(self, blendFactor: float, /) -> None: ...
        def set_end_clip(self, endClip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode, /) -> None: ...
        def set_start_clip(self, startClip: PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode, /) -> None: ...
        def start_clip(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractClipBlendNode: ...

    class QMorphTarget(PySide6.QtCore.QObject):

        attributeNamesChanged    : typing.ClassVar[Signal] = ... # attributeNamesChanged(QStringList)

        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, attribute_names: collections.abc.Sequence[str] | None = ...) -> None: ...

        def add_attribute(self, attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute, /) -> None: ...
        def attribute_list(self, /) -> typing.List[PySide6.Qt3DCore.Qt3DCore.QAttribute]: ...
        def attribute_names(self, /) -> typing.List[str]: ...
        @staticmethod
        def from_geometry(geometry: PySide6.Qt3DCore.Qt3DCore.QGeometry, attributes: collections.abc.Sequence[str], /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QMorphTarget: ...
        def remove_attribute(self, attribute: PySide6.Qt3DCore.Qt3DCore.QAttribute, /) -> None: ...
        def set_attributes(self, attributes: collections.abc.Sequence[PySide6.Qt3DCore.Qt3DCore.QAttribute], /) -> None: ...

    class QMorphingAnimation(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimation):

        easingChanged            : typing.ClassVar[Signal] = ... # easingChanged(QEasingCurve)
        interpolatorChanged      : typing.ClassVar[Signal] = ... # interpolatorChanged(float)
        methodChanged            : typing.ClassVar[Signal] = ... # methodChanged(QMorphingAnimation::Method)
        targetChanged            : typing.ClassVar[Signal] = ... # targetChanged(Qt3DRender::QGeometryRenderer*)
        targetNameChanged        : typing.ClassVar[Signal] = ... # targetNameChanged(QString)
        targetPositionsChanged   : typing.ClassVar[Signal] = ... # targetPositionsChanged(QList<float>)

        class Method(enum.Enum):

            Normalized                = ...  # 0x0
            Relative                  = ...  # 0x1


        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, target_positions: collections.abc.Sequence[float] | None = ..., interpolator: float | None = ..., target: PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer | None = ..., target_name: str | None = ..., method: PySide6.Qt3DAnimation.Qt3DAnimation.QMorphingAnimation.Method | None = ..., easing: PySide6.QtCore.QEasingCurve | None = ...) -> None: ...

        def add_morph_target(self, target: PySide6.Qt3DAnimation.Qt3DAnimation.QMorphTarget, /) -> None: ...
        def easing(self, /) -> PySide6.QtCore.QEasingCurve: ...
        def get_weights(self, positionIndex: int, /) -> typing.List[float]: ...
        def interpolator(self, /) -> float: ...
        def method(self, /) -> PySide6.Qt3DAnimation.Qt3DAnimation.QMorphingAnimation.Method: ...
        def morph_target_list(self, /) -> typing.List[PySide6.Qt3DAnimation.Qt3DAnimation.QMorphTarget]: ...
        def remove_morph_target(self, target: PySide6.Qt3DAnimation.Qt3DAnimation.QMorphTarget, /) -> None: ...
        def set_easing(self, easing: PySide6.QtCore.QEasingCurve | PySide6.QtCore.QEasingCurve.Type, /) -> None: ...
        def set_method(self, method: PySide6.Qt3DAnimation.Qt3DAnimation.QMorphingAnimation.Method, /) -> None: ...
        def set_morph_targets(self, targets: collections.abc.Sequence[PySide6.Qt3DAnimation.Qt3DAnimation.QMorphTarget], /) -> None: ...
        def set_target(self, target: PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer, /) -> None: ...
        def set_target_name(self, name: str, /) -> None: ...
        def set_target_positions(self, targetPositions: collections.abc.Sequence[float], /) -> None: ...
        def set_weights(self, positionIndex: int, weights: collections.abc.Sequence[float], /) -> None: ...
        def target(self, /) -> PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer: ...
        def target_name(self, /) -> str: ...
        def target_positions(self, /) -> typing.List[float]: ...

    class QSkeletonMapping(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractChannelMapping):

        skeletonChanged          : typing.ClassVar[Signal] = ... # skeletonChanged(Qt3DCore::QAbstractSkeleton*)

        def __init__(self, /, parent: PySide6.Qt3DCore.Qt3DCore.QNode | None = ..., *, skeleton: PySide6.Qt3DCore.Qt3DCore.QAbstractSkeleton | None = ...) -> None: ...

        def set_skeleton(self, skeleton: PySide6.Qt3DCore.Qt3DCore.QAbstractSkeleton, /) -> None: ...
        def skeleton(self, /) -> PySide6.Qt3DCore.Qt3DCore.QAbstractSkeleton: ...

    class QVertexBlendAnimation(PySide6.Qt3DAnimation.Qt3DAnimation.QAbstractAnimation):

        interpolatorChanged      : typing.ClassVar[Signal] = ... # interpolatorChanged(float)
        targetChanged            : typing.ClassVar[Signal] = ... # targetChanged(Qt3DRender::QGeometryRenderer*)
        targetNameChanged        : typing.ClassVar[Signal] = ... # targetNameChanged(QString)
        targetPositionsChanged   : typing.ClassVar[Signal] = ... # targetPositionsChanged(QList<float>)

        def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, target_positions: collections.abc.Sequence[float] | None = ..., interpolator: float | None = ..., target: PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer | None = ..., target_name: str | None = ...) -> None: ...

        def add_morph_target(self, target: PySide6.Qt3DAnimation.Qt3DAnimation.QMorphTarget, /) -> None: ...
        def interpolator(self, /) -> float: ...
        def morph_target_list(self, /) -> typing.List[PySide6.Qt3DAnimation.Qt3DAnimation.QMorphTarget]: ...
        def remove_morph_target(self, target: PySide6.Qt3DAnimation.Qt3DAnimation.QMorphTarget, /) -> None: ...
        def set_morph_targets(self, targets: collections.abc.Sequence[PySide6.Qt3DAnimation.Qt3DAnimation.QMorphTarget], /) -> None: ...
        def set_target(self, target: PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer, /) -> None: ...
        def set_target_name(self, name: str, /) -> None: ...
        def set_target_positions(self, targetPositions: collections.abc.Sequence[float], /) -> None: ...
        def target(self, /) -> PySide6.Qt3DRender.Qt3DRender.QGeometryRenderer: ...
        def target_name(self, /) -> str: ...
        def target_positions(self, /) -> typing.List[float]: ...


# eof
