# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtNetwork, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtNetwork`

import PySide6.QtNetwork
import PySide6.QtCore

import os
import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QAbstractNetworkCache(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def cache_size(self, /) -> int: ...
    def clear(self, /) -> None: ...
    def data(self, url: PySide6.QtCore.QUrl | str, /) -> PySide6.QtCore.QIODevice: ...
    def insert(self, device: PySide6.QtCore.QIODevice, /) -> None: ...
    def meta_data(self, url: PySide6.QtCore.QUrl | str, /) -> PySide6.QtNetwork.QNetworkCacheMetaData: ...
    def prepare(self, metaData: PySide6.QtNetwork.QNetworkCacheMetaData, /) -> PySide6.QtCore.QIODevice: ...
    def remove(self, url: PySide6.QtCore.QUrl | str, /) -> bool: ...
    def update_meta_data(self, metaData: PySide6.QtNetwork.QNetworkCacheMetaData, /) -> None: ...


class QAbstractSocket(PySide6.QtCore.QIODevice):

    connected                : typing.ClassVar[Signal] = ... # connected()
    disconnected             : typing.ClassVar[Signal] = ... # disconnected()
    errorOccurred            : typing.ClassVar[Signal] = ... # errorOccurred(QAbstractSocket::SocketError)
    hostFound                : typing.ClassVar[Signal] = ... # hostFound()
    proxyAuthenticationRequired: typing.ClassVar[Signal] = ... # proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)
    stateChanged             : typing.ClassVar[Signal] = ... # stateChanged(QAbstractSocket::SocketState)

    class BindFlag(enum.Flag):

        DefaultForPlatform        = ...  # 0x0
        ShareAddress              = ...  # 0x1
        DontShareAddress          = ...  # 0x2
        ReuseAddressHint          = ...  # 0x4

    class NetworkLayerProtocol(enum.Enum):

        UnknownNetworkLayerProtocol = ...  # -1
        IPv4Protocol              = ...  # 0x0
        IPv6Protocol              = ...  # 0x1
        AnyIPProtocol             = ...  # 0x2

    class PauseMode(enum.Flag):

        PauseNever                = ...  # 0x0
        PauseOnSslErrors          = ...  # 0x1

    class SocketError(enum.Enum):

        UnknownSocketError        = ...  # -1
        ConnectionRefusedError    = ...  # 0x0
        RemoteHostClosedError     = ...  # 0x1
        HostNotFoundError         = ...  # 0x2
        SocketAccessError         = ...  # 0x3
        SocketResourceError       = ...  # 0x4
        SocketTimeoutError        = ...  # 0x5
        DatagramTooLargeError     = ...  # 0x6
        NetworkError              = ...  # 0x7
        AddressInUseError         = ...  # 0x8
        SocketAddressNotAvailableError = ...  # 0x9
        UnsupportedSocketOperationError = ...  # 0xa
        UnfinishedSocketOperationError = ...  # 0xb
        ProxyAuthenticationRequiredError = ...  # 0xc
        SslHandshakeFailedError   = ...  # 0xd
        ProxyConnectionRefusedError = ...  # 0xe
        ProxyConnectionClosedError = ...  # 0xf
        ProxyConnectionTimeoutError = ...  # 0x10
        ProxyNotFoundError        = ...  # 0x11
        ProxyProtocolError        = ...  # 0x12
        OperationError            = ...  # 0x13
        SslInternalError          = ...  # 0x14
        SslInvalidUserDataError   = ...  # 0x15
        TemporaryError            = ...  # 0x16

    class SocketOption(enum.Enum):

        LowDelayOption            = ...  # 0x0
        KeepAliveOption           = ...  # 0x1
        MulticastTtlOption        = ...  # 0x2
        MulticastLoopbackOption   = ...  # 0x3
        TypeOfServiceOption       = ...  # 0x4
        SendBufferSizeSocketOption = ...  # 0x5
        ReceiveBufferSizeSocketOption = ...  # 0x6
        PathMtuSocketOption       = ...  # 0x7

    class SocketState(enum.Enum):

        UnconnectedState          = ...  # 0x0
        HostLookupState           = ...  # 0x1
        ConnectingState           = ...  # 0x2
        ConnectedState            = ...  # 0x3
        BoundState                = ...  # 0x4
        ListeningState            = ...  # 0x5
        ClosingState              = ...  # 0x6

    class SocketType(enum.Enum):

        UnknownSocketType         = ...  # -1
        TcpSocket                 = ...  # 0x0
        UdpSocket                 = ...  # 0x1
        SctpSocket                = ...  # 0x2


    def __init__(self, socketType: PySide6.QtNetwork.QAbstractSocket.SocketType, parent: PySide6.QtCore.QObject, /) -> None: ...

    def abort(self, /) -> None: ...
    @typing.overload
    def bind(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /, port: int | None = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool: ...
    @typing.overload
    def bind(self, /, port: int | None = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool: ...
    def bytes_available(self, /) -> int: ...
    def bytes_to_write(self, /) -> int: ...
    def close(self, /) -> None: ...
    @typing.overload
    def connect_to_host(self, hostName: str, port: int, /, mode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ..., protocol: PySide6.QtNetwork.QAbstractSocket.NetworkLayerProtocol = ...) -> None: ...
    @typing.overload
    def connect_to_host(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, port: int, /, mode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> None: ...
    def disconnect_from_host(self, /) -> None: ...
    def error(self, /) -> PySide6.QtNetwork.QAbstractSocket.SocketError: ...
    def flush(self, /) -> bool: ...
    def is_sequential(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def local_address(self, /) -> PySide6.QtNetwork.QHostAddress: ...
    def local_port(self, /) -> int: ...
    def pause_mode(self, /) -> PySide6.QtNetwork.QAbstractSocket.PauseMode: ...
    def peer_address(self, /) -> PySide6.QtNetwork.QHostAddress: ...
    def peer_name(self, /) -> str: ...
    def peer_port(self, /) -> int: ...
    def protocol_tag(self, /) -> str: ...
    def proxy(self, /) -> PySide6.QtNetwork.QNetworkProxy: ...
    def read_buffer_size(self, /) -> int: ...
    def read_data(self, maxlen: int, /) -> object: ...
    def read_line_data(self, maxlen: int, /) -> object: ...
    def resume(self, /) -> None: ...
    def set_local_address(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> None: ...
    def set_local_port(self, port: int, /) -> None: ...
    def set_pause_mode(self, pauseMode: PySide6.QtNetwork.QAbstractSocket.PauseMode, /) -> None: ...
    def set_peer_address(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> None: ...
    def set_peer_name(self, name: str, /) -> None: ...
    def set_peer_port(self, port: int, /) -> None: ...
    def set_protocol_tag(self, tag: str, /) -> None: ...
    def set_proxy(self, networkProxy: PySide6.QtNetwork.QNetworkProxy | PySide6.QtNetwork.QNetworkProxy.ProxyType, /) -> None: ...
    def set_read_buffer_size(self, size: int, /) -> None: ...
    def set_socket_descriptor(self, socketDescriptor: int, /, state: PySide6.QtNetwork.QAbstractSocket.SocketState = ..., openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> bool: ...
    def set_socket_error(self, socketError: PySide6.QtNetwork.QAbstractSocket.SocketError, /) -> None: ...
    def set_socket_option(self, option: PySide6.QtNetwork.QAbstractSocket.SocketOption, value: typing.Any, /) -> None: ...
    def set_socket_state(self, state: PySide6.QtNetwork.QAbstractSocket.SocketState, /) -> None: ...
    def skip_data(self, maxSize: int, /) -> int: ...
    def socket_descriptor(self, /) -> int: ...
    def socket_option(self, option: PySide6.QtNetwork.QAbstractSocket.SocketOption, /) -> typing.Any: ...
    def socket_type(self, /) -> PySide6.QtNetwork.QAbstractSocket.SocketType: ...
    def state(self, /) -> PySide6.QtNetwork.QAbstractSocket.SocketState: ...
    def wait_for_bytes_written(self, /, msecs: int = ...) -> bool: ...
    def wait_for_connected(self, /, msecs: int = ...) -> bool: ...
    def wait_for_disconnected(self, /, msecs: int = ...) -> bool: ...
    def wait_for_ready_read(self, /, msecs: int = ...) -> bool: ...
    def write_data(self, data: bytes | bytearray | memoryview, len: int, /) -> int: ...


class QAuthenticator(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QAuthenticator, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtNetwork.QAuthenticator, /) -> bool: ...
    def __ne__(self, other: PySide6.QtNetwork.QAuthenticator, /) -> bool: ...
    def is_null(self, /) -> bool: ...
    def option(self, opt: str, /) -> typing.Any: ...
    def options(self, /) -> typing.Dict[str, typing.Any]: ...
    def password(self, /) -> str: ...
    def realm(self, /) -> str: ...
    def set_option(self, opt: str, value: typing.Any, /) -> None: ...
    def set_password(self, password: str, /) -> None: ...
    def set_realm(self, realm: str, /) -> None: ...
    def set_user(self, user: str, /) -> None: ...
    def user(self, /) -> str: ...


class QDnsDomainNameRecord(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QDnsDomainNameRecord, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def name(self, /) -> str: ...
    def swap(self, other: PySide6.QtNetwork.QDnsDomainNameRecord, /) -> None: ...
    def time_to_live(self, /) -> int: ...
    def value(self, /) -> str: ...


class QDnsHostAddressRecord(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QDnsHostAddressRecord, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def name(self, /) -> str: ...
    def swap(self, other: PySide6.QtNetwork.QDnsHostAddressRecord, /) -> None: ...
    def time_to_live(self, /) -> int: ...
    def value(self, /) -> PySide6.QtNetwork.QHostAddress: ...


class QDnsLookup(PySide6.QtCore.QObject):

    finished                 : typing.ClassVar[Signal] = ... # finished()
    nameChanged              : typing.ClassVar[Signal] = ... # nameChanged(QString)
    nameserverChanged        : typing.ClassVar[Signal] = ... # nameserverChanged(QHostAddress)
    nameserverPortChanged    : typing.ClassVar[Signal] = ... # nameserverPortChanged(ushort)
    nameserverProtocolChanged: typing.ClassVar[Signal] = ... # nameserverProtocolChanged(QDnsLookup::Protocol)
    typeChanged              : typing.ClassVar[Signal] = ... # typeChanged(QDnsLookup::Type)

    class Error(enum.Enum):

        NoError                   = ...  # 0x0
        ResolverError             = ...  # 0x1
        OperationCancelledError   = ...  # 0x2
        InvalidRequestError       = ...  # 0x3
        InvalidReplyError         = ...  # 0x4
        ServerFailureError        = ...  # 0x5
        ServerRefusedError        = ...  # 0x6
        NotFoundError             = ...  # 0x7
        TimeoutError              = ...  # 0x8

    class Protocol(enum.Enum):

        Standard                  = ...  # 0x0
        DnsOverTls                = ...  # 0x1

    class Type(enum.Enum):

        A                         = ...  # 0x1
        NS                        = ...  # 0x2
        CNAME                     = ...  # 0x5
        PTR                       = ...  # 0xc
        MX                        = ...  # 0xf
        TXT                       = ...  # 0x10
        AAAA                      = ...  # 0x1c
        SRV                       = ...  # 0x21
        TLSA                      = ...  # 0x34
        ANY                       = ...  # 0xff


    @typing.overload
    def __init__(self, type: PySide6.QtNetwork.QDnsLookup.Type, name: str, protocol: PySide6.QtNetwork.QDnsLookup.Protocol, nameserver: PySide6.QtNetwork.QHostAddress, /, port: int | None = ..., parent: PySide6.QtCore.QObject | None = ..., *, error: PySide6.QtNetwork.QDnsLookup.Error | None = ..., authentic_data: bool | None = ..., error_string: str | None = ..., nameserver_port: int | None = ..., nameserver_protocol: PySide6.QtNetwork.QDnsLookup.Protocol | None = ...) -> None: ...
    @typing.overload
    def __init__(self, type: PySide6.QtNetwork.QDnsLookup.Type, name: str, nameserver: PySide6.QtNetwork.QHostAddress, /, parent: PySide6.QtCore.QObject | None = ..., *, error: PySide6.QtNetwork.QDnsLookup.Error | None = ..., authentic_data: bool | None = ..., error_string: str | None = ..., nameserver_port: int | None = ..., nameserver_protocol: PySide6.QtNetwork.QDnsLookup.Protocol | None = ...) -> None: ...
    @typing.overload
    def __init__(self, type: PySide6.QtNetwork.QDnsLookup.Type, name: str, nameserver: PySide6.QtNetwork.QHostAddress, port: int, /, parent: PySide6.QtCore.QObject | None = ..., *, error: PySide6.QtNetwork.QDnsLookup.Error | None = ..., authentic_data: bool | None = ..., error_string: str | None = ..., nameserver_port: int | None = ..., nameserver_protocol: PySide6.QtNetwork.QDnsLookup.Protocol | None = ...) -> None: ...
    @typing.overload
    def __init__(self, type: PySide6.QtNetwork.QDnsLookup.Type, name: str, /, parent: PySide6.QtCore.QObject | None = ..., *, error: PySide6.QtNetwork.QDnsLookup.Error | None = ..., authentic_data: bool | None = ..., error_string: str | None = ..., nameserver: PySide6.QtNetwork.QHostAddress | None = ..., nameserver_port: int | None = ..., nameserver_protocol: PySide6.QtNetwork.QDnsLookup.Protocol | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, error: PySide6.QtNetwork.QDnsLookup.Error | None = ..., authentic_data: bool | None = ..., error_string: str | None = ..., name: str | None = ..., type: PySide6.QtNetwork.QDnsLookup.Type | None = ..., nameserver: PySide6.QtNetwork.QHostAddress | None = ..., nameserver_port: int | None = ..., nameserver_protocol: PySide6.QtNetwork.QDnsLookup.Protocol | None = ...) -> None: ...

    def abort(self, /) -> None: ...
    def canonical_name_records(self, /) -> typing.List[PySide6.QtNetwork.QDnsDomainNameRecord]: ...
    @staticmethod
    def default_port_for_protocol(protocol: PySide6.QtNetwork.QDnsLookup.Protocol, /) -> int: ...
    def error(self, /) -> PySide6.QtNetwork.QDnsLookup.Error: ...
    def error_string(self, /) -> str: ...
    def host_address_records(self, /) -> typing.List[PySide6.QtNetwork.QDnsHostAddressRecord]: ...
    def is_authentic_data(self, /) -> bool: ...
    def is_finished(self, /) -> bool: ...
    @staticmethod
    def is_protocol_supported(protocol: PySide6.QtNetwork.QDnsLookup.Protocol, /) -> bool: ...
    def lookup(self, /) -> None: ...
    def mail_exchange_records(self, /) -> typing.List[PySide6.QtNetwork.QDnsMailExchangeRecord]: ...
    def name(self, /) -> str: ...
    def name_server_records(self, /) -> typing.List[PySide6.QtNetwork.QDnsDomainNameRecord]: ...
    def nameserver(self, /) -> PySide6.QtNetwork.QHostAddress: ...
    def nameserver_port(self, /) -> int: ...
    def nameserver_protocol(self, /) -> PySide6.QtNetwork.QDnsLookup.Protocol: ...
    def pointer_records(self, /) -> typing.List[PySide6.QtNetwork.QDnsDomainNameRecord]: ...
    def service_records(self, /) -> typing.List[PySide6.QtNetwork.QDnsServiceRecord]: ...
    def set_name(self, name: str, /) -> None: ...
    @typing.overload
    def set_nameserver(self, protocol: PySide6.QtNetwork.QDnsLookup.Protocol, nameserver: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /, port: int | None = ...) -> None: ...
    @typing.overload
    def set_nameserver(self, nameserver: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> None: ...
    @typing.overload
    def set_nameserver(self, nameserver: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, port: int, /) -> None: ...
    def set_nameserver_port(self, port: int, /) -> None: ...
    def set_nameserver_protocol(self, protocol: PySide6.QtNetwork.QDnsLookup.Protocol, /) -> None: ...
    def set_ssl_configuration(self, sslConfiguration: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...
    def set_type(self, arg__1: PySide6.QtNetwork.QDnsLookup.Type, /) -> None: ...
    def ssl_configuration(self, /) -> PySide6.QtNetwork.QSslConfiguration: ...
    def text_records(self, /) -> typing.List[PySide6.QtNetwork.QDnsTextRecord]: ...
    def tls_association_records(self, /) -> typing.List[PySide6.QtNetwork.QDnsTlsAssociationRecord]: ...
    def type(self, /) -> PySide6.QtNetwork.QDnsLookup.Type: ...


class QDnsMailExchangeRecord(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QDnsMailExchangeRecord, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def exchange(self, /) -> str: ...
    def name(self, /) -> str: ...
    def preference(self, /) -> int: ...
    def swap(self, other: PySide6.QtNetwork.QDnsMailExchangeRecord, /) -> None: ...
    def time_to_live(self, /) -> int: ...


class QDnsServiceRecord(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QDnsServiceRecord, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def name(self, /) -> str: ...
    def port(self, /) -> int: ...
    def priority(self, /) -> int: ...
    def swap(self, other: PySide6.QtNetwork.QDnsServiceRecord, /) -> None: ...
    def target(self, /) -> str: ...
    def time_to_live(self, /) -> int: ...
    def weight(self, /) -> int: ...


class QDnsTextRecord(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QDnsTextRecord, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def name(self, /) -> str: ...
    def swap(self, other: PySide6.QtNetwork.QDnsTextRecord, /) -> None: ...
    def time_to_live(self, /) -> int: ...
    def values(self, /) -> typing.List[PySide6.QtCore.QByteArray]: ...


class QDnsTlsAssociationRecord(Shiboken.Object):

    class CertificateUsage(enum.Enum):

        CertificateAuthorityConstrait = ...  # 0x0
        PKIX_TA                   = ...  # 0x0
        PKIX_EE                   = ...  # 0x1
        ServiceCertificateConstraint = ...  # 0x1
        DANE_TA                   = ...  # 0x2
        TrustAnchorAssertion      = ...  # 0x2
        DANE_EE                   = ...  # 0x3
        DomainIssuedCertificate   = ...  # 0x3
        PrivCert                  = ...  # 0xff
        PrivateUse                = ...  # 0xff

    class MatchingType(enum.Enum):

        Exact                     = ...  # 0x0
        Sha256                    = ...  # 0x1
        Sha512                    = ...  # 0x2
        PrivMatch                 = ...  # 0xff
        PrivateUse                = ...  # 0xff

    class Selector(enum.Enum):

        Cert                      = ...  # 0x0
        FullCertificate           = ...  # 0x0
        SPKI                      = ...  # 0x1
        SubjectPublicKeyInfo      = ...  # 0x1
        PrivSel                   = ...  # 0xff
        PrivateUse                = ...  # 0xff


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QDnsTlsAssociationRecord, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def match_type(self, /) -> PySide6.QtNetwork.QDnsTlsAssociationRecord.MatchingType: ...
    def name(self, /) -> str: ...
    def selector(self, /) -> PySide6.QtNetwork.QDnsTlsAssociationRecord.Selector: ...
    def swap(self, other: PySide6.QtNetwork.QDnsTlsAssociationRecord, /) -> None: ...
    def time_to_live(self, /) -> int: ...
    def usage(self, /) -> PySide6.QtNetwork.QDnsTlsAssociationRecord.CertificateUsage: ...
    def value(self, /) -> PySide6.QtCore.QByteArray: ...


class QDtls(PySide6.QtCore.QObject):

    handshakeTimeout         : typing.ClassVar[Signal] = ... # handshakeTimeout()
    pskRequired              : typing.ClassVar[Signal] = ... # pskRequired(QSslPreSharedKeyAuthenticator*)

    class HandshakeState(enum.Enum):

        HandshakeNotStarted       = ...  # 0x0
        HandshakeInProgress       = ...  # 0x1
        PeerVerificationFailed    = ...  # 0x2
        HandshakeComplete         = ...  # 0x3


    def __init__(self, mode: PySide6.QtNetwork.QSslSocket.SslMode, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def abort_handshake(self, socket: PySide6.QtNetwork.QUdpSocket, /) -> bool: ...
    def cookie_generator_parameters(self, /) -> PySide6.QtNetwork.QDtlsClientVerifier.GeneratorParameters: ...
    def decrypt_datagram(self, socket: PySide6.QtNetwork.QUdpSocket, dgram: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtCore.QByteArray: ...
    def do_handshake(self, socket: PySide6.QtNetwork.QUdpSocket, /, dgram: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> bool: ...
    def dtls_configuration(self, /) -> PySide6.QtNetwork.QSslConfiguration: ...
    def dtls_error(self, /) -> PySide6.QtNetwork.QDtlsError: ...
    def dtls_error_string(self, /) -> str: ...
    def handle_timeout(self, socket: PySide6.QtNetwork.QUdpSocket, /) -> bool: ...
    def handshake_state(self, /) -> PySide6.QtNetwork.QDtls.HandshakeState: ...
    def ignore_verification_errors(self, errorsToIgnore: collections.abc.Sequence[PySide6.QtNetwork.QSslError], /) -> None: ...
    def is_connection_encrypted(self, /) -> bool: ...
    def mtu_hint(self, /) -> int: ...
    def peer_address(self, /) -> PySide6.QtNetwork.QHostAddress: ...
    def peer_port(self, /) -> int: ...
    def peer_verification_errors(self, /) -> typing.List[PySide6.QtNetwork.QSslError]: ...
    def peer_verification_name(self, /) -> str: ...
    def resume_handshake(self, socket: PySide6.QtNetwork.QUdpSocket, /) -> bool: ...
    def session_cipher(self, /) -> PySide6.QtNetwork.QSslCipher: ...
    def session_protocol(self, /) -> PySide6.QtNetwork.QSsl.SslProtocol: ...
    def set_cookie_generator_parameters(self, params: PySide6.QtNetwork.QDtlsClientVerifier.GeneratorParameters, /) -> bool: ...
    def set_dtls_configuration(self, configuration: PySide6.QtNetwork.QSslConfiguration, /) -> bool: ...
    def set_mtu_hint(self, mtuHint: int, /) -> None: ...
    def set_peer(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, port: int, /, verificationName: str = ...) -> bool: ...
    def set_peer_verification_name(self, name: str, /) -> bool: ...
    def shutdown(self, socket: PySide6.QtNetwork.QUdpSocket, /) -> bool: ...
    def ssl_mode(self, /) -> PySide6.QtNetwork.QSslSocket.SslMode: ...
    def write_datagram_encrypted(self, socket: PySide6.QtNetwork.QUdpSocket, dgram: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> int: ...


class QDtlsClientVerifier(PySide6.QtCore.QObject):

    class GeneratorParameters(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, a: PySide6.QtCore.QCryptographicHash.Algorithm, s: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
        @typing.overload
        def __init__(self, GeneratorParameters: PySide6.QtNetwork.QDtlsClientVerifier.GeneratorParameters, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def cookie_generator_parameters(self, /) -> PySide6.QtNetwork.QDtlsClientVerifier.GeneratorParameters: ...
    def dtls_error(self, /) -> PySide6.QtNetwork.QDtlsError: ...
    def dtls_error_string(self, /) -> str: ...
    def set_cookie_generator_parameters(self, params: PySide6.QtNetwork.QDtlsClientVerifier.GeneratorParameters, /) -> bool: ...
    def verified_hello(self, /) -> PySide6.QtCore.QByteArray: ...
    def verify_client(self, socket: PySide6.QtNetwork.QUdpSocket, dgram: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, port: int, /) -> bool: ...


class QDtlsError(enum.Enum):

    NoError                   = ...  # 0x0
    InvalidInputParameters    = ...  # 0x1
    InvalidOperation          = ...  # 0x2
    UnderlyingSocketError     = ...  # 0x3
    RemoteClosedConnectionError = ...  # 0x4
    PeerVerificationError     = ...  # 0x5
    TlsInitializationError    = ...  # 0x6
    TlsFatalError             = ...  # 0x7
    TlsNonFatalError          = ...  # 0x8


class QFormDataBuilder(Shiboken.Object):

    class Option(enum.Flag):

        Default                   = ...  # 0x0
        OmitRfc8187EncodedFilename = ...  # 0x1
        UseRfc7578PercentEncodedFilename = ...  # 0x2
        StrictRfc7578             = ...  # 0x3
        PreferLatin1EncodedFilename = ...  # 0x4


    def __init__(self, /) -> None: ...

    def part(self, name: str, /) -> PySide6.QtNetwork.QFormDataPartBuilder: ...
    def swap(self, other: PySide6.QtNetwork.QFormDataBuilder, /) -> None: ...


class QFormDataPartBuilder(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def set_body(self, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /, fileName: str = ..., mimeType: str = ...) -> PySide6.QtNetwork.QFormDataPartBuilder: ...
    def set_body_device(self, body: PySide6.QtCore.QIODevice, /, fileName: str = ..., mimeType: str = ...) -> PySide6.QtNetwork.QFormDataPartBuilder: ...
    def set_headers(self, headers: PySide6.QtNetwork.QHttpHeaders, /) -> PySide6.QtNetwork.QFormDataPartBuilder: ...
    def swap(self, other: PySide6.QtNetwork.QFormDataPartBuilder, /) -> None: ...


class QHostAddress(Shiboken.Object):

    UnknownNetworkLayerProtocol = ...  # -1
    IPv4Protocol              = ...  # 0x0
    IPv6Protocol              = ...  # 0x1
    AnyIPProtocol             = ...  # 0x2

    class ConversionModeFlag(enum.Flag):

        StrictConversion          = ...  # 0x0
        ConvertV4MappedToIPv4     = ...  # 0x1
        ConvertV4CompatToIPv4     = ...  # 0x2
        ConvertUnspecifiedAddress = ...  # 0x4
        ConvertLocalHost          = ...  # 0x8
        TolerantConversion        = ...  # 0xff

    class SpecialAddress(enum.Enum):

        Null                      = ...  # 0x0
        Broadcast                 = ...  # 0x1
        LocalHost                 = ...  # 0x2
        LocalHostIPv6             = ...  # 0x3
        Any                       = ...  # 0x4
        AnyIPv6                   = ...  # 0x5
        AnyIPv4                   = ...  # 0x6


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, copy: PySide6.QtNetwork.QHostAddress, /) -> None: ...
    @typing.overload
    def __init__(self, ip6Addr: PySide6.QtNetwork.QIPv6Address, /) -> None: ...
    @typing.overload
    def __init__(self, address: PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> None: ...
    @typing.overload
    def __init__(self, address: str, /) -> None: ...
    @typing.overload
    def __init__(self, ip4Addr: int, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    @typing.overload
    def __eq__(self, address: PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> bool: ...
    @typing.overload
    def __eq__(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __lshift__(self, arg__1: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    @typing.overload
    def __ne__(self, address: PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> bool: ...
    @typing.overload
    def __ne__(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def __rshift__(self, arg__1: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def clear(self, /) -> None: ...
    def is_broadcast(self, /) -> bool: ...
    def is_equal(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /, mode: PySide6.QtNetwork.QHostAddress.ConversionModeFlag = ...) -> bool: ...
    def is_global(self, /) -> bool: ...
    @typing.overload
    def is_in_subnet(self, subnet: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, netmask: int, /) -> bool: ...
    @typing.overload
    def is_in_subnet(self, subnet: typing.Tuple[PySide6.QtNetwork.QHostAddress, int], /) -> bool: ...
    def is_link_local(self, /) -> bool: ...
    def is_loopback(self, /) -> bool: ...
    def is_multicast(self, /) -> bool: ...
    def is_null(self, /) -> bool: ...
    def is_private_use(self, /) -> bool: ...
    def is_site_local(self, /) -> bool: ...
    def is_unique_local_unicast(self, /) -> bool: ...
    @staticmethod
    def parse_subnet(subnet: str, /) -> typing.Tuple[PySide6.QtNetwork.QHostAddress, int]: ...
    def protocol(self, /) -> PySide6.QtNetwork.QAbstractSocket.NetworkLayerProtocol: ...
    def scope_id(self, /) -> str: ...
    @typing.overload
    def set_address(self, ip6Addr: PySide6.QtNetwork.QIPv6Address, /) -> None: ...
    @typing.overload
    def set_address(self, address: PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> None: ...
    @typing.overload
    def set_address(self, address: str, /) -> bool: ...
    @typing.overload
    def set_address(self, ip4Addr: int, /) -> None: ...
    def set_scope_id(self, id: str, /) -> None: ...
    def swap(self, other: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> None: ...
    def toIPv4Address(self, /) -> typing.Tuple[int, bool]: ...
    def toIPv6Address(self, /) -> PySide6.QtNetwork.QIPv6Address: ...
    def to_string(self, /) -> str: ...


class QHostInfo(Shiboken.Object):

    class HostInfoError(enum.Enum):

        NoError                   = ...  # 0x0
        HostNotFound              = ...  # 0x1
        UnknownError              = ...  # 0x2


    @typing.overload
    def __init__(self, d: PySide6.QtNetwork.QHostInfo, /) -> None: ...
    @typing.overload
    def __init__(self, /, lookupId: int = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    @staticmethod
    def abort_host_lookup(lookupId: int, /) -> None: ...
    def addresses(self, /) -> typing.List[PySide6.QtNetwork.QHostAddress]: ...
    def error(self, /) -> PySide6.QtNetwork.QHostInfo.HostInfoError: ...
    def error_string(self, /) -> str: ...
    @staticmethod
    def from_name(name: str, /) -> PySide6.QtNetwork.QHostInfo: ...
    def host_name(self, /) -> str: ...
    @staticmethod
    def local_domain_name() -> str: ...
    @staticmethod
    def local_host_name() -> str: ...
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    def lookup_host(self, name: str, callable: collections.abc.Callable[..., typing.Any], /) -> None: ...  # type: ignore[misc, overload-cannot-match]
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    @staticmethod
    def lookup_host(name: str, receiver: PySide6.QtCore.QObject, member: bytes | bytearray | memoryview, /) -> int: ...  # type: ignore[misc, overload-cannot-match]
    def lookup_id(self, /) -> int: ...
    def set_addresses(self, addresses: collections.abc.Sequence[PySide6.QtNetwork.QHostAddress], /) -> None: ...
    def set_error(self, error: PySide6.QtNetwork.QHostInfo.HostInfoError, /) -> None: ...
    def set_error_string(self, errorString: str, /) -> None: ...
    def set_host_name(self, name: str, /) -> None: ...
    def set_lookup_id(self, id: int, /) -> None: ...
    def swap(self, other: PySide6.QtNetwork.QHostInfo | int, /) -> None: ...


class QHstsPolicy(Shiboken.Object):

    class PolicyFlag(enum.Flag):

        IncludeSubDomains         = ...  # 0x1


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, expiry: PySide6.QtCore.QDateTime, flags: PySide6.QtNetwork.QHstsPolicy.PolicyFlag, host: str, /, mode: PySide6.QtCore.QUrl.ParsingMode = ...) -> None: ...
    @typing.overload
    def __init__(self, rhs: PySide6.QtNetwork.QHstsPolicy, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtNetwork.QHstsPolicy, /) -> bool: ...
    def __ne__(self, rhs: PySide6.QtNetwork.QHstsPolicy, /) -> bool: ...
    def expiry(self, /) -> PySide6.QtCore.QDateTime: ...
    def host(self, /, options: PySide6.QtCore.QUrl.ComponentFormattingOption = ...) -> str: ...
    def includes_sub_domains(self, /) -> bool: ...
    def is_expired(self, /) -> bool: ...
    def set_expiry(self, expiry: PySide6.QtCore.QDateTime, /) -> None: ...
    def set_host(self, host: str, /, mode: PySide6.QtCore.QUrl.ParsingMode = ...) -> None: ...
    def set_includes_sub_domains(self, include: bool, /) -> None: ...
    def swap(self, other: PySide6.QtNetwork.QHstsPolicy, /) -> None: ...


class QHttp1Configuration(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QHttp1Configuration, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtNetwork.QHttp1Configuration, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __ne__(self, rhs: PySide6.QtNetwork.QHttp1Configuration, /) -> bool: ...
    def number_of_connections_per_host(self, /) -> int: ...
    def set_number_of_connections_per_host(self, amount: int, /) -> None: ...
    def swap(self, other: PySide6.QtNetwork.QHttp1Configuration, /) -> None: ...


class QHttp2Configuration(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QHttp2Configuration, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtNetwork.QHttp2Configuration, /) -> bool: ...
    def __ne__(self, rhs: PySide6.QtNetwork.QHttp2Configuration, /) -> bool: ...
    def huffman_compression_enabled(self, /) -> bool: ...
    def max_frame_size(self, /) -> int: ...
    def server_push_enabled(self, /) -> bool: ...
    def session_receive_window_size(self, /) -> int: ...
    def set_huffman_compression_enabled(self, enable: bool, /) -> None: ...
    def set_max_frame_size(self, size: int, /) -> bool: ...
    def set_server_push_enabled(self, enable: bool, /) -> None: ...
    def set_session_receive_window_size(self, size: int, /) -> bool: ...
    def set_stream_receive_window_size(self, size: int, /) -> bool: ...
    def stream_receive_window_size(self, /) -> int: ...
    def swap(self, other: PySide6.QtNetwork.QHttp2Configuration, /) -> None: ...


class QHttpHeaders(Shiboken.Object):

    class WellKnownHeader(enum.Enum):

        AIM                       = ...  # 0x0
        Accept                    = ...  # 0x1
        AcceptAdditions           = ...  # 0x2
        AcceptCH                  = ...  # 0x3
        AcceptDatetime            = ...  # 0x4
        AcceptEncoding            = ...  # 0x5
        AcceptFeatures            = ...  # 0x6
        AcceptLanguage            = ...  # 0x7
        AcceptPatch               = ...  # 0x8
        AcceptPost                = ...  # 0x9
        AcceptRanges              = ...  # 0xa
        AcceptSignature           = ...  # 0xb
        AccessControlAllowCredentials = ...  # 0xc
        AccessControlAllowHeaders = ...  # 0xd
        AccessControlAllowMethods = ...  # 0xe
        AccessControlAllowOrigin  = ...  # 0xf
        AccessControlExposeHeaders = ...  # 0x10
        AccessControlMaxAge       = ...  # 0x11
        AccessControlRequestHeaders = ...  # 0x12
        AccessControlRequestMethod = ...  # 0x13
        Age                       = ...  # 0x14
        Allow                     = ...  # 0x15
        ALPN                      = ...  # 0x16
        AltSvc                    = ...  # 0x17
        AltUsed                   = ...  # 0x18
        Alternates                = ...  # 0x19
        ApplyToRedirectRef        = ...  # 0x1a
        AuthenticationControl     = ...  # 0x1b
        AuthenticationInfo        = ...  # 0x1c
        Authorization             = ...  # 0x1d
        CacheControl              = ...  # 0x1e
        CacheStatus               = ...  # 0x1f
        CalManagedID              = ...  # 0x20
        CalDAVTimezones           = ...  # 0x21
        CapsuleProtocol           = ...  # 0x22
        CDNCacheControl           = ...  # 0x23
        CDNLoop                   = ...  # 0x24
        CertNotAfter              = ...  # 0x25
        CertNotBefore             = ...  # 0x26
        ClearSiteData             = ...  # 0x27
        ClientCert                = ...  # 0x28
        ClientCertChain           = ...  # 0x29
        Close                     = ...  # 0x2a
        Connection                = ...  # 0x2b
        ContentDigest             = ...  # 0x2c
        ContentDisposition        = ...  # 0x2d
        ContentEncoding           = ...  # 0x2e
        ContentID                 = ...  # 0x2f
        ContentLanguage           = ...  # 0x30
        ContentLength             = ...  # 0x31
        ContentLocation           = ...  # 0x32
        ContentRange              = ...  # 0x33
        ContentSecurityPolicy     = ...  # 0x34
        ContentSecurityPolicyReportOnly = ...  # 0x35
        ContentType               = ...  # 0x36
        Cookie                    = ...  # 0x37
        CrossOriginEmbedderPolicy = ...  # 0x38
        CrossOriginEmbedderPolicyReportOnly = ...  # 0x39
        CrossOriginOpenerPolicy   = ...  # 0x3a
        CrossOriginOpenerPolicyReportOnly = ...  # 0x3b
        CrossOriginResourcePolicy = ...  # 0x3c
        DASL                      = ...  # 0x3d
        Date                      = ...  # 0x3e
        DAV                       = ...  # 0x3f
        DeltaBase                 = ...  # 0x40
        Depth                     = ...  # 0x41
        Destination               = ...  # 0x42
        DifferentialID            = ...  # 0x43
        DPoP                      = ...  # 0x44
        DPoPNonce                 = ...  # 0x45
        EarlyData                 = ...  # 0x46
        ETag                      = ...  # 0x47
        Expect                    = ...  # 0x48
        ExpectCT                  = ...  # 0x49
        Expires                   = ...  # 0x4a
        Forwarded                 = ...  # 0x4b
        From                      = ...  # 0x4c
        Hobareg                   = ...  # 0x4d
        Host                      = ...  # 0x4e
        If                        = ...  # 0x4f
        IfMatch                   = ...  # 0x50
        IfModifiedSince           = ...  # 0x51
        IfNoneMatch               = ...  # 0x52
        IfRange                   = ...  # 0x53
        IfScheduleTagMatch        = ...  # 0x54
        IfUnmodifiedSince         = ...  # 0x55
        IM                        = ...  # 0x56
        IncludeReferredTokenBindingID = ...  # 0x57
        KeepAlive                 = ...  # 0x58
        Label                     = ...  # 0x59
        LastEventID               = ...  # 0x5a
        LastModified              = ...  # 0x5b
        Link                      = ...  # 0x5c
        Location                  = ...  # 0x5d
        LockToken                 = ...  # 0x5e
        MaxForwards               = ...  # 0x5f
        MementoDatetime           = ...  # 0x60
        Meter                     = ...  # 0x61
        MIMEVersion               = ...  # 0x62
        Negotiate                 = ...  # 0x63
        NEL                       = ...  # 0x64
        ODataEntityId             = ...  # 0x65
        ODataIsolation            = ...  # 0x66
        ODataMaxVersion           = ...  # 0x67
        ODataVersion              = ...  # 0x68
        OptionalWWWAuthenticate   = ...  # 0x69
        OrderingType              = ...  # 0x6a
        Origin                    = ...  # 0x6b
        OriginAgentCluster        = ...  # 0x6c
        OSCORE                    = ...  # 0x6d
        OSLCCoreVersion           = ...  # 0x6e
        Overwrite                 = ...  # 0x6f
        PingFrom                  = ...  # 0x70
        PingTo                    = ...  # 0x71
        Position                  = ...  # 0x72
        Prefer                    = ...  # 0x73
        PreferenceApplied         = ...  # 0x74
        Priority                  = ...  # 0x75
        ProxyAuthenticate         = ...  # 0x76
        ProxyAuthenticationInfo   = ...  # 0x77
        ProxyAuthorization        = ...  # 0x78
        ProxyStatus               = ...  # 0x79
        PublicKeyPins             = ...  # 0x7a
        PublicKeyPinsReportOnly   = ...  # 0x7b
        Range                     = ...  # 0x7c
        RedirectRef               = ...  # 0x7d
        Referer                   = ...  # 0x7e
        Refresh                   = ...  # 0x7f
        ReplayNonce               = ...  # 0x80
        ReprDigest                = ...  # 0x81
        RetryAfter                = ...  # 0x82
        ScheduleReply             = ...  # 0x83
        ScheduleTag               = ...  # 0x84
        SecPurpose                = ...  # 0x85
        SecTokenBinding           = ...  # 0x86
        SecWebSocketAccept        = ...  # 0x87
        SecWebSocketExtensions    = ...  # 0x88
        SecWebSocketKey           = ...  # 0x89
        SecWebSocketProtocol      = ...  # 0x8a
        SecWebSocketVersion       = ...  # 0x8b
        Server                    = ...  # 0x8c
        ServerTiming              = ...  # 0x8d
        SetCookie                 = ...  # 0x8e
        Signature                 = ...  # 0x8f
        SignatureInput            = ...  # 0x90
        SLUG                      = ...  # 0x91
        SoapAction                = ...  # 0x92
        StatusURI                 = ...  # 0x93
        StrictTransportSecurity   = ...  # 0x94
        Sunset                    = ...  # 0x95
        SurrogateCapability       = ...  # 0x96
        SurrogateControl          = ...  # 0x97
        TCN                       = ...  # 0x98
        TE                        = ...  # 0x99
        Timeout                   = ...  # 0x9a
        Topic                     = ...  # 0x9b
        Traceparent               = ...  # 0x9c
        Tracestate                = ...  # 0x9d
        Trailer                   = ...  # 0x9e
        TransferEncoding          = ...  # 0x9f
        TTL                       = ...  # 0xa0
        Upgrade                   = ...  # 0xa1
        Urgency                   = ...  # 0xa2
        UserAgent                 = ...  # 0xa3
        VariantVary               = ...  # 0xa4
        Vary                      = ...  # 0xa5
        Via                       = ...  # 0xa6
        WantContentDigest         = ...  # 0xa7
        WantReprDigest            = ...  # 0xa8
        WWWAuthenticate           = ...  # 0xa9
        XContentTypeOptions       = ...  # 0xaa
        XFrameOptions             = ...  # 0xab
        AcceptCharset             = ...  # 0xac
        CPEPInfo                  = ...  # 0xad
        Pragma                    = ...  # 0xae
        ProtocolInfo              = ...  # 0xaf
        ProtocolQuery             = ...  # 0xb0


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QHttpHeaders, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    @typing.overload
    def append(self, name: PySide6.QtNetwork.QHttpHeaders.WellKnownHeader, value: str, /) -> bool: ...
    @typing.overload
    def append(self, name: str, value: str, /) -> bool: ...
    def clear(self, /) -> None: ...
    @typing.overload
    def combined_value(self, name: PySide6.QtNetwork.QHttpHeaders.WellKnownHeader, /) -> PySide6.QtCore.QByteArray: ...
    @typing.overload
    def combined_value(self, name: str, /) -> PySide6.QtCore.QByteArray: ...
    @typing.overload
    def contains(self, name: PySide6.QtNetwork.QHttpHeaders.WellKnownHeader, /) -> bool: ...
    @typing.overload
    def contains(self, name: str, /) -> bool: ...
    @staticmethod
    def from_list_of_pairs(headers: collections.abc.Sequence[typing.Tuple[PySide6.QtCore.QByteArray, PySide6.QtCore.QByteArray]], /) -> PySide6.QtNetwork.QHttpHeaders: ...
    @staticmethod
    def from_multi_hash(headers: typing.Dict[PySide6.QtCore.QByteArray, PySide6.QtCore.QByteArray], /) -> PySide6.QtNetwork.QHttpHeaders: ...
    @staticmethod
    def from_multi_map(headers: typing.Dict[PySide6.QtCore.QByteArray, PySide6.QtCore.QByteArray], /) -> PySide6.QtNetwork.QHttpHeaders: ...
    @typing.overload
    def insert(self, i: int, name: PySide6.QtNetwork.QHttpHeaders.WellKnownHeader, value: str, /) -> bool: ...
    @typing.overload
    def insert(self, i: int, name: str, value: str, /) -> bool: ...
    def is_empty(self, /) -> bool: ...
    def name_at(self, i: int, /) -> str: ...
    @typing.overload
    def remove_all(self, name: PySide6.QtNetwork.QHttpHeaders.WellKnownHeader, /) -> None: ...
    @typing.overload
    def remove_all(self, name: str, /) -> None: ...
    def remove_at(self, i: int, /) -> None: ...
    @typing.overload
    def replace(self, i: int, name: PySide6.QtNetwork.QHttpHeaders.WellKnownHeader, newValue: str, /) -> bool: ...
    @typing.overload
    def replace(self, i: int, name: str, newValue: str, /) -> bool: ...
    @typing.overload
    def replace_or_append(self, name: PySide6.QtNetwork.QHttpHeaders.WellKnownHeader, newValue: str, /) -> bool: ...
    @typing.overload
    def replace_or_append(self, name: str, newValue: str, /) -> bool: ...
    def reserve(self, size: int, /) -> None: ...
    def size(self, /) -> int: ...
    def swap(self, other: PySide6.QtNetwork.QHttpHeaders, /) -> None: ...
    def to_list_of_pairs(self, /) -> typing.List[typing.Tuple[PySide6.QtCore.QByteArray, PySide6.QtCore.QByteArray]]: ...
    def to_multi_hash(self, /) -> typing.Dict[PySide6.QtCore.QByteArray, PySide6.QtCore.QByteArray]: ...
    def to_multi_map(self, /) -> typing.Dict[PySide6.QtCore.QByteArray, PySide6.QtCore.QByteArray]: ...
    @typing.overload
    def value(self, name: PySide6.QtNetwork.QHttpHeaders.WellKnownHeader, /, defaultValue: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> PySide6.QtCore.QByteArray: ...
    @typing.overload
    def value(self, name: str, /, defaultValue: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> PySide6.QtCore.QByteArray: ...
    def value_at(self, i: int, /) -> PySide6.QtCore.QByteArray: ...
    @typing.overload
    def values(self, name: PySide6.QtNetwork.QHttpHeaders.WellKnownHeader, /) -> typing.List[PySide6.QtCore.QByteArray]: ...
    @typing.overload
    def values(self, name: str, /) -> typing.List[PySide6.QtCore.QByteArray]: ...
    @staticmethod
    def well_known_header_name(name: PySide6.QtNetwork.QHttpHeaders.WellKnownHeader, /) -> PySide6.QtCore.QByteArray: ...


class QHttpMultiPart(PySide6.QtCore.QObject):

    class ContentType(enum.Enum):

        MixedType                 = ...  # 0x0
        RelatedType               = ...  # 0x1
        FormDataType              = ...  # 0x2
        AlternativeType           = ...  # 0x3


    @typing.overload
    def __init__(self, contentType: PySide6.QtNetwork.QHttpMultiPart.ContentType, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def append(self, httpPart: PySide6.QtNetwork.QHttpPart, /) -> None: ...
    def boundary(self, /) -> PySide6.QtCore.QByteArray: ...
    def set_boundary(self, boundary: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_content_type(self, contentType: PySide6.QtNetwork.QHttpMultiPart.ContentType, /) -> None: ...


class QHttpPart(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QHttpPart, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtNetwork.QHttpPart, /) -> bool: ...
    def __ne__(self, other: PySide6.QtNetwork.QHttpPart, /) -> bool: ...
    def set_body(self, body: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_body_device(self, device: PySide6.QtCore.QIODevice, /) -> None: ...
    def set_header(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders, value: typing.Any, /) -> None: ...
    def set_raw_header(self, headerName: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, headerValue: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def swap(self, other: PySide6.QtNetwork.QHttpPart, /) -> None: ...


class QIPv6Address(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QIPv6Address: PySide6.QtNetwork.QIPv6Address, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...


class QIntList: ...


class QLocalServer(PySide6.QtCore.QObject):

    newConnection            : typing.ClassVar[Signal] = ... # newConnection()

    class SocketOption(enum.Flag):

        NoOptions                 = ...  # 0x0
        UserAccessOption          = ...  # 0x1
        GroupAccessOption         = ...  # 0x2
        OtherAccessOption         = ...  # 0x4
        WorldAccessOption         = ...  # 0x7
        AbstractNamespaceOption   = ...  # 0x8


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, socket_options: PySide6.QtNetwork.QLocalServer.SocketOption | None = ...) -> None: ...

    def add_pending_connection(self, socket: PySide6.QtNetwork.QLocalSocket, /) -> None: ...
    def close(self, /) -> None: ...
    def error_string(self, /) -> str: ...
    def full_server_name(self, /) -> str: ...
    def has_pending_connections(self, /) -> bool: ...
    def incoming_connection(self, socketDescriptor: int, /) -> None: ...
    def is_listening(self, /) -> bool: ...
    @typing.overload
    def listen(self, name: str, /) -> bool: ...
    @typing.overload
    def listen(self, socketDescriptor: int, /) -> bool: ...
    def listen_backlog_size(self, /) -> int: ...
    def max_pending_connections(self, /) -> int: ...
    def next_pending_connection(self, /) -> PySide6.QtNetwork.QLocalSocket: ...
    @staticmethod
    def remove_server(name: str, /) -> bool: ...
    def server_error(self, /) -> PySide6.QtNetwork.QAbstractSocket.SocketError: ...
    def server_name(self, /) -> str: ...
    def set_listen_backlog_size(self, size: int, /) -> None: ...
    def set_max_pending_connections(self, numConnections: int, /) -> None: ...
    def set_socket_options(self, options: PySide6.QtNetwork.QLocalServer.SocketOption, /) -> None: ...
    def socket_descriptor(self, /) -> int: ...
    def socket_options(self, /) -> PySide6.QtNetwork.QLocalServer.SocketOption: ...
    def wait_for_new_connection(self, msec: int, /) -> typing.Tuple[bool, bool]: ...


class QLocalSocket(PySide6.QtCore.QIODevice):

    connected                : typing.ClassVar[Signal] = ... # connected()
    disconnected             : typing.ClassVar[Signal] = ... # disconnected()
    errorOccurred            : typing.ClassVar[Signal] = ... # errorOccurred(QLocalSocket::LocalSocketError)
    stateChanged             : typing.ClassVar[Signal] = ... # stateChanged(QLocalSocket::LocalSocketState)

    class LocalSocketError(enum.Enum):

        UnknownSocketError        = ...  # -1
        ConnectionRefusedError    = ...  # 0x0
        PeerClosedError           = ...  # 0x1
        ServerNotFoundError       = ...  # 0x2
        SocketAccessError         = ...  # 0x3
        SocketResourceError       = ...  # 0x4
        SocketTimeoutError        = ...  # 0x5
        DatagramTooLargeError     = ...  # 0x6
        ConnectionError           = ...  # 0x7
        UnsupportedSocketOperationError = ...  # 0xa
        OperationError            = ...  # 0x13

    class LocalSocketState(enum.Enum):

        UnconnectedState          = ...  # 0x0
        ConnectingState           = ...  # 0x2
        ConnectedState            = ...  # 0x3
        ClosingState              = ...  # 0x6

    class SocketOption(enum.Flag):

        NoOptions                 = ...  # 0x0
        AbstractNamespaceOption   = ...  # 0x1


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, socket_options: PySide6.QtNetwork.QLocalServer.SocketOption | None = ...) -> None: ...

    def abort(self, /) -> None: ...
    def bytes_available(self, /) -> int: ...
    def bytes_to_write(self, /) -> int: ...
    def can_read_line(self, /) -> bool: ...
    def close(self, /) -> None: ...
    @typing.overload
    def connect_to_server(self, /, openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> None: ...
    @typing.overload
    def connect_to_server(self, name: str, /, openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> None: ...
    def disconnect_from_server(self, /) -> None: ...
    def error(self, /) -> PySide6.QtNetwork.QLocalSocket.LocalSocketError: ...
    def flush(self, /) -> bool: ...
    def full_server_name(self, /) -> str: ...
    def is_sequential(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def open(self, /, openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> bool: ...
    def read_buffer_size(self, /) -> int: ...
    def read_data(self, arg__2: int, /) -> object: ...
    def read_line_data(self, maxSize: int, /) -> object: ...
    def server_name(self, /) -> str: ...
    def set_read_buffer_size(self, size: int, /) -> None: ...
    def set_server_name(self, name: str, /) -> None: ...
    def set_socket_descriptor(self, socketDescriptor: int, /, socketState: PySide6.QtNetwork.QLocalSocket.LocalSocketState = ..., openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> bool: ...
    def set_socket_options(self, option: PySide6.QtNetwork.QLocalSocket.SocketOption, /) -> None: ...
    def skip_data(self, maxSize: int, /) -> int: ...
    def socket_descriptor(self, /) -> int: ...
    def socket_options(self, /) -> PySide6.QtNetwork.QLocalSocket.SocketOption: ...
    def state(self, /) -> PySide6.QtNetwork.QLocalSocket.LocalSocketState: ...
    def wait_for_bytes_written(self, /, msecs: int = ...) -> bool: ...
    def wait_for_connected(self, /, msecs: int = ...) -> bool: ...
    def wait_for_disconnected(self, /, msecs: int = ...) -> bool: ...
    def wait_for_ready_read(self, /, msecs: int = ...) -> bool: ...
    def write_data(self, arg__1: bytes | bytearray | memoryview, arg__2: int, /) -> int: ...


class QNetworkAccessManager(PySide6.QtCore.QObject):

    authenticationRequired   : typing.ClassVar[Signal] = ... # authenticationRequired(QNetworkReply*,QAuthenticator*)
    encrypted                : typing.ClassVar[Signal] = ... # encrypted(QNetworkReply*)
    finished                 : typing.ClassVar[Signal] = ... # finished(QNetworkReply*)
    preSharedKeyAuthenticationRequired: typing.ClassVar[Signal] = ... # preSharedKeyAuthenticationRequired(QNetworkReply*,QSslPreSharedKeyAuthenticator*)
    proxyAuthenticationRequired: typing.ClassVar[Signal] = ... # proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)
    sslErrors                : typing.ClassVar[Signal] = ... # sslErrors(QNetworkReply*,QList<QSslError>)

    class Operation(enum.Enum):

        UnknownOperation          = ...  # 0x0
        HeadOperation             = ...  # 0x1
        GetOperation              = ...  # 0x2
        PutOperation              = ...  # 0x3
        PostOperation             = ...  # 0x4
        DeleteOperation           = ...  # 0x5
        CustomOperation           = ...  # 0x6


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def add_strict_transport_security_hosts(self, knownHosts: collections.abc.Sequence[PySide6.QtNetwork.QHstsPolicy], /) -> None: ...
    def auto_delete_replies(self, /) -> bool: ...
    def cache(self, /) -> PySide6.QtNetwork.QAbstractNetworkCache: ...
    def clear_access_cache(self, /) -> None: ...
    def clear_connection_cache(self, /) -> None: ...
    def connect_to_host(self, hostName: str, /, port: int = ...) -> None: ...
    @typing.overload
    def connect_to_host_encrypted(self, hostName: str, /, port: int = ..., sslConfiguration: PySide6.QtNetwork.QSslConfiguration = ...) -> None: ...
    @typing.overload
    def connect_to_host_encrypted(self, hostName: str, port: int, sslConfiguration: PySide6.QtNetwork.QSslConfiguration, peerName: str, /) -> None: ...
    def cookie_jar(self, /) -> PySide6.QtNetwork.QNetworkCookieJar: ...
    def create_request(self, op: PySide6.QtNetwork.QNetworkAccessManager.Operation, request: PySide6.QtNetwork.QNetworkRequest, /, outgoingData: PySide6.QtCore.QIODevice | None = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    def delete_resource(self, request: PySide6.QtNetwork.QNetworkRequest, /) -> PySide6.QtNetwork.QNetworkReply: ...
    def enable_strict_transport_security_store(self, enabled: bool, /, storeDir: str = ...) -> None: ...
    @typing.overload
    def get(self, request: PySide6.QtNetwork.QNetworkRequest, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def get(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def get(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtNetwork.QNetworkReply: ...
    def head(self, request: PySide6.QtNetwork.QNetworkRequest, /) -> PySide6.QtNetwork.QNetworkReply: ...
    def is_strict_transport_security_enabled(self, /) -> bool: ...
    def is_strict_transport_security_store_enabled(self, /) -> bool: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, multiPart: PySide6.QtNetwork.QHttpMultiPart, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtNetwork.QNetworkReply: ...
    def proxy(self, /) -> PySide6.QtNetwork.QNetworkProxy: ...
    def proxy_factory(self, /) -> PySide6.QtNetwork.QNetworkProxyFactory: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, multiPart: PySide6.QtNetwork.QHttpMultiPart, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtNetwork.QNetworkReply: ...
    def redirect_policy(self, /) -> PySide6.QtNetwork.QNetworkRequest.RedirectPolicy: ...
    @typing.overload
    def send_custom_request(self, request: PySide6.QtNetwork.QNetworkRequest, verb: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, multiPart: PySide6.QtNetwork.QHttpMultiPart, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def send_custom_request(self, request: PySide6.QtNetwork.QNetworkRequest, verb: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /, data: PySide6.QtCore.QIODevice | None = ...) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def send_custom_request(self, request: PySide6.QtNetwork.QNetworkRequest, verb: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtNetwork.QNetworkReply: ...
    def set_auto_delete_replies(self, autoDelete: bool, /) -> None: ...
    def set_cache(self, cache: PySide6.QtNetwork.QAbstractNetworkCache, /) -> None: ...
    def set_cookie_jar(self, cookieJar: PySide6.QtNetwork.QNetworkCookieJar, /) -> None: ...
    def set_proxy(self, proxy: PySide6.QtNetwork.QNetworkProxy | PySide6.QtNetwork.QNetworkProxy.ProxyType, /) -> None: ...
    def set_proxy_factory(self, factory: PySide6.QtNetwork.QNetworkProxyFactory, /) -> None: ...
    def set_redirect_policy(self, policy: PySide6.QtNetwork.QNetworkRequest.RedirectPolicy, /) -> None: ...
    def set_strict_transport_security_enabled(self, enabled: bool, /) -> None: ...
    def set_transfer_timeout(self, timeout: int, /) -> None: ...
    def strict_transport_security_hosts(self, /) -> typing.List[PySide6.QtNetwork.QHstsPolicy]: ...
    def supported_schemes(self, /) -> typing.List[str]: ...
    def supported_schemes_implementation(self, /) -> typing.List[str]: ...
    def transfer_timeout(self, /) -> int: ...


class QNetworkAddressEntry(Shiboken.Object):

    class DnsEligibilityStatus(enum.Enum):

        DnsEligibilityUnknown     = ...  # -1
        DnsIneligible             = ...  # 0x0
        DnsEligible               = ...  # 0x1


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkAddressEntry, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtNetwork.QNetworkAddressEntry, /) -> bool: ...
    def __ne__(self, other: PySide6.QtNetwork.QNetworkAddressEntry, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def broadcast(self, /) -> PySide6.QtNetwork.QHostAddress: ...
    def clear_address_lifetime(self, /) -> None: ...
    def dns_eligibility(self, /) -> PySide6.QtNetwork.QNetworkAddressEntry.DnsEligibilityStatus: ...
    def ip(self, /) -> PySide6.QtNetwork.QHostAddress: ...
    def is_lifetime_known(self, /) -> bool: ...
    def is_permanent(self, /) -> bool: ...
    def is_temporary(self, /) -> bool: ...
    def netmask(self, /) -> PySide6.QtNetwork.QHostAddress: ...
    def preferred_lifetime(self, /) -> PySide6.QtCore.QDeadlineTimer: ...
    def prefix_length(self, /) -> int: ...
    def set_address_lifetime(self, preferred: PySide6.QtCore.QDeadlineTimer | PySide6.QtCore.QDeadlineTimer.ForeverConstant | int, validity: PySide6.QtCore.QDeadlineTimer | PySide6.QtCore.QDeadlineTimer.ForeverConstant | int, /) -> None: ...
    def set_broadcast(self, newBroadcast: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> None: ...
    def set_dns_eligibility(self, status: PySide6.QtNetwork.QNetworkAddressEntry.DnsEligibilityStatus, /) -> None: ...
    def set_ip(self, newIp: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> None: ...
    def set_netmask(self, newNetmask: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> None: ...
    def set_prefix_length(self, length: int, /) -> None: ...
    def swap(self, other: PySide6.QtNetwork.QNetworkAddressEntry, /) -> None: ...
    def validity_lifetime(self, /) -> PySide6.QtCore.QDeadlineTimer: ...


class QNetworkCacheMetaData(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkCacheMetaData, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtNetwork.QNetworkCacheMetaData, /) -> bool: ...
    def __lshift__(self, arg__1: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def __ne__(self, other: PySide6.QtNetwork.QNetworkCacheMetaData, /) -> bool: ...
    def __rshift__(self, arg__1: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def attributes(self, /) -> typing.Dict[PySide6.QtNetwork.QNetworkRequest.Attribute, typing.Any]: ...
    def expiration_date(self, /) -> PySide6.QtCore.QDateTime: ...
    def headers(self, /) -> PySide6.QtNetwork.QHttpHeaders: ...
    def is_valid(self, /) -> bool: ...
    def last_modified(self, /) -> PySide6.QtCore.QDateTime: ...
    def raw_headers(self, /) -> typing.List[typing.Tuple[PySide6.QtCore.QByteArray, PySide6.QtCore.QByteArray]]: ...
    def save_to_disk(self, /) -> bool: ...
    def set_attributes(self, attributes: typing.Dict[PySide6.QtNetwork.QNetworkRequest.Attribute, typing.Any], /) -> None: ...
    def set_expiration_date(self, dateTime: PySide6.QtCore.QDateTime, /) -> None: ...
    def set_headers(self, headers: PySide6.QtNetwork.QHttpHeaders, /) -> None: ...
    def set_last_modified(self, dateTime: PySide6.QtCore.QDateTime, /) -> None: ...
    def set_raw_headers(self, headers: collections.abc.Sequence[typing.Tuple[PySide6.QtCore.QByteArray, PySide6.QtCore.QByteArray]], /) -> None: ...
    def set_save_to_disk(self, allow: bool, /) -> None: ...
    def set_url(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    def swap(self, other: PySide6.QtNetwork.QNetworkCacheMetaData, /) -> None: ...
    def url(self, /) -> PySide6.QtCore.QUrl: ...


class QNetworkCookie(Shiboken.Object):

    class RawForm(enum.Enum):

        NameAndValueOnly          = ...  # 0x0
        Full                      = ...  # 0x1

    class SameSite(enum.Enum):

        Default                   = ...  # 0x0
        None_                     = ...  # 0x1
        Lax                       = ...  # 0x2
        Strict                    = ...  # 0x3


    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkCookie, /) -> None: ...
    @typing.overload
    def __init__(self, /, name: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ..., value: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtNetwork.QNetworkCookie, /) -> bool: ...
    def __ne__(self, other: PySide6.QtNetwork.QNetworkCookie, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def domain(self, /) -> str: ...
    def expiration_date(self, /) -> PySide6.QtCore.QDateTime: ...
    def has_same_identifier(self, other: PySide6.QtNetwork.QNetworkCookie, /) -> bool: ...
    def is_http_only(self, /) -> bool: ...
    def is_secure(self, /) -> bool: ...
    def is_session_cookie(self, /) -> bool: ...
    def name(self, /) -> PySide6.QtCore.QByteArray: ...
    def normalize(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    @staticmethod
    def parse_cookies(cookieString: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> typing.List[PySide6.QtNetwork.QNetworkCookie]: ...
    def path(self, /) -> str: ...
    def same_site_policy(self, /) -> PySide6.QtNetwork.QNetworkCookie.SameSite: ...
    def set_domain(self, domain: str, /) -> None: ...
    def set_expiration_date(self, date: PySide6.QtCore.QDateTime, /) -> None: ...
    def set_http_only(self, enable: bool, /) -> None: ...
    def set_name(self, cookieName: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_path(self, path: str, /) -> None: ...
    def set_same_site_policy(self, sameSite: PySide6.QtNetwork.QNetworkCookie.SameSite, /) -> None: ...
    def set_secure(self, enable: bool, /) -> None: ...
    def set_value(self, value: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def swap(self, other: PySide6.QtNetwork.QNetworkCookie, /) -> None: ...
    def to_raw_form(self, /, form: PySide6.QtNetwork.QNetworkCookie.RawForm = ...) -> PySide6.QtCore.QByteArray: ...
    def value(self, /) -> PySide6.QtCore.QByteArray: ...


class QNetworkCookieJar(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def all_cookies(self, /) -> typing.List[PySide6.QtNetwork.QNetworkCookie]: ...
    def cookies_for_url(self, url: PySide6.QtCore.QUrl | str, /) -> typing.List[PySide6.QtNetwork.QNetworkCookie]: ...
    def delete_cookie(self, cookie: PySide6.QtNetwork.QNetworkCookie, /) -> bool: ...
    def insert_cookie(self, cookie: PySide6.QtNetwork.QNetworkCookie, /) -> bool: ...
    def set_all_cookies(self, cookieList: collections.abc.Sequence[PySide6.QtNetwork.QNetworkCookie], /) -> None: ...
    def set_cookies_from_url(self, cookieList: collections.abc.Sequence[PySide6.QtNetwork.QNetworkCookie], url: PySide6.QtCore.QUrl | str, /) -> bool: ...
    def update_cookie(self, cookie: PySide6.QtNetwork.QNetworkCookie, /) -> bool: ...
    def validate_cookie(self, cookie: PySide6.QtNetwork.QNetworkCookie, url: PySide6.QtCore.QUrl | str, /) -> bool: ...


class QNetworkDatagram(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkDatagram, /) -> None: ...
    @typing.overload
    def __init__(self, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /, destinationAddress: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress = ..., port: int | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def clear(self, /) -> None: ...
    def data(self, /) -> PySide6.QtCore.QByteArray: ...
    def destination_address(self, /) -> PySide6.QtNetwork.QHostAddress: ...
    def destination_port(self, /) -> int: ...
    def hop_limit(self, /) -> int: ...
    def interface_index(self, /) -> int: ...
    def is_null(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def make_reply(self, payload: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtNetwork.QNetworkDatagram: ...
    def sender_address(self, /) -> PySide6.QtNetwork.QHostAddress: ...
    def sender_port(self, /) -> int: ...
    def set_data(self, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_destination(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, port: int, /) -> None: ...
    def set_hop_limit(self, count: int, /) -> None: ...
    def set_interface_index(self, index: int, /) -> None: ...
    def set_sender(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /, port: int | None = ...) -> None: ...
    def swap(self, other: PySide6.QtNetwork.QNetworkDatagram | PySide6.QtCore.QByteArray, /) -> None: ...


class QNetworkDiskCache(PySide6.QtNetwork.QAbstractNetworkCache):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def cache_directory(self, /) -> str: ...
    def cache_size(self, /) -> int: ...
    def clear(self, /) -> None: ...
    def data(self, url: PySide6.QtCore.QUrl | str, /) -> PySide6.QtCore.QIODevice: ...
    def expire(self, /) -> int: ...
    def file_meta_data(self, fileName: str, /) -> PySide6.QtNetwork.QNetworkCacheMetaData: ...
    def insert(self, device: PySide6.QtCore.QIODevice, /) -> None: ...
    def maximum_cache_size(self, /) -> int: ...
    def meta_data(self, url: PySide6.QtCore.QUrl | str, /) -> PySide6.QtNetwork.QNetworkCacheMetaData: ...
    def prepare(self, metaData: PySide6.QtNetwork.QNetworkCacheMetaData, /) -> PySide6.QtCore.QIODevice: ...
    def remove(self, url: PySide6.QtCore.QUrl | str, /) -> bool: ...
    def set_cache_directory(self, cacheDir: str, /) -> None: ...
    def set_maximum_cache_size(self, size: int, /) -> None: ...
    def update_meta_data(self, metaData: PySide6.QtNetwork.QNetworkCacheMetaData, /) -> None: ...


class QNetworkInformation(PySide6.QtCore.QObject):

    isBehindCaptivePortalChanged: typing.ClassVar[Signal] = ... # isBehindCaptivePortalChanged(bool)
    isMeteredChanged         : typing.ClassVar[Signal] = ... # isMeteredChanged(bool)
    reachabilityChanged      : typing.ClassVar[Signal] = ... # reachabilityChanged(QNetworkInformation::Reachability)
    transportMediumChanged   : typing.ClassVar[Signal] = ... # transportMediumChanged(QNetworkInformation::TransportMedium)

    class Feature(enum.Flag):

        Reachability              = ...  # 0x1
        CaptivePortal             = ...  # 0x2
        TransportMedium           = ...  # 0x4
        Metered                   = ...  # 0x8

    class Reachability(enum.Enum):

        Unknown                   = ...  # 0x0
        Disconnected              = ...  # 0x1
        Local                     = ...  # 0x2
        Site                      = ...  # 0x3
        Online                    = ...  # 0x4

    class TransportMedium(enum.Enum):

        Unknown                   = ...  # 0x0
        Ethernet                  = ...  # 0x1
        Cellular                  = ...  # 0x2
        WiFi                      = ...  # 0x3
        Bluetooth                 = ...  # 0x4


    @staticmethod
    def available_backends() -> typing.List[str]: ...
    def backend_name(self, /) -> str: ...
    @staticmethod
    def instance() -> PySide6.QtNetwork.QNetworkInformation: ...
    def is_behind_captive_portal(self, /) -> bool: ...
    def is_metered(self, /) -> bool: ...
    @typing.overload
    @staticmethod
    def load(features: PySide6.QtNetwork.QNetworkInformation.Feature, /) -> bool: ...
    @typing.overload
    @staticmethod
    def load(backend: str, /) -> bool: ...
    @staticmethod
    def load_backend_by_features(features: PySide6.QtNetwork.QNetworkInformation.Feature, /) -> bool: ...
    @staticmethod
    def load_backend_by_name(backend: str, /) -> bool: ...
    @staticmethod
    def load_default_backend() -> bool: ...
    def reachability(self, /) -> PySide6.QtNetwork.QNetworkInformation.Reachability: ...
    def supported_features(self, /) -> PySide6.QtNetwork.QNetworkInformation.Feature: ...
    def supports(self, features: PySide6.QtNetwork.QNetworkInformation.Feature, /) -> bool: ...
    def transport_medium(self, /) -> PySide6.QtNetwork.QNetworkInformation.TransportMedium: ...


class QNetworkInterface(Shiboken.Object):

    class InterfaceFlag(enum.Flag):

        IsUp                      = ...  # 0x1
        IsRunning                 = ...  # 0x2
        CanBroadcast              = ...  # 0x4
        IsLoopBack                = ...  # 0x8
        IsPointToPoint            = ...  # 0x10
        CanMulticast              = ...  # 0x20

    class InterfaceType(enum.Enum):

        Unknown                   = ...  # 0x0
        Loopback                  = ...  # 0x1
        Virtual                   = ...  # 0x2
        Ethernet                  = ...  # 0x3
        Slip                      = ...  # 0x4
        CanBus                    = ...  # 0x5
        Ppp                       = ...  # 0x6
        Fddi                      = ...  # 0x7
        Ieee80211                 = ...  # 0x8
        Wifi                      = ...  # 0x8
        Phonet                    = ...  # 0x9
        Ieee802154                = ...  # 0xa
        SixLoWPAN                 = ...  # 0xb
        Ieee80216                 = ...  # 0xc
        Ieee1394                  = ...  # 0xd


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkInterface, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __repr__(self, /) -> str: ...
    def address_entries(self, /) -> typing.List[PySide6.QtNetwork.QNetworkAddressEntry]: ...
    @staticmethod
    def all_addresses() -> typing.List[PySide6.QtNetwork.QHostAddress]: ...
    @staticmethod
    def all_interfaces() -> typing.List[PySide6.QtNetwork.QNetworkInterface]: ...
    def flags(self, /) -> PySide6.QtNetwork.QNetworkInterface.InterfaceFlag: ...
    def hardware_address(self, /) -> str: ...
    def human_readable_name(self, /) -> str: ...
    def index(self, /) -> int: ...
    @staticmethod
    def interface_from_index(index: int, /) -> PySide6.QtNetwork.QNetworkInterface: ...
    @staticmethod
    def interface_from_name(name: str, /) -> PySide6.QtNetwork.QNetworkInterface: ...
    @staticmethod
    def interface_index_from_name(name: str, /) -> int: ...
    @staticmethod
    def interface_name_from_index(index: int, /) -> str: ...
    def is_valid(self, /) -> bool: ...
    def maximum_transmission_unit(self, /) -> int: ...
    def name(self, /) -> str: ...
    def swap(self, other: PySide6.QtNetwork.QNetworkInterface, /) -> None: ...
    def type(self, /) -> PySide6.QtNetwork.QNetworkInterface.InterfaceType: ...


class QNetworkProxy(Shiboken.Object):

    class Capability(enum.Flag):

        TunnelingCapability       = ...  # 0x1
        ListeningCapability       = ...  # 0x2
        UdpTunnelingCapability    = ...  # 0x4
        CachingCapability         = ...  # 0x8
        HostNameLookupCapability  = ...  # 0x10
        SctpTunnelingCapability   = ...  # 0x20
        SctpListeningCapability   = ...  # 0x40

    class ProxyType(enum.Enum):

        DefaultProxy              = ...  # 0x0
        Socks5Proxy               = ...  # 0x1
        NoProxy                   = ...  # 0x2
        HttpProxy                 = ...  # 0x3
        HttpCachingProxy          = ...  # 0x4
        FtpCachingProxy           = ...  # 0x5


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, type: PySide6.QtNetwork.QNetworkProxy.ProxyType, /, hostName: str = ..., port: int | None = ..., user: str = ..., password: str = ...) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkProxy, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtNetwork.QNetworkProxy | PySide6.QtNetwork.QNetworkProxy.ProxyType, /) -> bool: ...
    def __ne__(self, other: PySide6.QtNetwork.QNetworkProxy | PySide6.QtNetwork.QNetworkProxy.ProxyType, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    @staticmethod
    def application_proxy() -> PySide6.QtNetwork.QNetworkProxy: ...
    def capabilities(self, /) -> PySide6.QtNetwork.QNetworkProxy.Capability: ...
    def has_raw_header(self, headerName: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> bool: ...
    def header(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders, /) -> typing.Any: ...
    def headers(self, /) -> PySide6.QtNetwork.QHttpHeaders: ...
    def host_name(self, /) -> str: ...
    def is_caching_proxy(self, /) -> bool: ...
    def is_transparent_proxy(self, /) -> bool: ...
    def password(self, /) -> str: ...
    def port(self, /) -> int: ...
    def raw_header(self, headerName: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtCore.QByteArray: ...
    def raw_header_list(self, /) -> typing.List[PySide6.QtCore.QByteArray]: ...
    @staticmethod
    def set_application_proxy(proxy: PySide6.QtNetwork.QNetworkProxy | PySide6.QtNetwork.QNetworkProxy.ProxyType, /) -> None: ...
    def set_capabilities(self, capab: PySide6.QtNetwork.QNetworkProxy.Capability, /) -> None: ...
    def set_header(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders, value: typing.Any, /) -> None: ...
    def set_headers(self, newHeaders: PySide6.QtNetwork.QHttpHeaders, /) -> None: ...
    def set_host_name(self, hostName: str, /) -> None: ...
    def set_password(self, password: str, /) -> None: ...
    def set_port(self, port: int, /) -> None: ...
    def set_raw_header(self, headerName: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, value: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_type(self, type: PySide6.QtNetwork.QNetworkProxy.ProxyType, /) -> None: ...
    def set_user(self, userName: str, /) -> None: ...
    def swap(self, other: PySide6.QtNetwork.QNetworkProxy | PySide6.QtNetwork.QNetworkProxy.ProxyType, /) -> None: ...
    def type(self, /) -> PySide6.QtNetwork.QNetworkProxy.ProxyType: ...
    def user(self, /) -> str: ...


class QNetworkProxyFactory(Shiboken.Object):

    def __init__(self, /) -> None: ...

    @staticmethod
    def proxy_for_query(query: PySide6.QtNetwork.QNetworkProxyQuery | PySide6.QtCore.QUrl | int, /) -> typing.List[PySide6.QtNetwork.QNetworkProxy]: ...
    def query_proxy(self, /, query: PySide6.QtNetwork.QNetworkProxyQuery | PySide6.QtCore.QUrl | int = ...) -> typing.List[PySide6.QtNetwork.QNetworkProxy]: ...
    @staticmethod
    def set_application_proxy_factory(factory: PySide6.QtNetwork.QNetworkProxyFactory, /) -> None: ...
    @staticmethod
    def set_use_system_configuration(enable: bool, /) -> None: ...
    @staticmethod
    def system_proxy_for_query(query: PySide6.QtNetwork.QNetworkProxyQuery | PySide6.QtCore.QUrl | int = ...) -> typing.List[PySide6.QtNetwork.QNetworkProxy]: ...
    @staticmethod
    def uses_system_configuration() -> bool: ...


class QNetworkProxyQuery(Shiboken.Object):

    class QueryType(enum.Enum):

        TcpSocket                 = ...  # 0x0
        UdpSocket                 = ...  # 0x1
        SctpSocket                = ...  # 0x2
        TcpServer                 = ...  # 0x64
        UrlRequest                = ...  # 0x65
        SctpServer                = ...  # 0x66


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkProxyQuery, /) -> None: ...
    @typing.overload
    def __init__(self, hostname: str, port: int, /, protocolTag: str = ..., queryType: PySide6.QtNetwork.QNetworkProxyQuery.QueryType = ...) -> None: ...
    @typing.overload
    def __init__(self, requestUrl: PySide6.QtCore.QUrl | str, /, queryType: PySide6.QtNetwork.QNetworkProxyQuery.QueryType = ...) -> None: ...
    @typing.overload
    def __init__(self, bindPort: int, /, protocolTag: str = ..., queryType: PySide6.QtNetwork.QNetworkProxyQuery.QueryType = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtNetwork.QNetworkProxyQuery | PySide6.QtCore.QUrl | int, /) -> bool: ...
    def __ne__(self, other: PySide6.QtNetwork.QNetworkProxyQuery | PySide6.QtCore.QUrl | int, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def local_port(self, /) -> int: ...
    def peer_host_name(self, /) -> str: ...
    def peer_port(self, /) -> int: ...
    def protocol_tag(self, /) -> str: ...
    def query_type(self, /) -> PySide6.QtNetwork.QNetworkProxyQuery.QueryType: ...
    def set_local_port(self, port: int, /) -> None: ...
    def set_peer_host_name(self, hostname: str, /) -> None: ...
    def set_peer_port(self, port: int, /) -> None: ...
    def set_protocol_tag(self, protocolTag: str, /) -> None: ...
    def set_query_type(self, type: PySide6.QtNetwork.QNetworkProxyQuery.QueryType, /) -> None: ...
    def set_url(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    def swap(self, other: PySide6.QtNetwork.QNetworkProxyQuery | PySide6.QtCore.QUrl | int, /) -> None: ...
    def url(self, /) -> PySide6.QtCore.QUrl: ...


class QNetworkReply(PySide6.QtCore.QIODevice):

    downloadProgress         : typing.ClassVar[Signal] = ... # downloadProgress(qlonglong,qlonglong)
    encrypted                : typing.ClassVar[Signal] = ... # encrypted()
    errorOccurred            : typing.ClassVar[Signal] = ... # errorOccurred(QNetworkReply::NetworkError)
    finished                 : typing.ClassVar[Signal] = ... # finished()
    metaDataChanged          : typing.ClassVar[Signal] = ... # metaDataChanged()
    preSharedKeyAuthenticationRequired: typing.ClassVar[Signal] = ... # preSharedKeyAuthenticationRequired(QSslPreSharedKeyAuthenticator*)
    redirectAllowed          : typing.ClassVar[Signal] = ... # redirectAllowed()
    redirected               : typing.ClassVar[Signal] = ... # redirected(QUrl)
    requestSent              : typing.ClassVar[Signal] = ... # requestSent()
    socketStartedConnecting  : typing.ClassVar[Signal] = ... # socketStartedConnecting()
    sslErrors                : typing.ClassVar[Signal] = ... # sslErrors(QList<QSslError>)
    uploadProgress           : typing.ClassVar[Signal] = ... # uploadProgress(qlonglong,qlonglong)

    class NetworkError(enum.Enum):

        NoError                   = ...  # 0x0
        ConnectionRefusedError    = ...  # 0x1
        RemoteHostClosedError     = ...  # 0x2
        HostNotFoundError         = ...  # 0x3
        TimeoutError              = ...  # 0x4
        OperationCanceledError    = ...  # 0x5
        SslHandshakeFailedError   = ...  # 0x6
        TemporaryNetworkFailureError = ...  # 0x7
        NetworkSessionFailedError = ...  # 0x8
        BackgroundRequestNotAllowedError = ...  # 0x9
        TooManyRedirectsError     = ...  # 0xa
        InsecureRedirectError     = ...  # 0xb
        UnknownNetworkError       = ...  # 0x63
        ProxyConnectionRefusedError = ...  # 0x65
        ProxyConnectionClosedError = ...  # 0x66
        ProxyNotFoundError        = ...  # 0x67
        ProxyTimeoutError         = ...  # 0x68
        ProxyAuthenticationRequiredError = ...  # 0x69
        UnknownProxyError         = ...  # 0xc7
        ContentAccessDenied       = ...  # 0xc9
        ContentOperationNotPermittedError = ...  # 0xca
        ContentNotFoundError      = ...  # 0xcb
        AuthenticationRequiredError = ...  # 0xcc
        ContentReSendError        = ...  # 0xcd
        ContentConflictError      = ...  # 0xce
        ContentGoneError          = ...  # 0xcf
        UnknownContentError       = ...  # 0x12b
        ProtocolUnknownError      = ...  # 0x12d
        ProtocolInvalidOperationError = ...  # 0x12e
        ProtocolFailure           = ...  # 0x18f
        InternalServerError       = ...  # 0x191
        OperationNotImplementedError = ...  # 0x192
        ServiceUnavailableError   = ...  # 0x193
        UnknownServerError        = ...  # 0x1f3


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def abort(self, /) -> None: ...
    def attribute(self, code: PySide6.QtNetwork.QNetworkRequest.Attribute, /) -> typing.Any: ...
    def close(self, /) -> None: ...
    def error(self, /) -> PySide6.QtNetwork.QNetworkReply.NetworkError: ...
    def has_raw_header(self, headerName: str, /) -> bool: ...
    def header(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders, /) -> typing.Any: ...
    def headers(self, /) -> PySide6.QtNetwork.QHttpHeaders: ...
    @typing.overload
    def ignore_ssl_errors(self, /) -> None: ...
    @typing.overload
    def ignore_ssl_errors(self, errors: collections.abc.Sequence[PySide6.QtNetwork.QSslError], /) -> None: ...
    def ignore_ssl_errors_implementation(self, arg__1: collections.abc.Sequence[PySide6.QtNetwork.QSslError], /) -> None: ...
    def is_finished(self, /) -> bool: ...
    def is_running(self, /) -> bool: ...
    def is_sequential(self, /) -> bool: ...
    def manager(self, /) -> PySide6.QtNetwork.QNetworkAccessManager: ...
    def operation(self, /) -> PySide6.QtNetwork.QNetworkAccessManager.Operation: ...
    def raw_header(self, headerName: str, /) -> PySide6.QtCore.QByteArray: ...
    def raw_header_list(self, /) -> typing.List[PySide6.QtCore.QByteArray]: ...
    def raw_header_pairs(self, /) -> typing.List[typing.Tuple[PySide6.QtCore.QByteArray, PySide6.QtCore.QByteArray]]: ...
    def read_buffer_size(self, /) -> int: ...
    def request(self, /) -> PySide6.QtNetwork.QNetworkRequest: ...
    def set_attribute(self, code: PySide6.QtNetwork.QNetworkRequest.Attribute, value: typing.Any, /) -> None: ...
    def set_error(self, errorCode: PySide6.QtNetwork.QNetworkReply.NetworkError, errorString: str, /) -> None: ...
    def set_finished(self, arg__1: bool, /) -> None: ...
    def set_header(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders, value: typing.Any, /) -> None: ...
    def set_headers(self, newHeaders: PySide6.QtNetwork.QHttpHeaders, /) -> None: ...
    def set_operation(self, operation: PySide6.QtNetwork.QNetworkAccessManager.Operation, /) -> None: ...
    def set_raw_header(self, headerName: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, value: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_read_buffer_size(self, size: int, /) -> None: ...
    def set_request(self, request: PySide6.QtNetwork.QNetworkRequest, /) -> None: ...
    def set_ssl_configuration(self, configuration: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...
    def set_ssl_configuration_implementation(self, arg__1: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...
    def set_url(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    def set_well_known_header(self, name: PySide6.QtNetwork.QHttpHeaders.WellKnownHeader, value: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def ssl_configuration(self, /) -> PySide6.QtNetwork.QSslConfiguration: ...
    def ssl_configuration_implementation(self, arg__1: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...
    def url(self, /) -> PySide6.QtCore.QUrl: ...
    def write_data(self, data: bytes | bytearray | memoryview, len: int, /) -> int: ...


class QNetworkRequest(Shiboken.Object):

    class Attribute(enum.Enum):

        HttpStatusCodeAttribute   = ...  # 0x0
        HttpReasonPhraseAttribute = ...  # 0x1
        RedirectionTargetAttribute = ...  # 0x2
        ConnectionEncryptedAttribute = ...  # 0x3
        CacheLoadControlAttribute = ...  # 0x4
        CacheSaveControlAttribute = ...  # 0x5
        SourceIsFromCacheAttribute = ...  # 0x6
        DoNotBufferUploadDataAttribute = ...  # 0x7
        HttpPipeliningAllowedAttribute = ...  # 0x8
        HttpPipeliningWasUsedAttribute = ...  # 0x9
        CustomVerbAttribute       = ...  # 0xa
        CookieLoadControlAttribute = ...  # 0xb
        AuthenticationReuseAttribute = ...  # 0xc
        CookieSaveControlAttribute = ...  # 0xd
        MaximumDownloadBufferSizeAttribute = ...  # 0xe
        DownloadBufferAttribute   = ...  # 0xf
        SynchronousRequestAttribute = ...  # 0x10
        BackgroundRequestAttribute = ...  # 0x11
        EmitAllUploadProgressSignalsAttribute = ...  # 0x12
        Http2AllowedAttribute     = ...  # 0x13
        Http2WasUsedAttribute     = ...  # 0x14
        OriginalContentLengthAttribute = ...  # 0x15
        RedirectPolicyAttribute   = ...  # 0x16
        Http2DirectAttribute      = ...  # 0x17
        ResourceTypeAttribute     = ...  # 0x18
        AutoDeleteReplyOnFinishAttribute = ...  # 0x19
        ConnectionCacheExpiryTimeoutSecondsAttribute = ...  # 0x1a
        Http2CleartextAllowedAttribute = ...  # 0x1b
        UseCredentialsAttribute   = ...  # 0x1c
        FullLocalServerNameAttribute = ...  # 0x1d
        User                      = ...  # 0x3e8
        UserMax                   = ...  # 0x7fff

    class CacheLoadControl(enum.Enum):

        AlwaysNetwork             = ...  # 0x0
        PreferNetwork             = ...  # 0x1
        PreferCache               = ...  # 0x2
        AlwaysCache               = ...  # 0x3

    class KnownHeaders(enum.Enum):

        ContentTypeHeader         = ...  # 0x0
        ContentLengthHeader       = ...  # 0x1
        LocationHeader            = ...  # 0x2
        LastModifiedHeader        = ...  # 0x3
        CookieHeader              = ...  # 0x4
        SetCookieHeader           = ...  # 0x5
        ContentDispositionHeader  = ...  # 0x6
        UserAgentHeader           = ...  # 0x7
        ServerHeader              = ...  # 0x8
        IfModifiedSinceHeader     = ...  # 0x9
        ETagHeader                = ...  # 0xa
        IfMatchHeader             = ...  # 0xb
        IfNoneMatchHeader         = ...  # 0xc
        NumKnownHeaders           = ...  # 0xd

    class LoadControl(enum.Enum):

        Automatic                 = ...  # 0x0
        Manual                    = ...  # 0x1

    class Priority(enum.Enum):

        HighPriority              = ...  # 0x1
        NormalPriority            = ...  # 0x3
        LowPriority               = ...  # 0x5

    class RedirectPolicy(enum.Enum):

        ManualRedirectPolicy      = ...  # 0x0
        NoLessSafeRedirectPolicy  = ...  # 0x1
        SameOriginRedirectPolicy  = ...  # 0x2
        UserVerifiedRedirectPolicy = ...  # 0x3

    class TransferTimeoutConstant(enum.Enum):

        DefaultTransferTimeoutConstant = ...  # 0x7530


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkRequest, /) -> None: ...
    @typing.overload
    def __init__(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtNetwork.QNetworkRequest, /) -> bool: ...
    def __ne__(self, other: PySide6.QtNetwork.QNetworkRequest, /) -> bool: ...
    def attribute(self, code: PySide6.QtNetwork.QNetworkRequest.Attribute, /, defaultValue: typing.Any = ...) -> typing.Any: ...
    def decompressed_safety_check_threshold(self, /) -> int: ...
    def has_raw_header(self, headerName: str, /) -> bool: ...
    def header(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders, /) -> typing.Any: ...
    def headers(self, /) -> PySide6.QtNetwork.QHttpHeaders: ...
    def http1_configuration(self, /) -> PySide6.QtNetwork.QHttp1Configuration: ...
    def http2_configuration(self, /) -> PySide6.QtNetwork.QHttp2Configuration: ...
    def maximum_redirects_allowed(self, /) -> int: ...
    def originating_object(self, /) -> PySide6.QtCore.QObject: ...
    def peer_verify_name(self, /) -> str: ...
    def priority(self, /) -> PySide6.QtNetwork.QNetworkRequest.Priority: ...
    def raw_header(self, headerName: str, /) -> PySide6.QtCore.QByteArray: ...
    def raw_header_list(self, /) -> typing.List[PySide6.QtCore.QByteArray]: ...
    def set_attribute(self, code: PySide6.QtNetwork.QNetworkRequest.Attribute, value: typing.Any, /) -> None: ...
    def set_decompressed_safety_check_threshold(self, threshold: int, /) -> None: ...
    def set_header(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders, value: typing.Any, /) -> None: ...
    def set_headers(self, newHeaders: PySide6.QtNetwork.QHttpHeaders, /) -> None: ...
    def set_http1_configuration(self, configuration: PySide6.QtNetwork.QHttp1Configuration, /) -> None: ...
    def set_http2_configuration(self, configuration: PySide6.QtNetwork.QHttp2Configuration, /) -> None: ...
    def set_maximum_redirects_allowed(self, maximumRedirectsAllowed: int, /) -> None: ...
    def set_originating_object(self, object: PySide6.QtCore.QObject, /) -> None: ...
    def set_peer_verify_name(self, peerName: str, /) -> None: ...
    def set_priority(self, priority: PySide6.QtNetwork.QNetworkRequest.Priority, /) -> None: ...
    def set_raw_header(self, headerName: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, value: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_ssl_configuration(self, configuration: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...
    def set_transfer_timeout(self, timeout: int, /) -> None: ...
    def set_url(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    def ssl_configuration(self, /) -> PySide6.QtNetwork.QSslConfiguration: ...
    def swap(self, other: PySide6.QtNetwork.QNetworkRequest, /) -> None: ...
    def transfer_timeout(self, /) -> int: ...
    def url(self, /) -> PySide6.QtCore.QUrl: ...


class QNetworkRequestFactory(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkRequestFactory, /) -> None: ...
    @typing.overload
    def __init__(self, baseUrl: PySide6.QtCore.QUrl | str, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    @typing.overload
    def attribute(self, attribute: PySide6.QtNetwork.QNetworkRequest.Attribute, /) -> typing.Any: ...
    @typing.overload
    def attribute(self, attribute: PySide6.QtNetwork.QNetworkRequest.Attribute, defaultValue: typing.Any, /) -> typing.Any: ...
    def base_url(self, /) -> PySide6.QtCore.QUrl: ...
    def bearer_token(self, /) -> PySide6.QtCore.QByteArray: ...
    def clear_attribute(self, attribute: PySide6.QtNetwork.QNetworkRequest.Attribute, /) -> None: ...
    def clear_attributes(self, /) -> None: ...
    def clear_bearer_token(self, /) -> None: ...
    def clear_common_headers(self, /) -> None: ...
    def clear_password(self, /) -> None: ...
    def clear_query_parameters(self, /) -> None: ...
    def clear_user_name(self, /) -> None: ...
    def common_headers(self, /) -> PySide6.QtNetwork.QHttpHeaders: ...
    @typing.overload
    def create_request(self, /) -> PySide6.QtNetwork.QNetworkRequest: ...
    @typing.overload
    def create_request(self, query: PySide6.QtCore.QUrlQuery, /) -> PySide6.QtNetwork.QNetworkRequest: ...
    @typing.overload
    def create_request(self, path: str, /) -> PySide6.QtNetwork.QNetworkRequest: ...
    @typing.overload
    def create_request(self, path: str, query: PySide6.QtCore.QUrlQuery, /) -> PySide6.QtNetwork.QNetworkRequest: ...
    def password(self, /) -> str: ...
    def priority(self, /) -> PySide6.QtNetwork.QNetworkRequest.Priority: ...
    def query_parameters(self, /) -> PySide6.QtCore.QUrlQuery: ...
    def set_attribute(self, attribute: PySide6.QtNetwork.QNetworkRequest.Attribute, value: typing.Any, /) -> None: ...
    def set_base_url(self, url: PySide6.QtCore.QUrl | str, /) -> None: ...
    def set_bearer_token(self, token: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_common_headers(self, headers: PySide6.QtNetwork.QHttpHeaders, /) -> None: ...
    def set_password(self, password: str, /) -> None: ...
    def set_priority(self, priority: PySide6.QtNetwork.QNetworkRequest.Priority, /) -> None: ...
    def set_query_parameters(self, query: PySide6.QtCore.QUrlQuery, /) -> None: ...
    def set_ssl_configuration(self, configuration: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...
    def set_user_name(self, userName: str, /) -> None: ...
    def ssl_configuration(self, /) -> PySide6.QtNetwork.QSslConfiguration: ...
    def swap(self, other: PySide6.QtNetwork.QNetworkRequestFactory, /) -> None: ...
    def user_name(self, /) -> str: ...


class QOcspCertificateStatus(enum.Enum):

    Good                      = ...  # 0x0
    Revoked                   = ...  # 0x1
    Unknown                   = ...  # 0x2


class QOcspResponse(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QOcspResponse, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtNetwork.QOcspResponse, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __ne__(self, rhs: PySide6.QtNetwork.QOcspResponse, /) -> bool: ...
    def certificate_status(self, /) -> PySide6.QtNetwork.QOcspCertificateStatus: ...
    def responder(self, /) -> PySide6.QtNetwork.QSslCertificate: ...
    def revocation_reason(self, /) -> PySide6.QtNetwork.QOcspRevocationReason: ...
    def subject(self, /) -> PySide6.QtNetwork.QSslCertificate: ...
    def swap(self, other: PySide6.QtNetwork.QOcspResponse, /) -> None: ...


class QOcspRevocationReason(enum.Enum):

    None_                     = ...  # -1
    Unspecified               = ...  # 0x0
    KeyCompromise             = ...  # 0x1
    CACompromise              = ...  # 0x2
    AffiliationChanged        = ...  # 0x3
    Superseded                = ...  # 0x4
    CessationOfOperation      = ...  # 0x5
    CertificateHold           = ...  # 0x6
    RemoveFromCRL             = ...  # 0x7


class QPasswordDigestor(Shiboken.Object):
    @staticmethod
    def derive_key_pbkdf1(algorithm: PySide6.QtCore.QCryptographicHash.Algorithm, password: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, salt: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, iterations: int, dkLen: int, /) -> PySide6.QtCore.QByteArray: ...
    @staticmethod
    def derive_key_pbkdf2(algorithm: PySide6.QtCore.QCryptographicHash.Algorithm, password: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, salt: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, iterations: int, dkLen: int, /) -> PySide6.QtCore.QByteArray: ...


class QRestAccessManager(PySide6.QtCore.QObject):

    def __init__(self, manager: PySide6.QtNetwork.QNetworkAccessManager, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    @typing.overload
    def delete_resource(self, request: PySide6.QtNetwork.QNetworkRequest, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def delete_resource(self, request: PySide6.QtNetwork.QNetworkRequest, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def get(self, request: PySide6.QtNetwork.QNetworkRequest, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def get(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def get(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def get(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QJsonDocument, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def get(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QJsonDocument, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def get(self, request: PySide6.QtNetwork.QNetworkRequest, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def get(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def get(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def head(self, request: PySide6.QtNetwork.QNetworkRequest, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def head(self, request: PySide6.QtNetwork.QNetworkRequest, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    def network_access_manager(self, /) -> PySide6.QtNetwork.QNetworkAccessManager: ...
    @typing.overload
    def patch(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def patch(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def patch(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QJsonDocument, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def patch(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QJsonDocument, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def patch(self, request: PySide6.QtNetwork.QNetworkRequest, data: typing.Dict[str, typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def patch(self, request: PySide6.QtNetwork.QNetworkRequest, data: typing.Dict[str, typing.Any], context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def patch(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def patch(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtNetwork.QHttpMultiPart, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtNetwork.QHttpMultiPart, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QJsonDocument, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QJsonDocument, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: typing.Dict[str, typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: typing.Dict[str, typing.Any], context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtNetwork.QHttpMultiPart, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtNetwork.QHttpMultiPart, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QJsonDocument, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QJsonDocument, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: typing.Dict[str, typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: typing.Dict[str, typing.Any], context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def send_custom_request(self, request: PySide6.QtNetwork.QNetworkRequest, method: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, data: PySide6.QtCore.QIODevice, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def send_custom_request(self, request: PySide6.QtNetwork.QNetworkRequest, method: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, data: PySide6.QtCore.QIODevice, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def send_custom_request(self, request: PySide6.QtNetwork.QNetworkRequest, method: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, data: PySide6.QtNetwork.QHttpMultiPart, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def send_custom_request(self, request: PySide6.QtNetwork.QNetworkRequest, method: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, data: PySide6.QtNetwork.QHttpMultiPart, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def send_custom_request(self, request: PySide6.QtNetwork.QNetworkRequest, method: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtNetwork.QNetworkReply: ...
    @typing.overload
    def send_custom_request(self, request: PySide6.QtNetwork.QNetworkRequest, method: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, context: PySide6.QtCore.QObject, slot: collections.abc.Callable[..., typing.Any], /) -> PySide6.QtNetwork.QNetworkReply: ...


class QRestReply(Shiboken.Object):

    def __init__(self, reply: PySide6.QtNetwork.QNetworkReply, /) -> None: ...

    def error(self, /) -> PySide6.QtNetwork.QNetworkReply.NetworkError: ...
    def error_string(self, /) -> str: ...
    def has_error(self, /) -> bool: ...
    def http_status(self, /) -> int: ...
    def is_http_status_success(self, /) -> bool: ...
    def is_success(self, /) -> bool: ...
    def network_reply(self, /) -> PySide6.QtNetwork.QNetworkReply: ...
    def read_body(self, /) -> PySide6.QtCore.QByteArray: ...
    def read_json(self, /) -> typing.Tuple[typing.Optional[PySide6.QtCore.QJsonDocument], PySide6.QtCore.QJsonParseError]: ...
    def read_text(self, /) -> str: ...
    def swap(self, other: PySide6.QtNetwork.QRestReply, /) -> None: ...


class QSsl(Shiboken.Object):

    class AlertLevel(enum.Enum):

        Warning                   = ...  # 0x0
        Fatal                     = ...  # 0x1
        Unknown                   = ...  # 0x2

    class AlertType(enum.Enum):

        CloseNotify               = ...  # 0x0
        UnexpectedMessage         = ...  # 0xa
        BadRecordMac              = ...  # 0x14
        RecordOverflow            = ...  # 0x16
        DecompressionFailure      = ...  # 0x1e
        HandshakeFailure          = ...  # 0x28
        NoCertificate             = ...  # 0x29
        BadCertificate            = ...  # 0x2a
        UnsupportedCertificate    = ...  # 0x2b
        CertificateRevoked        = ...  # 0x2c
        CertificateExpired        = ...  # 0x2d
        CertificateUnknown        = ...  # 0x2e
        IllegalParameter          = ...  # 0x2f
        UnknownCa                 = ...  # 0x30
        AccessDenied              = ...  # 0x31
        DecodeError               = ...  # 0x32
        DecryptError              = ...  # 0x33
        ExportRestriction         = ...  # 0x3c
        ProtocolVersion           = ...  # 0x46
        InsufficientSecurity      = ...  # 0x47
        InternalError             = ...  # 0x50
        InappropriateFallback     = ...  # 0x56
        UserCancelled             = ...  # 0x5a
        NoRenegotiation           = ...  # 0x64
        MissingExtension          = ...  # 0x6d
        UnsupportedExtension      = ...  # 0x6e
        CertificateUnobtainable   = ...  # 0x6f
        UnrecognizedName          = ...  # 0x70
        BadCertificateStatusResponse = ...  # 0x71
        BadCertificateHashValue   = ...  # 0x72
        UnknownPskIdentity        = ...  # 0x73
        CertificateRequired       = ...  # 0x74
        NoApplicationProtocol     = ...  # 0x78
        UnknownAlertMessage       = ...  # 0xff

    class AlternativeNameEntryType(enum.Enum):

        EmailEntry                = ...  # 0x0
        DnsEntry                  = ...  # 0x1
        IpAddressEntry            = ...  # 0x2

    class EncodingFormat(enum.Enum):

        Pem                       = ...  # 0x0
        Der                       = ...  # 0x1

    class ImplementedClass(enum.Enum):

        Key                       = ...  # 0x0
        Certificate               = ...  # 0x1
        Socket                    = ...  # 0x2
        DiffieHellman             = ...  # 0x3
        EllipticCurve             = ...  # 0x4
        Dtls                      = ...  # 0x5
        DtlsCookie                = ...  # 0x6

    class KeyAlgorithm(enum.Enum):

        Opaque                    = ...  # 0x0
        Rsa                       = ...  # 0x1
        Dsa                       = ...  # 0x2
        Ec                        = ...  # 0x3
        Dh                        = ...  # 0x4

    class KeyType(enum.Enum):

        PrivateKey                = ...  # 0x0
        PublicKey                 = ...  # 0x1

    class SslOption(enum.Flag):

        SslOptionDisableEmptyFragments = ...  # 0x1
        SslOptionDisableSessionTickets = ...  # 0x2
        SslOptionDisableCompression = ...  # 0x4
        SslOptionDisableServerNameIndication = ...  # 0x8
        SslOptionDisableLegacyRenegotiation = ...  # 0x10
        SslOptionDisableSessionSharing = ...  # 0x20
        SslOptionDisableSessionPersistence = ...  # 0x40
        SslOptionDisableServerCipherPreference = ...  # 0x80

    class SslProtocol(enum.Enum):

        UnknownProtocol           = ...  # -1
        TlsV1_0                   = ...  # 0x0
        TlsV1_1                   = ...  # 0x1
        TlsV1_2                   = ...  # 0x2
        AnyProtocol               = ...  # 0x3
        SecureProtocols           = ...  # 0x4
        TlsV1_0OrLater            = ...  # 0x5
        TlsV1_1OrLater            = ...  # 0x6
        TlsV1_2OrLater            = ...  # 0x7
        DtlsV1_0                  = ...  # 0x8
        DtlsV1_0OrLater           = ...  # 0x9
        DtlsV1_2                  = ...  # 0xa
        DtlsV1_2OrLater           = ...  # 0xb
        TlsV1_3                   = ...  # 0xc
        TlsV1_3OrLater            = ...  # 0xd

    class SupportedFeature(enum.Enum):

        CertificateVerification   = ...  # 0x0
        ClientSideAlpn            = ...  # 0x1
        ServerSideAlpn            = ...  # 0x2
        Ocsp                      = ...  # 0x3
        Psk                       = ...  # 0x4
        SessionTicket             = ...  # 0x5
        Alerts                    = ...  # 0x6


class QSslCertificate(Shiboken.Object):

    class PatternSyntax(enum.Enum):

        RegularExpression         = ...  # 0x0
        Wildcard                  = ...  # 0x1
        FixedString               = ...  # 0x2

    class SubjectInfo(enum.Enum):

        Organization              = ...  # 0x0
        CommonName                = ...  # 0x1
        LocalityName              = ...  # 0x2
        OrganizationalUnitName    = ...  # 0x3
        CountryName               = ...  # 0x4
        StateOrProvinceName       = ...  # 0x5
        DistinguishedNameQualifier = ...  # 0x6
        SerialNumber              = ...  # 0x7
        EmailAddress              = ...  # 0x8


    @typing.overload
    def __init__(self, device: PySide6.QtCore.QIODevice, /, format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QSslCertificate, /) -> None: ...
    @typing.overload
    def __init__(self, /, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ..., format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtNetwork.QSslCertificate | PySide6.QtCore.QIODevice, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __ne__(self, other: PySide6.QtNetwork.QSslCertificate | PySide6.QtCore.QIODevice, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def clear(self, /) -> None: ...
    def digest(self, /, algorithm: PySide6.QtCore.QCryptographicHash.Algorithm = ...) -> PySide6.QtCore.QByteArray: ...
    def effective_date(self, /) -> PySide6.QtCore.QDateTime: ...
    def expiry_date(self, /) -> PySide6.QtCore.QDateTime: ...
    def extensions(self, /) -> typing.List[PySide6.QtNetwork.QSslCertificateExtension]: ...
    @staticmethod
    def from_data(data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /, format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> typing.List[PySide6.QtNetwork.QSslCertificate]: ...
    @staticmethod
    def from_device(device: PySide6.QtCore.QIODevice, /, format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> typing.List[PySide6.QtNetwork.QSslCertificate]: ...
    @staticmethod
    def from_path(path: str, /, format: PySide6.QtNetwork.QSsl.EncodingFormat = ..., syntax: PySide6.QtNetwork.QSslCertificate.PatternSyntax = ...) -> typing.List[PySide6.QtNetwork.QSslCertificate]: ...
    def handle(self, /) -> int: ...
    @staticmethod
    def import_pkcs12(device: PySide6.QtCore.QIODevice, key: PySide6.QtNetwork.QSslKey | int, cert: PySide6.QtNetwork.QSslCertificate | PySide6.QtCore.QIODevice, /, caCertificates: collections.abc.Sequence[PySide6.QtNetwork.QSslCertificate] | None = ..., passPhrase: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> bool: ...
    def is_blacklisted(self, /) -> bool: ...
    def is_null(self, /) -> bool: ...
    def is_self_signed(self, /) -> bool: ...
    def issuer_display_name(self, /) -> str: ...
    @typing.overload
    def issuer_info(self, info: PySide6.QtNetwork.QSslCertificate.SubjectInfo, /) -> typing.List[str]: ...
    @typing.overload
    def issuer_info(self, attribute: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> typing.List[str]: ...
    def issuer_info_attributes(self, /) -> typing.List[PySide6.QtCore.QByteArray]: ...
    def public_key(self, /) -> PySide6.QtNetwork.QSslKey: ...
    def serial_number(self, /) -> PySide6.QtCore.QByteArray: ...
    def subject_alternative_names(self, /) -> typing.OrderedDict[PySide6.QtNetwork.QSsl.AlternativeNameEntryType, typing.List[str]]: ...
    def subject_display_name(self, /) -> str: ...
    @typing.overload
    def subject_info(self, info: PySide6.QtNetwork.QSslCertificate.SubjectInfo, /) -> typing.List[str]: ...
    @typing.overload
    def subject_info(self, attribute: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> typing.List[str]: ...
    def subject_info_attributes(self, /) -> typing.List[PySide6.QtCore.QByteArray]: ...
    def swap(self, other: PySide6.QtNetwork.QSslCertificate | PySide6.QtCore.QIODevice, /) -> None: ...
    def to_der(self, /) -> PySide6.QtCore.QByteArray: ...
    def to_pem(self, /) -> PySide6.QtCore.QByteArray: ...
    def to_text(self, /) -> str: ...
    @staticmethod
    def verify(certificateChain: collections.abc.Sequence[PySide6.QtNetwork.QSslCertificate], /, hostName: str = ...) -> typing.List[PySide6.QtNetwork.QSslError]: ...
    def version(self, /) -> PySide6.QtCore.QByteArray: ...


class QSslCertificateExtension(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QSslCertificateExtension, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def is_critical(self, /) -> bool: ...
    def is_supported(self, /) -> bool: ...
    def name(self, /) -> str: ...
    def oid(self, /) -> str: ...
    def swap(self, other: PySide6.QtNetwork.QSslCertificateExtension, /) -> None: ...
    def value(self, /) -> typing.Any: ...


class QSslCipher(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QSslCipher, /) -> None: ...
    @typing.overload
    def __init__(self, name: str, /) -> None: ...
    @typing.overload
    def __init__(self, name: str, protocol: PySide6.QtNetwork.QSsl.SslProtocol, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtNetwork.QSslCipher, /) -> bool: ...
    def __ne__(self, other: PySide6.QtNetwork.QSslCipher, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def authentication_method(self, /) -> str: ...
    def encryption_method(self, /) -> str: ...
    def is_null(self, /) -> bool: ...
    def key_exchange_method(self, /) -> str: ...
    def name(self, /) -> str: ...
    def protocol(self, /) -> PySide6.QtNetwork.QSsl.SslProtocol: ...
    def protocol_string(self, /) -> str: ...
    def supported_bits(self, /) -> int: ...
    def swap(self, other: PySide6.QtNetwork.QSslCipher, /) -> None: ...
    def used_bits(self, /) -> int: ...


class QSslConfiguration(Shiboken.Object):

    class NextProtocolNegotiationStatus(enum.Enum):

        NextProtocolNegotiationNone = ...  # 0x0
        NextProtocolNegotiationNegotiated = ...  # 0x1
        NextProtocolNegotiationUnsupported = ...  # 0x2


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtNetwork.QSslConfiguration, /) -> bool: ...
    def __ne__(self, other: PySide6.QtNetwork.QSslConfiguration, /) -> bool: ...
    def add_ca_certificate(self, certificate: PySide6.QtNetwork.QSslCertificate | PySide6.QtCore.QIODevice, /) -> None: ...
    @typing.overload
    def add_ca_certificates(self, path: str, /, format: PySide6.QtNetwork.QSsl.EncodingFormat = ..., syntax: PySide6.QtNetwork.QSslCertificate.PatternSyntax = ...) -> bool: ...
    @typing.overload
    def add_ca_certificates(self, certificates: collections.abc.Sequence[PySide6.QtNetwork.QSslCertificate], /) -> None: ...
    def allowed_next_protocols(self, /) -> typing.List[PySide6.QtCore.QByteArray]: ...
    def backend_configuration(self, /) -> typing.Dict[PySide6.QtCore.QByteArray, typing.Any]: ...
    def ca_certificates(self, /) -> typing.List[PySide6.QtNetwork.QSslCertificate]: ...
    def ciphers(self, /) -> typing.List[PySide6.QtNetwork.QSslCipher]: ...
    @staticmethod
    def default_configuration() -> PySide6.QtNetwork.QSslConfiguration: ...
    @staticmethod
    def default_dtls_configuration() -> PySide6.QtNetwork.QSslConfiguration: ...
    def diffie_hellman_parameters(self, /) -> PySide6.QtNetwork.QSslDiffieHellmanParameters: ...
    def dtls_cookie_verification_enabled(self, /) -> bool: ...
    def elliptic_curves(self, /) -> typing.List[PySide6.QtNetwork.QSslEllipticCurve]: ...
    def ephemeral_server_key(self, /) -> PySide6.QtNetwork.QSslKey: ...
    def handshake_must_interrupt_on_error(self, /) -> bool: ...
    def is_null(self, /) -> bool: ...
    def local_certificate(self, /) -> PySide6.QtNetwork.QSslCertificate: ...
    def local_certificate_chain(self, /) -> typing.List[PySide6.QtNetwork.QSslCertificate]: ...
    def missing_certificate_is_fatal(self, /) -> bool: ...
    def next_negotiated_protocol(self, /) -> PySide6.QtCore.QByteArray: ...
    def next_protocol_negotiation_status(self, /) -> PySide6.QtNetwork.QSslConfiguration.NextProtocolNegotiationStatus: ...
    def ocsp_stapling_enabled(self, /) -> bool: ...
    def peer_certificate(self, /) -> PySide6.QtNetwork.QSslCertificate: ...
    def peer_certificate_chain(self, /) -> typing.List[PySide6.QtNetwork.QSslCertificate]: ...
    def peer_verify_depth(self, /) -> int: ...
    def peer_verify_mode(self, /) -> PySide6.QtNetwork.QSslSocket.PeerVerifyMode: ...
    def pre_shared_key_identity_hint(self, /) -> PySide6.QtCore.QByteArray: ...
    def private_key(self, /) -> PySide6.QtNetwork.QSslKey: ...
    def protocol(self, /) -> PySide6.QtNetwork.QSsl.SslProtocol: ...
    def session_cipher(self, /) -> PySide6.QtNetwork.QSslCipher: ...
    def session_protocol(self, /) -> PySide6.QtNetwork.QSsl.SslProtocol: ...
    def session_ticket(self, /) -> PySide6.QtCore.QByteArray: ...
    def session_ticket_life_time_hint(self, /) -> int: ...
    def set_allowed_next_protocols(self, protocols: collections.abc.Sequence[PySide6.QtCore.QByteArray], /) -> None: ...
    def set_backend_configuration(self, /, backendConfiguration: typing.Dict[PySide6.QtCore.QByteArray, typing.Any] = ...) -> None: ...
    def set_backend_configuration_option(self, name: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, value: typing.Any, /) -> None: ...
    def set_ca_certificates(self, certificates: collections.abc.Sequence[PySide6.QtNetwork.QSslCertificate], /) -> None: ...
    @typing.overload
    def set_ciphers(self, ciphers: str, /) -> None: ...
    @typing.overload
    def set_ciphers(self, ciphers: collections.abc.Sequence[PySide6.QtNetwork.QSslCipher], /) -> None: ...
    @staticmethod
    def set_default_configuration(configuration: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...
    @staticmethod
    def set_default_dtls_configuration(configuration: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...
    def set_diffie_hellman_parameters(self, dhparams: PySide6.QtNetwork.QSslDiffieHellmanParameters, /) -> None: ...
    def set_dtls_cookie_verification_enabled(self, enable: bool, /) -> None: ...
    def set_elliptic_curves(self, curves: collections.abc.Sequence[PySide6.QtNetwork.QSslEllipticCurve], /) -> None: ...
    def set_handshake_must_interrupt_on_error(self, interrupt: bool, /) -> None: ...
    def set_local_certificate(self, certificate: PySide6.QtNetwork.QSslCertificate | PySide6.QtCore.QIODevice, /) -> None: ...
    def set_local_certificate_chain(self, localChain: collections.abc.Sequence[PySide6.QtNetwork.QSslCertificate], /) -> None: ...
    def set_missing_certificate_is_fatal(self, cannotRecover: bool, /) -> None: ...
    def set_ocsp_stapling_enabled(self, enable: bool, /) -> None: ...
    def set_peer_verify_depth(self, depth: int, /) -> None: ...
    def set_peer_verify_mode(self, mode: PySide6.QtNetwork.QSslSocket.PeerVerifyMode, /) -> None: ...
    def set_pre_shared_key_identity_hint(self, hint: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_private_key(self, key: PySide6.QtNetwork.QSslKey | int, /) -> None: ...
    def set_protocol(self, protocol: PySide6.QtNetwork.QSsl.SslProtocol, /) -> None: ...
    def set_session_ticket(self, sessionTicket: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_ssl_option(self, option: PySide6.QtNetwork.QSsl.SslOption, on: bool, /) -> None: ...
    @staticmethod
    def supported_ciphers() -> typing.List[PySide6.QtNetwork.QSslCipher]: ...
    @staticmethod
    def supported_elliptic_curves() -> typing.List[PySide6.QtNetwork.QSslEllipticCurve]: ...
    def swap(self, other: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...
    @staticmethod
    def system_ca_certificates() -> typing.List[PySide6.QtNetwork.QSslCertificate]: ...
    def test_ssl_option(self, option: PySide6.QtNetwork.QSsl.SslOption, /) -> bool: ...


class QSslDiffieHellmanParameters(Shiboken.Object):

    class Error(enum.Enum):

        NoError                   = ...  # 0x0
        InvalidInputDataError     = ...  # 0x1
        UnsafeParametersError     = ...  # 0x2


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QSslDiffieHellmanParameters, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtNetwork.QSslDiffieHellmanParameters, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __ne__(self, rhs: PySide6.QtNetwork.QSslDiffieHellmanParameters, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    @staticmethod
    def default_parameters() -> PySide6.QtNetwork.QSslDiffieHellmanParameters: ...
    def error(self, /) -> PySide6.QtNetwork.QSslDiffieHellmanParameters.Error: ...
    def error_string(self, /) -> str: ...
    @typing.overload
    @staticmethod
    def from_encoded(device: PySide6.QtCore.QIODevice, /, format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> PySide6.QtNetwork.QSslDiffieHellmanParameters: ...
    @typing.overload
    @staticmethod
    def from_encoded(encoded: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /, format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> PySide6.QtNetwork.QSslDiffieHellmanParameters: ...
    def is_empty(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def swap(self, other: PySide6.QtNetwork.QSslDiffieHellmanParameters, /) -> None: ...


class QSslEllipticCurve(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QSslEllipticCurve: PySide6.QtNetwork.QSslEllipticCurve, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtNetwork.QSslEllipticCurve, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __ne__(self, rhs: PySide6.QtNetwork.QSslEllipticCurve, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    @staticmethod
    def from_long_name(name: str, /) -> PySide6.QtNetwork.QSslEllipticCurve: ...
    @staticmethod
    def from_short_name(name: str, /) -> PySide6.QtNetwork.QSslEllipticCurve: ...
    def is_tls_named_curve(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def long_name(self, /) -> str: ...
    def short_name(self, /) -> str: ...


class QSslError(Shiboken.Object):

    class SslError(enum.Enum):

        UnspecifiedError          = ...  # -1
        NoError                   = ...  # 0x0
        UnableToGetIssuerCertificate = ...  # 0x1
        UnableToDecryptCertificateSignature = ...  # 0x2
        UnableToDecodeIssuerPublicKey = ...  # 0x3
        CertificateSignatureFailed = ...  # 0x4
        CertificateNotYetValid    = ...  # 0x5
        CertificateExpired        = ...  # 0x6
        InvalidNotBeforeField     = ...  # 0x7
        InvalidNotAfterField      = ...  # 0x8
        SelfSignedCertificate     = ...  # 0x9
        SelfSignedCertificateInChain = ...  # 0xa
        UnableToGetLocalIssuerCertificate = ...  # 0xb
        UnableToVerifyFirstCertificate = ...  # 0xc
        CertificateRevoked        = ...  # 0xd
        InvalidCaCertificate      = ...  # 0xe
        PathLengthExceeded        = ...  # 0xf
        InvalidPurpose            = ...  # 0x10
        CertificateUntrusted      = ...  # 0x11
        CertificateRejected       = ...  # 0x12
        SubjectIssuerMismatch     = ...  # 0x13
        AuthorityIssuerSerialNumberMismatch = ...  # 0x14
        NoPeerCertificate         = ...  # 0x15
        HostNameMismatch          = ...  # 0x16
        NoSslSupport              = ...  # 0x17
        CertificateBlacklisted    = ...  # 0x18
        CertificateStatusUnknown  = ...  # 0x19
        OcspNoResponseFound       = ...  # 0x1a
        OcspMalformedRequest      = ...  # 0x1b
        OcspMalformedResponse     = ...  # 0x1c
        OcspInternalError         = ...  # 0x1d
        OcspTryLater              = ...  # 0x1e
        OcspSigRequred            = ...  # 0x1f
        OcspUnauthorized          = ...  # 0x20
        OcspResponseCannotBeTrusted = ...  # 0x21
        OcspResponseCertIdUnknown = ...  # 0x22
        OcspResponseExpired       = ...  # 0x23
        OcspStatusUnknown         = ...  # 0x24


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QSslError, /) -> None: ...
    @typing.overload
    def __init__(self, error: PySide6.QtNetwork.QSslError.SslError, /) -> None: ...
    @typing.overload
    def __init__(self, error: PySide6.QtNetwork.QSslError.SslError, certificate: PySide6.QtNetwork.QSslCertificate | PySide6.QtCore.QIODevice, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtNetwork.QSslError, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __ne__(self, other: PySide6.QtNetwork.QSslError, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def certificate(self, /) -> PySide6.QtNetwork.QSslCertificate: ...
    def error(self, /) -> PySide6.QtNetwork.QSslError.SslError: ...
    def error_string(self, /) -> str: ...
    def swap(self, other: PySide6.QtNetwork.QSslError, /) -> None: ...


class QSslKey(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, device: PySide6.QtCore.QIODevice, algorithm: PySide6.QtNetwork.QSsl.KeyAlgorithm, /, format: PySide6.QtNetwork.QSsl.EncodingFormat = ..., type: PySide6.QtNetwork.QSsl.KeyType = ..., passPhrase: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtNetwork.QSslKey, /) -> None: ...
    @typing.overload
    def __init__(self, encoded: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, algorithm: PySide6.QtNetwork.QSsl.KeyAlgorithm, /, format: PySide6.QtNetwork.QSsl.EncodingFormat = ..., type: PySide6.QtNetwork.QSsl.KeyType = ..., passPhrase: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> None: ...
    @typing.overload
    def __init__(self, handle: int, /, type: PySide6.QtNetwork.QSsl.KeyType = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, key: PySide6.QtNetwork.QSslKey | int, /) -> bool: ...
    def __ne__(self, key: PySide6.QtNetwork.QSslKey | int, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def algorithm(self, /) -> PySide6.QtNetwork.QSsl.KeyAlgorithm: ...
    def clear(self, /) -> None: ...
    def handle(self, /) -> int: ...
    def is_null(self, /) -> bool: ...
    def length(self, /) -> int: ...
    def swap(self, other: PySide6.QtNetwork.QSslKey | int, /) -> None: ...
    def to_der(self, /, passPhrase: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> PySide6.QtCore.QByteArray: ...
    def to_pem(self, /, passPhrase: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> PySide6.QtCore.QByteArray: ...
    def type(self, /) -> PySide6.QtNetwork.QSsl.KeyType: ...


class QSslPreSharedKeyAuthenticator(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, authenticator: PySide6.QtNetwork.QSslPreSharedKeyAuthenticator, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtNetwork.QSslPreSharedKeyAuthenticator, /) -> bool: ...
    def __ne__(self, rhs: PySide6.QtNetwork.QSslPreSharedKeyAuthenticator, /) -> bool: ...
    def identity(self, /) -> PySide6.QtCore.QByteArray: ...
    def identity_hint(self, /) -> PySide6.QtCore.QByteArray: ...
    def maximum_identity_length(self, /) -> int: ...
    def maximum_pre_shared_key_length(self, /) -> int: ...
    def pre_shared_key(self, /) -> PySide6.QtCore.QByteArray: ...
    def set_identity(self, identity: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_pre_shared_key(self, preSharedKey: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def swap(self, other: PySide6.QtNetwork.QSslPreSharedKeyAuthenticator, /) -> None: ...


class QSslServer(PySide6.QtNetwork.QTcpServer):

    alertReceived            : typing.ClassVar[Signal] = ... # alertReceived(QSslSocket*,QSsl::AlertLevel,QSsl::AlertType,QString)
    alertSent                : typing.ClassVar[Signal] = ... # alertSent(QSslSocket*,QSsl::AlertLevel,QSsl::AlertType,QString)
    errorOccurred            : typing.ClassVar[Signal] = ... # errorOccurred(QSslSocket*,QAbstractSocket::SocketError)
    handshakeInterruptedOnError: typing.ClassVar[Signal] = ... # handshakeInterruptedOnError(QSslSocket*,QSslError)
    peerVerifyError          : typing.ClassVar[Signal] = ... # peerVerifyError(QSslSocket*,QSslError)
    preSharedKeyAuthenticationRequired: typing.ClassVar[Signal] = ... # preSharedKeyAuthenticationRequired(QSslSocket*,QSslPreSharedKeyAuthenticator*)
    sslErrors                : typing.ClassVar[Signal] = ... # sslErrors(QSslSocket*,QList<QSslError>)
    startedEncryptionHandshake: typing.ClassVar[Signal] = ... # startedEncryptionHandshake(QSslSocket*)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def handshake_timeout(self, /) -> int: ...
    def incoming_connection(self, socket: int, /) -> None: ...
    def set_handshake_timeout(self, timeout: int, /) -> None: ...
    def set_ssl_configuration(self, sslConfiguration: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...
    def ssl_configuration(self, /) -> PySide6.QtNetwork.QSslConfiguration: ...


class QSslSocket(PySide6.QtNetwork.QTcpSocket):

    alertReceived            : typing.ClassVar[Signal] = ... # alertReceived(QSsl::AlertLevel,QSsl::AlertType,QString)
    alertSent                : typing.ClassVar[Signal] = ... # alertSent(QSsl::AlertLevel,QSsl::AlertType,QString)
    encrypted                : typing.ClassVar[Signal] = ... # encrypted()
    encryptedBytesWritten    : typing.ClassVar[Signal] = ... # encryptedBytesWritten(qlonglong)
    handshakeInterruptedOnError: typing.ClassVar[Signal] = ... # handshakeInterruptedOnError(QSslError)
    modeChanged              : typing.ClassVar[Signal] = ... # modeChanged(QSslSocket::SslMode)
    newSessionTicketReceived : typing.ClassVar[Signal] = ... # newSessionTicketReceived()
    peerVerifyError          : typing.ClassVar[Signal] = ... # peerVerifyError(QSslError)
    preSharedKeyAuthenticationRequired: typing.ClassVar[Signal] = ... # preSharedKeyAuthenticationRequired(QSslPreSharedKeyAuthenticator*)
    sslErrors                : typing.ClassVar[Signal] = ... # sslErrors(QList<QSslError>)

    class PeerVerifyMode(enum.Enum):

        VerifyNone                = ...  # 0x0
        QueryPeer                 = ...  # 0x1
        VerifyPeer                = ...  # 0x2
        AutoVerifyPeer            = ...  # 0x3

    class SslMode(enum.Enum):

        UnencryptedMode           = ...  # 0x0
        SslClientMode             = ...  # 0x1
        SslServerMode             = ...  # 0x2


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    @staticmethod
    def active_backend() -> str: ...
    def at_end(self, /) -> bool: ...
    @staticmethod
    def available_backends() -> typing.List[str]: ...
    def bytes_available(self, /) -> int: ...
    def bytes_to_write(self, /) -> int: ...
    def can_read_line(self, /) -> bool: ...
    def close(self, /) -> None: ...
    @typing.overload
    def connect_to_host(self, hostName: str, port: int, /, openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ..., protocol: PySide6.QtNetwork.QAbstractSocket.NetworkLayerProtocol = ...) -> None: ...
    @typing.overload
    def connect_to_host(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, port: int, /, mode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> None: ...
    @typing.overload
    def connect_to_host_encrypted(self, hostName: str, port: int, /, mode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ..., protocol: PySide6.QtNetwork.QAbstractSocket.NetworkLayerProtocol = ...) -> None: ...
    @typing.overload
    def connect_to_host_encrypted(self, hostName: str, port: int, sslPeerName: str, /, mode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ..., protocol: PySide6.QtNetwork.QAbstractSocket.NetworkLayerProtocol = ...) -> None: ...
    def continue_interrupted_handshake(self, /) -> None: ...
    def disconnect_from_host(self, /) -> None: ...
    def encrypted_bytes_available(self, /) -> int: ...
    def encrypted_bytes_to_write(self, /) -> int: ...
    @typing.overload
    def ignore_ssl_errors(self, /) -> None: ...
    @typing.overload
    def ignore_ssl_errors(self, errors: collections.abc.Sequence[PySide6.QtNetwork.QSslError], /) -> None: ...
    @staticmethod
    def implemented_classes(backendName: str = ...) -> typing.List[PySide6.QtNetwork.QSsl.ImplementedClass]: ...
    @staticmethod
    def is_class_implemented(cl: PySide6.QtNetwork.QSsl.ImplementedClass, /, backendName: str = ...) -> bool: ...
    def is_encrypted(self, /) -> bool: ...
    @staticmethod
    def is_feature_supported(feat: PySide6.QtNetwork.QSsl.SupportedFeature, /, backendName: str = ...) -> bool: ...
    @staticmethod
    def is_protocol_supported(protocol: PySide6.QtNetwork.QSsl.SslProtocol, /, backendName: str = ...) -> bool: ...
    def local_certificate(self, /) -> PySide6.QtNetwork.QSslCertificate: ...
    def local_certificate_chain(self, /) -> typing.List[PySide6.QtNetwork.QSslCertificate]: ...
    def mode(self, /) -> PySide6.QtNetwork.QSslSocket.SslMode: ...
    def ocsp_responses(self, /) -> typing.List[PySide6.QtNetwork.QOcspResponse]: ...
    def peer_certificate(self, /) -> PySide6.QtNetwork.QSslCertificate: ...
    def peer_certificate_chain(self, /) -> typing.List[PySide6.QtNetwork.QSslCertificate]: ...
    def peer_verify_depth(self, /) -> int: ...
    def peer_verify_mode(self, /) -> PySide6.QtNetwork.QSslSocket.PeerVerifyMode: ...
    def peer_verify_name(self, /) -> str: ...
    def private_key(self, /) -> PySide6.QtNetwork.QSslKey: ...
    def protocol(self, /) -> PySide6.QtNetwork.QSsl.SslProtocol: ...
    def read_data(self, maxlen: int, /) -> object: ...
    def resume(self, /) -> None: ...
    def session_cipher(self, /) -> PySide6.QtNetwork.QSslCipher: ...
    def session_protocol(self, /) -> PySide6.QtNetwork.QSsl.SslProtocol: ...
    @staticmethod
    def set_active_backend(backendName: str, /) -> bool: ...
    @typing.overload
    def set_local_certificate(self, fileName: str, /, format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> None: ...
    @typing.overload
    def set_local_certificate(self, certificate: PySide6.QtNetwork.QSslCertificate | PySide6.QtCore.QIODevice, /) -> None: ...
    def set_local_certificate_chain(self, localChain: collections.abc.Sequence[PySide6.QtNetwork.QSslCertificate], /) -> None: ...
    def set_peer_verify_depth(self, depth: int, /) -> None: ...
    def set_peer_verify_mode(self, mode: PySide6.QtNetwork.QSslSocket.PeerVerifyMode, /) -> None: ...
    def set_peer_verify_name(self, hostName: str, /) -> None: ...
    @typing.overload
    def set_private_key(self, fileName: str, /, algorithm: PySide6.QtNetwork.QSsl.KeyAlgorithm = ..., format: PySide6.QtNetwork.QSsl.EncodingFormat = ..., passPhrase: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview = ...) -> None: ...
    @typing.overload
    def set_private_key(self, key: PySide6.QtNetwork.QSslKey | int, /) -> None: ...
    def set_protocol(self, protocol: PySide6.QtNetwork.QSsl.SslProtocol, /) -> None: ...
    def set_read_buffer_size(self, size: int, /) -> None: ...
    def set_socket_descriptor(self, socketDescriptor: int, /, state: PySide6.QtNetwork.QAbstractSocket.SocketState = ..., openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> bool: ...
    def set_socket_option(self, option: PySide6.QtNetwork.QAbstractSocket.SocketOption, value: typing.Any, /) -> None: ...
    def set_ssl_configuration(self, config: PySide6.QtNetwork.QSslConfiguration, /) -> None: ...
    def skip_data(self, maxSize: int, /) -> int: ...
    def socket_option(self, option: PySide6.QtNetwork.QAbstractSocket.SocketOption, /) -> typing.Any: ...
    def ssl_configuration(self, /) -> PySide6.QtNetwork.QSslConfiguration: ...
    def ssl_handshake_errors(self, /) -> typing.List[PySide6.QtNetwork.QSslError]: ...
    @staticmethod
    def ssl_library_build_version_number() -> int: ...
    @staticmethod
    def ssl_library_build_version_string() -> str: ...
    @staticmethod
    def ssl_library_version_number() -> int: ...
    @staticmethod
    def ssl_library_version_string() -> str: ...
    def start_client_encryption(self, /) -> None: ...
    def start_server_encryption(self, /) -> None: ...
    @staticmethod
    def supported_features(backendName: str = ...) -> typing.List[PySide6.QtNetwork.QSsl.SupportedFeature]: ...
    @staticmethod
    def supported_protocols(backendName: str = ...) -> typing.List[PySide6.QtNetwork.QSsl.SslProtocol]: ...
    @staticmethod
    def supports_ssl() -> bool: ...
    def wait_for_bytes_written(self, /, msecs: int = ...) -> bool: ...
    def wait_for_connected(self, /, msecs: int = ...) -> bool: ...
    def wait_for_disconnected(self, /, msecs: int = ...) -> bool: ...
    def wait_for_encrypted(self, /, msecs: int = ...) -> bool: ...
    def wait_for_ready_read(self, /, msecs: int = ...) -> bool: ...
    def write_data(self, data: bytes | bytearray | memoryview, len: int, /) -> int: ...


class QTcpServer(PySide6.QtCore.QObject):

    acceptError              : typing.ClassVar[Signal] = ... # acceptError(QAbstractSocket::SocketError)
    newConnection            : typing.ClassVar[Signal] = ... # newConnection()
    pendingConnectionAvailable: typing.ClassVar[Signal] = ... # pendingConnectionAvailable()

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def add_pending_connection(self, socket: PySide6.QtNetwork.QTcpSocket, /) -> None: ...
    def close(self, /) -> None: ...
    def error_string(self, /) -> str: ...
    def has_pending_connections(self, /) -> bool: ...
    def incoming_connection(self, handle: int, /) -> None: ...
    def is_listening(self, /) -> bool: ...
    def listen(self, /, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress = ..., port: int | None = ...) -> bool: ...
    def listen_backlog_size(self, /) -> int: ...
    def max_pending_connections(self, /) -> int: ...
    def next_pending_connection(self, /) -> PySide6.QtNetwork.QTcpSocket: ...
    def pause_accepting(self, /) -> None: ...
    def proxy(self, /) -> PySide6.QtNetwork.QNetworkProxy: ...
    def resume_accepting(self, /) -> None: ...
    def server_address(self, /) -> PySide6.QtNetwork.QHostAddress: ...
    def server_error(self, /) -> PySide6.QtNetwork.QAbstractSocket.SocketError: ...
    def server_port(self, /) -> int: ...
    def set_listen_backlog_size(self, size: int, /) -> None: ...
    def set_max_pending_connections(self, numConnections: int, /) -> None: ...
    def set_proxy(self, networkProxy: PySide6.QtNetwork.QNetworkProxy | PySide6.QtNetwork.QNetworkProxy.ProxyType, /) -> None: ...
    def set_socket_descriptor(self, socketDescriptor: int, /) -> bool: ...
    def socket_descriptor(self, /) -> int: ...
    def wait_for_new_connection(self, msec: int, /) -> typing.Tuple[bool, bool]: ...


class QTcpSocket(PySide6.QtNetwork.QAbstractSocket):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    @typing.overload
    def bind(self, addr: PySide6.QtNetwork.QHostAddress.SpecialAddress, /, port: int | None = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool: ...
    @typing.overload
    def bind(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /, port: int | None = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool: ...
    @typing.overload
    def bind(self, /, port: int | None = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool: ...


class QUdpSocket(PySide6.QtNetwork.QAbstractSocket):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    @typing.overload
    def bind(self, addr: PySide6.QtNetwork.QHostAddress.SpecialAddress, /, port: int | None = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool: ...
    @typing.overload
    def bind(self, address: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /, port: int | None = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool: ...
    @typing.overload
    def bind(self, /, port: int | None = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool: ...
    def has_pending_datagrams(self, /) -> bool: ...
    @typing.overload
    def join_multicast_group(self, groupAddress: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> bool: ...
    @typing.overload
    def join_multicast_group(self, groupAddress: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, iface: PySide6.QtNetwork.QNetworkInterface, /) -> bool: ...
    @typing.overload
    def leave_multicast_group(self, groupAddress: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, /) -> bool: ...
    @typing.overload
    def leave_multicast_group(self, groupAddress: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, iface: PySide6.QtNetwork.QNetworkInterface, /) -> bool: ...
    def multicast_interface(self, /) -> PySide6.QtNetwork.QNetworkInterface: ...
    def pending_datagram_size(self, /) -> int: ...
    def read_datagram(self, maxlen: int, /) -> typing.Tuple[PySide6.QtCore.QByteArray, PySide6.QtNetwork.QHostAddress, int]: ...
    def receive_datagram(self, /, maxSize: int = ...) -> PySide6.QtNetwork.QNetworkDatagram: ...
    def set_multicast_interface(self, iface: PySide6.QtNetwork.QNetworkInterface, /) -> None: ...
    @typing.overload
    def write_datagram(self, datagram: PySide6.QtNetwork.QNetworkDatagram | PySide6.QtCore.QByteArray, /) -> int: ...
    @typing.overload
    def write_datagram(self, datagram: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, host: PySide6.QtNetwork.QHostAddress | PySide6.QtNetwork.QHostAddress.SpecialAddress, port: int, /) -> int: ...


# eof
