# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtXml, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtXml`

import PySide6.QtXml
import PySide6.QtCore

import enum
import typing
from shiboken6 import Shiboken


class QDomAttr(PySide6.QtXml.QDomNode):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, attr: PySide6.QtXml.QDomAttr, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def name(self, /) -> str: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...
    def owner_element(self, /) -> PySide6.QtXml.QDomElement: ...
    def set_value(self, value: str, /) -> None: ...
    def specified(self, /) -> bool: ...
    def value(self, /) -> str: ...


class QDomCDATASection(PySide6.QtXml.QDomText):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, cdataSection: PySide6.QtXml.QDomCDATASection, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...


class QDomCharacterData(PySide6.QtXml.QDomNode):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, characterData: PySide6.QtXml.QDomCharacterData, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def append_data(self, arg: str, /) -> None: ...
    def data(self, /) -> str: ...
    def delete_data(self, offset: int, count: int, /) -> None: ...
    def insert_data(self, offset: int, arg: str, /) -> None: ...
    def length(self, /) -> int: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...
    def replace_data(self, offset: int, count: int, arg: str, /) -> None: ...
    def set_data(self, data: str, /) -> None: ...
    def substring_data(self, offset: int, count: int, /) -> str: ...


class QDomComment(PySide6.QtXml.QDomCharacterData):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, comment: PySide6.QtXml.QDomComment, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...


class QDomDocument(PySide6.QtXml.QDomNode):

    class ParseOption(enum.Flag):

        Default                   = ...  # 0x0
        UseNamespaceProcessing    = ...  # 0x1
        PreserveSpacingOnlyNodes  = ...  # 0x2

    class ParseResult(Shiboken.Object):

        @typing.overload
        def __init__(self, /) -> None: ...
        @typing.overload
        def __init__(self, ParseResult: PySide6.QtXml.QDomDocument.ParseResult, /) -> None: ...

        def __copy__(self, /) -> typing.Self: ...


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, document: PySide6.QtXml.QDomDocument, /) -> None: ...
    @typing.overload
    def __init__(self, doctype: PySide6.QtXml.QDomDocumentType, /) -> None: ...
    @typing.overload
    def __init__(self, name: str, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def createAttributeNS(self, nsURI: str, qName: str, /) -> PySide6.QtXml.QDomAttr: ...
    def createCDATASection(self, data: str, /) -> PySide6.QtXml.QDomCDATASection: ...
    def createElementNS(self, nsURI: str, qName: str, /) -> PySide6.QtXml.QDomElement: ...
    def create_attribute(self, name: str, /) -> PySide6.QtXml.QDomAttr: ...
    def create_comment(self, data: str, /) -> PySide6.QtXml.QDomComment: ...
    def create_document_fragment(self, /) -> PySide6.QtXml.QDomDocumentFragment: ...
    def create_element(self, tagName: str, /) -> PySide6.QtXml.QDomElement: ...
    def create_entity_reference(self, name: str, /) -> PySide6.QtXml.QDomEntityReference: ...
    def create_processing_instruction(self, target: str, data: str, /) -> PySide6.QtXml.QDomProcessingInstruction: ...
    def create_text_node(self, data: str, /) -> PySide6.QtXml.QDomText: ...
    def doctype(self, /) -> PySide6.QtXml.QDomDocumentType: ...
    def document_element(self, /) -> PySide6.QtXml.QDomElement: ...
    def element_by_id(self, elementId: str, /) -> PySide6.QtXml.QDomElement: ...
    def elementsByTagNameNS(self, nsURI: str, localName: str, /) -> PySide6.QtXml.QDomNodeList: ...
    def elements_by_tag_name(self, tagname: str, /) -> PySide6.QtXml.QDomNodeList: ...
    def implementation(self, /) -> PySide6.QtXml.QDomImplementation: ...
    def import_node(self, importedNode: PySide6.QtXml.QDomNode, deep: bool, /) -> PySide6.QtXml.QDomNode: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...
    @typing.overload
    def set_content(self, dev: PySide6.QtCore.QIODevice, /) -> typing.Tuple[bool, str, int, int]: ...
    @typing.overload
    def set_content(self, device: PySide6.QtCore.QIODevice, /, options: PySide6.QtXml.QDomDocument.ParseOption = ...) -> PySide6.QtXml.QDomDocument.ParseResult: ...
    @typing.overload
    def set_content(self, dev: PySide6.QtCore.QIODevice, namespaceProcessing: bool, /) -> typing.Tuple[bool, str, int, int]: ...
    @typing.overload
    def set_content(self, reader: PySide6.QtCore.QXmlStreamReader, /, options: PySide6.QtXml.QDomDocument.ParseOption = ...) -> PySide6.QtXml.QDomDocument.ParseResult: ...
    @typing.overload
    def set_content(self, reader: PySide6.QtCore.QXmlStreamReader, namespaceProcessing: bool, /) -> typing.Tuple[bool, str, int, int]: ...
    @typing.overload
    def set_content(self, text: str, /) -> typing.Tuple[bool, str, int, int]: ...
    @typing.overload
    def set_content(self, data: str, /, options: PySide6.QtXml.QDomDocument.ParseOption = ...) -> PySide6.QtXml.QDomDocument.ParseResult: ...
    @typing.overload
    def set_content(self, text: str, namespaceProcessing: bool, /) -> typing.Tuple[bool, str, int, int]: ...
    @typing.overload
    def set_content(self, text: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> typing.Tuple[bool, str, int, int]: ...
    @typing.overload
    def set_content(self, text: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, namespaceProcessing: bool, /) -> typing.Tuple[bool, str, int, int]: ...
    def to_byte_array(self, /, indent: int = ...) -> PySide6.QtCore.QByteArray: ...
    def to_string(self, /, indent: int = ...) -> str: ...


class QDomDocumentFragment(PySide6.QtXml.QDomNode):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, documentFragment: PySide6.QtXml.QDomDocumentFragment, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...


class QDomDocumentType(PySide6.QtXml.QDomNode):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, documentType: PySide6.QtXml.QDomDocumentType, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def entities(self, /) -> PySide6.QtXml.QDomNamedNodeMap: ...
    def internal_subset(self, /) -> str: ...
    def name(self, /) -> str: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...
    def notations(self, /) -> PySide6.QtXml.QDomNamedNodeMap: ...
    def public_id(self, /) -> str: ...
    def system_id(self, /) -> str: ...


class QDomElement(PySide6.QtXml.QDomNode):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, element: PySide6.QtXml.QDomElement, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def attribute(self, name: str, /, defValue: str = ...) -> str: ...
    def attributeNS(self, nsURI: str, localName: str, /, defValue: str = ...) -> str: ...
    def attributeNodeNS(self, nsURI: str, localName: str, /) -> PySide6.QtXml.QDomAttr: ...
    def attribute_node(self, name: str, /) -> PySide6.QtXml.QDomAttr: ...
    def attributes(self, /) -> PySide6.QtXml.QDomNamedNodeMap: ...
    def elementsByTagNameNS(self, nsURI: str, localName: str, /) -> PySide6.QtXml.QDomNodeList: ...
    def elements_by_tag_name(self, tagname: str, /) -> PySide6.QtXml.QDomNodeList: ...
    def hasAttributeNS(self, nsURI: str, localName: str, /) -> bool: ...
    def has_attribute(self, name: str, /) -> bool: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...
    def removeAttributeNS(self, nsURI: str, localName: str, /) -> None: ...
    def remove_attribute(self, name: str, /) -> None: ...
    def remove_attribute_node(self, oldAttr: PySide6.QtXml.QDomAttr, /) -> PySide6.QtXml.QDomAttr: ...
    @typing.overload
    def setAttributeNS(self, nsURI: str, qName: str, value: str, /) -> None: ...
    @typing.overload
    def setAttributeNS(self, nsURI: str, qName: str, value: int, /) -> None: ...
    @typing.overload
    def setAttributeNS(self, nsURI: str, qName: str, value: float, /) -> None: ...
    def setAttributeNodeNS(self, newAttr: PySide6.QtXml.QDomAttr, /) -> PySide6.QtXml.QDomAttr: ...
    @typing.overload
    def set_attribute(self, name: str, value: str, /) -> None: ...
    @typing.overload
    def set_attribute(self, name: str, value: int, /) -> None: ...
    @typing.overload
    def set_attribute(self, name: str, value: float, /) -> None: ...
    def set_attribute_node(self, newAttr: PySide6.QtXml.QDomAttr, /) -> PySide6.QtXml.QDomAttr: ...
    def set_tag_name(self, name: str, /) -> None: ...
    def tag_name(self, /) -> str: ...
    def text(self, /) -> str: ...


class QDomEntity(PySide6.QtXml.QDomNode):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, entity: PySide6.QtXml.QDomEntity, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...
    def notation_name(self, /) -> str: ...
    def public_id(self, /) -> str: ...
    def system_id(self, /) -> str: ...


class QDomEntityReference(PySide6.QtXml.QDomNode):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, entityReference: PySide6.QtXml.QDomEntityReference, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...


class QDomImplementation(Shiboken.Object):

    class InvalidDataPolicy(enum.Enum):

        AcceptInvalidChars        = ...  # 0x0
        DropInvalidChars          = ...  # 0x1
        ReturnNullNode            = ...  # 0x2


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, implementation: PySide6.QtXml.QDomImplementation, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtXml.QDomImplementation, /) -> bool: ...
    def __ne__(self, other: PySide6.QtXml.QDomImplementation, /) -> bool: ...
    def create_document(self, nsURI: str, qName: str, doctype: PySide6.QtXml.QDomDocumentType, /) -> PySide6.QtXml.QDomDocument: ...
    def create_document_type(self, qName: str, publicId: str, systemId: str, /) -> PySide6.QtXml.QDomDocumentType: ...
    def has_feature(self, feature: str, version: str, /) -> bool: ...
    @staticmethod
    def invalid_data_policy() -> PySide6.QtXml.QDomImplementation.InvalidDataPolicy: ...
    def is_null(self, /) -> bool: ...
    @staticmethod
    def set_invalid_data_policy(policy: PySide6.QtXml.QDomImplementation.InvalidDataPolicy, /) -> None: ...


class QDomNamedNodeMap(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, namedNodeMap: PySide6.QtXml.QDomNamedNodeMap, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtXml.QDomNamedNodeMap, /) -> bool: ...
    def __ne__(self, other: PySide6.QtXml.QDomNamedNodeMap, /) -> bool: ...
    def contains(self, name: str, /) -> bool: ...
    def count(self, /) -> int: ...
    def is_empty(self, /) -> bool: ...
    def item(self, index: int, /) -> PySide6.QtXml.QDomNode: ...
    def length(self, /) -> int: ...
    def namedItemNS(self, nsURI: str, localName: str, /) -> PySide6.QtXml.QDomNode: ...
    def named_item(self, name: str, /) -> PySide6.QtXml.QDomNode: ...
    def removeNamedItemNS(self, nsURI: str, localName: str, /) -> PySide6.QtXml.QDomNode: ...
    def remove_named_item(self, name: str, /) -> PySide6.QtXml.QDomNode: ...
    def setNamedItemNS(self, newNode: PySide6.QtXml.QDomNode, /) -> PySide6.QtXml.QDomNode: ...
    def set_named_item(self, newNode: PySide6.QtXml.QDomNode, /) -> PySide6.QtXml.QDomNode: ...
    def size(self, /) -> int: ...


class QDomNode(Shiboken.Object):

    class EncodingPolicy(enum.Enum):

        EncodingFromDocument      = ...  # 0x1
        EncodingFromTextStream    = ...  # 0x2

    class NodeType(enum.Enum):

        ElementNode               = ...  # 0x1
        AttributeNode             = ...  # 0x2
        TextNode                  = ...  # 0x3
        CDATASectionNode          = ...  # 0x4
        EntityReferenceNode       = ...  # 0x5
        EntityNode                = ...  # 0x6
        ProcessingInstructionNode = ...  # 0x7
        CommentNode               = ...  # 0x8
        DocumentNode              = ...  # 0x9
        DocumentTypeNode          = ...  # 0xa
        DocumentFragmentNode      = ...  # 0xb
        NotationNode              = ...  # 0xc
        BaseNode                  = ...  # 0x15
        CharacterDataNode         = ...  # 0x16


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, node: PySide6.QtXml.QDomNode, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtXml.QDomNode, /) -> bool: ...
    def __lshift__(self, stream: PySide6.QtCore.QTextStream, /) -> PySide6.QtCore.QTextStream: ...
    def __ne__(self, other: PySide6.QtXml.QDomNode, /) -> bool: ...
    def append_child(self, newChild: PySide6.QtXml.QDomNode, /) -> PySide6.QtXml.QDomNode: ...
    def attributes(self, /) -> PySide6.QtXml.QDomNamedNodeMap: ...
    def child_nodes(self, /) -> PySide6.QtXml.QDomNodeList: ...
    def clear(self, /) -> None: ...
    def clone_node(self, /, deep: bool = ...) -> PySide6.QtXml.QDomNode: ...
    def column_number(self, /) -> int: ...
    def first_child(self, /) -> PySide6.QtXml.QDomNode: ...
    def first_child_element(self, /, tagName: str = ..., namespaceURI: str = ...) -> PySide6.QtXml.QDomElement: ...
    def has_attributes(self, /) -> bool: ...
    def has_child_nodes(self, /) -> bool: ...
    def insert_after(self, newChild: PySide6.QtXml.QDomNode, refChild: PySide6.QtXml.QDomNode, /) -> PySide6.QtXml.QDomNode: ...
    def insert_before(self, newChild: PySide6.QtXml.QDomNode, refChild: PySide6.QtXml.QDomNode, /) -> PySide6.QtXml.QDomNode: ...
    def isCDATASection(self, /) -> bool: ...
    def is_attr(self, /) -> bool: ...
    def is_character_data(self, /) -> bool: ...
    def is_comment(self, /) -> bool: ...
    def is_document(self, /) -> bool: ...
    def is_document_fragment(self, /) -> bool: ...
    def is_document_type(self, /) -> bool: ...
    def is_element(self, /) -> bool: ...
    def is_entity(self, /) -> bool: ...
    def is_entity_reference(self, /) -> bool: ...
    def is_notation(self, /) -> bool: ...
    def is_null(self, /) -> bool: ...
    def is_processing_instruction(self, /) -> bool: ...
    def is_supported(self, feature: str, version: str, /) -> bool: ...
    def is_text(self, /) -> bool: ...
    def last_child(self, /) -> PySide6.QtXml.QDomNode: ...
    def last_child_element(self, /, tagName: str = ..., namespaceURI: str = ...) -> PySide6.QtXml.QDomElement: ...
    def line_number(self, /) -> int: ...
    def local_name(self, /) -> str: ...
    def named_item(self, name: str, /) -> PySide6.QtXml.QDomNode: ...
    def namespaceURI(self, /) -> str: ...
    def next_sibling(self, /) -> PySide6.QtXml.QDomNode: ...
    def next_sibling_element(self, /, taName: str = ..., namespaceURI: str = ...) -> PySide6.QtXml.QDomElement: ...
    def node_name(self, /) -> str: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...
    def node_value(self, /) -> str: ...
    def normalize(self, /) -> None: ...
    def owner_document(self, /) -> PySide6.QtXml.QDomDocument: ...
    def parent_node(self, /) -> PySide6.QtXml.QDomNode: ...
    def prefix(self, /) -> str: ...
    def previous_sibling(self, /) -> PySide6.QtXml.QDomNode: ...
    def previous_sibling_element(self, /, tagName: str = ..., namespaceURI: str = ...) -> PySide6.QtXml.QDomElement: ...
    def remove_child(self, oldChild: PySide6.QtXml.QDomNode, /) -> PySide6.QtXml.QDomNode: ...
    def replace_child(self, newChild: PySide6.QtXml.QDomNode, oldChild: PySide6.QtXml.QDomNode, /) -> PySide6.QtXml.QDomNode: ...
    def save(self, arg__1: PySide6.QtCore.QTextStream, arg__2: int, /, arg__3: PySide6.QtXml.QDomNode.EncodingPolicy = ...) -> None: ...
    def set_node_value(self, value: str, /) -> None: ...
    def set_prefix(self, pre: str, /) -> None: ...
    def toCDATASection(self, /) -> PySide6.QtXml.QDomCDATASection: ...
    def to_attr(self, /) -> PySide6.QtXml.QDomAttr: ...
    def to_character_data(self, /) -> PySide6.QtXml.QDomCharacterData: ...
    def to_comment(self, /) -> PySide6.QtXml.QDomComment: ...
    def to_document(self, /) -> PySide6.QtXml.QDomDocument: ...
    def to_document_fragment(self, /) -> PySide6.QtXml.QDomDocumentFragment: ...
    def to_document_type(self, /) -> PySide6.QtXml.QDomDocumentType: ...
    def to_element(self, /) -> PySide6.QtXml.QDomElement: ...
    def to_entity(self, /) -> PySide6.QtXml.QDomEntity: ...
    def to_entity_reference(self, /) -> PySide6.QtXml.QDomEntityReference: ...
    def to_notation(self, /) -> PySide6.QtXml.QDomNotation: ...
    def to_processing_instruction(self, /) -> PySide6.QtXml.QDomProcessingInstruction: ...
    def to_text(self, /) -> PySide6.QtXml.QDomText: ...


class QDomNodeList(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, nodeList: PySide6.QtXml.QDomNodeList, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtXml.QDomNodeList, /) -> bool: ...
    def __ne__(self, other: PySide6.QtXml.QDomNodeList, /) -> bool: ...
    def at(self, index: int, /) -> PySide6.QtXml.QDomNode: ...
    def count(self, /) -> int: ...
    def is_empty(self, /) -> bool: ...
    def item(self, index: int, /) -> PySide6.QtXml.QDomNode: ...
    def length(self, /) -> int: ...
    def size(self, /) -> int: ...


class QDomNotation(PySide6.QtXml.QDomNode):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, notation: PySide6.QtXml.QDomNotation, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...
    def public_id(self, /) -> str: ...
    def system_id(self, /) -> str: ...


class QDomProcessingInstruction(PySide6.QtXml.QDomNode):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, processingInstruction: PySide6.QtXml.QDomProcessingInstruction, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def data(self, /) -> str: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...
    def set_data(self, data: str, /) -> None: ...
    def target(self, /) -> str: ...


class QDomText(PySide6.QtXml.QDomCharacterData):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, text: PySide6.QtXml.QDomText, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def node_type(self, /) -> PySide6.QtXml.QDomNode.NodeType: ...
    def split_text(self, offset: int, /) -> PySide6.QtXml.QDomText: ...


class QIntList: ...


# eof
