# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtPositioning, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtPositioning`

import PySide6.QtPositioning
import PySide6.QtCore

import os
import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QGeoAddress(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoAddress, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtPositioning.QGeoAddress, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __ne__(self, rhs: PySide6.QtPositioning.QGeoAddress, /) -> bool: ...
    def city(self, /) -> str: ...
    def clear(self, /) -> None: ...
    def country(self, /) -> str: ...
    def country_code(self, /) -> str: ...
    def county(self, /) -> str: ...
    def district(self, /) -> str: ...
    def is_empty(self, /) -> bool: ...
    def is_text_generated(self, /) -> bool: ...
    def postal_code(self, /) -> str: ...
    def set_city(self, city: str, /) -> None: ...
    def set_country(self, country: str, /) -> None: ...
    def set_country_code(self, countryCode: str, /) -> None: ...
    def set_county(self, county: str, /) -> None: ...
    def set_district(self, district: str, /) -> None: ...
    def set_postal_code(self, postalCode: str, /) -> None: ...
    def set_state(self, state: str, /) -> None: ...
    def set_street(self, street: str, /) -> None: ...
    def set_street_number(self, streetNumber: str, /) -> None: ...
    def set_text(self, text: str, /) -> None: ...
    def state(self, /) -> str: ...
    def street(self, /) -> str: ...
    def street_number(self, /) -> str: ...
    def swap(self, other: PySide6.QtPositioning.QGeoAddress, /) -> None: ...
    def text(self, /) -> str: ...


class QGeoAreaMonitorInfo(Shiboken.Object):

    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoAreaMonitorInfo, /) -> None: ...
    @typing.overload
    def __init__(self, /, name: str = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtPositioning.QGeoAreaMonitorInfo | str, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __lshift__(self, ds: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def __ne__(self, rhs: PySide6.QtPositioning.QGeoAreaMonitorInfo | str, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def __rshift__(self, ds: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def area(self, /) -> PySide6.QtPositioning.QGeoShape: ...
    def expiration(self, /) -> PySide6.QtCore.QDateTime: ...
    def identifier(self, /) -> str: ...
    def is_persistent(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def name(self, /) -> str: ...
    def notification_parameters(self, /) -> typing.Dict[str, typing.Any]: ...
    def set_area(self, newShape: PySide6.QtPositioning.QGeoShape, /) -> None: ...
    def set_expiration(self, expiry: PySide6.QtCore.QDateTime, /) -> None: ...
    def set_name(self, name: str, /) -> None: ...
    def set_notification_parameters(self, parameters: typing.Dict[str, typing.Any], /) -> None: ...
    def set_persistent(self, isPersistent: bool, /) -> None: ...
    def swap(self, other: PySide6.QtPositioning.QGeoAreaMonitorInfo | str, /) -> None: ...


class QGeoAreaMonitorSource(PySide6.QtCore.QObject):

    areaEntered              : typing.ClassVar[Signal] = ... # areaEntered(QGeoAreaMonitorInfo,QGeoPositionInfo)
    areaExited               : typing.ClassVar[Signal] = ... # areaExited(QGeoAreaMonitorInfo,QGeoPositionInfo)
    errorOccurred            : typing.ClassVar[Signal] = ... # errorOccurred(QGeoAreaMonitorSource::Error)
    monitorExpired           : typing.ClassVar[Signal] = ... # monitorExpired(QGeoAreaMonitorInfo)

    class AreaMonitorFeature(enum.Flag):

        PersistentAreaMonitorFeature = ...  # 0x1
        AnyAreaMonitorFeature     = ...  # 0xffffffff

    class Error(enum.Enum):

        AccessError               = ...  # 0x0
        InsufficientPositionInfo  = ...  # 0x1
        UnknownSourceError        = ...  # 0x2
        NoError                   = ...  # 0x3


    def __init__(self, parent: PySide6.QtCore.QObject, /) -> None: ...

    @typing.overload
    def active_monitors(self, /) -> typing.List[PySide6.QtPositioning.QGeoAreaMonitorInfo]: ...
    @typing.overload
    def active_monitors(self, lookupArea: PySide6.QtPositioning.QGeoShape, /) -> typing.List[PySide6.QtPositioning.QGeoAreaMonitorInfo]: ...
    @staticmethod
    def available_sources() -> typing.List[str]: ...
    def backend_property(self, name: str, /) -> typing.Any: ...
    @staticmethod
    def create_default_source(parent: PySide6.QtCore.QObject, /) -> PySide6.QtPositioning.QGeoAreaMonitorSource: ...
    @staticmethod
    def create_source(sourceName: str, parent: PySide6.QtCore.QObject, /) -> PySide6.QtPositioning.QGeoAreaMonitorSource: ...
    def error(self, /) -> PySide6.QtPositioning.QGeoAreaMonitorSource.Error: ...
    def position_info_source(self, /) -> PySide6.QtPositioning.QGeoPositionInfoSource: ...
    def request_update(self, monitor: PySide6.QtPositioning.QGeoAreaMonitorInfo | str, signal: bytes | bytearray | memoryview, /) -> bool: ...
    def set_backend_property(self, name: str, value: typing.Any, /) -> bool: ...
    def set_position_info_source(self, source: PySide6.QtPositioning.QGeoPositionInfoSource, /) -> None: ...
    def source_name(self, /) -> str: ...
    def start_monitoring(self, monitor: PySide6.QtPositioning.QGeoAreaMonitorInfo | str, /) -> bool: ...
    def stop_monitoring(self, monitor: PySide6.QtPositioning.QGeoAreaMonitorInfo | str, /) -> bool: ...
    def supported_area_monitor_features(self, /) -> PySide6.QtPositioning.QGeoAreaMonitorSource.AreaMonitorFeature: ...


class QGeoCircle(PySide6.QtPositioning.QGeoShape):

    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoCircle, /, *, center: PySide6.QtPositioning.QGeoCoordinate | None = ..., radius: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, center: PySide6.QtPositioning.QGeoCoordinate, /, radius: float = ...) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoShape, /, *, center: PySide6.QtPositioning.QGeoCoordinate | None = ..., radius: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, center: PySide6.QtPositioning.QGeoCoordinate | None = ..., radius: float | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __lshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def __rshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def center(self, /) -> PySide6.QtPositioning.QGeoCoordinate: ...
    def extend_circle(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def radius(self, /) -> float: ...
    def set_center(self, center: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def set_radius(self, radius: float, /) -> None: ...
    def to_string(self, /) -> str: ...
    def translate(self, degreesLatitude: float, degreesLongitude: float, /) -> None: ...
    def translated(self, degreesLatitude: float, degreesLongitude: float, /) -> PySide6.QtPositioning.QGeoCircle: ...


class QGeoCoordinate(Shiboken.Object):

    class CoordinateFormat(enum.Enum):

        Degrees                   = ...  # 0x0
        DegreesWithHemisphere     = ...  # 0x1
        DegreesMinutes            = ...  # 0x2
        DegreesMinutesWithHemisphere = ...  # 0x3
        DegreesMinutesSeconds     = ...  # 0x4
        DegreesMinutesSecondsWithHemisphere = ...  # 0x5

    class CoordinateType(enum.Enum):

        InvalidCoordinate         = ...  # 0x0
        Coordinate2D              = ...  # 0x1
        Coordinate3D              = ...  # 0x2


    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoCoordinate, /, *, latitude: float | None = ..., longitude: float | None = ..., altitude: float | None = ..., is_valid: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, latitude: float, longitude: float, altitude: float, /, *, is_valid: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, latitude: float, longitude: float, /, *, altitude: float | None = ..., is_valid: bool | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, latitude: float | None = ..., longitude: float | None = ..., altitude: float | None = ..., is_valid: bool | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtPositioning.QGeoCoordinate, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __lshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def __ne__(self, rhs: PySide6.QtPositioning.QGeoCoordinate, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def __rshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def altitude(self, /) -> float: ...
    def at_distance_and_azimuth(self, distance: float, azimuth: float, /, distanceUp: float = ...) -> PySide6.QtPositioning.QGeoCoordinate: ...
    def azimuth_to(self, other: PySide6.QtPositioning.QGeoCoordinate, /) -> float: ...
    def distance_to(self, other: PySide6.QtPositioning.QGeoCoordinate, /) -> float: ...
    def is_valid(self, /) -> bool: ...
    def latitude(self, /) -> float: ...
    def longitude(self, /) -> float: ...
    def set_altitude(self, altitude: float, /) -> None: ...
    def set_latitude(self, latitude: float, /) -> None: ...
    def set_longitude(self, longitude: float, /) -> None: ...
    def swap(self, other: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def to_string(self, /, format: PySide6.QtPositioning.QGeoCoordinate.CoordinateFormat = ...) -> str: ...
    def type(self, /) -> PySide6.QtPositioning.QGeoCoordinate.CoordinateType: ...


class QGeoLocation(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoLocation, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtPositioning.QGeoLocation, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __ne__(self, rhs: PySide6.QtPositioning.QGeoLocation, /) -> bool: ...
    def address(self, /) -> PySide6.QtPositioning.QGeoAddress: ...
    def bounding_shape(self, /) -> PySide6.QtPositioning.QGeoShape: ...
    def coordinate(self, /) -> PySide6.QtPositioning.QGeoCoordinate: ...
    def extended_attributes(self, /) -> typing.Dict[str, typing.Any]: ...
    def is_empty(self, /) -> bool: ...
    def set_address(self, address: PySide6.QtPositioning.QGeoAddress, /) -> None: ...
    def set_bounding_shape(self, shape: PySide6.QtPositioning.QGeoShape, /) -> None: ...
    def set_coordinate(self, position: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def set_extended_attributes(self, data: typing.Dict[str, typing.Any], /) -> None: ...
    def swap(self, other: PySide6.QtPositioning.QGeoLocation, /) -> None: ...


class QGeoPath(PySide6.QtPositioning.QGeoShape):

    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoPath, /, *, path: collections.abc.Sequence[typing.Any] | None = ..., width: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoShape, /, *, path: collections.abc.Sequence[typing.Any] | None = ..., width: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, path: collections.abc.Sequence[typing.Any], /, width: float = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, path: collections.abc.Sequence[typing.Any] | None = ..., width: float | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __lshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def __rshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def add_coordinate(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def clear_path(self, /) -> None: ...
    def contains_coordinate(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> bool: ...
    def coordinate_at(self, index: int, /) -> PySide6.QtPositioning.QGeoCoordinate: ...
    def insert_coordinate(self, index: int, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def length(self, /, indexFrom: int | None = ..., indexTo: int = ...) -> float: ...
    def path(self, /) -> typing.List[PySide6.QtPositioning.QGeoCoordinate]: ...
    @typing.overload
    def remove_coordinate(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    @typing.overload
    def remove_coordinate(self, index: int, /) -> None: ...
    def replace_coordinate(self, index: int, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def set_path(self, path: collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate], /) -> None: ...
    def set_variant_path(self, path: collections.abc.Sequence[typing.Any], /) -> None: ...
    def set_width(self, width: float, /) -> None: ...
    def size(self, /) -> int: ...
    def to_string(self, /) -> str: ...
    def translate(self, degreesLatitude: float, degreesLongitude: float, /) -> None: ...
    def translated(self, degreesLatitude: float, degreesLongitude: float, /) -> PySide6.QtPositioning.QGeoPath: ...
    def variant_path(self, /) -> typing.List[typing.Any]: ...
    def width(self, /) -> float: ...


class QGeoPolygon(PySide6.QtPositioning.QGeoShape):

    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoPolygon, /, *, perimeter: collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoShape, /, *, perimeter: collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, path: collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate], /, *, perimeter: collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate] | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, perimeter: collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate] | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __lshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def __rshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def add_coordinate(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    @typing.overload
    def add_hole(self, holePath: collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate], /) -> None: ...
    @typing.overload
    def add_hole(self, holePath: typing.Any, /) -> None: ...
    def contains_coordinate(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> bool: ...
    def coordinate_at(self, index: int, /) -> PySide6.QtPositioning.QGeoCoordinate: ...
    def hole(self, index: int, /) -> typing.List[typing.Any]: ...
    def hole_path(self, index: int, /) -> typing.List[PySide6.QtPositioning.QGeoCoordinate]: ...
    def holes_count(self, /) -> int: ...
    def insert_coordinate(self, index: int, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def length(self, /, indexFrom: int | None = ..., indexTo: int = ...) -> float: ...
    def perimeter(self, /) -> typing.List[PySide6.QtPositioning.QGeoCoordinate]: ...
    @typing.overload
    def remove_coordinate(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    @typing.overload
    def remove_coordinate(self, index: int, /) -> None: ...
    def remove_hole(self, index: int, /) -> None: ...
    def replace_coordinate(self, index: int, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def set_perimeter(self, path: collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate], /) -> None: ...
    def size(self, /) -> int: ...
    def to_string(self, /) -> str: ...
    def translate(self, degreesLatitude: float, degreesLongitude: float, /) -> None: ...
    def translated(self, degreesLatitude: float, degreesLongitude: float, /) -> PySide6.QtPositioning.QGeoPolygon: ...


class QGeoPositionInfo(Shiboken.Object):

    class Attribute(enum.Enum):

        Direction                 = ...  # 0x0
        GroundSpeed               = ...  # 0x1
        VerticalSpeed             = ...  # 0x2
        MagneticVariation         = ...  # 0x3
        HorizontalAccuracy        = ...  # 0x4
        VerticalAccuracy          = ...  # 0x5
        DirectionAccuracy         = ...  # 0x6


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, updateTime: PySide6.QtCore.QDateTime, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoPositionInfo, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtPositioning.QGeoPositionInfo, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __lshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def __ne__(self, rhs: PySide6.QtPositioning.QGeoPositionInfo, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def __rshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def attribute(self, attribute: PySide6.QtPositioning.QGeoPositionInfo.Attribute, /) -> float: ...
    def coordinate(self, /) -> PySide6.QtPositioning.QGeoCoordinate: ...
    def has_attribute(self, attribute: PySide6.QtPositioning.QGeoPositionInfo.Attribute, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def remove_attribute(self, attribute: PySide6.QtPositioning.QGeoPositionInfo.Attribute, /) -> None: ...
    def set_attribute(self, attribute: PySide6.QtPositioning.QGeoPositionInfo.Attribute, value: float, /) -> None: ...
    def set_coordinate(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def set_timestamp(self, timestamp: PySide6.QtCore.QDateTime, /) -> None: ...
    def swap(self, other: PySide6.QtPositioning.QGeoPositionInfo, /) -> None: ...
    def timestamp(self, /) -> PySide6.QtCore.QDateTime: ...


class QGeoPositionInfoSource(PySide6.QtCore.QObject):

    errorOccurred            : typing.ClassVar[Signal] = ... # errorOccurred(QGeoPositionInfoSource::Error)
    positionUpdated          : typing.ClassVar[Signal] = ... # positionUpdated(QGeoPositionInfo)
    supportedPositioningMethodsChanged: typing.ClassVar[Signal] = ... # supportedPositioningMethodsChanged()

    class Error(enum.Enum):

        AccessError               = ...  # 0x0
        ClosedError               = ...  # 0x1
        UnknownSourceError        = ...  # 0x2
        NoError                   = ...  # 0x3
        UpdateTimeoutError        = ...  # 0x4

    class PositioningMethod(enum.Flag):

        NoPositioningMethods      = ...  # 0x0
        SatellitePositioningMethods = ...  # 0xff
        NonSatellitePositioningMethods = ...  # 0xffffff00
        AllPositioningMethods     = ...  # 0xffffffff


    def __init__(self, parent: PySide6.QtCore.QObject, /, *, update_interval: int | None = ..., minimum_update_interval: int | None = ..., source_name: str | None = ..., preferred_positioning_methods: PySide6.QtPositioning.QGeoPositionInfoSource.PositioningMethod | None = ...) -> None: ...

    @staticmethod
    def available_sources() -> typing.List[str]: ...
    def backend_property(self, name: str, /) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def create_default_source(parent: PySide6.QtCore.QObject, /) -> PySide6.QtPositioning.QGeoPositionInfoSource: ...
    @typing.overload
    @staticmethod
    def create_default_source(parameters: typing.Dict[str, typing.Any], parent: PySide6.QtCore.QObject, /) -> PySide6.QtPositioning.QGeoPositionInfoSource: ...
    @typing.overload
    @staticmethod
    def create_source(sourceName: str, parent: PySide6.QtCore.QObject, /) -> PySide6.QtPositioning.QGeoPositionInfoSource: ...
    @typing.overload
    @staticmethod
    def create_source(sourceName: str, parameters: typing.Dict[str, typing.Any], parent: PySide6.QtCore.QObject, /) -> PySide6.QtPositioning.QGeoPositionInfoSource: ...
    def error(self, /) -> PySide6.QtPositioning.QGeoPositionInfoSource.Error: ...
    def last_known_position(self, /, fromSatellitePositioningMethodsOnly: bool = ...) -> PySide6.QtPositioning.QGeoPositionInfo: ...
    def minimum_update_interval(self, /) -> int: ...
    def preferred_positioning_methods(self, /) -> PySide6.QtPositioning.QGeoPositionInfoSource.PositioningMethod: ...
    def request_update(self, /, timeout: int | None = ...) -> None: ...
    def set_backend_property(self, name: str, value: typing.Any, /) -> bool: ...
    def set_preferred_positioning_methods(self, methods: PySide6.QtPositioning.QGeoPositionInfoSource.PositioningMethod, /) -> None: ...
    def set_update_interval(self, msec: int, /) -> None: ...
    def source_name(self, /) -> str: ...
    def start_updates(self, /) -> None: ...
    def stop_updates(self, /) -> None: ...
    def supported_positioning_methods(self, /) -> PySide6.QtPositioning.QGeoPositionInfoSource.PositioningMethod: ...
    def update_interval(self, /) -> int: ...


class QGeoPositionInfoSourceFactory(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def area_monitor(self, parent: PySide6.QtCore.QObject, parameters: typing.Dict[str, typing.Any], /) -> PySide6.QtPositioning.QGeoAreaMonitorSource: ...
    def position_info_source(self, parent: PySide6.QtCore.QObject, parameters: typing.Dict[str, typing.Any], /) -> PySide6.QtPositioning.QGeoPositionInfoSource: ...
    def satellite_info_source(self, parent: PySide6.QtCore.QObject, parameters: typing.Dict[str, typing.Any], /) -> PySide6.QtPositioning.QGeoSatelliteInfoSource: ...


class QGeoRectangle(PySide6.QtPositioning.QGeoShape):

    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoRectangle, /, *, bottom_left: PySide6.QtPositioning.QGeoCoordinate | None = ..., bottom_right: PySide6.QtPositioning.QGeoCoordinate | None = ..., top_left: PySide6.QtPositioning.QGeoCoordinate | None = ..., top_right: PySide6.QtPositioning.QGeoCoordinate | None = ..., center: PySide6.QtPositioning.QGeoCoordinate | None = ..., height: float | None = ..., width: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, top_left: PySide6.QtPositioning.QGeoCoordinate, bottom_right: PySide6.QtPositioning.QGeoCoordinate, /, *, bottom_left: PySide6.QtPositioning.QGeoCoordinate | None = ..., top_right: PySide6.QtPositioning.QGeoCoordinate | None = ..., center: PySide6.QtPositioning.QGeoCoordinate | None = ..., height: float | None = ..., width: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, center: PySide6.QtPositioning.QGeoCoordinate, degreesWidth: float, degreesHeight: float, /, *, bottom_left: PySide6.QtPositioning.QGeoCoordinate | None = ..., bottom_right: PySide6.QtPositioning.QGeoCoordinate | None = ..., top_left: PySide6.QtPositioning.QGeoCoordinate | None = ..., top_right: PySide6.QtPositioning.QGeoCoordinate | None = ..., height: float | None = ..., width: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoShape, /, *, bottom_left: PySide6.QtPositioning.QGeoCoordinate | None = ..., bottom_right: PySide6.QtPositioning.QGeoCoordinate | None = ..., top_left: PySide6.QtPositioning.QGeoCoordinate | None = ..., top_right: PySide6.QtPositioning.QGeoCoordinate | None = ..., center: PySide6.QtPositioning.QGeoCoordinate | None = ..., height: float | None = ..., width: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, coordinates: collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate], /, *, bottom_left: PySide6.QtPositioning.QGeoCoordinate | None = ..., bottom_right: PySide6.QtPositioning.QGeoCoordinate | None = ..., top_left: PySide6.QtPositioning.QGeoCoordinate | None = ..., top_right: PySide6.QtPositioning.QGeoCoordinate | None = ..., center: PySide6.QtPositioning.QGeoCoordinate | None = ..., height: float | None = ..., width: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, bottom_left: PySide6.QtPositioning.QGeoCoordinate | None = ..., bottom_right: PySide6.QtPositioning.QGeoCoordinate | None = ..., top_left: PySide6.QtPositioning.QGeoCoordinate | None = ..., top_right: PySide6.QtPositioning.QGeoCoordinate | None = ..., center: PySide6.QtPositioning.QGeoCoordinate | None = ..., height: float | None = ..., width: float | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __ior__(self, rectangle: PySide6.QtPositioning.QGeoRectangle | PySide6.QtPositioning.QGeoShape | collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate], /) -> PySide6.QtPositioning.QGeoRectangle: ...
    def __lshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def __or__(self, rectangle: PySide6.QtPositioning.QGeoRectangle | PySide6.QtPositioning.QGeoShape | collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate], /) -> PySide6.QtPositioning.QGeoRectangle: ...
    def __rshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def bottom_left(self, /) -> PySide6.QtPositioning.QGeoCoordinate: ...
    def bottom_right(self, /) -> PySide6.QtPositioning.QGeoCoordinate: ...
    def center(self, /) -> PySide6.QtPositioning.QGeoCoordinate: ...
    @typing.overload
    def contains(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> bool: ...
    @typing.overload
    def contains(self, rectangle: PySide6.QtPositioning.QGeoRectangle | PySide6.QtPositioning.QGeoShape | collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate], /) -> bool: ...
    def extend_rectangle(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def height(self, /) -> float: ...
    def intersects(self, rectangle: PySide6.QtPositioning.QGeoRectangle | PySide6.QtPositioning.QGeoShape | collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate], /) -> bool: ...
    def set_bottom_left(self, bottomLeft: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def set_bottom_right(self, bottomRight: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def set_center(self, center: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def set_height(self, degreesHeight: float, /) -> None: ...
    def set_top_left(self, topLeft: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def set_top_right(self, topRight: PySide6.QtPositioning.QGeoCoordinate, /) -> None: ...
    def set_width(self, degreesWidth: float, /) -> None: ...
    def to_string(self, /) -> str: ...
    def top_left(self, /) -> PySide6.QtPositioning.QGeoCoordinate: ...
    def top_right(self, /) -> PySide6.QtPositioning.QGeoCoordinate: ...
    def translate(self, degreesLatitude: float, degreesLongitude: float, /) -> None: ...
    def translated(self, degreesLatitude: float, degreesLongitude: float, /) -> PySide6.QtPositioning.QGeoRectangle: ...
    def united(self, rectangle: PySide6.QtPositioning.QGeoRectangle | PySide6.QtPositioning.QGeoShape | collections.abc.Sequence[PySide6.QtPositioning.QGeoCoordinate], /) -> PySide6.QtPositioning.QGeoRectangle: ...
    def width(self, /) -> float: ...


class QGeoSatelliteInfo(Shiboken.Object):

    class Attribute(enum.Enum):

        Elevation                 = ...  # 0x0
        Azimuth                   = ...  # 0x1

    class SatelliteSystem(enum.Enum):

        Undefined                 = ...  # 0x0
        GPS                       = ...  # 0x1
        GLONASS                   = ...  # 0x2
        GALILEO                   = ...  # 0x3
        BEIDOU                    = ...  # 0x4
        QZSS                      = ...  # 0x5
        Multiple                  = ...  # 0xff
        CustomType                = ...  # 0x100


    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoSatelliteInfo, /, *, satellite_system: PySide6.QtPositioning.QGeoSatelliteInfo.SatelliteSystem | None = ..., satellite_identifier: int | None = ..., signal_strength: float | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, satellite_system: PySide6.QtPositioning.QGeoSatelliteInfo.SatelliteSystem | None = ..., satellite_identifier: int | None = ..., signal_strength: float | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtPositioning.QGeoSatelliteInfo, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __lshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def __ne__(self, rhs: PySide6.QtPositioning.QGeoSatelliteInfo, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def __rshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def attribute(self, attribute: PySide6.QtPositioning.QGeoSatelliteInfo.Attribute, /) -> float: ...
    def has_attribute(self, attribute: PySide6.QtPositioning.QGeoSatelliteInfo.Attribute, /) -> bool: ...
    def remove_attribute(self, attribute: PySide6.QtPositioning.QGeoSatelliteInfo.Attribute, /) -> None: ...
    def satellite_identifier(self, /) -> int: ...
    def satellite_system(self, /) -> PySide6.QtPositioning.QGeoSatelliteInfo.SatelliteSystem: ...
    def set_attribute(self, attribute: PySide6.QtPositioning.QGeoSatelliteInfo.Attribute, value: float, /) -> None: ...
    def set_satellite_identifier(self, satId: int, /) -> None: ...
    def set_satellite_system(self, system: PySide6.QtPositioning.QGeoSatelliteInfo.SatelliteSystem, /) -> None: ...
    def set_signal_strength(self, signalStrength: int, /) -> None: ...
    def signal_strength(self, /) -> int: ...
    def swap(self, other: PySide6.QtPositioning.QGeoSatelliteInfo, /) -> None: ...


class QGeoSatelliteInfoSource(PySide6.QtCore.QObject):

    errorOccurred            : typing.ClassVar[Signal] = ... # errorOccurred(QGeoSatelliteInfoSource::Error)
    satellitesInUseUpdated   : typing.ClassVar[Signal] = ... # satellitesInUseUpdated(QList<QGeoSatelliteInfo>)
    satellitesInViewUpdated  : typing.ClassVar[Signal] = ... # satellitesInViewUpdated(QList<QGeoSatelliteInfo>)

    class Error(enum.Enum):

        UnknownSourceError        = ...  # -1
        AccessError               = ...  # 0x0
        ClosedError               = ...  # 0x1
        NoError                   = ...  # 0x2
        UpdateTimeoutError        = ...  # 0x3


    def __init__(self, parent: PySide6.QtCore.QObject, /, *, update_interval: int | None = ..., minimum_update_interval: int | None = ...) -> None: ...

    @staticmethod
    def available_sources() -> typing.List[str]: ...
    def backend_property(self, name: str, /) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def create_default_source(parent: PySide6.QtCore.QObject, /) -> PySide6.QtPositioning.QGeoSatelliteInfoSource: ...
    @typing.overload
    @staticmethod
    def create_default_source(parameters: typing.Dict[str, typing.Any], parent: PySide6.QtCore.QObject, /) -> PySide6.QtPositioning.QGeoSatelliteInfoSource: ...
    @typing.overload
    @staticmethod
    def create_source(sourceName: str, parent: PySide6.QtCore.QObject, /) -> PySide6.QtPositioning.QGeoSatelliteInfoSource: ...
    @typing.overload
    @staticmethod
    def create_source(sourceName: str, parameters: typing.Dict[str, typing.Any], parent: PySide6.QtCore.QObject, /) -> PySide6.QtPositioning.QGeoSatelliteInfoSource: ...
    def error(self, /) -> PySide6.QtPositioning.QGeoSatelliteInfoSource.Error: ...
    def minimum_update_interval(self, /) -> int: ...
    def request_update(self, /, timeout: int | None = ...) -> None: ...
    def set_backend_property(self, name: str, value: typing.Any, /) -> bool: ...
    def set_update_interval(self, msec: int, /) -> None: ...
    def source_name(self, /) -> str: ...
    def start_updates(self, /) -> None: ...
    def stop_updates(self, /) -> None: ...
    def update_interval(self, /) -> int: ...


class QGeoShape(Shiboken.Object):

    class ShapeType(enum.Enum):

        UnknownType               = ...  # 0x0
        RectangleType             = ...  # 0x1
        CircleType                = ...  # 0x2
        PathType                  = ...  # 0x3
        PolygonType               = ...  # 0x4


    @typing.overload
    def __init__(self, other: PySide6.QtPositioning.QGeoShape, /, *, type: PySide6.QtPositioning.QGeoShape.ShapeType | None = ..., is_valid: bool | None = ..., is_empty: bool | None = ..., center: PySide6.QtPositioning.QGeoCoordinate | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, type: PySide6.QtPositioning.QGeoShape.ShapeType | None = ..., is_valid: bool | None = ..., is_empty: bool | None = ..., center: PySide6.QtPositioning.QGeoCoordinate | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtPositioning.QGeoShape, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __lshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def __ne__(self, rhs: PySide6.QtPositioning.QGeoShape, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def __rshift__(self, stream: PySide6.QtCore.QDataStream, /) -> PySide6.QtCore.QDataStream: ...
    def bounding_geo_rectangle(self, /) -> PySide6.QtPositioning.QGeoRectangle: ...
    def center(self, /) -> PySide6.QtPositioning.QGeoCoordinate: ...
    def contains(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, /) -> bool: ...
    def is_empty(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def to_string(self, /) -> str: ...
    def type(self, /) -> PySide6.QtPositioning.QGeoShape.ShapeType: ...


class QIntList: ...


class QNmeaPositionInfoSource(PySide6.QtPositioning.QGeoPositionInfoSource):

    class UpdateMode(enum.Enum):

        RealTimeMode              = ...  # 0x1
        SimulationMode            = ...  # 0x2


    def __init__(self, updateMode: PySide6.QtPositioning.QNmeaPositionInfoSource.UpdateMode, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def device(self, /) -> PySide6.QtCore.QIODevice: ...
    def error(self, /) -> PySide6.QtPositioning.QGeoPositionInfoSource.Error: ...
    def last_known_position(self, /, fromSatellitePositioningMethodsOnly: bool = ...) -> PySide6.QtPositioning.QGeoPositionInfo: ...
    def minimum_update_interval(self, /) -> int: ...
    @typing.overload
    def parse_pos_info_from_nmea_data(self, data: bytes | bytearray | memoryview, size: int, posInfo: PySide6.QtPositioning.QGeoPositionInfo, /) -> typing.Tuple[bool, bool]: ...
    @typing.overload
    def parse_pos_info_from_nmea_data(self, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, posInfo: PySide6.QtPositioning.QGeoPositionInfo, /) -> typing.Tuple[bool, bool]: ...
    def request_update(self, /, timeout: int | None = ...) -> None: ...
    def set_device(self, source: PySide6.QtCore.QIODevice, /) -> None: ...
    def set_error(self, positionError: PySide6.QtPositioning.QGeoPositionInfoSource.Error, /) -> None: ...
    def set_update_interval(self, msec: int, /) -> None: ...
    def set_user_equivalent_range_error(self, uere: float, /) -> None: ...
    def start_updates(self, /) -> None: ...
    def stop_updates(self, /) -> None: ...
    def supported_positioning_methods(self, /) -> PySide6.QtPositioning.QGeoPositionInfoSource.PositioningMethod: ...
    def update_mode(self, /) -> PySide6.QtPositioning.QNmeaPositionInfoSource.UpdateMode: ...
    def user_equivalent_range_error(self, /) -> float: ...


class QNmeaSatelliteInfoSource(PySide6.QtPositioning.QGeoSatelliteInfoSource):

    class SatelliteInfoParseStatus(enum.Enum):

        NotParsed                 = ...  # 0x0
        PartiallyParsed           = ...  # 0x1
        FullyParsed               = ...  # 0x2

    class UpdateMode(enum.Enum):

        RealTimeMode              = ...  # 0x1
        SimulationMode            = ...  # 0x2


    def __init__(self, mode: PySide6.QtPositioning.QNmeaSatelliteInfoSource.UpdateMode, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def backend_property(self, name: str, /) -> typing.Any: ...
    def device(self, /) -> PySide6.QtCore.QIODevice: ...
    def error(self, /) -> PySide6.QtPositioning.QGeoSatelliteInfoSource.Error: ...
    def minimum_update_interval(self, /) -> int: ...
    @typing.overload
    def parse_satellite_info_from_nmea(self, data: bytes | bytearray | memoryview, size: int, infos: collections.abc.Sequence[PySide6.QtPositioning.QGeoSatelliteInfo], system: PySide6.QtPositioning.QGeoSatelliteInfo.SatelliteSystem, /) -> PySide6.QtPositioning.QNmeaSatelliteInfoSource.SatelliteInfoParseStatus: ...
    @typing.overload
    def parse_satellite_info_from_nmea(self, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, infos: collections.abc.Sequence[PySide6.QtPositioning.QGeoSatelliteInfo], system: PySide6.QtPositioning.QGeoSatelliteInfo.SatelliteSystem, /) -> PySide6.QtPositioning.QNmeaSatelliteInfoSource.SatelliteInfoParseStatus: ...
    @typing.overload
    def parse_satellites_in_use_from_nmea(self, data: bytes | bytearray | memoryview, size: int, pnrsInUse: collections.abc.Sequence[int], /) -> PySide6.QtPositioning.QGeoSatelliteInfo.SatelliteSystem: ...
    @typing.overload
    def parse_satellites_in_use_from_nmea(self, data: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, pnrsInUse: collections.abc.Sequence[int], /) -> PySide6.QtPositioning.QGeoSatelliteInfo.SatelliteSystem: ...
    def request_update(self, /, timeout: int | None = ...) -> None: ...
    def set_backend_property(self, name: str, value: typing.Any, /) -> bool: ...
    def set_device(self, source: PySide6.QtCore.QIODevice, /) -> None: ...
    def set_error(self, satelliteError: PySide6.QtPositioning.QGeoSatelliteInfoSource.Error, /) -> None: ...
    def set_update_interval(self, msec: int, /) -> None: ...
    def start_updates(self, /) -> None: ...
    def stop_updates(self, /) -> None: ...
    def update_mode(self, /) -> PySide6.QtPositioning.QNmeaSatelliteInfoSource.UpdateMode: ...


# eof
