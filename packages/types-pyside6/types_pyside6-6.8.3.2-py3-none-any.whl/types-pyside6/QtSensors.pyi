# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtSensors, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtSensors`

import PySide6.QtSensors
import PySide6.QtCore

import os
import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QAccelerometer(PySide6.QtSensors.QSensor):

    accelerationModeChanged  : typing.ClassVar[Signal] = ... # accelerationModeChanged(AccelerationMode)

    class AccelerationMode(enum.Enum):

        Combined                  = ...  # 0x0
        Gravity                   = ...  # 0x1
        User                      = ...  # 0x2


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, acceleration_mode: PySide6.QtSensors.QAccelerometer.AccelerationMode | None = ...) -> None: ...

    def acceleration_mode(self, /) -> PySide6.QtSensors.QAccelerometer.AccelerationMode: ...
    def reading(self, /) -> PySide6.QtSensors.QAccelerometerReading: ...
    def set_acceleration_mode(self, accelerationMode: PySide6.QtSensors.QAccelerometer.AccelerationMode, /) -> None: ...


class QAccelerometerFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QAccelerometerReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QAccelerometerReading(PySide6.QtSensors.QSensorReading):

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, x: float | None = ..., y: float | None = ..., z: float | None = ...) -> None: ...

    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def set_x(self, x: float, /) -> None: ...
    def set_y(self, y: float, /) -> None: ...
    def set_z(self, z: float, /) -> None: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QAmbientLightFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QAmbientLightReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QAmbientLightReading(PySide6.QtSensors.QSensorReading):

    class LightLevel(enum.Enum):

        Undefined                 = ...  # 0x0
        Dark                      = ...  # 0x1
        Twilight                  = ...  # 0x2
        Light                     = ...  # 0x3
        Bright                    = ...  # 0x4
        Sunny                     = ...  # 0x5


    def __init__(self, parent: PySide6.QtCore.QObject, /, *, light_level: PySide6.QtSensors.QAmbientLightReading.LightLevel | None = ...) -> None: ...

    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def light_level(self, /) -> PySide6.QtSensors.QAmbientLightReading.LightLevel: ...
    def set_light_level(self, lightLevel: PySide6.QtSensors.QAmbientLightReading.LightLevel, /) -> None: ...


class QAmbientLightSensor(PySide6.QtSensors.QSensor):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def reading(self, /) -> PySide6.QtSensors.QAmbientLightReading: ...


class QAmbientTemperatureFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QAmbientTemperatureReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QAmbientTemperatureReading(PySide6.QtSensors.QSensorReading):

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, temperature: float | None = ...) -> None: ...

    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def set_temperature(self, temperature: float, /) -> None: ...
    def temperature(self, /) -> float: ...


class QAmbientTemperatureSensor(PySide6.QtSensors.QSensor):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def reading(self, /) -> PySide6.QtSensors.QAmbientTemperatureReading: ...


class QCompass(PySide6.QtSensors.QSensor):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def reading(self, /) -> PySide6.QtSensors.QCompassReading: ...


class QCompassFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QCompassReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QCompassReading(PySide6.QtSensors.QSensorReading):

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, azimuth: float | None = ..., calibration_level: float | None = ...) -> None: ...

    def azimuth(self, /) -> float: ...
    def calibration_level(self, /) -> float: ...
    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def set_azimuth(self, azimuth: float, /) -> None: ...
    def set_calibration_level(self, calibrationLevel: float, /) -> None: ...


class QGyroscope(PySide6.QtSensors.QSensor):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def reading(self, /) -> PySide6.QtSensors.QGyroscopeReading: ...


class QGyroscopeFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QGyroscopeReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QGyroscopeReading(PySide6.QtSensors.QSensorReading):

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, x: float | None = ..., y: float | None = ..., z: float | None = ...) -> None: ...

    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def set_x(self, x: float, /) -> None: ...
    def set_y(self, y: float, /) -> None: ...
    def set_z(self, z: float, /) -> None: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QHumidityFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QHumidityReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QHumidityReading(PySide6.QtSensors.QSensorReading):

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, relative_humidity: float | None = ..., absolute_humidity: float | None = ...) -> None: ...

    def absolute_humidity(self, /) -> float: ...
    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def relative_humidity(self, /) -> float: ...
    def set_absolute_humidity(self, value: float, /) -> None: ...
    def set_relative_humidity(self, percent: float, /) -> None: ...


class QHumiditySensor(PySide6.QtSensors.QSensor):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def reading(self, /) -> PySide6.QtSensors.QHumidityReading: ...


class QIRProximityFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QIRProximityReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QIRProximityReading(PySide6.QtSensors.QSensorReading):

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, reflectance: float | None = ...) -> None: ...

    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def reflectance(self, /) -> float: ...
    def set_reflectance(self, reflectance: float, /) -> None: ...


class QIRProximitySensor(PySide6.QtSensors.QSensor):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def reading(self, /) -> PySide6.QtSensors.QIRProximityReading: ...


class QIntList: ...


class QLidFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QLidReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QLidReading(PySide6.QtSensors.QSensorReading):

    backLidChanged           : typing.ClassVar[Signal] = ... # backLidChanged(bool)
    frontLidChanged          : typing.ClassVar[Signal] = ... # frontLidChanged(bool)

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, back_lid_closed: bool | None = ..., front_lid_closed: bool | None = ...) -> None: ...

    def back_lid_closed(self, /) -> bool: ...
    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def front_lid_closed(self, /) -> bool: ...
    def set_back_lid_closed(self, closed: bool, /) -> None: ...
    def set_front_lid_closed(self, closed: bool, /) -> None: ...


class QLidSensor(PySide6.QtSensors.QSensor):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def reading(self, /) -> PySide6.QtSensors.QLidReading: ...


class QLightFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QLightReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QLightReading(PySide6.QtSensors.QSensorReading):

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, lux: float | None = ...) -> None: ...

    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def lux(self, /) -> float: ...
    def set_lux(self, lux: float, /) -> None: ...


class QLightSensor(PySide6.QtSensors.QSensor):

    fieldOfViewChanged       : typing.ClassVar[Signal] = ... # fieldOfViewChanged(double)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, field_of_view: float | None = ...) -> None: ...

    def field_of_view(self, /) -> float: ...
    def reading(self, /) -> PySide6.QtSensors.QLightReading: ...
    def set_field_of_view(self, fieldOfView: float, /) -> None: ...


class QMagnetometer(PySide6.QtSensors.QSensor):

    returnGeoValuesChanged   : typing.ClassVar[Signal] = ... # returnGeoValuesChanged(bool)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, return_geo_values: bool | None = ...) -> None: ...

    def reading(self, /) -> PySide6.QtSensors.QMagnetometerReading: ...
    def return_geo_values(self, /) -> bool: ...
    def set_return_geo_values(self, returnGeoValues: bool, /) -> None: ...


class QMagnetometerFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QMagnetometerReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QMagnetometerReading(PySide6.QtSensors.QSensorReading):

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, x: float | None = ..., y: float | None = ..., z: float | None = ..., calibration_level: float | None = ...) -> None: ...

    def calibration_level(self, /) -> float: ...
    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def set_calibration_level(self, calibrationLevel: float, /) -> None: ...
    def set_x(self, x: float, /) -> None: ...
    def set_y(self, y: float, /) -> None: ...
    def set_z(self, z: float, /) -> None: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QOrientationFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QOrientationReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QOrientationReading(PySide6.QtSensors.QSensorReading):

    class Orientation(enum.Enum):

        Undefined                 = ...  # 0x0
        TopUp                     = ...  # 0x1
        TopDown                   = ...  # 0x2
        LeftUp                    = ...  # 0x3
        RightUp                   = ...  # 0x4
        FaceUp                    = ...  # 0x5
        FaceDown                  = ...  # 0x6


    def __init__(self, parent: PySide6.QtCore.QObject, /, *, orientation: PySide6.QtSensors.QOrientationReading.Orientation | None = ...) -> None: ...

    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def orientation(self, /) -> PySide6.QtSensors.QOrientationReading.Orientation: ...
    def set_orientation(self, orientation: PySide6.QtSensors.QOrientationReading.Orientation, /) -> None: ...


class QOrientationSensor(PySide6.QtSensors.QSensor):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def reading(self, /) -> PySide6.QtSensors.QOrientationReading: ...


class QPressureFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QPressureReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QPressureReading(PySide6.QtSensors.QSensorReading):

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, pressure: float | None = ..., temperature: float | None = ...) -> None: ...

    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def pressure(self, /) -> float: ...
    def set_pressure(self, pressure: float, /) -> None: ...
    def set_temperature(self, temperature: float, /) -> None: ...
    def temperature(self, /) -> float: ...


class QPressureSensor(PySide6.QtSensors.QSensor):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def reading(self, /) -> PySide6.QtSensors.QPressureReading: ...


class QProximityFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QProximityReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QProximityReading(PySide6.QtSensors.QSensorReading):

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, close: bool | None = ...) -> None: ...

    def close(self, /) -> bool: ...
    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def set_close(self, close: bool, /) -> None: ...


class QProximitySensor(PySide6.QtSensors.QSensor):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def reading(self, /) -> PySide6.QtSensors.QProximityReading: ...


class QRotationFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QRotationReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QRotationReading(PySide6.QtSensors.QSensorReading):

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, x: float | None = ..., y: float | None = ..., z: float | None = ...) -> None: ...

    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def set_from_euler(self, x: float, y: float, z: float, /) -> None: ...
    def x(self, /) -> float: ...
    def y(self, /) -> float: ...
    def z(self, /) -> float: ...


class QRotationSensor(PySide6.QtSensors.QSensor):

    hasZChanged              : typing.ClassVar[Signal] = ... # hasZChanged(bool)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, has_z: bool | None = ...) -> None: ...

    def has_z(self, /) -> bool: ...
    def reading(self, /) -> PySide6.QtSensors.QRotationReading: ...
    def set_has_z(self, hasZ: bool, /) -> None: ...


class QSensor(PySide6.QtCore.QObject):

    activeChanged            : typing.ClassVar[Signal] = ... # activeChanged()
    alwaysOnChanged          : typing.ClassVar[Signal] = ... # alwaysOnChanged()
    availableSensorsChanged  : typing.ClassVar[Signal] = ... # availableSensorsChanged()
    axesOrientationModeChanged: typing.ClassVar[Signal] = ... # axesOrientationModeChanged(AxesOrientationMode)
    bufferSizeChanged        : typing.ClassVar[Signal] = ... # bufferSizeChanged(int)
    busyChanged              : typing.ClassVar[Signal] = ... # busyChanged()
    currentOrientationChanged: typing.ClassVar[Signal] = ... # currentOrientationChanged(int)
    dataRateChanged          : typing.ClassVar[Signal] = ... # dataRateChanged()
    efficientBufferSizeChanged: typing.ClassVar[Signal] = ... # efficientBufferSizeChanged(int)
    identifierChanged        : typing.ClassVar[Signal] = ... # identifierChanged()
    maxBufferSizeChanged     : typing.ClassVar[Signal] = ... # maxBufferSizeChanged(int)
    readingChanged           : typing.ClassVar[Signal] = ... # readingChanged()
    sensorError              : typing.ClassVar[Signal] = ... # sensorError(int)
    skipDuplicatesChanged    : typing.ClassVar[Signal] = ... # skipDuplicatesChanged(bool)
    userOrientationChanged   : typing.ClassVar[Signal] = ... # userOrientationChanged(int)

    class AxesOrientationMode(enum.Enum):

        FixedOrientation          = ...  # 0x0
        AutomaticOrientation      = ...  # 0x1
        UserOrientation           = ...  # 0x2

    class Feature(enum.Enum):

        Buffering                 = ...  # 0x0
        AlwaysOn                  = ...  # 0x1
        GeoValues                 = ...  # 0x2
        FieldOfView               = ...  # 0x3
        AccelerationMode          = ...  # 0x4
        SkipDuplicates            = ...  # 0x5
        AxesOrientation           = ...  # 0x6
        PressureSensorTemperature = ...  # 0x7
        Reserved                  = ...  # 0x101


    def __init__(self, type: PySide6.QtCore.QByteArray, /, parent: PySide6.QtCore.QObject | None = ..., *, identifier: PySide6.QtCore.QByteArray | None = ..., connected_to_backend: bool | None = ..., available_data_rates: collections.abc.Sequence[typing.Tuple[int, int]] | None = ..., data_rate: int | None = ..., reading: PySide6.QtSensors.QSensorReading | None = ..., busy: bool | None = ..., active: bool | None = ..., output_ranges: collections.abc.Sequence[PySide6.QtSensors.qoutputrange] | None = ..., output_range: int | None = ..., description: str | None = ..., error: int | None = ..., always_on: bool | None = ..., skip_duplicates: bool | None = ..., axes_orientation_mode: PySide6.QtSensors.QSensor.AxesOrientationMode | None = ..., current_orientation: int | None = ..., user_orientation: int | None = ..., max_buffer_size: int | None = ..., efficient_buffer_size: int | None = ..., buffer_size: int | None = ...) -> None: ...

    def add_filter(self, filter: PySide6.QtSensors.QSensorFilter, /) -> None: ...
    def available_data_rates(self, /) -> typing.List[typing.Tuple[int, int]]: ...
    def axes_orientation_mode(self, /) -> PySide6.QtSensors.QSensor.AxesOrientationMode: ...
    def backend(self, /) -> PySide6.QtSensors.QSensorBackend: ...
    def buffer_size(self, /) -> int: ...
    def connect_to_backend(self, /) -> bool: ...
    def current_orientation(self, /) -> int: ...
    def data_rate(self, /) -> int: ...
    @staticmethod
    def default_sensor_for_type(type: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> PySide6.QtCore.QByteArray: ...
    def description(self, /) -> str: ...
    def efficient_buffer_size(self, /) -> int: ...
    def error(self, /) -> int: ...
    def filters(self, /) -> typing.List[PySide6.QtSensors.QSensorFilter]: ...
    def identifier(self, /) -> PySide6.QtCore.QByteArray: ...
    def is_active(self, /) -> bool: ...
    def is_always_on(self, /) -> bool: ...
    def is_busy(self, /) -> bool: ...
    def is_connected_to_backend(self, /) -> bool: ...
    def is_feature_supported(self, feature: PySide6.QtSensors.QSensor.Feature, /) -> bool: ...
    def max_buffer_size(self, /) -> int: ...
    def output_range(self, /) -> int: ...
    def output_ranges(self, /) -> typing.List[PySide6.QtSensors.qoutputrange]: ...
    def reading(self, /) -> PySide6.QtSensors.QSensorReading: ...
    def remove_filter(self, filter: PySide6.QtSensors.QSensorFilter, /) -> None: ...
    @staticmethod
    def sensor_types() -> typing.List[PySide6.QtCore.QByteArray]: ...
    @staticmethod
    def sensors_for_type(type: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> typing.List[PySide6.QtCore.QByteArray]: ...
    def set_active(self, active: bool, /) -> None: ...
    def set_always_on(self, alwaysOn: bool, /) -> None: ...
    def set_axes_orientation_mode(self, axesOrientationMode: PySide6.QtSensors.QSensor.AxesOrientationMode, /) -> None: ...
    def set_buffer_size(self, bufferSize: int, /) -> None: ...
    def set_current_orientation(self, currentOrientation: int, /) -> None: ...
    def set_data_rate(self, rate: int, /) -> None: ...
    def set_efficient_buffer_size(self, efficientBufferSize: int, /) -> None: ...
    def set_identifier(self, identifier: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    def set_max_buffer_size(self, maxBufferSize: int, /) -> None: ...
    def set_output_range(self, index: int, /) -> None: ...
    def set_skip_duplicates(self, skipDuplicates: bool, /) -> None: ...
    def set_user_orientation(self, userOrientation: int, /) -> None: ...
    def skip_duplicates(self, /) -> bool: ...
    def start(self, /) -> bool: ...
    def stop(self, /) -> None: ...
    def type(self, /) -> PySide6.QtCore.QByteArray: ...
    def user_orientation(self, /) -> int: ...


class QSensorBackend(PySide6.QtCore.QObject):

    def __init__(self, sensor: PySide6.QtSensors.QSensor, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def add_data_rate(self, min: float, max: float, /) -> None: ...
    def add_output_range(self, min: float, max: float, accuracy: float, /) -> None: ...
    def is_feature_supported(self, feature: PySide6.QtSensors.QSensor.Feature, /) -> bool: ...
    def new_reading_available(self, /) -> None: ...
    def reading(self, /) -> PySide6.QtSensors.QSensorReading: ...
    def sensor(self, /) -> PySide6.QtSensors.QSensor: ...
    def sensor_busy(self, /, busy: bool = ...) -> None: ...
    def sensor_error(self, error: int, /) -> None: ...
    def sensor_stopped(self, /) -> None: ...
    def set_data_rates(self, otherSensor: PySide6.QtSensors.QSensor, /) -> None: ...
    def set_description(self, description: str, /) -> None: ...
    def start(self, /) -> None: ...
    def stop(self, /) -> None: ...


class QSensorBackendFactory(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def create_backend(self, sensor: PySide6.QtSensors.QSensor, /) -> PySide6.QtSensors.QSensorBackend: ...


class QSensorChangesInterface(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def sensors_changed(self, /) -> None: ...


class QSensorFilter(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...
    def set_sensor(self, sensor: PySide6.QtSensors.QSensor, /) -> None: ...


class QSensorManager(Shiboken.Object):

    def __init__(self, /) -> None: ...

    @staticmethod
    def create_backend(sensor: PySide6.QtSensors.QSensor, /) -> PySide6.QtSensors.QSensorBackend: ...
    @staticmethod
    def is_backend_registered(type: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, identifier: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> bool: ...
    @staticmethod
    def register_backend(type: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, identifier: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, factory: PySide6.QtSensors.QSensorBackendFactory, /) -> None: ...
    @staticmethod
    def set_default_backend(type: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, identifier: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...
    @staticmethod
    def unregister_backend(type: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, identifier: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> None: ...


class QSensorPluginInterface(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def register_sensors(self, /) -> None: ...


class QSensorReading(PySide6.QtCore.QObject):
    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def set_timestamp(self, timestamp: int, /) -> None: ...
    def timestamp(self, /) -> int: ...
    def value(self, index: int, /) -> typing.Any: ...
    def value_count(self, /) -> int: ...


class QTapFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QTapReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QTapReading(PySide6.QtSensors.QSensorReading):

    class TapDirection(enum.Enum):

        Undefined                 = ...  # 0x0
        X                         = ...  # 0x1
        Y                         = ...  # 0x2
        Z                         = ...  # 0x4
        X_Pos                     = ...  # 0x11
        Y_Pos                     = ...  # 0x22
        Z_Pos                     = ...  # 0x44
        X_Neg                     = ...  # 0x101
        X_Both                    = ...  # 0x111
        Y_Neg                     = ...  # 0x202
        Y_Both                    = ...  # 0x222
        Z_Neg                     = ...  # 0x404
        Z_Both                    = ...  # 0x444


    def __init__(self, parent: PySide6.QtCore.QObject, /, *, tap_direction: PySide6.QtSensors.QTapReading.TapDirection | None = ..., double_tap: bool | None = ...) -> None: ...

    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def is_double_tap(self, /) -> bool: ...
    def set_double_tap(self, doubleTap: bool, /) -> None: ...
    def set_tap_direction(self, tapDirection: PySide6.QtSensors.QTapReading.TapDirection, /) -> None: ...
    def tap_direction(self, /) -> PySide6.QtSensors.QTapReading.TapDirection: ...


class QTapSensor(PySide6.QtSensors.QSensor):

    returnDoubleTapEventsChanged: typing.ClassVar[Signal] = ... # returnDoubleTapEventsChanged(bool)

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, return_double_tap_events: bool | None = ...) -> None: ...

    def reading(self, /) -> PySide6.QtSensors.QTapReading: ...
    def return_double_tap_events(self, /) -> bool: ...
    def set_return_double_tap_events(self, returnDoubleTapEvents: bool, /) -> None: ...


class QTiltFilter(PySide6.QtSensors.QSensorFilter):
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QTiltReading, /) -> bool: ...
    @typing.overload
    def filter(self, reading: PySide6.QtSensors.QSensorReading, /) -> bool: ...


class QTiltReading(PySide6.QtSensors.QSensorReading):

    def __init__(self, parent: PySide6.QtCore.QObject, /, *, y_rotation: float | None = ..., x_rotation: float | None = ...) -> None: ...

    def copy_values_from(self, other: PySide6.QtSensors.QSensorReading, /) -> None: ...
    def setXRotation(self, x: float, /) -> None: ...
    def setYRotation(self, y: float, /) -> None: ...
    def x_rotation(self, /) -> float: ...
    def y_rotation(self, /) -> float: ...


class QTiltSensor(PySide6.QtSensors.QSensor):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def calibrate(self, /) -> None: ...
    def reading(self, /) -> PySide6.QtSensors.QTiltReading: ...


class qoutputrange(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, qoutputrange: PySide6.QtSensors.qoutputrange, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...


# eof
