# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtDesigner, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtDesigner`

import PySide6.QtDesigner
import PySide6.QtCore
import PySide6.QtGui
import PySide6.QtWidgets

import enum
import typing
import collections
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QAbstractExtensionFactory(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def extension(self, object: PySide6.QtCore.QObject, iid: str, /) -> PySide6.QtCore.QObject: ...


class QAbstractExtensionManager(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def extension(self, object: PySide6.QtCore.QObject, iid: str, /) -> PySide6.QtCore.QObject: ...
    def register_extensions(self, factory: PySide6.QtDesigner.QAbstractExtensionFactory, iid: str, /) -> None: ...
    def unregister_extensions(self, factory: PySide6.QtDesigner.QAbstractExtensionFactory, iid: str, /) -> None: ...


class QAbstractFormBuilder(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def add_menu_action(self, action: PySide6.QtGui.QAction, /) -> None: ...
    def apply_property_internally(self, o: PySide6.QtCore.QObject, propertyName: str, value: typing.Any, /) -> bool: ...
    def check_property(self, obj: PySide6.QtCore.QObject, prop: str, /) -> bool: ...
    def create_action(self, parent: PySide6.QtCore.QObject, name: str, /) -> PySide6.QtGui.QAction: ...
    def create_action_group(self, parent: PySide6.QtCore.QObject, name: str, /) -> PySide6.QtGui.QActionGroup: ...
    def create_layout(self, layoutName: str, parent: PySide6.QtCore.QObject, name: str, /) -> PySide6.QtWidgets.QLayout: ...
    def create_widget(self, widgetName: str, parentWidget: PySide6.QtWidgets.QWidget, name: str, /) -> PySide6.QtWidgets.QWidget: ...
    def error_string(self, /) -> str: ...
    def load(self, dev: PySide6.QtCore.QIODevice, /, parentWidget: PySide6.QtWidgets.QWidget | None = ...) -> PySide6.QtWidgets.QWidget: ...
    def reset(self, /) -> None: ...
    def save(self, dev: PySide6.QtCore.QIODevice, widget: PySide6.QtWidgets.QWidget, /) -> None: ...
    def set_working_directory(self, directory: PySide6.QtCore.QDir, /) -> None: ...
    @staticmethod
    def tool_bar_area_meta_enum() -> PySide6.QtCore.QMetaEnum: ...
    def working_directory(self, /) -> PySide6.QtCore.QDir: ...


class QDesignerActionEditorInterface(PySide6.QtWidgets.QWidget):

    def __init__(self, parent: PySide6.QtWidgets.QWidget, /, flags: PySide6.QtCore.Qt.WindowType = ...) -> None: ...

    def core(self, /) -> PySide6.QtDesigner.QDesignerFormEditorInterface: ...
    def manage_action(self, action: PySide6.QtGui.QAction, /) -> None: ...
    def set_form_window(self, formWindow: PySide6.QtDesigner.QDesignerFormWindowInterface, /) -> None: ...
    def unmanage_action(self, action: PySide6.QtGui.QAction, /) -> None: ...


class QDesignerContainerExtension(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def add_widget(self, widget: PySide6.QtWidgets.QWidget, /) -> None: ...
    def can_add_widget(self, /) -> bool: ...
    def can_remove(self, index: int, /) -> bool: ...
    def count(self, /) -> int: ...
    def current_index(self, /) -> int: ...
    def insert_widget(self, index: int, widget: PySide6.QtWidgets.QWidget, /) -> None: ...
    def remove(self, index: int, /) -> None: ...
    def set_current_index(self, index: int, /) -> None: ...
    def widget(self, index: int, /) -> PySide6.QtWidgets.QWidget: ...


class QDesignerCustomWidgetCollectionInterface(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def custom_widgets(self, /) -> typing.List[PySide6.QtDesigner.QDesignerCustomWidgetInterface]: ...


class QDesignerCustomWidgetInterface(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def code_template(self, /) -> str: ...
    def create_widget(self, parent: PySide6.QtWidgets.QWidget, /) -> PySide6.QtWidgets.QWidget: ...
    def dom_xml(self, /) -> str: ...
    def group(self, /) -> str: ...
    def icon(self, /) -> PySide6.QtGui.QIcon: ...
    def include_file(self, /) -> str: ...
    def initialize(self, core: PySide6.QtDesigner.QDesignerFormEditorInterface, /) -> None: ...
    def is_container(self, /) -> bool: ...
    def is_initialized(self, /) -> bool: ...
    def name(self, /) -> str: ...
    def tool_tip(self, /) -> str: ...
    def whats_this(self, /) -> str: ...


class QDesignerDnDItemInterface(Shiboken.Object):

    class DropType(enum.Enum):

        MoveDrop                  = ...  # 0x0
        CopyDrop                  = ...  # 0x1


    def __init__(self, /) -> None: ...

    def decoration(self, /) -> PySide6.QtWidgets.QWidget: ...
    def hot_spot(self, /) -> PySide6.QtCore.QPoint: ...
    def source(self, /) -> PySide6.QtWidgets.QWidget: ...
    def type(self, /) -> PySide6.QtDesigner.QDesignerDnDItemInterface.DropType: ...
    def widget(self, /) -> PySide6.QtWidgets.QWidget: ...


class QDesignerDynamicPropertySheetExtension(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def add_dynamic_property(self, propertyName: str, value: typing.Any, /) -> int: ...
    def can_add_dynamic_property(self, propertyName: str, /) -> bool: ...
    def dynamic_properties_allowed(self, /) -> bool: ...
    def is_dynamic_property(self, index: int, /) -> bool: ...
    def remove_dynamic_property(self, index: int, /) -> bool: ...


class QDesignerFormEditorInterface(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def action_editor(self, /) -> PySide6.QtDesigner.QDesignerActionEditorInterface: ...
    @staticmethod
    def create_icon(name: str, /) -> PySide6.QtGui.QIcon: ...
    def extension_manager(self, /) -> PySide6.QtDesigner.QExtensionManager: ...
    def form_window_manager(self, /) -> PySide6.QtDesigner.QDesignerFormWindowManagerInterface: ...
    def object_inspector(self, /) -> PySide6.QtDesigner.QDesignerObjectInspectorInterface: ...
    def plugin_instances(self, /) -> typing.List[PySide6.QtCore.QObject]: ...
    def property_editor(self, /) -> PySide6.QtDesigner.QDesignerPropertyEditorInterface: ...
    def resource_location(self, /) -> str: ...
    def set_action_editor(self, actionEditor: PySide6.QtDesigner.QDesignerActionEditorInterface, /) -> None: ...
    def set_extension_manager(self, extensionManager: PySide6.QtDesigner.QExtensionManager, /) -> None: ...
    def set_form_manager(self, formWindowManager: PySide6.QtDesigner.QDesignerFormWindowManagerInterface, /) -> None: ...
    def set_object_inspector(self, objectInspector: PySide6.QtDesigner.QDesignerObjectInspectorInterface, /) -> None: ...
    def set_property_editor(self, propertyEditor: PySide6.QtDesigner.QDesignerPropertyEditorInterface, /) -> None: ...
    def set_top_level(self, topLevel: PySide6.QtWidgets.QWidget, /) -> None: ...
    def set_widget_box(self, widgetBox: PySide6.QtDesigner.QDesignerWidgetBoxInterface, /) -> None: ...
    def top_level(self, /) -> PySide6.QtWidgets.QWidget: ...
    def widget_box(self, /) -> PySide6.QtDesigner.QDesignerWidgetBoxInterface: ...


class QDesignerFormWindowCursorInterface(Shiboken.Object):

    class MoveMode(enum.Enum):

        MoveAnchor                = ...  # 0x0
        KeepAnchor                = ...  # 0x1

    class MoveOperation(enum.Enum):

        NoMove                    = ...  # 0x0
        Start                     = ...  # 0x1
        End                       = ...  # 0x2
        Next                      = ...  # 0x3
        Prev                      = ...  # 0x4
        Left                      = ...  # 0x5
        Right                     = ...  # 0x6
        Up                        = ...  # 0x7
        Down                      = ...  # 0x8


    def __init__(self, /) -> None: ...

    def current(self, /) -> PySide6.QtWidgets.QWidget: ...
    def form_window(self, /) -> PySide6.QtDesigner.QDesignerFormWindowInterface: ...
    def has_selection(self, /) -> bool: ...
    def is_widget_selected(self, widget: PySide6.QtWidgets.QWidget, /) -> bool: ...
    def move_position(self, op: PySide6.QtDesigner.QDesignerFormWindowCursorInterface.MoveOperation, /, mode: PySide6.QtDesigner.QDesignerFormWindowCursorInterface.MoveMode = ...) -> bool: ...
    def position(self, /) -> int: ...
    def reset_widget_property(self, widget: PySide6.QtWidgets.QWidget, name: str, /) -> None: ...
    def selected_widget(self, index: int, /) -> PySide6.QtWidgets.QWidget: ...
    def selected_widget_count(self, /) -> int: ...
    def set_position(self, pos: int, /, mode: PySide6.QtDesigner.QDesignerFormWindowCursorInterface.MoveMode = ...) -> None: ...
    def set_property(self, name: str, value: typing.Any, /) -> None: ...
    def set_widget_property(self, widget: PySide6.QtWidgets.QWidget, name: str, value: typing.Any, /) -> None: ...
    def widget(self, index: int, /) -> PySide6.QtWidgets.QWidget: ...
    def widget_count(self, /) -> int: ...


class QDesignerFormWindowInterface(PySide6.QtWidgets.QWidget):

    aboutToUnmanageWidget    : typing.ClassVar[Signal] = ... # aboutToUnmanageWidget(QWidget*)
    activated                : typing.ClassVar[Signal] = ... # activated(QWidget*)
    changed                  : typing.ClassVar[Signal] = ... # changed()
    featureChanged           : typing.ClassVar[Signal] = ... # featureChanged(Feature)
    fileNameChanged          : typing.ClassVar[Signal] = ... # fileNameChanged(QString)
    geometryChanged          : typing.ClassVar[Signal] = ... # geometryChanged()
    mainContainerChanged     : typing.ClassVar[Signal] = ... # mainContainerChanged(QWidget*)
    objectRemoved            : typing.ClassVar[Signal] = ... # objectRemoved(QObject*)
    resourceFilesChanged     : typing.ClassVar[Signal] = ... # resourceFilesChanged()
    selectionChanged         : typing.ClassVar[Signal] = ... # selectionChanged()
    toolChanged              : typing.ClassVar[Signal] = ... # toolChanged(int)
    widgetManaged            : typing.ClassVar[Signal] = ... # widgetManaged(QWidget*)
    widgetRemoved            : typing.ClassVar[Signal] = ... # widgetRemoved(QWidget*)
    widgetUnmanaged          : typing.ClassVar[Signal] = ... # widgetUnmanaged(QWidget*)

    class FeatureFlag(enum.Flag):

        EditFeature               = ...  # 0x1
        GridFeature               = ...  # 0x2
        DefaultFeature            = ...  # 0x3
        TabOrderFeature           = ...  # 0x4

    class ResourceFileSaveMode(enum.Enum):

        SaveAllResourceFiles      = ...  # 0x0
        SaveOnlyUsedResourceFiles = ...  # 0x1
        DontSaveResourceFiles     = ...  # 0x2


    def __init__(self, /, parent: PySide6.QtWidgets.QWidget | None = ..., flags: PySide6.QtCore.Qt.WindowType = ...) -> None: ...

    def absolute_dir(self, /) -> PySide6.QtCore.QDir: ...
    def activate_resource_file_paths(self, paths: collections.abc.Sequence[str], /) -> typing.Tuple[int, str]: ...
    def active_resource_file_paths(self, /) -> typing.List[str]: ...
    def add_resource_file(self, path: str, /) -> None: ...
    def author(self, /) -> str: ...
    def begin_command(self, description: str, /) -> None: ...
    def check_contents(self, /) -> typing.List[str]: ...
    def clear_selection(self, /, changePropertyDisplay: bool = ...) -> None: ...
    def command_history(self, /) -> PySide6.QtGui.QUndoStack: ...
    def comment(self, /) -> str: ...
    def contents(self, /) -> str: ...
    def core(self, /) -> PySide6.QtDesigner.QDesignerFormEditorInterface: ...
    def current_tool(self, /) -> int: ...
    def cursor(self, /) -> PySide6.QtDesigner.QDesignerFormWindowCursorInterface: ...
    def edit_widgets(self, /) -> None: ...
    def emit_selection_changed(self, /) -> None: ...
    def end_command(self, /) -> None: ...
    def ensure_unique_object_name(self, object: PySide6.QtCore.QObject, /) -> None: ...
    def export_macro(self, /) -> str: ...
    def features(self, /) -> PySide6.QtDesigner.QDesignerFormWindowInterface.FeatureFlag: ...
    def file_name(self, /) -> str: ...
    @typing.overload
    @staticmethod
    def find_form_window(w: PySide6.QtWidgets.QWidget, /) -> PySide6.QtDesigner.QDesignerFormWindowInterface: ...
    @typing.overload
    @staticmethod
    def find_form_window(obj: PySide6.QtCore.QObject, /) -> PySide6.QtDesigner.QDesignerFormWindowInterface: ...
    def form_container(self, /) -> PySide6.QtWidgets.QWidget: ...
    def grid(self, /) -> PySide6.QtCore.QPoint: ...
    def has_feature(self, f: PySide6.QtDesigner.QDesignerFormWindowInterface.FeatureFlag, /) -> bool: ...
    def include_hints(self, /) -> typing.List[str]: ...
    def is_dirty(self, /) -> bool: ...
    def is_managed(self, widget: PySide6.QtWidgets.QWidget, /) -> bool: ...
    def layout_default(self, /) -> typing.Tuple[int, int]: ...
    def layout_function(self, /) -> typing.Tuple[str, str]: ...
    def main_container(self, /) -> PySide6.QtWidgets.QWidget: ...
    def manage_widget(self, widget: PySide6.QtWidgets.QWidget, /) -> None: ...
    def pixmap_function(self, /) -> str: ...
    def register_tool(self, tool: PySide6.QtDesigner.QDesignerFormWindowToolInterface, /) -> None: ...
    def remove_resource_file(self, path: str, /) -> None: ...
    def resource_file_save_mode(self, /) -> PySide6.QtDesigner.QDesignerFormWindowInterface.ResourceFileSaveMode: ...
    def resource_files(self, /) -> typing.List[str]: ...
    def select_widget(self, w: PySide6.QtWidgets.QWidget, /, select: bool = ...) -> None: ...
    def set_author(self, author: str, /) -> None: ...
    def set_comment(self, comment: str, /) -> None: ...
    @typing.overload
    def set_contents(self, dev: PySide6.QtCore.QIODevice, /) -> typing.Tuple[bool, str]: ...
    @typing.overload
    def set_contents(self, contents: str, /) -> bool: ...
    def set_current_tool(self, index: int, /) -> None: ...
    def set_dirty(self, dirty: bool, /) -> None: ...
    def set_export_macro(self, exportMacro: str, /) -> None: ...
    def set_features(self, f: PySide6.QtDesigner.QDesignerFormWindowInterface.FeatureFlag, /) -> None: ...
    def set_file_name(self, fileName: str, /) -> None: ...
    def set_grid(self, grid: PySide6.QtCore.QPoint, /) -> None: ...
    def set_include_hints(self, includeHints: collections.abc.Sequence[str], /) -> None: ...
    def set_layout_default(self, margin: int, spacing: int, /) -> None: ...
    def set_layout_function(self, margin: str, spacing: str, /) -> None: ...
    def set_main_container(self, mainContainer: PySide6.QtWidgets.QWidget, /) -> None: ...
    def set_pixmap_function(self, pixmapFunction: str, /) -> None: ...
    def set_resource_file_save_mode(self, behaviour: PySide6.QtDesigner.QDesignerFormWindowInterface.ResourceFileSaveMode, /) -> None: ...
    def simplify_selection(self, widgets: collections.abc.Sequence[PySide6.QtWidgets.QWidget], /) -> None: ...
    def tool(self, index: int, /) -> PySide6.QtDesigner.QDesignerFormWindowToolInterface: ...
    def tool_count(self, /) -> int: ...
    def unmanage_widget(self, widget: PySide6.QtWidgets.QWidget, /) -> None: ...


class QDesignerFormWindowManagerInterface(PySide6.QtCore.QObject):

    activeFormWindowChanged  : typing.ClassVar[Signal] = ... # activeFormWindowChanged(QDesignerFormWindowInterface*)
    formWindowAdded          : typing.ClassVar[Signal] = ... # formWindowAdded(QDesignerFormWindowInterface*)
    formWindowRemoved        : typing.ClassVar[Signal] = ... # formWindowRemoved(QDesignerFormWindowInterface*)
    formWindowSettingsChanged: typing.ClassVar[Signal] = ... # formWindowSettingsChanged(QDesignerFormWindowInterface*)

    class Action(enum.Enum):

        CutAction                 = ...  # 0x64
        CopyAction                = ...  # 0x65
        PasteAction               = ...  # 0x66
        DeleteAction              = ...  # 0x67
        SelectAllAction           = ...  # 0x68
        LowerAction               = ...  # 0xc8
        RaiseAction               = ...  # 0xc9
        UndoAction                = ...  # 0x12c
        RedoAction                = ...  # 0x12d
        HorizontalLayoutAction    = ...  # 0x190
        VerticalLayoutAction      = ...  # 0x191
        SplitHorizontalAction     = ...  # 0x192
        SplitVerticalAction       = ...  # 0x193
        GridLayoutAction          = ...  # 0x194
        FormLayoutAction          = ...  # 0x195
        BreakLayoutAction         = ...  # 0x196
        AdjustSizeAction          = ...  # 0x197
        SimplifyLayoutAction      = ...  # 0x198
        DefaultPreviewAction      = ...  # 0x1f4
        FormWindowSettingsDialogAction = ...  # 0x258

    class ActionGroup(enum.Enum):

        StyledPreviewActionGroup  = ...  # 0x64


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def action(self, action: PySide6.QtDesigner.QDesignerFormWindowManagerInterface.Action, /) -> PySide6.QtGui.QAction: ...
    def action_adjust_size(self, /) -> PySide6.QtGui.QAction: ...
    def action_break_layout(self, /) -> PySide6.QtGui.QAction: ...
    def action_copy(self, /) -> PySide6.QtGui.QAction: ...
    def action_cut(self, /) -> PySide6.QtGui.QAction: ...
    def action_delete(self, /) -> PySide6.QtGui.QAction: ...
    def action_form_layout(self, /) -> PySide6.QtGui.QAction: ...
    def action_grid_layout(self, /) -> PySide6.QtGui.QAction: ...
    def action_group(self, actionGroup: PySide6.QtDesigner.QDesignerFormWindowManagerInterface.ActionGroup, /) -> PySide6.QtGui.QActionGroup: ...
    def action_horizontal_layout(self, /) -> PySide6.QtGui.QAction: ...
    def action_lower(self, /) -> PySide6.QtGui.QAction: ...
    def action_paste(self, /) -> PySide6.QtGui.QAction: ...
    def action_raise(self, /) -> PySide6.QtGui.QAction: ...
    def action_redo(self, /) -> PySide6.QtGui.QAction: ...
    def action_select_all(self, /) -> PySide6.QtGui.QAction: ...
    def action_simplify_layout(self, /) -> PySide6.QtGui.QAction: ...
    def action_split_horizontal(self, /) -> PySide6.QtGui.QAction: ...
    def action_split_vertical(self, /) -> PySide6.QtGui.QAction: ...
    def action_undo(self, /) -> PySide6.QtGui.QAction: ...
    def action_vertical_layout(self, /) -> PySide6.QtGui.QAction: ...
    def active_form_window(self, /) -> PySide6.QtDesigner.QDesignerFormWindowInterface: ...
    def add_form_window(self, formWindow: PySide6.QtDesigner.QDesignerFormWindowInterface, /) -> None: ...
    def close_all_previews(self, /) -> None: ...
    def core(self, /) -> PySide6.QtDesigner.QDesignerFormEditorInterface: ...
    def create_form_window(self, /, parentWidget: PySide6.QtWidgets.QWidget | None = ..., flags: PySide6.QtCore.Qt.WindowType = ...) -> PySide6.QtDesigner.QDesignerFormWindowInterface: ...
    def create_preview_pixmap(self, /) -> PySide6.QtGui.QPixmap: ...
    def drag_items(self, item_list: collections.abc.Sequence[PySide6.QtDesigner.QDesignerDnDItemInterface], /) -> None: ...
    def form_window(self, index: int, /) -> PySide6.QtDesigner.QDesignerFormWindowInterface: ...
    def form_window_count(self, /) -> int: ...
    def remove_form_window(self, formWindow: PySide6.QtDesigner.QDesignerFormWindowInterface, /) -> None: ...
    def set_active_form_window(self, formWindow: PySide6.QtDesigner.QDesignerFormWindowInterface, /) -> None: ...
    def show_plugin_dialog(self, /) -> None: ...
    def show_preview(self, /) -> None: ...


class QDesignerFormWindowToolInterface(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def action(self, /) -> PySide6.QtGui.QAction: ...
    def activated(self, /) -> None: ...
    def core(self, /) -> PySide6.QtDesigner.QDesignerFormEditorInterface: ...
    def deactivated(self, /) -> None: ...
    def editor(self, /) -> PySide6.QtWidgets.QWidget: ...
    def form_window(self, /) -> PySide6.QtDesigner.QDesignerFormWindowInterface: ...
    def handle_event(self, widget: PySide6.QtWidgets.QWidget, managedWidget: PySide6.QtWidgets.QWidget, event: PySide6.QtCore.QEvent, /) -> bool: ...


class QDesignerMemberSheetExtension(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def count(self, /) -> int: ...
    def declared_in_class(self, index: int, /) -> str: ...
    def index_of(self, name: str, /) -> int: ...
    def inherited_from_widget(self, index: int, /) -> bool: ...
    def is_signal(self, index: int, /) -> bool: ...
    def is_slot(self, index: int, /) -> bool: ...
    def is_visible(self, index: int, /) -> bool: ...
    def member_group(self, index: int, /) -> str: ...
    def member_name(self, index: int, /) -> str: ...
    def parameter_names(self, index: int, /) -> typing.List[PySide6.QtCore.QByteArray]: ...
    def parameter_types(self, index: int, /) -> typing.List[PySide6.QtCore.QByteArray]: ...
    def set_member_group(self, index: int, group: str, /) -> None: ...
    def set_visible(self, index: int, b: bool, /) -> None: ...
    def signature(self, index: int, /) -> str: ...


class QDesignerObjectInspectorInterface(PySide6.QtWidgets.QWidget):

    def __init__(self, parent: PySide6.QtWidgets.QWidget, /, flags: PySide6.QtCore.Qt.WindowType = ...) -> None: ...

    def core(self, /) -> PySide6.QtDesigner.QDesignerFormEditorInterface: ...
    def set_form_window(self, formWindow: PySide6.QtDesigner.QDesignerFormWindowInterface, /) -> None: ...


class QDesignerPropertyEditorInterface(PySide6.QtWidgets.QWidget):

    propertyChanged          : typing.ClassVar[Signal] = ... # propertyChanged(QString,QVariant)

    def __init__(self, parent: PySide6.QtWidgets.QWidget, /, flags: PySide6.QtCore.Qt.WindowType = ...) -> None: ...

    def core(self, /) -> PySide6.QtDesigner.QDesignerFormEditorInterface: ...
    def current_property_name(self, /) -> str: ...
    def is_read_only(self, /) -> bool: ...
    def object(self, /) -> PySide6.QtCore.QObject: ...
    def set_object(self, object: PySide6.QtCore.QObject, /) -> None: ...
    def set_property_value(self, name: str, value: typing.Any, /, changed: bool = ...) -> None: ...
    def set_read_only(self, readOnly: bool, /) -> None: ...


class QDesignerPropertySheetExtension(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def count(self, /) -> int: ...
    def has_reset(self, index: int, /) -> bool: ...
    def index_of(self, name: str, /) -> int: ...
    def is_attribute(self, index: int, /) -> bool: ...
    def is_changed(self, index: int, /) -> bool: ...
    def is_enabled(self, index: int, /) -> bool: ...
    def is_visible(self, index: int, /) -> bool: ...
    def property(self, index: int, /) -> typing.Any: ...
    def property_group(self, index: int, /) -> str: ...
    def property_name(self, index: int, /) -> str: ...
    def reset(self, index: int, /) -> bool: ...
    def set_attribute(self, index: int, b: bool, /) -> None: ...
    def set_changed(self, index: int, changed: bool, /) -> None: ...
    def set_property(self, index: int, value: typing.Any, /) -> None: ...
    def set_property_group(self, index: int, group: str, /) -> None: ...
    def set_visible(self, index: int, b: bool, /) -> None: ...


class QDesignerTaskMenuExtension(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def preferred_edit_action(self, /) -> PySide6.QtGui.QAction: ...
    def task_actions(self, /) -> typing.List[PySide6.QtGui.QAction]: ...


class QDesignerWidgetBoxInterface(PySide6.QtWidgets.QWidget):

    class Category(Shiboken.Object):

        class Type(enum.Enum):

            Default                   = ...  # 0x0
            Scratchpad                = ...  # 0x1


        @typing.overload
        def __init__(self, Category: PySide6.QtDesigner.QDesignerWidgetBoxInterface.Category, /) -> None: ...
        @typing.overload
        def __init__(self, /, aname: str = ..., atype: PySide6.QtDesigner.QDesignerWidgetBoxInterface.Category.Type = ...) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def add_widget(self, awidget: PySide6.QtDesigner.QDesignerWidgetBoxInterface.Widget, /) -> None: ...
        def is_null(self, /) -> bool: ...
        def name(self, /) -> str: ...
        def remove_widget(self, idx: int, /) -> None: ...
        def set_name(self, aname: str, /) -> None: ...
        def set_type(self, atype: PySide6.QtDesigner.QDesignerWidgetBoxInterface.Category.Type, /) -> None: ...
        def type(self, /) -> PySide6.QtDesigner.QDesignerWidgetBoxInterface.Category.Type: ...
        def widget(self, idx: int, /) -> PySide6.QtDesigner.QDesignerWidgetBoxInterface.Widget: ...
        def widget_count(self, /) -> int: ...

    class Widget(Shiboken.Object):

        class Type(enum.Enum):

            Default                   = ...  # 0x0
            Custom                    = ...  # 0x1


        @typing.overload
        def __init__(self, w: PySide6.QtDesigner.QDesignerWidgetBoxInterface.Widget, /) -> None: ...
        @typing.overload
        def __init__(self, /, aname: str = ..., xml: str = ..., icon_name: str = ..., atype: PySide6.QtDesigner.QDesignerWidgetBoxInterface.Widget.Type = ...) -> None: ...

        def __copy__(self, /) -> typing.Self: ...
        def dom_xml(self, /) -> str: ...
        def icon_name(self, /) -> str: ...
        def is_null(self, /) -> bool: ...
        def name(self, /) -> str: ...
        def set_dom_xml(self, xml: str, /) -> None: ...
        def set_icon_name(self, icon_name: str, /) -> None: ...
        def set_name(self, aname: str, /) -> None: ...
        def set_type(self, atype: PySide6.QtDesigner.QDesignerWidgetBoxInterface.Widget.Type, /) -> None: ...
        def type(self, /) -> PySide6.QtDesigner.QDesignerWidgetBoxInterface.Widget.Type: ...


    def __init__(self, /, parent: PySide6.QtWidgets.QWidget | None = ..., flags: PySide6.QtCore.Qt.WindowType = ...) -> None: ...

    def add_category(self, cat: PySide6.QtDesigner.QDesignerWidgetBoxInterface.Category, /) -> None: ...
    def add_widget(self, cat_idx: int, wgt: PySide6.QtDesigner.QDesignerWidgetBoxInterface.Widget, /) -> None: ...
    def category(self, cat_idx: int, /) -> PySide6.QtDesigner.QDesignerWidgetBoxInterface.Category: ...
    def category_count(self, /) -> int: ...
    def drop_widgets(self, item_list: collections.abc.Sequence[PySide6.QtDesigner.QDesignerDnDItemInterface], global_mouse_pos: PySide6.QtCore.QPoint, /) -> None: ...
    def file_name(self, /) -> str: ...
    def find_or_insert_category(self, categoryName: str, /) -> int: ...
    def load(self, /) -> bool: ...
    def remove_category(self, cat_idx: int, /) -> None: ...
    def remove_widget(self, cat_idx: int, wgt_idx: int, /) -> None: ...
    def save(self, /) -> bool: ...
    def set_file_name(self, file_name: str, /) -> None: ...
    def widget(self, cat_idx: int, wgt_idx: int, /) -> PySide6.QtDesigner.QDesignerWidgetBoxInterface.Widget: ...
    def widget_count(self, cat_idx: int, /) -> int: ...


class QExtensionFactory(PySide6.QtCore.QObject, PySide6.QtDesigner.QAbstractExtensionFactory):

    def __init__(self, /, parent: PySide6.QtDesigner.QExtensionManager | None = ...) -> None: ...

    def create_extension(self, object: PySide6.QtCore.QObject, iid: str, parent: PySide6.QtCore.QObject, /) -> PySide6.QtCore.QObject: ...
    def extension(self, object: PySide6.QtCore.QObject, iid: str, /) -> PySide6.QtCore.QObject: ...
    def extension_manager(self, /) -> PySide6.QtDesigner.QExtensionManager: ...


class QExtensionManager(PySide6.QtCore.QObject, PySide6.QtDesigner.QAbstractExtensionManager):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def extension(self, object: PySide6.QtCore.QObject, iid: str, /) -> PySide6.QtCore.QObject: ...
    def register_extensions(self, factory: PySide6.QtDesigner.QAbstractExtensionFactory, /, iid: str = ...) -> None: ...
    def unregister_extensions(self, factory: PySide6.QtDesigner.QAbstractExtensionFactory, /, iid: str = ...) -> None: ...


class QFormBuilder(PySide6.QtDesigner.QAbstractFormBuilder):

    def __init__(self, /) -> None: ...

    def add_plugin_path(self, pluginPath: str, /) -> None: ...
    def clear_plugin_paths(self, /) -> None: ...
    def create_layout(self, layoutName: str, parent: PySide6.QtCore.QObject, name: str, /) -> PySide6.QtWidgets.QLayout: ...
    def create_widget(self, widgetName: str, parentWidget: PySide6.QtWidgets.QWidget, name: str, /) -> PySide6.QtWidgets.QWidget: ...
    def custom_widgets(self, /) -> typing.List[PySide6.QtDesigner.QDesignerCustomWidgetInterface]: ...
    def plugin_paths(self, /) -> typing.List[str]: ...
    def set_plugin_path(self, pluginPaths: collections.abc.Sequence[str], /) -> None: ...
    def update_custom_widgets(self, /) -> None: ...
    @staticmethod
    def widget_by_name(topLevel: PySide6.QtWidgets.QWidget, name: str, /) -> PySide6.QtWidgets.QWidget: ...


class QIntList: ...


class QPyDesignerContainerExtension(PySide6.QtCore.QObject, PySide6.QtDesigner.QDesignerContainerExtension):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...


class QPyDesignerCustomWidgetCollection(PySide6.QtDesigner.QDesignerCustomWidgetCollectionInterface):
    @staticmethod
    def add_custom_widget(c: PySide6.QtDesigner.QDesignerCustomWidgetInterface, /) -> None: ...
    def custom_widgets(self, /) -> typing.List[PySide6.QtDesigner.QDesignerCustomWidgetInterface]: ...
    @staticmethod
    def instance() -> PySide6.QtDesigner.QPyDesignerCustomWidgetCollection: ...
    @staticmethod
    def register_custom_widget(customWidgetType: object, /, xml: str = ..., tool_tip: str = ..., group: str = ..., module: str = ..., container: bool = ..., icon: str = ...) -> None: ...


class QPyDesignerMemberSheetExtension(PySide6.QtCore.QObject, PySide6.QtDesigner.QDesignerMemberSheetExtension):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...


class QPyDesignerPropertySheetExtension(PySide6.QtCore.QObject, PySide6.QtDesigner.QDesignerPropertySheetExtension):  # type: ignore[misc]

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...


class QPyDesignerTaskMenuExtension(PySide6.QtCore.QObject, PySide6.QtDesigner.QDesignerTaskMenuExtension):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...


# eof
