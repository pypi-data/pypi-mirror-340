# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtSql, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtSql`

import PySide6.QtSql
import PySide6.QtCore
import PySide6.QtWidgets

import enum
import typing
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QIntList: ...


class QSql(Shiboken.Object):

    class Location(enum.Enum):

        AfterLastRow              = ...  # -2
        BeforeFirstRow            = ...  # -1

    class NumericalPrecisionPolicy(enum.Enum):

        HighPrecision             = ...  # 0x0
        LowPrecisionInt32         = ...  # 0x1
        LowPrecisionInt64         = ...  # 0x2
        LowPrecisionDouble        = ...  # 0x4

    class ParamTypeFlag(enum.Flag):

        In                        = ...  # 0x1
        Out                       = ...  # 0x2
        InOut                     = ...  # 0x3
        Binary                    = ...  # 0x4

    class TableType(enum.Enum):

        Tables                    = ...  # 0x1
        SystemTables              = ...  # 0x2
        Views                     = ...  # 0x4
        AllTables                 = ...  # 0xff


class QSqlDatabase(Shiboken.Object):

    @typing.overload
    def __init__(self, driver: PySide6.QtSql.QSqlDriver, /, *, numerical_precision_policy: PySide6.QtSql.QSql.NumericalPrecisionPolicy | None = ...) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtSql.QSqlDatabase, /, *, numerical_precision_policy: PySide6.QtSql.QSql.NumericalPrecisionPolicy | None = ...) -> None: ...
    @typing.overload
    def __init__(self, type: str, /, *, numerical_precision_policy: PySide6.QtSql.QSql.NumericalPrecisionPolicy | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, *, numerical_precision_policy: PySide6.QtSql.QSql.NumericalPrecisionPolicy | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __repr__(self, /) -> str: ...
    @typing.overload
    @staticmethod
    def add_database(driver: PySide6.QtSql.QSqlDriver, /, connectionName: str = ...) -> PySide6.QtSql.QSqlDatabase: ...
    @typing.overload
    @staticmethod
    def add_database(type: str, /, connectionName: str = ...) -> PySide6.QtSql.QSqlDatabase: ...
    @typing.overload
    @staticmethod
    def clone_database(other: PySide6.QtSql.QSqlDatabase, connectionName: str, /) -> PySide6.QtSql.QSqlDatabase: ...
    @typing.overload
    @staticmethod
    def clone_database(other: str, connectionName: str, /) -> PySide6.QtSql.QSqlDatabase: ...
    def close(self, /) -> None: ...
    def commit(self, /) -> bool: ...
    def connect_options(self, /) -> str: ...
    def connection_name(self, /) -> str: ...
    @staticmethod
    def connection_names() -> typing.List[str]: ...
    @staticmethod
    def contains(connectionName: str = ...) -> bool: ...
    @staticmethod
    def database(connectionName: str = ..., open: bool = ...) -> PySide6.QtSql.QSqlDatabase: ...
    def database_name(self, /) -> str: ...
    def driver(self, /) -> PySide6.QtSql.QSqlDriver: ...
    def driver_name(self, /) -> str: ...
    @staticmethod
    def drivers() -> typing.List[str]: ...
    def exec(self, /, query: str = ...) -> PySide6.QtSql.QSqlQuery: ...
    def exec_(self, /, query: str = ...) -> PySide6.QtSql.QSqlQuery: ...
    def host_name(self, /) -> str: ...
    @staticmethod
    def is_driver_available(name: str, /) -> bool: ...
    def is_open(self, /) -> bool: ...
    def is_open_error(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def last_error(self, /) -> PySide6.QtSql.QSqlError: ...
    def move_to_thread(self, targetThread: PySide6.QtCore.QThread, /) -> bool: ...
    def numerical_precision_policy(self, /) -> PySide6.QtSql.QSql.NumericalPrecisionPolicy: ...
    @typing.overload
    def open(self, /) -> bool: ...
    @typing.overload
    def open(self, user: str, password: str, /) -> bool: ...
    def password(self, /) -> str: ...
    def port(self, /) -> int: ...
    def primary_index(self, tablename: str, /) -> PySide6.QtSql.QSqlIndex: ...
    def record(self, tablename: str, /) -> PySide6.QtSql.QSqlRecord: ...
    @staticmethod
    def register_sql_driver(name: str, creator: PySide6.QtSql.QSqlDriverCreatorBase, /) -> None: ...
    @staticmethod
    def remove_database(connectionName: str, /) -> None: ...
    def rollback(self, /) -> bool: ...
    def set_connect_options(self, /, options: str = ...) -> None: ...
    def set_database_name(self, name: str, /) -> None: ...
    def set_host_name(self, host: str, /) -> None: ...
    def set_numerical_precision_policy(self, precisionPolicy: PySide6.QtSql.QSql.NumericalPrecisionPolicy, /) -> None: ...
    def set_password(self, password: str, /) -> None: ...
    def set_port(self, p: int, /) -> None: ...
    def set_user_name(self, name: str, /) -> None: ...
    def tables(self, /, type: PySide6.QtSql.QSql.TableType = ...) -> typing.List[str]: ...
    def thread(self, /) -> PySide6.QtCore.QThread: ...
    def transaction(self, /) -> bool: ...
    def user_name(self, /) -> str: ...


class QSqlDriver(PySide6.QtCore.QObject):

    notification             : typing.ClassVar[Signal] = ... # notification(QString,QSqlDriver::NotificationSource,QVariant)

    class DbmsType(enum.Enum):

        UnknownDbms               = ...  # 0x0
        MSSqlServer               = ...  # 0x1
        MySqlServer               = ...  # 0x2
        PostgreSQL                = ...  # 0x3
        Oracle                    = ...  # 0x4
        Sybase                    = ...  # 0x5
        SQLite                    = ...  # 0x6
        Interbase                 = ...  # 0x7
        DB2                       = ...  # 0x8
        MimerSQL                  = ...  # 0x9

    class DriverFeature(enum.Enum):

        Transactions              = ...  # 0x0
        QuerySize                 = ...  # 0x1
        BLOB                      = ...  # 0x2
        Unicode                   = ...  # 0x3
        PreparedQueries           = ...  # 0x4
        NamedPlaceholders         = ...  # 0x5
        PositionalPlaceholders    = ...  # 0x6
        LastInsertId              = ...  # 0x7
        BatchOperations           = ...  # 0x8
        SimpleLocking             = ...  # 0x9
        LowPrecisionNumbers       = ...  # 0xa
        EventNotifications        = ...  # 0xb
        FinishQuery               = ...  # 0xc
        MultipleResultSets        = ...  # 0xd
        CancelQuery               = ...  # 0xe

    class IdentifierType(enum.Enum):

        FieldName                 = ...  # 0x0
        TableName                 = ...  # 0x1

    class NotificationSource(enum.Enum):

        UnknownSource             = ...  # 0x0
        SelfSource                = ...  # 0x1
        OtherSource               = ...  # 0x2

    class StatementType(enum.Enum):

        WhereStatement            = ...  # 0x0
        SelectStatement           = ...  # 0x1
        UpdateStatement           = ...  # 0x2
        InsertStatement           = ...  # 0x3
        DeleteStatement           = ...  # 0x4


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, numerical_precision_policy: PySide6.QtSql.QSql.NumericalPrecisionPolicy | None = ...) -> None: ...

    def begin_transaction(self, /) -> bool: ...
    def cancel_query(self, /) -> bool: ...
    def close(self, /) -> None: ...
    def commit_transaction(self, /) -> bool: ...
    def create_result(self, /) -> PySide6.QtSql.QSqlResult: ...
    def dbms_type(self, /) -> PySide6.QtSql.QSqlDriver.DbmsType: ...
    def escape_identifier(self, identifier: str, type: PySide6.QtSql.QSqlDriver.IdentifierType, /) -> str: ...
    def format_value(self, field: PySide6.QtSql.QSqlField, /, trimStrings: bool = ...) -> str: ...
    def has_feature(self, f: PySide6.QtSql.QSqlDriver.DriverFeature, /) -> bool: ...
    def is_identifier_escaped(self, identifier: str, type: PySide6.QtSql.QSqlDriver.IdentifierType, /) -> bool: ...
    def is_open(self, /) -> bool: ...
    def is_open_error(self, /) -> bool: ...
    def last_error(self, /) -> PySide6.QtSql.QSqlError: ...
    def maximum_identifier_length(self, type: PySide6.QtSql.QSqlDriver.IdentifierType, /) -> int: ...
    def numerical_precision_policy(self, /) -> PySide6.QtSql.QSql.NumericalPrecisionPolicy: ...
    def open(self, db: str, /, user: str = ..., password: str = ..., host: str = ..., port: int = ..., connOpts: str = ...) -> bool: ...
    def primary_index(self, tableName: str, /) -> PySide6.QtSql.QSqlIndex: ...
    def record(self, tableName: str, /) -> PySide6.QtSql.QSqlRecord: ...
    def rollback_transaction(self, /) -> bool: ...
    def set_last_error(self, e: PySide6.QtSql.QSqlError, /) -> None: ...
    def set_numerical_precision_policy(self, precisionPolicy: PySide6.QtSql.QSql.NumericalPrecisionPolicy, /) -> None: ...
    def set_open(self, o: bool, /) -> None: ...
    def set_open_error(self, e: bool, /) -> None: ...
    def sql_statement(self, type: PySide6.QtSql.QSqlDriver.StatementType, tableName: str, rec: PySide6.QtSql.QSqlRecord, preparedStatement: bool, /) -> str: ...
    def strip_delimiters(self, identifier: str, type: PySide6.QtSql.QSqlDriver.IdentifierType, /) -> str: ...
    def subscribe_to_notification(self, name: str, /) -> bool: ...
    def subscribed_to_notifications(self, /) -> typing.List[str]: ...
    def tables(self, tableType: PySide6.QtSql.QSql.TableType, /) -> typing.List[str]: ...
    def unsubscribe_from_notification(self, name: str, /) -> bool: ...


class QSqlDriverCreatorBase(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def create_object(self, /) -> PySide6.QtSql.QSqlDriver: ...


class QSqlError(Shiboken.Object):

    class ErrorType(enum.Enum):

        NoError                   = ...  # 0x0
        ConnectionError           = ...  # 0x1
        StatementError            = ...  # 0x2
        TransactionError          = ...  # 0x3
        UnknownError              = ...  # 0x4


    @typing.overload
    def __init__(self, other: PySide6.QtSql.QSqlError, /) -> None: ...
    @typing.overload
    def __init__(self, /, driverText: str = ..., databaseText: str = ..., type: PySide6.QtSql.QSqlError.ErrorType = ..., errorCode: str = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtSql.QSqlError, /) -> bool: ...
    def __ne__(self, other: PySide6.QtSql.QSqlError, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def database_text(self, /) -> str: ...
    def driver_text(self, /) -> str: ...
    def is_valid(self, /) -> bool: ...
    def native_error_code(self, /) -> str: ...
    def swap(self, other: PySide6.QtSql.QSqlError, /) -> None: ...
    def text(self, /) -> str: ...
    def type(self, /) -> PySide6.QtSql.QSqlError.ErrorType: ...


class QSqlField(Shiboken.Object):

    class RequiredStatus(enum.Enum):

        Unknown                   = ...  # -1
        Optional                  = ...  # 0x0
        Required                  = ...  # 0x1


    @typing.overload
    def __init__(self, other: PySide6.QtSql.QSqlField, /, *, value: typing.Any | None = ..., default_value: typing.Any | None = ..., name: str | None = ..., table_name: str | None = ..., meta_type: PySide6.QtCore.QMetaType | None = ..., required_status: PySide6.QtSql.QSqlField.RequiredStatus | None = ..., read_only: bool | None = ..., generated: bool | None = ..., auto_value: bool | None = ..., length: int | None = ..., precision: int | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, fieldName: str = ..., type: PySide6.QtCore.QMetaType | PySide6.QtCore.QMetaType.Type = ..., table_name: str = ..., *, value: typing.Any | None = ..., default_value: typing.Any | None = ..., name: str | None = ..., meta_type: PySide6.QtCore.QMetaType | None = ..., required_status: PySide6.QtSql.QSqlField.RequiredStatus | None = ..., read_only: bool | None = ..., generated: bool | None = ..., auto_value: bool | None = ..., length: int | None = ..., precision: int | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtSql.QSqlField, /) -> bool: ...
    def __ne__(self, other: PySide6.QtSql.QSqlField, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def clear(self, /) -> None: ...
    def default_value(self, /) -> typing.Any: ...
    def is_auto_value(self, /) -> bool: ...
    def is_generated(self, /) -> bool: ...
    def is_null(self, /) -> bool: ...
    def is_read_only(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def length(self, /) -> int: ...
    def meta_type(self, /) -> PySide6.QtCore.QMetaType: ...
    def name(self, /) -> str: ...
    def precision(self, /) -> int: ...
    def required_status(self, /) -> PySide6.QtSql.QSqlField.RequiredStatus: ...
    def set_auto_value(self, autoVal: bool, /) -> None: ...
    def set_default_value(self, value: typing.Any, /) -> None: ...
    def set_generated(self, gen: bool, /) -> None: ...
    def set_length(self, fieldLength: int, /) -> None: ...
    def set_meta_type(self, type: PySide6.QtCore.QMetaType | PySide6.QtCore.QMetaType.Type, /) -> None: ...
    def set_name(self, name: str, /) -> None: ...
    def set_precision(self, precision: int, /) -> None: ...
    def set_read_only(self, readOnly: bool, /) -> None: ...
    def set_required(self, required: bool, /) -> None: ...
    def set_required_status(self, status: PySide6.QtSql.QSqlField.RequiredStatus, /) -> None: ...
    def set_sql_type(self, type: int, /) -> None: ...
    def set_table_name(self, tableName: str, /) -> None: ...
    def set_value(self, value: typing.Any, /) -> None: ...
    def swap(self, other: PySide6.QtSql.QSqlField, /) -> None: ...
    def table_name(self, /) -> str: ...
    def typeID(self, /) -> int: ...
    def value(self, /) -> typing.Any: ...


class QSqlIndex(PySide6.QtSql.QSqlRecord):

    @typing.overload
    def __init__(self, other: PySide6.QtSql.QSqlIndex, /, *, name: str | None = ..., cursor_name: str | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, cursor_name: str = ..., name: str = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    @typing.overload
    def append(self, field: PySide6.QtSql.QSqlField, /) -> None: ...
    @typing.overload
    def append(self, field: PySide6.QtSql.QSqlField, desc: bool, /) -> None: ...
    def cursor_name(self, /) -> str: ...
    def is_descending(self, i: int, /) -> bool: ...
    def name(self, /) -> str: ...
    def set_cursor_name(self, cursorName: str, /) -> None: ...
    def set_descending(self, i: int, desc: bool, /) -> None: ...
    def set_name(self, name: str, /) -> None: ...
    def swap(self, other: PySide6.QtSql.QSqlIndex, /) -> None: ...


class QSqlQuery(Shiboken.Object):

    class BatchExecutionMode(enum.Enum):

        ValuesAsRows              = ...  # 0x0
        ValuesAsColumns           = ...  # 0x1


    @typing.overload
    def __init__(self, db: PySide6.QtSql.QSqlDatabase, /, *, forward_only: bool | None = ..., positional_binding_enabled: bool | None = ..., numerical_precision_policy: PySide6.QtSql.QSql.NumericalPrecisionPolicy | None = ...) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtSql.QSqlQuery, /, *, forward_only: bool | None = ..., positional_binding_enabled: bool | None = ..., numerical_precision_policy: PySide6.QtSql.QSql.NumericalPrecisionPolicy | None = ...) -> None: ...
    @typing.overload
    def __init__(self, r: PySide6.QtSql.QSqlResult, /, *, forward_only: bool | None = ..., positional_binding_enabled: bool | None = ..., numerical_precision_policy: PySide6.QtSql.QSql.NumericalPrecisionPolicy | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, query: str = ..., db: PySide6.QtSql.QSqlDatabase = ..., *, forward_only: bool | None = ..., positional_binding_enabled: bool | None = ..., numerical_precision_policy: PySide6.QtSql.QSql.NumericalPrecisionPolicy | None = ...) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def add_bind_value(self, val: typing.Any, /, type: PySide6.QtSql.QSql.ParamTypeFlag = ...) -> None: ...
    def at(self, /) -> int: ...
    @typing.overload
    def bind_value(self, placeholder: str, val: typing.Any, /, type: PySide6.QtSql.QSql.ParamTypeFlag = ...) -> None: ...
    @typing.overload
    def bind_value(self, pos: int, val: typing.Any, /, type: PySide6.QtSql.QSql.ParamTypeFlag = ...) -> None: ...
    @typing.overload
    def bound_value(self, placeholder: str, /) -> typing.Any: ...
    @typing.overload
    def bound_value(self, pos: int, /) -> typing.Any: ...
    def bound_value_name(self, pos: int, /) -> str: ...
    def bound_value_names(self, /) -> typing.List[str]: ...
    def bound_values(self, /) -> typing.List[typing.Any]: ...
    def clear(self, /) -> None: ...
    def driver(self, /) -> PySide6.QtSql.QSqlDriver: ...
    @typing.overload
    def exec(self, /) -> bool: ...
    @typing.overload
    def exec(self, query: str, /) -> bool: ...
    @typing.overload
    def exec_(self, /) -> bool: ...
    @typing.overload
    def exec_(self, arg__1: str, /) -> bool: ...
    def exec_batch(self, /, mode: PySide6.QtSql.QSqlQuery.BatchExecutionMode = ...) -> bool: ...
    def executed_query(self, /) -> str: ...
    def finish(self, /) -> None: ...
    def first(self, /) -> bool: ...
    def is_active(self, /) -> bool: ...
    def is_forward_only(self, /) -> bool: ...
    @typing.overload
    def is_null(self, name: str, /) -> bool: ...
    @typing.overload
    def is_null(self, field: int, /) -> bool: ...
    def is_positional_binding_enabled(self, /) -> bool: ...
    def is_select(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def last(self, /) -> bool: ...
    def last_error(self, /) -> PySide6.QtSql.QSqlError: ...
    def last_insert_id(self, /) -> typing.Any: ...
    def last_query(self, /) -> str: ...
    def next(self, /) -> bool: ...
    def next_result(self, /) -> bool: ...
    def num_rows_affected(self, /) -> int: ...
    def numerical_precision_policy(self, /) -> PySide6.QtSql.QSql.NumericalPrecisionPolicy: ...
    def prepare(self, query: str, /) -> bool: ...
    def previous(self, /) -> bool: ...
    def record(self, /) -> PySide6.QtSql.QSqlRecord: ...
    def result(self, /) -> PySide6.QtSql.QSqlResult: ...
    def seek(self, i: int, /, relative: bool = ...) -> bool: ...
    def set_forward_only(self, forward: bool, /) -> None: ...
    def set_numerical_precision_policy(self, precisionPolicy: PySide6.QtSql.QSql.NumericalPrecisionPolicy, /) -> None: ...
    def set_positional_binding_enabled(self, enable: bool, /) -> None: ...
    def size(self, /) -> int: ...
    def swap(self, other: PySide6.QtSql.QSqlQuery, /) -> None: ...
    @typing.overload
    def value(self, name: str, /) -> typing.Any: ...
    @typing.overload
    def value(self, i: int, /) -> typing.Any: ...


class QSqlQueryModel(PySide6.QtCore.QAbstractTableModel):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def begin_insert_columns(self, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, first: int, last: int, /) -> None: ...
    def begin_insert_rows(self, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, first: int, last: int, /) -> None: ...
    def begin_remove_columns(self, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, first: int, last: int, /) -> None: ...
    def begin_remove_rows(self, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, first: int, last: int, /) -> None: ...
    def begin_reset_model(self, /) -> None: ...
    def can_fetch_more(self, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> bool: ...
    def clear(self, /) -> None: ...
    def column_count(self, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> int: ...
    def data(self, item: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /, role: int = ...) -> typing.Any: ...
    def end_insert_columns(self, /) -> None: ...
    def end_insert_rows(self, /) -> None: ...
    def end_remove_columns(self, /) -> None: ...
    def end_remove_rows(self, /) -> None: ...
    def end_reset_model(self, /) -> None: ...
    def fetch_more(self, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> None: ...
    def header_data(self, section: int, orientation: PySide6.QtCore.Qt.Orientation, /, role: int = ...) -> typing.Any: ...
    def index_in_query(self, item: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /) -> PySide6.QtCore.QModelIndex: ...
    def insert_columns(self, column: int, count: int, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> bool: ...
    def last_error(self, /) -> PySide6.QtSql.QSqlError: ...
    def query(self, /) -> PySide6.QtSql.QSqlQuery: ...
    def query_change(self, /) -> None: ...
    @typing.overload
    def record(self, /) -> PySide6.QtSql.QSqlRecord: ...
    @typing.overload
    def record(self, row: int, /) -> PySide6.QtSql.QSqlRecord: ...
    def remove_columns(self, column: int, count: int, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> bool: ...
    def role_names(self, /) -> typing.Dict[int, PySide6.QtCore.QByteArray]: ...
    def row_count(self, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> int: ...
    def set_header_data(self, section: int, orientation: PySide6.QtCore.Qt.Orientation, value: typing.Any, /, role: int = ...) -> bool: ...
    def set_last_error(self, error: PySide6.QtSql.QSqlError, /) -> None: ...
    @typing.overload
    def set_query(self, query: PySide6.QtSql.QSqlQuery, /) -> None: ...
    @typing.overload
    def set_query(self, query: str, /, db: PySide6.QtSql.QSqlDatabase = ...) -> None: ...


class QSqlRecord(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtSql.QSqlRecord, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtSql.QSqlRecord, /) -> bool: ...
    def __ne__(self, other: PySide6.QtSql.QSqlRecord, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def append(self, field: PySide6.QtSql.QSqlField, /) -> None: ...
    def clear(self, /) -> None: ...
    def clear_values(self, /) -> None: ...
    def contains(self, name: str, /) -> bool: ...
    def count(self, /) -> int: ...
    @typing.overload
    def field(self, name: str, /) -> PySide6.QtSql.QSqlField: ...
    @typing.overload
    def field(self, i: int, /) -> PySide6.QtSql.QSqlField: ...
    def field_name(self, i: int, /) -> str: ...
    def index_of(self, name: str, /) -> int: ...
    def insert(self, pos: int, field: PySide6.QtSql.QSqlField, /) -> None: ...
    def is_empty(self, /) -> bool: ...
    @typing.overload
    def is_generated(self, name: str, /) -> bool: ...
    @typing.overload
    def is_generated(self, i: int, /) -> bool: ...
    @typing.overload
    def is_null(self, name: str, /) -> bool: ...
    @typing.overload
    def is_null(self, i: int, /) -> bool: ...
    def key_values(self, keyFields: PySide6.QtSql.QSqlRecord, /) -> PySide6.QtSql.QSqlRecord: ...
    def remove(self, pos: int, /) -> None: ...
    def replace(self, pos: int, field: PySide6.QtSql.QSqlField, /) -> None: ...
    @typing.overload
    def set_generated(self, name: str, generated: bool, /) -> None: ...
    @typing.overload
    def set_generated(self, i: int, generated: bool, /) -> None: ...
    @typing.overload
    def set_null(self, name: str, /) -> None: ...
    @typing.overload
    def set_null(self, i: int, /) -> None: ...
    @typing.overload
    def set_value(self, name: str, val: typing.Any, /) -> None: ...
    @typing.overload
    def set_value(self, i: int, val: typing.Any, /) -> None: ...
    def swap(self, other: PySide6.QtSql.QSqlRecord, /) -> None: ...
    @typing.overload
    def value(self, name: str, /) -> typing.Any: ...
    @typing.overload
    def value(self, i: int, /) -> typing.Any: ...


class QSqlRelation(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, QSqlRelation: PySide6.QtSql.QSqlRelation, /) -> None: ...
    @typing.overload
    def __init__(self, aTableName: str, indexCol: str, displayCol: str, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def display_column(self, /) -> str: ...
    def index_column(self, /) -> str: ...
    def is_valid(self, /) -> bool: ...
    def swap(self, other: PySide6.QtSql.QSqlRelation, /) -> None: ...
    def table_name(self, /) -> str: ...


class QSqlRelationalDelegate(PySide6.QtWidgets.QStyledItemDelegate):

    def __init__(self, /, aParent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def create_editor(self, aParent: PySide6.QtWidgets.QWidget, option: PySide6.QtWidgets.QStyleOptionViewItem, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /) -> PySide6.QtWidgets.QWidget: ...
    def set_editor_data(self, editor: PySide6.QtWidgets.QWidget, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /) -> None: ...
    def set_model_data(self, editor: PySide6.QtWidgets.QWidget, model: PySide6.QtCore.QAbstractItemModel, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /) -> None: ...


class QSqlRelationalTableModel(PySide6.QtSql.QSqlTableModel):

    class JoinMode(enum.Enum):

        InnerJoin                 = ...  # 0x0
        LeftJoin                  = ...  # 0x1


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., db: PySide6.QtSql.QSqlDatabase = ...) -> None: ...

    def clear(self, /) -> None: ...
    def data(self, item: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /, role: int = ...) -> typing.Any: ...
    def insert_row_into_table(self, values: PySide6.QtSql.QSqlRecord, /) -> bool: ...
    def order_by_clause(self, /) -> str: ...
    def relation(self, column: int, /) -> PySide6.QtSql.QSqlRelation: ...
    def relation_model(self, column: int, /) -> PySide6.QtSql.QSqlTableModel: ...
    def remove_columns(self, column: int, count: int, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> bool: ...
    def revert_row(self, row: int, /) -> None: ...
    def select(self, /) -> bool: ...
    def select_statement(self, /) -> str: ...
    def set_data(self, item: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, value: typing.Any, /, role: int = ...) -> bool: ...
    def set_join_mode(self, joinMode: PySide6.QtSql.QSqlRelationalTableModel.JoinMode, /) -> None: ...
    def set_relation(self, column: int, relation: PySide6.QtSql.QSqlRelation, /) -> None: ...
    def set_table(self, tableName: str, /) -> None: ...
    def update_row_in_table(self, row: int, values: PySide6.QtSql.QSqlRecord, /) -> bool: ...


class QSqlResult(Shiboken.Object):

    class BindingSyntax(enum.Enum):

        PositionalBinding         = ...  # 0x0
        NamedBinding              = ...  # 0x1

    class VirtualHookOperation(enum.Enum): ...  # type: ignore[misc]


    def __init__(self, db: PySide6.QtSql.QSqlDriver, /) -> None: ...

    def add_bind_value(self, val: typing.Any, type: PySide6.QtSql.QSql.ParamTypeFlag, /) -> None: ...
    def at(self, /) -> int: ...
    @typing.overload
    def bind_value(self, placeholder: str, val: typing.Any, type: PySide6.QtSql.QSql.ParamTypeFlag, /) -> None: ...
    @typing.overload
    def bind_value(self, pos: int, val: typing.Any, type: PySide6.QtSql.QSql.ParamTypeFlag, /) -> None: ...
    @typing.overload
    def bind_value_type(self, placeholder: str, /) -> PySide6.QtSql.QSql.ParamTypeFlag: ...
    @typing.overload
    def bind_value_type(self, pos: int, /) -> PySide6.QtSql.QSql.ParamTypeFlag: ...
    def binding_syntax(self, /) -> PySide6.QtSql.QSqlResult.BindingSyntax: ...
    @typing.overload
    def bound_value(self, placeholder: str, /) -> typing.Any: ...
    @typing.overload
    def bound_value(self, pos: int, /) -> typing.Any: ...
    def bound_value_count(self, /) -> int: ...
    def bound_value_name(self, pos: int, /) -> str: ...
    def bound_value_names(self, /) -> typing.List[str]: ...
    def bound_values(self, /) -> typing.List[typing.Any]: ...
    def clear(self, /) -> None: ...
    def data(self, i: int, /) -> typing.Any: ...
    def detach_from_result_set(self, /) -> None: ...
    def driver(self, /) -> PySide6.QtSql.QSqlDriver: ...
    def exec(self, /) -> bool: ...
    def exec_(self, /) -> bool: ...
    def exec_batch(self, /, arrayBind: bool = ...) -> bool: ...
    def executed_query(self, /) -> str: ...
    def fetch(self, i: int, /) -> bool: ...
    def fetch_first(self, /) -> bool: ...
    def fetch_last(self, /) -> bool: ...
    def fetch_next(self, /) -> bool: ...
    def fetch_previous(self, /) -> bool: ...
    def handle(self, /) -> typing.Any: ...
    def has_out_values(self, /) -> bool: ...
    def is_active(self, /) -> bool: ...
    def is_forward_only(self, /) -> bool: ...
    def is_null(self, i: int, /) -> bool: ...
    def is_positional_binding_enabled(self, /) -> bool: ...
    def is_select(self, /) -> bool: ...
    def is_valid(self, /) -> bool: ...
    def last_error(self, /) -> PySide6.QtSql.QSqlError: ...
    def last_insert_id(self, /) -> typing.Any: ...
    def last_query(self, /) -> str: ...
    def next_result(self, /) -> bool: ...
    def num_rows_affected(self, /) -> int: ...
    def numerical_precision_policy(self, /) -> PySide6.QtSql.QSql.NumericalPrecisionPolicy: ...
    def prepare(self, query: str, /) -> bool: ...
    def record(self, /) -> PySide6.QtSql.QSqlRecord: ...
    def reset(self, sqlquery: str, /) -> bool: ...
    def reset_bind_count(self, /) -> None: ...
    def save_prepare(self, sqlquery: str, /) -> bool: ...
    def set_active(self, a: bool, /) -> None: ...
    def set_at(self, at: int, /) -> None: ...
    def set_forward_only(self, forward: bool, /) -> None: ...
    def set_last_error(self, e: PySide6.QtSql.QSqlError, /) -> None: ...
    def set_numerical_precision_policy(self, policy: PySide6.QtSql.QSql.NumericalPrecisionPolicy, /) -> None: ...
    def set_positional_binding_enabled(self, enable: bool, /) -> None: ...
    def set_query(self, query: str, /) -> None: ...
    def set_select(self, s: bool, /) -> None: ...
    def size(self, /) -> int: ...


class QSqlTableModel(PySide6.QtSql.QSqlQueryModel):

    beforeDelete             : typing.ClassVar[Signal] = ... # beforeDelete(int)
    beforeInsert             : typing.ClassVar[Signal] = ... # beforeInsert(QSqlRecord&)
    beforeUpdate             : typing.ClassVar[Signal] = ... # beforeUpdate(int,QSqlRecord&)
    primeInsert              : typing.ClassVar[Signal] = ... # primeInsert(int,QSqlRecord&)

    class EditStrategy(enum.Enum):

        OnFieldChange             = ...  # 0x0
        OnRowChange               = ...  # 0x1
        OnManualSubmit            = ...  # 0x2


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., db: PySide6.QtSql.QSqlDatabase = ...) -> None: ...

    def clear(self, /) -> None: ...
    def clear_item_data(self, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /) -> bool: ...
    def data(self, idx: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /, role: int = ...) -> typing.Any: ...
    def database(self, /) -> PySide6.QtSql.QSqlDatabase: ...
    def delete_row_from_table(self, row: int, /) -> bool: ...
    def edit_strategy(self, /) -> PySide6.QtSql.QSqlTableModel.EditStrategy: ...
    def field_index(self, fieldName: str, /) -> int: ...
    def filter(self, /) -> str: ...
    def flags(self, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /) -> PySide6.QtCore.Qt.ItemFlag: ...
    def header_data(self, section: int, orientation: PySide6.QtCore.Qt.Orientation, /, role: int = ...) -> typing.Any: ...
    def index_in_query(self, item: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /) -> PySide6.QtCore.QModelIndex: ...
    def insert_record(self, row: int, record: PySide6.QtSql.QSqlRecord, /) -> bool: ...
    def insert_row_into_table(self, values: PySide6.QtSql.QSqlRecord, /) -> bool: ...
    def insert_rows(self, row: int, count: int, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> bool: ...
    @typing.overload
    def is_dirty(self, /) -> bool: ...
    @typing.overload
    def is_dirty(self, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, /) -> bool: ...
    def order_by_clause(self, /) -> str: ...
    def primary_key(self, /) -> PySide6.QtSql.QSqlIndex: ...
    def primary_values(self, row: int, /) -> PySide6.QtSql.QSqlRecord: ...
    @typing.overload
    def record(self, /) -> PySide6.QtSql.QSqlRecord: ...
    @typing.overload
    def record(self, row: int, /) -> PySide6.QtSql.QSqlRecord: ...
    def remove_columns(self, column: int, count: int, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> bool: ...
    def remove_rows(self, row: int, count: int, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> bool: ...
    def revert(self, /) -> None: ...
    def revert_all(self, /) -> None: ...
    def revert_row(self, row: int, /) -> None: ...
    def row_count(self, /, parent: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex = ...) -> int: ...
    def select(self, /) -> bool: ...
    def select_row(self, row: int, /) -> bool: ...
    def select_statement(self, /) -> str: ...
    def set_data(self, index: PySide6.QtCore.QModelIndex | PySide6.QtCore.QPersistentModelIndex, value: typing.Any, /, role: int = ...) -> bool: ...
    def set_edit_strategy(self, strategy: PySide6.QtSql.QSqlTableModel.EditStrategy, /) -> None: ...
    def set_filter(self, filter: str, /) -> None: ...
    def set_primary_key(self, key: PySide6.QtSql.QSqlIndex, /) -> None: ...
    def set_record(self, row: int, record: PySide6.QtSql.QSqlRecord, /) -> bool: ...
    def set_sort(self, column: int, order: PySide6.QtCore.Qt.SortOrder, /) -> None: ...
    def set_table(self, tableName: str, /) -> None: ...
    def sort(self, column: int, order: PySide6.QtCore.Qt.SortOrder, /) -> None: ...
    def submit(self, /) -> bool: ...
    def submit_all(self, /) -> bool: ...
    def table_name(self, /) -> str: ...
    def update_row_in_table(self, row: int, values: PySide6.QtSql.QSqlRecord, /) -> bool: ...


# eof
