# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from ..types.destination import Destination
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.destination_with_config_fields import DestinationWithConfigFields
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper


class DestinationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_destinations(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[Destination]:
        """
        Get all available destinations.

        Args:
        -----
            db: The database session
            user: The current user

        Returns:
        --------
            List[schemas.Destination]: A list of destinations

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Destination]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.destinations.list_destinations()
        """
        _response = self._client_wrapper.httpx_client.request(
            "destinations/list",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Destination],
                    parse_obj_as(
                        type_=typing.List[Destination],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def read_destination(
        self, short_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DestinationWithConfigFields:
        """
        Get destination by short name.

        Args:
        -----
            db: The database session
            short_name: The short name of the destination
            user: The current user

        Returns:
        --------
            destination (schemas.Destination): The destination

        Parameters
        ----------
        short_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DestinationWithConfigFields
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.destinations.read_destination(
            short_name="short_name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"destinations/detail/{jsonable_encoder(short_name)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DestinationWithConfigFields,
                    parse_obj_as(
                        type_=DestinationWithConfigFields,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDestinationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_destinations(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Destination]:
        """
        Get all available destinations.

        Args:
        -----
            db: The database session
            user: The current user

        Returns:
        --------
            List[schemas.Destination]: A list of destinations

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Destination]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.destinations.list_destinations()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "destinations/list",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Destination],
                    parse_obj_as(
                        type_=typing.List[Destination],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def read_destination(
        self, short_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DestinationWithConfigFields:
        """
        Get destination by short name.

        Args:
        -----
            db: The database session
            short_name: The short name of the destination
            user: The current user

        Returns:
        --------
            destination (schemas.Destination): The destination

        Parameters
        ----------
        short_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DestinationWithConfigFields
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.destinations.read_destination(
                short_name="short_name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"destinations/detail/{jsonable_encoder(short_name)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DestinationWithConfigFields,
                    parse_obj_as(
                        type_=DestinationWithConfigFields,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
