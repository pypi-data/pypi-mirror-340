# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from ..types.embedding_model_with_config_fields import EmbeddingModelWithConfigFields
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.embedding_model import EmbeddingModel
from ..core.client_wrapper import AsyncClientWrapper


class EmbeddingModelsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def read_embedding_model(
        self, short_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> EmbeddingModelWithConfigFields:
        """
        Get embedding model by id.

        Args:
        ----
            db (AsyncSession): The database session.
            short_name (str): The short name of the embedding model.
            user (schemas.User): The current user.

        Returns:
        -------
            schemas.EmbeddingModel: The embedding model object.

        Parameters
        ----------
        short_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingModelWithConfigFields
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.embedding_models.read_embedding_model(
            short_name="short_name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"embedding_models/detail/{jsonable_encoder(short_name)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EmbeddingModelWithConfigFields,
                    parse_obj_as(
                        type_=EmbeddingModelWithConfigFields,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def read_embedding_models(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EmbeddingModel]:
        """
        Get all embedding models.

        Args:
        ----
            db (AsyncSession): The database session.
            user (schemas.User): The current user.

        Returns:
        -------
            list[schemas.EmbeddingModel]: The list of embedding models.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EmbeddingModel]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.embedding_models.read_embedding_models()
        """
        _response = self._client_wrapper.httpx_client.request(
            "embedding_models/list",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EmbeddingModel],
                    parse_obj_as(
                        type_=typing.List[EmbeddingModel],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncEmbeddingModelsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def read_embedding_model(
        self, short_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> EmbeddingModelWithConfigFields:
        """
        Get embedding model by id.

        Args:
        ----
            db (AsyncSession): The database session.
            short_name (str): The short name of the embedding model.
            user (schemas.User): The current user.

        Returns:
        -------
            schemas.EmbeddingModel: The embedding model object.

        Parameters
        ----------
        short_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingModelWithConfigFields
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.embedding_models.read_embedding_model(
                short_name="short_name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"embedding_models/detail/{jsonable_encoder(short_name)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EmbeddingModelWithConfigFields,
                    parse_obj_as(
                        type_=EmbeddingModelWithConfigFields,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def read_embedding_models(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EmbeddingModel]:
        """
        Get all embedding models.

        Args:
        ----
            db (AsyncSession): The database session.
            user (schemas.User): The current user.

        Returns:
        -------
            list[schemas.EmbeddingModel]: The list of embedding models.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EmbeddingModel]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.embedding_models.read_embedding_models()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "embedding_models/list",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EmbeddingModel],
                    parse_obj_as(
                        type_=typing.List[EmbeddingModel],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
