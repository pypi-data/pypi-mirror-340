# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.transformer import Transformer
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TransformersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_transformers(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[Transformer]:
        """
        List all transformers for the current user's organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Transformer]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.transformers.list_transformers()
        """
        _response = self._client_wrapper.httpx_client.request(
            "transformers/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Transformer],
                    parse_obj_as(
                        type_=typing.List[Transformer],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_transformer(
        self,
        *,
        name: str,
        method_name: str,
        module_name: str,
        input_entity_definition_ids: typing.Sequence[str],
        output_entity_definition_ids: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        config_schema: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Transformer:
        """
        Create a new transformer.

        Parameters
        ----------
        name : str

        method_name : str

        module_name : str

        input_entity_definition_ids : typing.Sequence[str]

        output_entity_definition_ids : typing.Sequence[str]

        description : typing.Optional[str]

        config_schema : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Transformer
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.transformers.create_transformer(
            name="name",
            method_name="method_name",
            module_name="module_name",
            input_entity_definition_ids=["input_entity_definition_ids"],
            output_entity_definition_ids=["output_entity_definition_ids"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "transformers/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "method_name": method_name,
                "module_name": module_name,
                "input_entity_definition_ids": input_entity_definition_ids,
                "output_entity_definition_ids": output_entity_definition_ids,
                "config_schema": config_schema,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Transformer,
                    parse_obj_as(
                        type_=Transformer,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_transformer(
        self,
        transformer_id: str,
        *,
        name: str,
        method_name: str,
        module_name: str,
        input_entity_definition_ids: typing.Sequence[str],
        output_entity_definition_ids: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        config_schema: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Transformer:
        """
        Update a transformer.

        Parameters
        ----------
        transformer_id : str

        name : str

        method_name : str

        module_name : str

        input_entity_definition_ids : typing.Sequence[str]

        output_entity_definition_ids : typing.Sequence[str]

        description : typing.Optional[str]

        config_schema : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Transformer
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.transformers.update_transformer(
            transformer_id="transformer_id",
            name="name",
            method_name="method_name",
            module_name="module_name",
            input_entity_definition_ids=["input_entity_definition_ids"],
            output_entity_definition_ids=["output_entity_definition_ids"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"transformers/{jsonable_encoder(transformer_id)}",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "method_name": method_name,
                "module_name": module_name,
                "input_entity_definition_ids": input_entity_definition_ids,
                "output_entity_definition_ids": output_entity_definition_ids,
                "config_schema": config_schema,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Transformer,
                    parse_obj_as(
                        type_=Transformer,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTransformersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_transformers(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Transformer]:
        """
        List all transformers for the current user's organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Transformer]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.transformers.list_transformers()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "transformers/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Transformer],
                    parse_obj_as(
                        type_=typing.List[Transformer],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_transformer(
        self,
        *,
        name: str,
        method_name: str,
        module_name: str,
        input_entity_definition_ids: typing.Sequence[str],
        output_entity_definition_ids: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        config_schema: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Transformer:
        """
        Create a new transformer.

        Parameters
        ----------
        name : str

        method_name : str

        module_name : str

        input_entity_definition_ids : typing.Sequence[str]

        output_entity_definition_ids : typing.Sequence[str]

        description : typing.Optional[str]

        config_schema : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Transformer
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.transformers.create_transformer(
                name="name",
                method_name="method_name",
                module_name="module_name",
                input_entity_definition_ids=["input_entity_definition_ids"],
                output_entity_definition_ids=["output_entity_definition_ids"],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "transformers/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "method_name": method_name,
                "module_name": module_name,
                "input_entity_definition_ids": input_entity_definition_ids,
                "output_entity_definition_ids": output_entity_definition_ids,
                "config_schema": config_schema,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Transformer,
                    parse_obj_as(
                        type_=Transformer,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_transformer(
        self,
        transformer_id: str,
        *,
        name: str,
        method_name: str,
        module_name: str,
        input_entity_definition_ids: typing.Sequence[str],
        output_entity_definition_ids: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        config_schema: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Transformer:
        """
        Update a transformer.

        Parameters
        ----------
        transformer_id : str

        name : str

        method_name : str

        module_name : str

        input_entity_definition_ids : typing.Sequence[str]

        output_entity_definition_ids : typing.Sequence[str]

        description : typing.Optional[str]

        config_schema : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Transformer
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.transformers.update_transformer(
                transformer_id="transformer_id",
                name="name",
                method_name="method_name",
                module_name="module_name",
                input_entity_definition_ids=["input_entity_definition_ids"],
                output_entity_definition_ids=["output_entity_definition_ids"],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"transformers/{jsonable_encoder(transformer_id)}",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "method_name": method_name,
                "module_name": module_name,
                "input_entity_definition_ids": input_entity_definition_ids,
                "output_entity_definition_ids": output_entity_definition_ids,
                "config_schema": config_schema,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Transformer,
                    parse_obj_as(
                        type_=Transformer,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
