# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.connection import Connection
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.integration_type import IntegrationType
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ConnectionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_connection(
        self, connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Connection:
        """
        Get a specific connection.

        Args:
        -----
            connection_id: The ID of the connection to get.
            db: The database session.
            user: The current user.

        Returns:
        -------
            schemas.Connection: The connection.

        Parameters
        ----------
        connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.connections.get_connection(
            connection_id="connection_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"connections/detail/{jsonable_encoder(connection_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_all_connected_integrations(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Connection]:
        """
        Get all active connections for the current user across all integration types.

        Args:
        -----
            db: The database session.
            user: The current user.

        Returns:
        -------
            list[schemas.Connection]: The list of connections.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Connection]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.connections.list_all_connected_integrations()
        """
        _response = self._client_wrapper.httpx_client.request(
            "connections/list",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Connection],
                    parse_obj_as(
                        type_=typing.List[Connection],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_connected_integrations(
        self, integration_type: IntegrationType, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Connection]:
        """
        Get all integrations of specified type connected to the current user.

        Args:
        -----
            integration_type (IntegrationType): The type of integration to get connections for.
            db (AsyncSession): The database session.
            user (schemas.User): The current user.

        Returns:
        -------
            list[schemas.Connection]: The list of connections.

        Parameters
        ----------
        integration_type : IntegrationType

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Connection]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.connections.list_connected_integrations(
            integration_type="source",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"connections/list/{jsonable_encoder(integration_type)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Connection],
                    parse_obj_as(
                        type_=typing.List[Connection],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def connect_integration(
        self,
        integration_type: IntegrationType,
        short_name: str,
        *,
        config_fields: typing.Dict[str, typing.Optional[typing.Any]],
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Connection:
        """
        Connect to a source, destination, or embedding model.

        Expects a POST body with:
        ```json
        {
            "name": "required connection name",
            ... other config fields specific to the integration type ...
        }
        ```

        Args:
        -----
            db: The database session.
            integration_type: The type of integration to connect to.
            short_name: The short name of the integration to connect to.
            name: The name of the connection.
            config_fields: The config fields for the integration.
            user: The current user.

        Returns:
        -------
            schemas.Connection: The connection.

        Parameters
        ----------
        integration_type : IntegrationType

        short_name : str

        config_fields : typing.Dict[str, typing.Optional[typing.Any]]

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.connections.connect_integration(
            integration_type="source",
            short_name="short_name",
            config_fields={"key": "value"},
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"connections/connect/{jsonable_encoder(integration_type)}/{jsonable_encoder(short_name)}",
            method="POST",
            json={
                "name": name,
                "config_fields": config_fields,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_connection_credentials(
        self, connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Get the credentials for a connection.

        Args:
        -----
            connection_id (UUID): The ID of the connection to get credentials for
            db (AsyncSession): The database session
            user (schemas.User): The current user

        Returns:
        -------
            decrypted_credentials (dict): The credentials for the connection

        Parameters
        ----------
        connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.connections.get_connection_credentials(
            connection_id="connection_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"connections/credentials/{jsonable_encoder(connection_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Dict[str, typing.Optional[typing.Any]],
                    parse_obj_as(
                        type_=typing.Dict[str, typing.Optional[typing.Any]],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_connection(
        self, connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Connection:
        """
        Delete a connection.

        Deletes the connection and integration credential.

        Args:
        -----
            db (AsyncSession): The database session
            connection_id (UUID): The ID of the connection to delete
            user (schemas.User): The current user

        Returns:
        --------
            connection (schemas.Connection): The deleted connection

        Parameters
        ----------
        connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.connections.delete_connection(
            connection_id="connection_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"connections/delete/source/{jsonable_encoder(connection_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def disconnect_source_connection(
        self, connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Connection:
        """
        Disconnect from a source connection.

        Args:
        -----
            db (AsyncSession): The database session
            connection_id (UUID): The ID of the connection to disconnect
            user (schemas.User): The current user

        Returns:
        --------
            connection_schema (schemas.Connection): The disconnected connection

        Parameters
        ----------
        connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.connections.disconnect_source_connection(
            connection_id="connection_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"connections/disconnect/source/{jsonable_encoder(connection_id)}",
            method="PUT",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def disconnect_destination_connection(
        self, connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Connection:
        """
        Disconnect from a destination connection.

        Args:
        -----
            db (AsyncSession): The database session
            connection_id (UUID): The ID of the connection to disconnect
            user (schemas.User): The current user

        Returns:
        --------
            connection_schema (schemas.Connection): The disconnected connection

        Parameters
        ----------
        connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.connections.disconnect_destination_connection(
            connection_id="connection_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"connections/disconnect/destination/{jsonable_encoder(connection_id)}",
            method="PUT",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_oauth_2_auth_url(self, *, short_name: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Get the OAuth2 authorization URL for a source.

        Args:
        -----
            db: The database session
            short_name: The short name of the source
            user: The current user

        Parameters
        ----------
        short_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.connections.get_oauth_2_auth_url(
            short_name="short_name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "connections/oauth2/source/auth_url",
            method="GET",
            params={
                "short_name": short_name,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_oauth_2_code(
        self, *, short_name: str, code: str, request_options: typing.Optional[RequestOptions] = None
    ) -> Connection:
        """
        Send the OAuth2 authorization code for a source.

        This will:
        1. Get the OAuth2 settings for the source
        2. Exchange the authorization code for a token
        3. Create an integration credential with the token

        Args:
        -----
            db: The database session
            short_name: The short name of the source
            code: The authorization code
            user: The current user

        Returns:
        --------
            connection (schemas.Connection): The created connection

        Parameters
        ----------
        short_name : str

        code : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.connections.send_oauth_2_code(
            short_name="short_name",
            code="code",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "connections/oauth2/source/code",
            method="POST",
            json={
                "short_name": short_name,
                "code": code,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_oauth_2_white_label_code(
        self, white_label_id: str, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> Connection:
        """
        Exchange the OAuth2 authorization code for a white label integration.

        Args:
        -----
            db: The database session
            white_label_id: The ID of the white label integration
            code: The authorization code
            user: The current user
            background_tasks: The background tasks

        Returns:
        --------
            connection (schemas.Connection): The created connection

        Parameters
        ----------
        white_label_id : str

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.connections.send_oauth_2_white_label_code(
            white_label_id="white_label_id",
            request="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"connections/oauth2/white-label/{jsonable_encoder(white_label_id)}/code",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_oauth_2_white_label_auth_url(
        self, white_label_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Get the OAuth2 authorization URL for a white label integration.

        Args:
        -----
            db: The database session
            white_label_id: The ID of the white label integration
            user: The current user

        Returns:
        --------
            str: The OAuth2 authorization URL

        Parameters
        ----------
        white_label_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.connections.get_oauth_2_white_label_auth_url(
            white_label_id="white_label_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"connections/oauth2/white-label/{jsonable_encoder(white_label_id)}/auth_url",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncConnectionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_connection(
        self, connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Connection:
        """
        Get a specific connection.

        Args:
        -----
            connection_id: The ID of the connection to get.
            db: The database session.
            user: The current user.

        Returns:
        -------
            schemas.Connection: The connection.

        Parameters
        ----------
        connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connections.get_connection(
                connection_id="connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"connections/detail/{jsonable_encoder(connection_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_all_connected_integrations(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Connection]:
        """
        Get all active connections for the current user across all integration types.

        Args:
        -----
            db: The database session.
            user: The current user.

        Returns:
        -------
            list[schemas.Connection]: The list of connections.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Connection]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connections.list_all_connected_integrations()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "connections/list",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Connection],
                    parse_obj_as(
                        type_=typing.List[Connection],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_connected_integrations(
        self, integration_type: IntegrationType, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Connection]:
        """
        Get all integrations of specified type connected to the current user.

        Args:
        -----
            integration_type (IntegrationType): The type of integration to get connections for.
            db (AsyncSession): The database session.
            user (schemas.User): The current user.

        Returns:
        -------
            list[schemas.Connection]: The list of connections.

        Parameters
        ----------
        integration_type : IntegrationType

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Connection]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connections.list_connected_integrations(
                integration_type="source",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"connections/list/{jsonable_encoder(integration_type)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Connection],
                    parse_obj_as(
                        type_=typing.List[Connection],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def connect_integration(
        self,
        integration_type: IntegrationType,
        short_name: str,
        *,
        config_fields: typing.Dict[str, typing.Optional[typing.Any]],
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Connection:
        """
        Connect to a source, destination, or embedding model.

        Expects a POST body with:
        ```json
        {
            "name": "required connection name",
            ... other config fields specific to the integration type ...
        }
        ```

        Args:
        -----
            db: The database session.
            integration_type: The type of integration to connect to.
            short_name: The short name of the integration to connect to.
            name: The name of the connection.
            config_fields: The config fields for the integration.
            user: The current user.

        Returns:
        -------
            schemas.Connection: The connection.

        Parameters
        ----------
        integration_type : IntegrationType

        short_name : str

        config_fields : typing.Dict[str, typing.Optional[typing.Any]]

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connections.connect_integration(
                integration_type="source",
                short_name="short_name",
                config_fields={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"connections/connect/{jsonable_encoder(integration_type)}/{jsonable_encoder(short_name)}",
            method="POST",
            json={
                "name": name,
                "config_fields": config_fields,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_connection_credentials(
        self, connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Get the credentials for a connection.

        Args:
        -----
            connection_id (UUID): The ID of the connection to get credentials for
            db (AsyncSession): The database session
            user (schemas.User): The current user

        Returns:
        -------
            decrypted_credentials (dict): The credentials for the connection

        Parameters
        ----------
        connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connections.get_connection_credentials(
                connection_id="connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"connections/credentials/{jsonable_encoder(connection_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Dict[str, typing.Optional[typing.Any]],
                    parse_obj_as(
                        type_=typing.Dict[str, typing.Optional[typing.Any]],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_connection(
        self, connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Connection:
        """
        Delete a connection.

        Deletes the connection and integration credential.

        Args:
        -----
            db (AsyncSession): The database session
            connection_id (UUID): The ID of the connection to delete
            user (schemas.User): The current user

        Returns:
        --------
            connection (schemas.Connection): The deleted connection

        Parameters
        ----------
        connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connections.delete_connection(
                connection_id="connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"connections/delete/source/{jsonable_encoder(connection_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def disconnect_source_connection(
        self, connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Connection:
        """
        Disconnect from a source connection.

        Args:
        -----
            db (AsyncSession): The database session
            connection_id (UUID): The ID of the connection to disconnect
            user (schemas.User): The current user

        Returns:
        --------
            connection_schema (schemas.Connection): The disconnected connection

        Parameters
        ----------
        connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connections.disconnect_source_connection(
                connection_id="connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"connections/disconnect/source/{jsonable_encoder(connection_id)}",
            method="PUT",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def disconnect_destination_connection(
        self, connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Connection:
        """
        Disconnect from a destination connection.

        Args:
        -----
            db (AsyncSession): The database session
            connection_id (UUID): The ID of the connection to disconnect
            user (schemas.User): The current user

        Returns:
        --------
            connection_schema (schemas.Connection): The disconnected connection

        Parameters
        ----------
        connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connections.disconnect_destination_connection(
                connection_id="connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"connections/disconnect/destination/{jsonable_encoder(connection_id)}",
            method="PUT",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_oauth_2_auth_url(
        self, *, short_name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Get the OAuth2 authorization URL for a source.

        Args:
        -----
            db: The database session
            short_name: The short name of the source
            user: The current user

        Parameters
        ----------
        short_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connections.get_oauth_2_auth_url(
                short_name="short_name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "connections/oauth2/source/auth_url",
            method="GET",
            params={
                "short_name": short_name,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_oauth_2_code(
        self, *, short_name: str, code: str, request_options: typing.Optional[RequestOptions] = None
    ) -> Connection:
        """
        Send the OAuth2 authorization code for a source.

        This will:
        1. Get the OAuth2 settings for the source
        2. Exchange the authorization code for a token
        3. Create an integration credential with the token

        Args:
        -----
            db: The database session
            short_name: The short name of the source
            code: The authorization code
            user: The current user

        Returns:
        --------
            connection (schemas.Connection): The created connection

        Parameters
        ----------
        short_name : str

        code : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connections.send_oauth_2_code(
                short_name="short_name",
                code="code",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "connections/oauth2/source/code",
            method="POST",
            json={
                "short_name": short_name,
                "code": code,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_oauth_2_white_label_code(
        self, white_label_id: str, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> Connection:
        """
        Exchange the OAuth2 authorization code for a white label integration.

        Args:
        -----
            db: The database session
            white_label_id: The ID of the white label integration
            code: The authorization code
            user: The current user
            background_tasks: The background tasks

        Returns:
        --------
            connection (schemas.Connection): The created connection

        Parameters
        ----------
        white_label_id : str

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connections.send_oauth_2_white_label_code(
                white_label_id="white_label_id",
                request="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"connections/oauth2/white-label/{jsonable_encoder(white_label_id)}/code",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_oauth_2_white_label_auth_url(
        self, white_label_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Get the OAuth2 authorization URL for a white label integration.

        Args:
        -----
            db: The database session
            white_label_id: The ID of the white label integration
            user: The current user

        Returns:
        --------
            str: The OAuth2 authorization URL

        Parameters
        ----------
        white_label_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connections.get_oauth_2_white_label_auth_url(
                white_label_id="white_label_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"connections/oauth2/white-label/{jsonable_encoder(white_label_id)}/auth_url",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
