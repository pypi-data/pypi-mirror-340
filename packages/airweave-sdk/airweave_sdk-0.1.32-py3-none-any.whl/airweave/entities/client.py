# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.entity_definition import EntityDefinition
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.entity_type import EntityType
from .types.entity_definition_create_entity_schema import EntityDefinitionCreateEntitySchema
from ..core.serialization import convert_and_respect_annotation_metadata
from .types.entity_definition_update_entity_schema import EntityDefinitionUpdateEntitySchema
from ..core.jsonable_encoder import jsonable_encoder
from ..types.entity_relation import EntityRelation
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EntitiesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_entity_definitions(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EntityDefinition]:
        """
        List all entity definitions for the current user's organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EntityDefinition]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.entities.list_entity_definitions()
        """
        _response = self._client_wrapper.httpx_client.request(
            "entities/definitions/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EntityDefinition],
                    parse_obj_as(
                        type_=typing.List[EntityDefinition],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_entity_definition(
        self,
        *,
        name: str,
        type: EntityType,
        entity_schema: EntityDefinitionCreateEntitySchema,
        module_name: str,
        class_name: str,
        description: typing.Optional[str] = OMIT,
        parent_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityDefinition:
        """
        Create a new entity definition.

        Parameters
        ----------
        name : str

        type : EntityType

        entity_schema : EntityDefinitionCreateEntitySchema

        module_name : str

        class_name : str

        description : typing.Optional[str]

        parent_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityDefinition
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.entities.create_entity_definition(
            name="name",
            type="file",
            entity_schema=["entity_schema"],
            module_name="module_name",
            class_name="class_name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "entities/definitions/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "type": type,
                "entity_schema": convert_and_respect_annotation_metadata(
                    object_=entity_schema, annotation=EntityDefinitionCreateEntitySchema, direction="write"
                ),
                "parent_id": parent_id,
                "module_name": module_name,
                "class_name": class_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EntityDefinition,
                    parse_obj_as(
                        type_=EntityDefinition,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_entity_definition(
        self,
        definition_id: str,
        *,
        name: str,
        type: EntityType,
        entity_schema: EntityDefinitionUpdateEntitySchema,
        module_name: str,
        class_name: str,
        description: typing.Optional[str] = OMIT,
        parent_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityDefinition:
        """
        Update an entity definition.

        Parameters
        ----------
        definition_id : str

        name : str

        type : EntityType

        entity_schema : EntityDefinitionUpdateEntitySchema

        module_name : str

        class_name : str

        description : typing.Optional[str]

        parent_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityDefinition
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.entities.update_entity_definition(
            definition_id="definition_id",
            name="name",
            type="file",
            entity_schema=["entity_schema"],
            module_name="module_name",
            class_name="class_name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"entities/definitions/{jsonable_encoder(definition_id)}",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "type": type,
                "entity_schema": convert_and_respect_annotation_metadata(
                    object_=entity_schema, annotation=EntityDefinitionUpdateEntitySchema, direction="write"
                ),
                "parent_id": parent_id,
                "module_name": module_name,
                "class_name": class_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EntityDefinition,
                    parse_obj_as(
                        type_=EntityDefinition,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_entity_relations(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EntityRelation]:
        """
        List all entity relations for the current user's organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EntityRelation]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.entities.list_entity_relations()
        """
        _response = self._client_wrapper.httpx_client.request(
            "entities/relations/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EntityRelation],
                    parse_obj_as(
                        type_=typing.List[EntityRelation],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_entity_relation(
        self,
        *,
        name: str,
        from_entity_id: str,
        to_entity_id: str,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityRelation:
        """
        Create a new entity relation.

        Parameters
        ----------
        name : str

        from_entity_id : str

        to_entity_id : str

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityRelation
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.entities.create_entity_relation(
            name="name",
            from_entity_id="from_entity_id",
            to_entity_id="to_entity_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "entities/relations/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "from_entity_id": from_entity_id,
                "to_entity_id": to_entity_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EntityRelation,
                    parse_obj_as(
                        type_=EntityRelation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_entity_relation(
        self,
        relation_id: str,
        *,
        name: str,
        from_entity_id: str,
        to_entity_id: str,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityRelation:
        """
        Update an entity relation.

        Parameters
        ----------
        relation_id : str

        name : str

        from_entity_id : str

        to_entity_id : str

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityRelation
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.entities.update_entity_relation(
            relation_id="relation_id",
            name="name",
            from_entity_id="from_entity_id",
            to_entity_id="to_entity_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"entities/relations/{jsonable_encoder(relation_id)}",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "from_entity_id": from_entity_id,
                "to_entity_id": to_entity_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EntityRelation,
                    parse_obj_as(
                        type_=EntityRelation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_entity_definitions_by_ids(
        self, *, request: typing.Sequence[str], request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EntityDefinition]:
        """
        Get multiple entity definitions by their IDs.

        Args:
            ids: List of entity definition IDs to fetch
            db: Database session
            current_user: Current authenticated user

        Returns:
            List of entity definitions matching the provided IDs

        Parameters
        ----------
        request : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EntityDefinition]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.entities.get_entity_definitions_by_ids(
            request=["string"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "entities/definitions/by-ids/",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EntityDefinition],
                    parse_obj_as(
                        type_=typing.List[EntityDefinition],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_entity_definitions_by_source_short_name(
        self, *, source_short_name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EntityDefinition]:
        """
        Get all entity definitions for a given source.

        Parameters
        ----------
        source_short_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EntityDefinition]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.entities.get_entity_definitions_by_source_short_name(
            source_short_name="source_short_name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "entities/definitions/by-source/",
            method="GET",
            params={
                "source_short_name": source_short_name,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EntityDefinition],
                    parse_obj_as(
                        type_=typing.List[EntityDefinition],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncEntitiesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_entity_definitions(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EntityDefinition]:
        """
        List all entity definitions for the current user's organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EntityDefinition]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.entities.list_entity_definitions()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "entities/definitions/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EntityDefinition],
                    parse_obj_as(
                        type_=typing.List[EntityDefinition],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_entity_definition(
        self,
        *,
        name: str,
        type: EntityType,
        entity_schema: EntityDefinitionCreateEntitySchema,
        module_name: str,
        class_name: str,
        description: typing.Optional[str] = OMIT,
        parent_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityDefinition:
        """
        Create a new entity definition.

        Parameters
        ----------
        name : str

        type : EntityType

        entity_schema : EntityDefinitionCreateEntitySchema

        module_name : str

        class_name : str

        description : typing.Optional[str]

        parent_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityDefinition
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.entities.create_entity_definition(
                name="name",
                type="file",
                entity_schema=["entity_schema"],
                module_name="module_name",
                class_name="class_name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "entities/definitions/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "type": type,
                "entity_schema": convert_and_respect_annotation_metadata(
                    object_=entity_schema, annotation=EntityDefinitionCreateEntitySchema, direction="write"
                ),
                "parent_id": parent_id,
                "module_name": module_name,
                "class_name": class_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EntityDefinition,
                    parse_obj_as(
                        type_=EntityDefinition,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_entity_definition(
        self,
        definition_id: str,
        *,
        name: str,
        type: EntityType,
        entity_schema: EntityDefinitionUpdateEntitySchema,
        module_name: str,
        class_name: str,
        description: typing.Optional[str] = OMIT,
        parent_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityDefinition:
        """
        Update an entity definition.

        Parameters
        ----------
        definition_id : str

        name : str

        type : EntityType

        entity_schema : EntityDefinitionUpdateEntitySchema

        module_name : str

        class_name : str

        description : typing.Optional[str]

        parent_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityDefinition
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.entities.update_entity_definition(
                definition_id="definition_id",
                name="name",
                type="file",
                entity_schema=["entity_schema"],
                module_name="module_name",
                class_name="class_name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"entities/definitions/{jsonable_encoder(definition_id)}",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "type": type,
                "entity_schema": convert_and_respect_annotation_metadata(
                    object_=entity_schema, annotation=EntityDefinitionUpdateEntitySchema, direction="write"
                ),
                "parent_id": parent_id,
                "module_name": module_name,
                "class_name": class_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EntityDefinition,
                    parse_obj_as(
                        type_=EntityDefinition,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_entity_relations(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EntityRelation]:
        """
        List all entity relations for the current user's organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EntityRelation]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.entities.list_entity_relations()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "entities/relations/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EntityRelation],
                    parse_obj_as(
                        type_=typing.List[EntityRelation],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_entity_relation(
        self,
        *,
        name: str,
        from_entity_id: str,
        to_entity_id: str,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityRelation:
        """
        Create a new entity relation.

        Parameters
        ----------
        name : str

        from_entity_id : str

        to_entity_id : str

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityRelation
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.entities.create_entity_relation(
                name="name",
                from_entity_id="from_entity_id",
                to_entity_id="to_entity_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "entities/relations/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "from_entity_id": from_entity_id,
                "to_entity_id": to_entity_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EntityRelation,
                    parse_obj_as(
                        type_=EntityRelation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_entity_relation(
        self,
        relation_id: str,
        *,
        name: str,
        from_entity_id: str,
        to_entity_id: str,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityRelation:
        """
        Update an entity relation.

        Parameters
        ----------
        relation_id : str

        name : str

        from_entity_id : str

        to_entity_id : str

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityRelation
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.entities.update_entity_relation(
                relation_id="relation_id",
                name="name",
                from_entity_id="from_entity_id",
                to_entity_id="to_entity_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"entities/relations/{jsonable_encoder(relation_id)}",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "from_entity_id": from_entity_id,
                "to_entity_id": to_entity_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EntityRelation,
                    parse_obj_as(
                        type_=EntityRelation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_entity_definitions_by_ids(
        self, *, request: typing.Sequence[str], request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EntityDefinition]:
        """
        Get multiple entity definitions by their IDs.

        Args:
            ids: List of entity definition IDs to fetch
            db: Database session
            current_user: Current authenticated user

        Returns:
            List of entity definitions matching the provided IDs

        Parameters
        ----------
        request : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EntityDefinition]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.entities.get_entity_definitions_by_ids(
                request=["string"],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "entities/definitions/by-ids/",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EntityDefinition],
                    parse_obj_as(
                        type_=typing.List[EntityDefinition],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_entity_definitions_by_source_short_name(
        self, *, source_short_name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EntityDefinition]:
        """
        Get all entity definitions for a given source.

        Parameters
        ----------
        source_short_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EntityDefinition]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.entities.get_entity_definitions_by_source_short_name(
                source_short_name="source_short_name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "entities/definitions/by-source/",
            method="GET",
            params={
                "source_short_name": source_short_name,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EntityDefinition],
                    parse_obj_as(
                        type_=typing.List[EntityDefinition],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
