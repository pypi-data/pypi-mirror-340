[build-system]
requires = ["poetry-core==2.1.2"]
build-backend = "poetry.core.masonry.api"

[project]
name = "unofficial_tabdeal_api"
version = "0.1.6"
description = "a Package to communicate with Tabdeal platform"
authors = [{ name = "MohsenHNSJ", email = "mohsenhasannezhad@outlook.com" }]
maintainers = [{ name = "MohsenHNSJ", email = "mohsenhasannezhad@outlook.com" }]
readme = "README.rst"
requires-python = ">=3.11"
license = "MIT"
license-files = ["LICENSE.txt"]
dependencies = ["aiohttp == 3.11.16"]
keywords = ["tabdeal", "api", "unofficial"]
classifiers = [
    "Framework :: aiohttp",
    "Framework :: AsyncIO",
    "Topic :: Internet :: WWW/HTTP :: Session",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Development Status :: 2 - Pre-Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Financial and Insurance Industry",
    "Natural Language :: English",
]

[project.urls]
Documentation = "https://unofficial-tabdeal-api.readthedocs.io/en/latest/"
Repository = "https://github.com/MohsenHNSJ/unofficial_tabdeal_api"
Bug = "https://github.com/MohsenHNSJ/unofficial_tabdeal_api/issues"
Changelog = "https://github.com/MohsenHNSJ/unofficial_tabdeal_api/releases"

[tool.poetry]
name = "unofficial_tabdeal_api"
version = "0.1.6" # Base version
requires-poetry = ">=2.1"
description = "a Package to communicate with Tabdeal platform"
authors = ["MohsenHNSJ <mohsenhasannezhad@outlook.com>"]
classifiers = [
    "Framework :: aiohttp",
    "Framework :: AsyncIO",
    "Topic :: Internet",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Development Status :: 2 - Pre-Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Financial and Insurance Industry",
    "Natural Language :: English",
]

# Main requirements
[tool.poetry.dependencies]
python = ">=3.11,<4.0"
aiohttp = "== 3.11.16"

[tool.poetry.requires-plugins]
# https://github.com/python-poetry/poetry-plugin-export/releases
poetry-plugin-export = ">=1.9.0"

# Requirements for developers
[tool.poetry.group.dev.dependencies]
ruff = "0.11.5"
mypy = "1.15.0"
pre-commit = "4.2.0"

# Requirements for testing
[tool.poetry.group.test.dependencies]
coverage = "7.8.0"
nox = "2025.02.09"
pytest = "8.3.5"
pytest-aiohttp = "1.1.0"
pytest-asyncio = "0.26.0"
pytest-codspeed = "3.2.0"
safety = "3.3.1"

# Requirements for documentation
[tool.poetry.group.docs.dependencies]
furo = "2024.8.6"
sphinx = "8.2.0"
sphinx-autoapi = "3.6.0"
sphinx-hoverxref = "1.4.2"
sphinx-notfound-page = "1.1.0"
sphinx-version-warning = "1.1.2"
sphinx-autobuild = "2024.10.3"

[tool.ruff]
line-length = 100

[tool.ruff.lint]
extend-select = [
    "A",     # flake8-builtins
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "D",     # pydocstyle
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "DOC",   # pydoclint
    "E",     # pycodestyle
    "F",     # pyflakes
    "FBT",   # flake8-boolean-trap
    "FLY",   # flynt
    "FURB",  # refurb
    "I",     # isort
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "PERF",  # perflint
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "TC",    # flake8-type-checking
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle-warnings
    "YTT",   # flake8-2020
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 10.
max-complexity = 10

[tool.mypy]
# Enable strict mode
strict = true
# Disable warns about unneeded # type: ignore comments
warn_unused_ignores = false
# Reports an error whenever it a function is without type annotations or with incomplete type annotations
disallow_untyped_defs = true
# Enable limited checking of dynamically typed functions
check_untyped_defs = true
# Use visually nicer output in error messages: use soft word wrap, show source code snippets, and show error location markers
pretty = true
# Warns about per-module sections in the config file that do not match any files processed when invoking mypy.
warn_unused_configs = true
# Shows documentation link to corresponding error code.
show_error_code_links = true
# Shows column numbers in error messages.
show_column_numbers = true
# Prefixes each error with the relevant context.
show_error_context = true
# Shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.
warn_unreachable = true
# Shows a warning when returning a value with type Any from a function declared with a non- Any return type.
warn_return_any = true

[tool.pytest.ini_options]
# Minimum required pytest version
minversion = "8.3"
# Validate decorator markers
# Use importlib import mode
addopts = ["--strict-markers", "--import-mode=importlib"]
# Auto mode makes for the simplest test and fixture configuration as we only use asyncio
# If we also use trio, uvloop or something else, we have to change this to "strict"
asyncio_mode = "auto"
# Determines the default event loop scope of asynchronous fixtures.
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.paths]
# The entries in this section are lists of file paths that should be considered equivalent when combining data from different machines.
# The names of the entries are ignored, you may choose any name that you like.
# The value is a list of strings.
# When combining data with the combine command, two file paths will be combined if they start with paths from the same list.
# The first value must be an actual file path on the machine where the reporting will happen, so that source code can be found.
# The other values can be file patterns to match against the paths of collected data, or they can be absolute or relative file paths on the current machine.
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
# Whether to measure branch coverage in addition to statement coverage.
branch = true
# A list of packages, the source to measure during execution.
# Operates the same as source, but only names packages, for resolving ambiguities between packages and directories.
source_pkgs = ["unofficial_tabdeal_api"]
# A list of directories, the source to measure during execution.
# Operates the same as source, but only names directories, for resolving ambiguities between packages and directories.
source_dirs = ["tests"]
# A list of file name patterns, the files to leave out of measurement or reporting.
omit = ["noxfile.py"]
# Append the machine name, process id and random number to the data file name to simplify collecting data from many processes.
parallel = true

[tool.coverage.report]
# When running a summary report, show missing lines.
show_missing = true
