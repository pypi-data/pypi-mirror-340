import google.cloud.storage
from _typeshed import Incomplete
from collections.abc import Generator, Mapping
from datarobot_storage.base import SeekableKeyInterface as SeekableKeyInterface, SeekableStorage as SeekableStorage, Storage as Storage, StorageGenerator as StorageGenerator
from datarobot_storage.utils import StorageUtilsMixin as StorageUtilsMixin, cached_property as cached_property
from typing import Iterable, List, Optional

SIGNED_URL_LIFETIME: int
logger: Incomplete

class GoogleStorageCredentialsSource:
    PATH: str
    CONTENTS: str
    ADC: str
    @classmethod
    def all(cls) -> List[str]: ...

def google_storage_factory(*args, **kwargs): ...
def generate_signed_url_with_keyfile(service_account_file, bucket_name, blob_name, subresource: Incomplete | None = None, expiration=..., http_method: str = 'GET', query_parameters: Incomplete | None = None, headers: Incomplete | None = None) -> str: ...
def generate_signed_url_with_gce(bucket_name, blob_name, subresource: Incomplete | None = None, expiration=..., http_method: str = 'GET', query_parameters: Incomplete | None = None, headers: Incomplete | None = None) -> None: ...

class GoogleStorageConfig:
    prefix: str
    bucket_name: Optional[str]
    credentials_source: Optional[str]
    service_account_keyfile: Optional[str]
    service_account_keyfile_content: Optional[str]
    def __init__(self, prefix: str = '', bucket_name: Optional[str] = None, credentials_source: Optional[str] = None, service_account_keyfile: Optional[str] = None, service_account_keyfile_content: Optional[str] = None) -> None: ...
    @classmethod
    def from_dict(cls, d: Mapping): ...

class GoogleStorage(Storage, StorageUtilsMixin):
    service_account_keyfile: Optional[str]
    bucket_name: str
    prefix: str
    def __init__(self, bucket: Optional[str] = None, storage_config: Optional[GoogleStorageConfig] = None) -> None: ...
    @property
    def client(self) -> google.cloud.storage.Client: ...
    def exists(self, name: str) -> bool: ...
    def list(self, path: str, recursive: bool = False) -> List[str]: ...
    def get(self, name: str, temp_filename: str) -> bool: ...
    def get_generator(self, name: str, **kwargs) -> StorageGenerator: ...
    def put(self, name: str, local_filename: str) -> bool: ...
    def copy(self, name: str, new_name: str) -> bool: ...
    def delete(self, name: str) -> bool: ...
    def delete_batch(self, name_iter: Iterable, batch_size: Optional[int] = 100) -> None: ...
    def delete_all(self, name: str) -> None: ...
    def url(self, name: str, expires_in: Optional[int] = ...) -> Optional[str]: ...
    def get_key(self, name): ...
    def file_size(self, name: str) -> int: ...
    def get_seekable(self, name: str) -> SeekableStorage: ...

class GoogleStorageKey(SeekableKeyInterface):
    client: Incomplete
    bucket: Incomplete
    name: Incomplete
    def __init__(self, client: Incomplete | None = None, bucket: Incomplete | None = None, name: Incomplete | None = None) -> None: ...
    @property
    def size(self): ...
    def get_range(self, offset: int, size: int): ...

class DownloadBlobIterator:
    get_transport: Incomplete
    media_url: Incomplete
    def __init__(self, get_transport, media_url) -> None: ...
    def get_generator(self, offset: int = 0) -> Generator[Incomplete, None, None]: ...
