import typing_extensions
from _typeshed import Incomplete
from azure.identity import ClientSecretCredential, DefaultAzureCredential
from azure.storage import blob
from collections.abc import Mapping
from datarobot_storage.base import SeekableKeyInterface as SeekableKeyInterface, SeekableStorage as SeekableStorage, Storage as Storage, StorageGenerator as StorageGenerator
from typing import List, Optional, Union

SIGNED_BLOB_URL_TEMPLATE: str
BLOB_SAS_PERMISSIONS: Incomplete
logger: Incomplete

class AzureKey(SeekableKeyInterface):
    name: Incomplete
    client: Incomplete
    def __init__(self, name: Incomplete | None = None, client: Incomplete | None = None) -> None: ...
    def get_range(self, offset: int, size: int): ...
    @property
    def size(self): ...

class AzureBlobStorageConfig:
    prefix: str
    container_name: Optional[str]
    connection_string: Optional[str]
    account_name: Optional[str]
    account_key: Optional[str]
    tenant_id: Optional[str]
    client_id: Optional[str]
    client_secret: Optional[str]
    def __init__(self, prefix: str = '', container_name: Optional[str] = None, connection_string: Optional[str] = None, account_name: Optional[str] = None, account_key: Optional[str] = None, tenant_id: Optional[str] = None, client_id: Optional[str] = None, client_secret: Optional[str] = None) -> None: ...
    @property
    def is_shared_key(self) -> bool: ...
    @property
    def is_connection_string(self) -> bool: ...
    @property
    def is_service_principal(self) -> bool: ...
    @property
    def credential(self) -> Union[DefaultAzureCredential, ClientSecretCredential, str]: ...
    @property
    def account_url(self) -> str: ...
    @classmethod
    def from_dict(cls, _dict: Mapping) -> typing_extensions.Self: ...

class AzureBlobStorage(Storage):
    prefix: str
    config: AzureBlobStorageConfig
    blob_service_client: blob.BlobServiceClient
    def __init__(self, connection_string: Optional[str] = None, account_name: Optional[str] = None, account_key: Optional[str] = None, container_name: Optional[str] = None, storage_config: Optional[AzureBlobStorageConfig] = None) -> None: ...
    @property
    def client(self) -> blob.BlobServiceClient: ...
    @property
    def container_name(self) -> str: ...
    @property
    def azure_blob_account_key(self) -> Optional[str]: ...
    @property
    def azure_blob_account_name(self) -> Optional[str]: ...
    def get_key(self, name: str) -> AzureKey: ...
    def exists(self, name: str) -> bool: ...
    def url(self, name: str, expires_in: Optional[int] = 600) -> Optional[str]: ...
    def file_size(self, name: str) -> int: ...
    def list(self, path: str, recursive: bool = False) -> List[str]: ...
    def get(self, name: str, temp_filename: str) -> bool: ...
    def get_generator(self, name: str, **kwargs) -> StorageGenerator: ...
    def put(self, name: str, local_filename: str) -> bool: ...
    def copy(self, name: str, new_name: str) -> bool: ...
    def delete(self, name: str) -> bool: ...
    def delete_all(self, name: Optional[str] = None) -> None: ...
    def get_seekable(self, name: str) -> SeekableStorage: ...
