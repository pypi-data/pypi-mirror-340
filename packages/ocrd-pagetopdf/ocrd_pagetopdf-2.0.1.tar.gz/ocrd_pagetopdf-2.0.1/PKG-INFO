Metadata-Version: 2.4
Name: ocrd_pagetopdf
Version: 2.0.1
Summary: OCR-D wrapper for prima-pagetopdf
Author-email: Jan Kamlah <jan.kamlah@uni-mannheim.de>, Robert Sachunsky <robert.sachunsky@slub-dresden.de>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright 2020 UB-Mannheim
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Homepage, https://github.com/OCR-D/ocrd_pagetopdf
Project-URL: Repository, https://github.com/OCR-D/ocrd_pagetopdf.git
Keywords: ocr,ocr-d,page-xml
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Other Audience
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: Text Processing
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: ocrd>=3.0.4
Requires-Dist: scipy
Dynamic: license-file

# ocrd-pagetopdf

> OCR-D wrapper for prima-page-to-pdf

[![Python CI](https://github.com/OCR-D/ocrd_pagetopdf/actions/workflows/ci.yml/badge.svg)](https://github.com/OCR-D/ocrd_pagetopdf/actions/workflows/ci.yml)
[![Docker CD](https://github.com/OCR-D/ocrd_pagetopdf/actions/workflows/docker.yml/badge.svg)](https://github.com/OCR-D/ocrd_pagetopdf/actions/workflows/docker.yml)
[![PyPI CD](https://img.shields.io/pypi/v/ocrd-pagetopdf.svg)](https://pypi.org/project/ocrd-pagetopdf/)

Contents:
 * [Introduction](#introduction)
 * [Requirements](#requirements)
 * [Installation](#installation)
    * [With Docker](#with-docker)
    * [Native, from PyPI](#native-from-pypi)
    * [Native, from git](#native-from-git)
 * [Usage](#usage)
    * [ocrd-pagetopdf](#ocrd-pagetopdf)
    * [ocrd-altotopdf](#ocrd-altotopdf)
 * [FAQ](#faq)

## Introduction

This package offers [OCR-D](https://ocr-d.de/en/spec) compliant
[workspace processors](https://ocr-d.de/en/spec/cli) for conversion of OCR data
represented in [METS](https://ocr-d.de/en/spec/mets) (on the document level)
and [PAGE](https://ocr-d.de/en/spec/page)
or [ALTO](https://www.loc.gov/standards/alto/)
(on the page level) to PDF.

It transforms both the scan image (_facsimile_) and annotations (_text overlay_),
optionally drawing _polygon outlines_ for text regions / lines / words / glyphs.

Optionally _validates_ the structural annotation and fixes its coordinates before
attempting conversion.

The text layer is generated from the textual annotation on the configured _level_
of the structural hierarchy (region / line / word / glyph). It is rendered with a
configurable _font_ (which is useful to make sure all codepoints are covered by
adequate glyphs, esp. in historic prints and manuscripts).

The _page labels_ can be configured to use various attributes from the
physical pages of the METS.

A _table of contents_ will be added according to the labels of the
recursive `mets:div` logical structure.

## Requirements

- GNU `make`
- Python 3 with `pip` and `venv`
- [OCR-D](https://github.com/OCR-D/core)
- Java runtime (OpenJDK &ge;8 works for [PageToPdf](https://github.com/PRImA-Research-Lab/prima-page-to-pdf/releases) 1.1.2)

## Installation

### With Docker

This is the best option if you want to run the software in a container.

You need to have [Docker](https://docs.docker.com/install/linux/docker-ce/ubuntu/)


    docker pull ocrd/pagetopdf


To run with docker:


    docker run -v path/to/workspaces:/data ocrd/pagetopdf ocrd-pagetopdf ...

### Native, from PyPI

This is the best option if you want to use the stable, released version.

After installing Python and Java, simply do:


    pip install ocrd_pagetopdf


### Native, from git

Use this option if you want to change the source code or install the latest, unpublished changes.

We strongly recommend to use [venv](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/).

After installing `make`, assuming you are on a Debian/Ubuntu OS, you can do:

    sudo make deps-ubuntu

Otherwise, simulate this step and install requirements with equivalent actions on your system:

    make -n deps-ubuntu
    ...

Finally, to install the Python package, do:

    make install
    # or equivalently:
    pip install .


## Usage

The command-line interface `ocrd-pagetopdf` conforms to [OCR-D processor](https://ocr-d.de/en/spec/cli) specifications.

Assuming you have an [OCR-D workspace](https://ocr-d.de/en/user_guide#preparing-a-workspace) in your current working directory, simply do:

    ocrd-pagetopdf -I PAGE-FILGRP -O PDF-FILEGRP -P textequiv_level word

This will run the script and create PDF files for each page with a text layer based on word-level annotations.

In order to create an additional multipage file for the entire document, named `merged.pdf`,
concatenating the single page PDFs in physical order and with page labels and contents, do:

    ocrd-pagetopdf -I PAGE-FILGRP -O PDF-FILEGRP -P textequiv_level word -P multipage merged

In case your workspace does not contain fulltext in **PAGE** format, but **ALTO**, there is a dedicated
processor CLI `ocrd-altotopdf`, with some limitations compared to the former:

- You need to _manually_ select the fileGrp providing the images which match the annotation coordinates,
  passing it as second input fileGrp. (The image references are required by PAGE, but not by ALTO.)
- The images are _not_ generated on-the-fly according to all annotations (from existing `AlternativeImage`s,
  or by cropping via coordinates into the higher-level image, and deskewing when applicable), and _not_
  chosen via `input_feature_selector` / `input_feature_filter` mechanism. Instead, only the original
  images can be used here.
- The annotations are _not_ tested comprehensively regarding validity and consistency of coordinates and
  then repaired. Instead, only superficial checks and repairs can be applied (like negative coordinates).

Assuming you have a workspace representing a typical [DFG-conforming](https://dfg-viewer.de/) METS,
with `FULLTEXT` for ALTO and `DEFAULT` for the original images, do:

    ocrd-altotopdf -I FULLTEXT,DEFAULT -O PDF-FILEGRP -P textequiv_level word -P multipage merged

For more options and explanations, see below.

### ocrd-pagetopdf

<details><summary>OCR-D CLI</summary>


<pre>
Usage: ocrd-pagetopdf [worker|server] [OPTIONS]

  Convert text and layout annotations from PAGE to PDF format (overlaying original image with text layer and polygon outlines)

  > Converts all pages of the document to PDF

  > For each page, open and deserialize PAGE input file and its
  > respective image. Then extract a derived image of the (cropped,
  > deskewed, binarized...) page, with features depending on
  > ``image_feature_selector`` (a comma-separated list of required image
  > features, cf. :py:func:`ocrd.workspace.Workspace.image_from_page`)
  > and ``image_feature_filter`` (a comma-separated list of forbidden
  > image features).

  > Next, generate a temporary PAGE output file for that very image
  > (adapting all coordinates if necessary). If ``negative2zero`` is
  > set, validate and repair invalid or inconsistent coordinates.

  > Convert the PAGE/image pair with PRImA PageToPdf, applying
  > - ``textequiv_level`` (i.e. `-text-source`) to retrieve a text layer, if set;
  > - ``outlines`` to draw boundary polygons, if set;
  > - ``font`` accordingly.

  > Copy the resulting PDF file to the output file group and reference
  > it in the METS.

  > Finally, if ``multipage`` is set, then concatenate all generated
  > files to a multi-page PDF file, setting ``pagelabels`` accordingly,
  > as well as PDF metadata and bookmarks. Reference it with
  > ``multipage`` as ID in the output file group, too. If
  > ``multipage_only`` is also set, then remove the single-page PDF
  > files afterwards.

Subcommands:
    worker      Start a processing worker rather than do local processing
    server      Start a processor server rather than do local processing

Options for processing:
  -m, --mets URL-PATH             URL or file path of METS to process [./mets.xml]
  -w, --working-dir PATH          Working directory of local workspace [dirname(URL-PATH)]
  -I, --input-file-grp USE        File group(s) used as input
  -O, --output-file-grp USE       File group(s) used as output
  -g, --page-id ID                Physical page ID(s) to process instead of full document []
  --overwrite                     Remove existing output pages/images
                                  (with "--page-id", remove only those).
                                  Short-hand for OCRD_EXISTING_OUTPUT=OVERWRITE
  --debug                         Abort on any errors with full stack trace.
                                  Short-hand for OCRD_MISSING_OUTPUT=ABORT
  --profile                       Enable profiling
  --profile-file PROF-PATH        Write cProfile stats to PROF-PATH. Implies "--profile"
  -p, --parameter JSON-PATH       Parameters, either verbatim JSON string
                                  or JSON file path
  -P, --param-override KEY VAL    Override a single JSON object key-value pair,
                                  taking precedence over --parameter
  -U, --mets-server-url URL       URL of a METS Server for parallel incremental access to METS
                                  If URL starts with http:// start an HTTP server there,
                                  otherwise URL is a path to an on-demand-created unix socket
  -l, --log-level [OFF|ERROR|WARN|INFO|DEBUG|TRACE]
                                  Override log level globally [INFO]
  --log-filename LOG-PATH         File to redirect stderr logging to (overriding ocrd_logging.conf).

Options for information:
  -C, --show-resource RESNAME     Dump the content of processor resource RESNAME
  -L, --list-resources            List names of processor resources
  -J, --dump-json                 Dump tool description as JSON
  -D, --dump-module-dir           Show the 'module' resource location path for this processor
  -h, --help                      Show this message
  -V, --version                   Show version

Parameters:
   "image_feature_selector" [string - ""]
    comma-separated list of required image features (e.g.
    binarized,despeckled,cropped,deskewed,rotated-90)
   "image_feature_filter" [string - ""]
    comma-separated list of forbidden image features (e.g.
    binarized,despeckled,cropped,deskewed,rotated-90)
   "font" [string - ""]
    Font file to be used in PDF file. If unset, AletheiaSans.ttf is used.
    (Make sure to pick a font which covers all glyphs!)
   "outlines" [string - ""]
    What segment hierarchy to draw coordinate outlines for. If unset, no
    outlines are drawn.
    Possible values: ["", "region", "line", "word", "glyph"]
   "textequiv_level" [string - ""]
    What segment hierarchy level to render text output from. If unset, no
    text is rendered.
    Possible values: ["", "region", "line", "word", "glyph"]
   "negative2zero" [boolean - false]
    Repair invalid or inconsistent coordinates before trying to convert.
   "ext" [string - ".pdf"]
    Output filename extension
   "multipage" [string - ""]
    Merge all PDFs into one multipage file. The value is used as METS
    file ID and file basename for the PDF.
   "multipage_only" [boolean - false]
    When producing a `multipage`, do not add single-page files into the
    output fileGrp (but use a temporary directory for them).
   "pagelabel" [string - "pageId"]
    Parameter for 'multipage': Set the labels used as page outlines.

    - 'pageId': physical page ID,

    - 'pagenumber': use consecutive numbers,

    - 'pagelabel': use '@ORDERLABEL - @LABEL',

    - 'basename': use the name of the input file,

    - 'local_filename': use the href relative path of the input file,

    - 'url': use the href URL of the input file,

    - 'ID': use the file ID of the input file
    Possible values: ["pagenumber", "pagelabel", "pageId", "basename",
    "basename_without_extension", "local_filename", "ID", "url"]
   "script-args" [string - ""]
    Extra arguments to PageToPdf (see https://github.com/PRImA-Research-
    Lab/prima-page-to-pdf)
</pre>

</details>

### ocrd-altotopdf

<details><summary>OCR-D CLI</summary>


<pre>
Usage: ocrd-altotopdf [worker|server] [OPTIONS]

  Convert text and layout annotations from ALTO to PDF format (overlaying original image with text layer and polygon outlines)

  > Converts all pages of the document to PDF

  > For each page, find the ALTO input file in the first fileGrp,
  > together with the image input file in the second fileGrp.

  > Then convert ALTO to PAGE with PRImA PageConverter in a temporary
  > location.

  > Next convert the PAGE/image pair with PRImA PageToPdf in a temporary location,
  > applying
  > - ``textequiv_level`` (i.e. `-text-source`) to retrieve a text layer, if set;
  > - ``outlines`` to draw boundary polygons, if set;
  > - ``font`` accordingly;
  > - ``negative2zero`` (i.e. `-neg-coords toZero`) to repair negative coordintes.

  > Copy to the resulting PDF file to the output file group and
  > reference it in the METS.

  > Finally, if ``multipage`` is set, then concatenate all generated
  > files to a multi-page PDF file, setting ``pagelabels`` accordingly,
  > as well as PDF metadata and bookmarks. Reference it with
  > ``multipage`` as ID in the output fileGrp, too. If
  > ``multipage_only`` is also set, then remove the single-page PDF
  > files afterwards.

Subcommands:
    worker      Start a processing worker rather than do local processing
    server      Start a processor server rather than do local processing

Options for processing:
  -m, --mets URL-PATH             URL or file path of METS to process [./mets.xml]
  -w, --working-dir PATH          Working directory of local workspace [dirname(URL-PATH)]
  -I, --input-file-grp USE        File group(s) used as input
  -O, --output-file-grp USE       File group(s) used as output
  -g, --page-id ID                Physical page ID(s) to process instead of full document []
  --overwrite                     Remove existing output pages/images
                                  (with "--page-id", remove only those).
                                  Short-hand for OCRD_EXISTING_OUTPUT=OVERWRITE
  --debug                         Abort on any errors with full stack trace.
                                  Short-hand for OCRD_MISSING_OUTPUT=ABORT
  --profile                       Enable profiling
  --profile-file PROF-PATH        Write cProfile stats to PROF-PATH. Implies "--profile"
  -p, --parameter JSON-PATH       Parameters, either verbatim JSON string
                                  or JSON file path
  -P, --param-override KEY VAL    Override a single JSON object key-value pair,
                                  taking precedence over --parameter
  -U, --mets-server-url URL       URL of a METS Server for parallel incremental access to METS
                                  If URL starts with http:// start an HTTP server there,
                                  otherwise URL is a path to an on-demand-created unix socket
  -l, --log-level [OFF|ERROR|WARN|INFO|DEBUG|TRACE]
                                  Override log level globally [INFO]
  --log-filename LOG-PATH         File to redirect stderr logging to (overriding ocrd_logging.conf).

Options for information:
  -C, --show-resource RESNAME     Dump the content of processor resource RESNAME
  -L, --list-resources            List names of processor resources
  -J, --dump-json                 Dump tool description as JSON
  -D, --dump-module-dir           Show the 'module' resource location path for this processor
  -h, --help                      Show this message
  -V, --version                   Show version

Parameters:
   "font" [string - ""]
    Font file to be used in PDF file. If unset, AletheiaSans.ttf is used.
    (Make sure to pick a font which covers all glyphs!)
   "outlines" [string - ""]
    What segment hierarchy to draw coordinate outlines for. If unset, no
    outlines are drawn.
    Possible values: ["", "region", "line", "word", "glyph"]
   "textequiv_level" [string - ""]
    What segment hierarchy level to render text output from. If unset, no
    text is rendered.
    Possible values: ["", "region", "line", "word", "glyph"]
   "negative2zero" [boolean - false]
    Repair invalid or inconsistent coordinates before trying to convert.
   "ext" [string - ".pdf"]
    Output filename extension
   "multipage" [string - ""]
    Merge all PDFs into one multipage file. The value is used as METS
    file ID and file basename for the PDF.
   "multipage_only" [boolean - false]
    When producing a `multipage`, do not add single-page files into the
    output fileGrp (but use a temporary directory for them).
   "pagelabel" [string - "pageId"]
    Parameter for 'multipage': Set the labels used as page outlines.

    - 'pageId': physical page ID,

    - 'pagenumber': use consecutive numbers,

    - 'pagelabel': use '@ORDERLABEL - @LABEL',

    - 'basename': use the name of the input file,

    - 'local_filename': use the href relative path of the input file,

    - 'url': use the href URL of the input file,

    - 'ID': use the file ID of the input file
    Possible values: ["pagenumber", "pagelabel", "pageId", "basename",
    "basename_without_extension", "local_filename", "ID", "url"]
   "script-args" [string - ""]
    Extra arguments to PageToPdf (see https://github.com/PRImA-Research-
    Lab/prima-page-to-pdf)
</pre>

</details>


## FAQ

- `Illegal reflective access by com.itextpdf.text.io.ByteBufferRandomAccessSource$1 to method java.nio.DirectByteBuffer.cleaner()`
   If that appears, try installing OpenJDK 8.

- `java.lang.NullPointerException` 
  If that appears, try (a little workaround) and set negative coordinates to zero:
  
      ocrd-pagetopdf -I PAGE-FILGRP -O PDF-FILEGRP ... -P negative2zero true

- Some letters are illegible?
  Please note that the standard displayed font ([AletheiaSans.ttf](https://github.com/PRImA-Research-Lab/prima-aletheia-web/raw/master/war/aletheiasans-webfont.ttf)) does not support all Unicode glyphs. In case yours are missing, set a (monospace) Unicode font yourself:
  
      ocrd-pagetopdf -I PAGE-FILGRP -O PDF-FILEGRP ... -P font /usr/share/fonts/truetype/ubuntu/UbuntuMono-R.ttf
  
  Fonts can also be referenced by file name if they are installed as [processor resources](https://ocr-d.de/en/spec/cli#processor-resources). A number of options have been preconfigured, cf. `ocrd resmgr list-available -e ocrd-pagetopdf`.

- The multipage file's page labels can be configured, e.g. consecutively via `pagelabel=pagenumber` or from `@ORDERLABEL` and `@LABEL` via `pagelabel=pagelabel`:
  
      ocrd-pagetopdf -I PAGE-FILGRP -O PDF-FILEGRP ... -P pagelabel pagelabel

