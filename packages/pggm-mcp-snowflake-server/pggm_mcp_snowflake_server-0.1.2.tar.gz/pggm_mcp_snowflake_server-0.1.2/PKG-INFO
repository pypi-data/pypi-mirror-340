Metadata-Version: 2.4
Name: pggm-mcp-snowflake-server
Version: 0.1.2
Summary: Custom Model Context Protocol server for Snowflake
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: mcp
Requires-Dist: pydantic
Requires-Dist: snowflake-snowpark-python
Requires-Dist: pyyaml

# PGGM MCP Snowflake Server

A customized Model Context Protocol (MCP) server for Snowflake integration, allowing AI assistants to interact with Snowflake databases securely and efficiently.

## Features

- Connect to Snowflake databases and execute queries
- Support for various SQL operations and schema exploration
- Data insights collection and memoization
- SQL write operation detection for enhanced security
- Customizable database, schema, and table filtering
- Support for authentication through environment variables or command-line arguments

## Installation

### Using pip

```bash
pip install pggm-mcp-snowflake-server
```


### Tools Available to AI Assistants

The server provides the following tools for AI assistants:

- `list_databases` - List all available databases in Snowflake
- `list_schemas` - List all schemas in a database
- `list_tables` - List all tables in a specific database and schema
- `describe_table` - Get the schema information for a specific table
- `read_query` - Execute a SELECT query
- `append_insight` - Add a data insight to the memo
- `write_query` - Execute an INSERT, UPDATE, or DELETE query (if --allow_write is enabled)
- `create_table` - Create a new table in the Snowflake database (if --allow_write is enabled)

## Security

By default, the server runs in read-only mode. To enable write operations, you must explicitly pass the `--allow_write` flag.

The server uses SQL parsing to detect and prevent write operations in `read_query` calls, ensuring only approved write operations can be executed.

## Development

### Setup Development Environment

```bash
git clone https://github.com/yourusername/pggm-mcp-snowflake-server.git
cd pggm-mcp-snowflake-server
uv venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate
uv pip install -e ".[dev]"
```

