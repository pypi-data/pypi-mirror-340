name: Publish Python Package with UV

on:
  release:
    types: [published]

env:
  UV_CACHE_DIR: ${{ github.workspace }}/.uv_cache  # 自定义缓存目录

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install UV with caching
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"  # 当锁文件变化时自动失效缓存[3]

      - name: Restore packages cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Build package
        run: |
          uv sync --quiet
          uv build --release
          uv publish --strict

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pypi-package
          path: dist/

      - name: Cleanup cache
        if: always()  # 确保总是执行清理
        run: uv cache prune --ci  # CI环境专用缓存清理[3]

  publish:
    runs-on: ubuntu-latest
    needs: build
    environment: 
      name: pypi
      url: https://pypi.org/project/${{ github.repository }}
    permissions:
      id-token: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: pypi-package
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verify-metadata: true  # 启用元数据验证
