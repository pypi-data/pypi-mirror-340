# generated by datamodel-codegen:
#   filename:  data_room_action.json

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class Kind(Enum):
    media = 'media'


class ProvisionBaseAudiencePolicyIds(BaseModel):
    demographicsPolicyId: Optional[str] = None
    embeddingsPolicyId: Optional[str] = None
    matchingPolicyId: str
    segmentsPolicyId: Optional[str] = None


class DataRoomAction1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    provisionBaseAudiencePolicyIds: ProvisionBaseAudiencePolicyIds


class DataRoomAction2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    deprovisionBaseAudiencePolicyIds: Mapping[str, Any]


class ProvisionSeedAudiencePolicyIds(BaseModel):
    audiencesPolicyId: str


class DataRoomAction3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    provisionSeedAudiencePolicyIds: ProvisionSeedAudiencePolicyIds


class DataRoomAction4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    deprovisionSeedAudiencePolicyIds: Mapping[str, Any]


class DeleteCustomAudience(BaseModel):
    audienceId: str
    forceDeletePrerequisites: bool


class DataRoomAction6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    deleteCustomAudience: DeleteCustomAudience


class GetAudiencePrerequisites(BaseModel):
    audienceId: str


class DataRoomAction7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    getAudiencePrerequisites: GetAudiencePrerequisites


class Kind18(Enum):
    BASE = 'BASE'


class AudienceReference4(BaseModel):
    kind: Kind18


class Kind19(Enum):
    CUSTOM = 'CUSTOM'


class AudienceReference5(BaseModel):
    id: str
    kind: Kind19


class Kind20(Enum):
    SEED = 'SEED'


class AudienceReference6(BaseModel):
    audienceType: str
    kind: Kind20


class AudienceReference(
    RootModel[Union[AudienceReference4, AudienceReference5, AudienceReference6]]
):
    root: Union[AudienceReference4, AudienceReference5, AudienceReference6]


class BooleanOp(Enum):
    AND = 'AND'
    OR = 'OR'


class CombineOperator(Enum):
    INTERSECT = 'INTERSECT'
    UNION = 'UNION'
    DIFF = 'DIFF'


class Kind21(Enum):
    LOOKALIKE = 'LOOKALIKE'


class CustomAudienceDefinition3(BaseModel):
    excludeSeedAudience: Optional[bool] = None
    kind: Kind21
    reach: conint(ge=0)
    sourceRef: AudienceReference


class Kind22(Enum):
    RULE_BASED = 'RULE_BASED'


class FilterOperator(Enum):
    CONTAINS_ANY_OF = 'CONTAINS_ANY_OF'
    CONTAINS_NONE_OF = 'CONTAINS_NONE_OF'
    CONTAINS_ALL_OF = 'CONTAINS_ALL_OF'
    EMPTY = 'EMPTY'
    NOT_EMPTY = 'NOT_EMPTY'


class AudienceFilter(BaseModel):
    attribute: str
    operator: FilterOperator
    values: Optional[Sequence[str]] = None


class AudienceFilters(BaseModel):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class AudienceCombinator(BaseModel):
    filters: Optional[AudienceFilters] = None
    operator: CombineOperator
    sourceRef: AudienceReference


class CustomAudienceDefinition4(BaseModel):
    combine: Optional[Sequence[AudienceCombinator]] = None
    filters: Optional[AudienceFilters] = None
    kind: Kind22
    sourceRef: AudienceReference


class CustomAudienceDefinition(
    RootModel[Union[CustomAudienceDefinition3, CustomAudienceDefinition4]]
):
    root: Union[CustomAudienceDefinition3, CustomAudienceDefinition4]


class CreateCustomAudience(BaseModel):
    definition: CustomAudienceDefinition
    name: str
    sharedWith: Sequence[str]


class DataRoomAction5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    createCustomAudience: CreateCustomAudience


class UpdateCustomAudience(BaseModel):
    audienceId: str
    definition: Optional[CustomAudienceDefinition] = None
    name: Optional[str] = None
    sharedWith: Optional[Sequence[str]] = None


class DataRoomAction8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Kind
    updateCustomAudience: UpdateCustomAudience


class DataRoomAction(
    RootModel[
        Union[
            DataRoomAction1,
            DataRoomAction2,
            DataRoomAction3,
            DataRoomAction4,
            DataRoomAction5,
            DataRoomAction6,
            DataRoomAction7,
            DataRoomAction8,
        ]
    ]
):
    root: Union[
        DataRoomAction1,
        DataRoomAction2,
        DataRoomAction3,
        DataRoomAction4,
        DataRoomAction5,
        DataRoomAction6,
        DataRoomAction7,
        DataRoomAction8,
    ] = Field(..., title='DataRoomAction')
