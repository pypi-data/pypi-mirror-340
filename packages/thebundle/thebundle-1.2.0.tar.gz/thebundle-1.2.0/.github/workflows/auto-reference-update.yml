name: auto reference update ðŸ”„

on:
  pull_request:
    branches: [ main ]

jobs:
  check_commit_message:
    runs-on: ubuntu-latest
    outputs:
      should_run_tests: ${{ steps.check.outputs.should_run_tests }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        run: |
          # Retrieve the most recent commit message
          commit_message=$(git log -1 --pretty=%B)
          echo "Commit message: $commit_message"
          if echo "$commit_message" | grep -q "auto: \[drop reference\]"; then
            echo "Found commit message, tests will run."
            echo "should_run_tests=true" >> $GITHUB_OUTPUT
          else
            echo "Commit message not found, skipping tests."
            echo "should_run_tests=false" >> $GITHUB_OUTPUT
          fi

  wait_for_crossplatforms-tests:
    needs: [check_commit_message]
    if: ${{ needs.check_commit_message.outputs.should_run_tests == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Wait for Ubuntu tests
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          check-regexp: '^ubuntu_tests \(3\.\d{2}\)$'
          repo-token: ${{ secrets.GITACTION_ACCESS_TOKEN }}
          wait-interval: 3
          allowed-conclusions: success

      - name: Wait for macOS tests
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          check-regexp: '^macos_tests \(3\.\d{2}\)$'
          repo-token: ${{ secrets.GITACTION_ACCESS_TOKEN }}
          wait-interval: 3
          allowed-conclusions: success

      - name: Wait for Windows tests
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          check-regexp: '^windows_tests \(3\.\d{2}\)$'
          repo-token: ${{ secrets.GITACTION_ACCESS_TOKEN }}
          wait-interval: 3
          allowed-conclusions: success

  update_reference_linux:
    needs: [wait_for_crossplatforms-tests, check_commit_message]
    if: ${{ needs.check_commit_message.outputs.should_run_tests == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      all-successful: ${{ steps.check-jobs.outputs.successful }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5.5
        with:
          python-version: '3.10'

      - name: Install Playwright system dependencies
        run: |
          npx playwright install-deps

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install GitPython click
          pip install -e .[test]
          playwright install

      - name: Pull changes
        run: |
          git pull origin ${{ github.event.pull_request.head.ref || github.ref_name }}

      - name: Run tests
        run: |
          pytest

      - name: Commit References
        run: |
          git config --global user.name 'TheBundle'
          git config --global user.email 'noreply@github.com'
          git add references/linux
          git diff --quiet && git diff --staged --quiet || git commit -m "auto: update references [linux]"
          git push --set-upstream https://${{ secrets.GITACTION_ACCESS_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.event.pull_request.head.ref || github.ref_name }}

  update_reference_darwin:
    needs: [update_reference_linux, check_commit_message]
    if: ${{ needs.check_commit_message.outputs.should_run_tests == 'true' }}
    runs-on: macos-latest
    outputs:
      all-successful: ${{ steps.check-jobs.outputs.successful }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5.5
        with:
          python-version: '3.10'

      - name: Install BUNDLE dependencies
        run: |
          python -m pip install --upgrade pip
          pip install GitPython click
          pip install -e .[test]
          playwright install

      - name: Pull changes
        run: |
          git pull origin ${{ github.event.pull_request.head.ref || github.ref_name }}

      - name: Run tests
        run: |
          pytest

      - name: Commit References
        run: |
          git config --global user.name 'TheBundle'
          git config --global user.email 'noreply@github.com'
          git add references/darwin
          git diff --quiet && git diff --staged --quiet || git commit -m "auto: update references [darwin]"
          git push --set-upstream https://${{ secrets.GITACTION_ACCESS_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.event.pull_request.head.ref || github.ref_name }}

  update_reference_windows:
    needs: [update_reference_darwin, check_commit_message]
    if: ${{ needs.check_commit_message.outputs.should_run_tests == 'true' }}
    runs-on: windows-latest
    outputs:
      all-successful: ${{ steps.check-jobs.outputs.successful }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5.5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install GitPython click
          pip install -e .[test]
          playwright install

      - name: Pull changes
        run: |
          git pull origin ${{ github.event.pull_request.head.ref || github.ref_name }}

      - name: Run tests
        run: |
          pytest

      - name: Commit References
        run: |
          git config --global user.name 'TheBundle'
          git config --global user.email 'noreply@github.com'
          git add references/windows
          git diff --quiet && git diff --staged --quiet || git commit -m "auto: update references [windows]"
          git push --set-upstream https://${{ secrets.GITACTION_ACCESS_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.event.pull_request.head.ref || github.ref_name }}

  remove_target_commit:
    needs: [update_reference_windows, check_commit_message]
    if: ${{ needs.check_commit_message.outputs.should_run_tests == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5.5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install GitPython click

      - name: Pull changes
        run: |
          git fetch origin
          git pull --rebase origin ${{ github.event.pull_request.head.ref || github.ref_name }}

      - name: Configure Git User
        run: |
          git config --global user.name 'TheBundle'
          git config --global user.email 'noreply@github.com'

      - name: Remove Target Commits
        run: |
          git stash save --include-untracked
          commits=$(git log --pretty=format:'%H %s' | grep "auto: \[drop reference\]" | cut -d ' ' -f1)
          if [ -z "$commits" ]; then
            echo "No commits found with the specified message."
          else
            for commit in $commits; do
                GIT_COMMITTER_NAME="$(git log -1 --format='%an' $commit)"
                GIT_COMMITTER_EMAIL="$(git log -1 --format='%ae' $commit)"
                git rebase --onto $commit^ $commit --strategy-option=theirs --committer-date-is-author-date || git rebase --abort
            done
          fi
          git stash list | grep -q 'stash@{0}' && git stash pop
          git push --force --set-upstream https://${{ secrets.GITACTION_ACCESS_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.event.pull_request.head.ref || github.ref_name }}
