# Generated by Django 5.1.7 on 2025-04-12 00:10

import django.db.models.deletion
import taggit.managers
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("commoncontent", "0002_article_subtitle_attachment_custom_icon_and_more"),
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
    ]

    operations = [
        # Django doesn't allow adding a through-model to an existing ManyToManyField
        migrations.RemoveField(
            model_name="article",
            name="image_set",
        ),
        migrations.AddField(
            model_name="homepage",
            name="attachment_set",
            field=models.ManyToManyField(
                to="commoncontent.attachment", verbose_name="attachments"
            ),
        ),
        migrations.AddField(
            model_name="page",
            name="attachment_set",
            field=models.ManyToManyField(
                to="commoncontent.attachment", verbose_name="attachments"
            ),
        ),
        migrations.AddField(
            model_name="section",
            name="attachment_set",
            field=models.ManyToManyField(
                to="commoncontent.attachment", verbose_name="attachments"
            ),
        ),
        migrations.CreateModel(
            name="ArticleImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=255, verbose_name="title"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="alt text"
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0, verbose_name="order")),
                (
                    "article",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="article_images",
                        to="commoncontent.article",
                        verbose_name="article",
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="commoncontent.image",
                        verbose_name="image",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="article",
            name="image_set",
            field=models.ManyToManyField(
                related_name="articles",
                through="commoncontent.ArticleImage",
                to="commoncontent.image",
                verbose_name="related images",
            ),
        ),
        migrations.CreateModel(
            name="HomePageImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=255, verbose_name="title"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="alt text"
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0, verbose_name="order")),
                (
                    "homepage",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="homepage_images",
                        to="commoncontent.homepage",
                        verbose_name="home page",
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="commoncontent.image",
                        verbose_name="image",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="homepage",
            name="image_set",
            field=models.ManyToManyField(
                related_name="homepages",
                through="commoncontent.HomePageImage",
                to="commoncontent.image",
                verbose_name="related images",
            ),
        ),
        migrations.CreateModel(
            name="PageImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=255, verbose_name="title"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="alt text"
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0, verbose_name="order")),
                (
                    "image",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="commoncontent.image",
                        verbose_name="image",
                    ),
                ),
                (
                    "page",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="page_images",
                        to="commoncontent.page",
                        verbose_name="page",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="page",
            name="image_set",
            field=models.ManyToManyField(
                related_name="pages",
                through="commoncontent.PageImage",
                to="commoncontent.image",
                verbose_name="related images",
            ),
        ),
        migrations.CreateModel(
            name="SectionImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=255, verbose_name="title"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="alt text"
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0, verbose_name="order")),
                (
                    "image",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="commoncontent.image",
                        verbose_name="image",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="section_images",
                        to="commoncontent.section",
                        verbose_name="section",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="section",
            name="image_set",
            field=models.ManyToManyField(
                related_name="sections",
                through="commoncontent.SectionImage",
                to="commoncontent.image",
                verbose_name="related images",
            ),
        ),
    ]
