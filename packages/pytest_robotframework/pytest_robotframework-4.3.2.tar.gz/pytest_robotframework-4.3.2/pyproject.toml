[project]
name = "pytest_robotframework"
dynamic = []
description = "a pytest plugin that can run both python and robotframework tests while generating robot reports for them"
authors = [
    { name = "DetachHead", email = "detachhead@users.noreply.github.com" },
]
dependencies = [
    "pytest<9,>=7",
    "robotframework<8.0.0,>=6.1",
    "basedtyping<0.2,>=0.1.0",
    "ansi2html>=1.9.1",
]
requires-python = ">=3.9,<4.0"
readme = "README.md"
version = "4.3.2"

[project.license]
text = "MIT"

[project.urls]
repository = "https://github.com/detachhead/pytest-robotframework"

[project.entry-points.pytest11]
robotframework = "pytest_robotframework._internal.pytest.plugin"

[tool.pyprojectx]
main = [
    "uv",
]

[tool.pyprojectx.aliases]
update = "uv lock --upgrade"
test = "uv run pytest -n auto"
typecheck = [
    "uv run basedpyright",
    "uv run basedpyright --verifytypes pytest_robotframework --ignoreexternal",
]
ruff_check = [
    "uv run ruff check",
    "uv run ruff format --check --diff",
]
ruff_fix = [
    "uv run ruff check --fix",
    "uv run ruff format",
]
pylint = "uv run pylint pytest_robotframework tests"
robocop = "uv run robocop"
robotidy = "uv run robotidy --color --check --diff ."
robotcode = "uv run robotcode analyze code"
open_docs = "uv run pdoc pytest_robotframework"
clear_pycache = "python scripts/clear_pycache.py"

[tool.uv]
prerelease = "allow"
dev-dependencies = [
    "basedpyright>=1.10.1",
    "pylint>=3.2.0",
    "ruff>=0.2.0",
    "robotframework-robocop>=4.1.0,<6",
    "robotframework-tidy>=4.5.0",
    "lxml>=4.9.3",
    "lxml-stubs>=0.4.0",
    "pytest-xdist>=3.5.0",
    "pytest-github-actions-annotate-failures>=0.2.0",
    "pdoc>=14.1.0",
    "robotcode[analyze]>=0.97.0",
]

[tool.pdm.build]
includes = [
    "pytest_robotframework",
]

[tool.pdm.version]
source = "file"
path = "pytest_robotframework/_internal/__init__.py"

[tool.pylint.MASTER]
fail-on = "I"
bad-names = [
    "foo",
    "bar",
    "baz",
    "retval",
]
load-plugins = [
    "pylint.extensions.bad_builtin",
    "pylint.extensions.broad_try_caluse",
    "pylint.extensions.check_elif",
    "pylint.extensions.code_style",
    "pylint.extensions.comparetozero",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.confusing_elif",
    "pylint.extensions.consider_refactoring_into_while_condition",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.dict_init_mutate",
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
    "pylint.extensions.dunder",
    "pylint.extensions.empty_comment",
    "pylint.extensions.emptystring",
    "pylint.extensions.eq_without_hash",
    "pylint.extensions.for_any_all",
    "pylint.extensions.magic_value",
    "pylint.extensions.no_self_use",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.private_import",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
    "pylint.extensions.while_used",
]

[tool.pylint."MESSAGE CONTROL"]
disable = [
    "R",
    "C",
    "E",
    "F",
    "W",
    "I",
]
enable = [
    "useless-suppression",
    "access-member-before-definition",
    "assignment-from-none",
    "dict-iter-missing-items",
    "invalid-bool-returned",
    "invalid-getnewargs-ex-returned",
    "invalid-getnewargs-returned",
    "invalid-index-returned",
    "invalid-length-hint-returned",
    "invalid-slice-index",
    "invalid-slice-step",
    "invalid-slots",
    "invalid-slots-object",
    "invalid-unicode-codec",
    "logging-format-truncated",
    "logging-unsupported-format",
    "method-hidden",
    "modified-iterating-dict",
    "potential-index-error",
    "relative-beyond-top-level",
    "abstract-method",
    "arguments-out-of-order",
    "attribute-defined-outside-init",
    "confusing-with-statement",
    "deprecated-decorator",
    "deprecated-module",
    "differing-param-doc",
    "global-variable-undefined",
    "missing-param-doc",
    "modified-iterating-list",
    "multiple-constructor-doc",
    "non-parent-init-called",
    "overlapping-except",
    "preferred-module",
    "raising-format-tuple",
    "redefined-outer-name",
    "redefined-slots-in-subclass",
    "redundant-returns-doc",
    "redundant-yields-doc",
    "shallow-copy-environ",
    "useless-param-doc",
    "useless-parent-delegation",
    "useless-type-doc",
    "using-constant-test",
    "bad-file-encoding",
    "dict-init-mutate",
    "use-implicit-booleaness-not-comparison",
    "chained-comparison",
    "confusing-consecutive-elif",
    "consider-using-join",
    "consider-using-max-builtin",
    "consider-using-min-builtin",
    "consider-using-namedtuple-or-dataclass",
    "consider-using-tuple",
    "simplifiable-condition",
    "simplify-boolean-expression",
    "contextmanager-generator-missing-cleanup",
]

[tool.pylint.REPORTS]
reports = "no"
output-format = "colorized"
score = "no"

[tool.pylint.FORMAT]
max-line-length = 200

[tool.pytest.ini_options]
addopts = [
    "-p",
    "no:robotframework",
    "--ignore=tests/fixtures",
    "-vv",
]
xfail_strict = true
enable_assertion_pass_hook = true

[tool.basedpyright]
ignore = [
    "pw",
]
pythonVersion = "3.9"
allowedUntypedLibraries = [
    "robot",
]
reportImplicitStringConcatenation = false
reportUnusedImport = false
reportUnusedVariable = false

[tool.ruff]
unsafe-fixes = true
target-version = "py39"
respect-gitignore = true
line-length = 100
preview = true
extend-exclude = [
    "pw",
]

[tool.ruff.lint]
extend-select = [
    "ALL",
]
ignore = [
    "ANN",
    "EM",
    "FIX",
    "PLR0913",
    "PLR0912",
    "PLR0915",
    "PLR1702",
    "PLR2004",
    "PLR1722",
    "PLW2901",
    "PLE0605",
    "PLR0911",
    "PLW0603",
    "PLC0105",
    "PLC0414",
    "RUF013",
    "RUF016",
    "TRY002",
    "TRY003",
    "D10",
    "D203",
    "D205",
    "D212",
    "D400",
    "D401",
    "D403",
    "D404",
    "D405",
    "D406",
    "D415",
    "D418",
    "D413",
    "PT013",
    "TD002",
    "CPY001",
    "C901",
    "SLF001",
    "PLC2701",
    "UP006",
    "UP007",
    "UP035",
    "ISC001",
    "COM812",
    "PLE1507",
    "D200",
    "DOC201",
    "DOC501",
    "ARG001",
    "TC006",
    "W291",
    "W293",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.per-file-ignores]
"*.pyi" = [
    "A001",
    "A002",
    "N",
]
"tests/**/*.py" = [
    "S101",
]

[tool.ruff.lint.isort]
combine-as-imports = true
required-imports = [
    "from __future__ import annotations",
]
split-on-trailing-comma = false

[tool.ruff.format]
skip-magic-trailing-comma = true
docstring-code-format = true

[tool.robotidy]
configure = [
    "AlignTemplatedTestCases:enabled=True",
    "RenameKeywords:enabled=True",
    "RenameTestCases:enabled=True",
    "SplitTooLongLine:line_length=160",
]

[tool.robocop]
paths = [
    "tests",
]
reports = [
    "all",
]
exclude = [
    "not-allowed-char-in-filename",
    "non-local-variables-should-be-uppercase",
    "section-variable-not-uppercase",
    "too-many-calls-in-test-case",
    "too-many-calls-in-keyword",
    "too-long-test-case",
    "too-many-arguments",
    "not-capitalized-test-case-title",
    "file-too-long",
    "too-long-keyword",
    "missing-doc-resource-file",
    "missing-doc-keyword",
    "missing-doc-suite",
    "missing-doc-test-case",
]
configure = [
    "todo-in-comment:enabled:False",
    "too-many-test-cases:enabled:False",
    "too-many-calls-in-keyword:severity:W",
    "can-be-resource-file:severity:W",
    "missing-doc-suite:severity:W",
    "line-too-long:line_length:160",
    "possible-variable-overwriting:severity:E",
    "could-be-test-tags:severity:E",
    "tag-already-set-in-test-tags:severity:E",
    "unused-variable:severity:W",
    "unnecessary-string-conversion:severity:W",
    "expression-can-be-simplified:severity:W",
    "can-be-resource-file:severity:W",
]

[tool.robotcode-analyze.modifiers]
error = [
    "LibraryAlreadyImported",
    "ResourceAlreadyImported",
    "VariablesAlreadyImported",
]

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"
