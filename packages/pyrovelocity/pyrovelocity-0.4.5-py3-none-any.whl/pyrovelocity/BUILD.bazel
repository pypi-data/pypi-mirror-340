"""
pyrovelocity BUILD
"""

# load("@aspect_rules_py//py:defs.bzl", "py_library", "py_pytest_main", "py_test")
load("@pip//:requirements.bzl", "all_requirements", "requirement")
load("@rules_python//python:defs.bzl", "py_library", "py_test")
load("//bazel:python.bzl", "py_test_module_list", "xdoctest")

# passing imports = [".."] to py_test is currently required to import the parent
# package at the top-level of test modules even though the library dependency
# should be sufficient to update sys.path.
# https://github.com/bazelbuild/rules_python/issues/1221

xdoctest(
    files = glob(
        include = [
            "**/*.py",
        ],
        exclude = [
            "workflows/**",
            "tests/**",
        ],
    ),
    imports = [".."],
    deps = [":pyrovelocity"],
)

py_test_module_list(
    size = "small",
    files = [
        "tests/analysis/test_cytotrace.py",
        "tests/io/test_sparsity.py",
        "tests/models/test_pyrovelocity.py",
        "tests/models/test_trainer.py",
        "tests/models/test_velocity.py",
        "tests/models/test_velocity_module.py",
        "tests/plots/test_plots.py",
    ],
    imports = [".."],
    tags = [""],
    deps = [":pyrovelocity"],
)

py_test_module_list(
    size = "medium",
    files = [
        "tests/io/test_cluster.py",
        "tests/io/test_compressedpickle.py",
        "tests/metrics/test_criticality_index.py",
        "tests/models/test_deterministic_inference.py",
        "tests/models/test_deterministic_simulation.py",
        "tests/models/test_transcription_dynamics.py",
        "tests/models/test_velocity_model.py",
        "tests/plots/test_genes.py",
        "tests/plots/test_posteriors.py",
        "tests/plots/test_predictive.py",
        "tests/plots/test_rainbow.py",
        "tests/plots/test_summary.py",
        "tests/plots/test_time.py",
        "tests/plots/test_vector_fields.py",
        "tests/tasks/test_data.py",
        "tests/tasks/test_postprocess.py",
        "tests/tasks/test_preprocess.py",
        "tests/tasks/test_summarize.py",
        "tests/tasks/test_train.py",
        "tests/test_utils.py",
    ],
    imports = [".."],
    tags = [""],
    deps = [":pyrovelocity"],
)

py_test_module_list(
    size = "large",
    files = [
    ],
    imports = [".."],
    tags = [""],
    deps = [":pyrovelocity"],
)

py_library(
    name = "pyrovelocity",
    srcs = glob(
        [
            "**/*.py",
        ],
        exclude = ["tests/**/*.py"],
    ),
    data = ["styles/common.mplstyle"],
    visibility = [
        "//src/pyrovelocity:__pkg__",
        "//src/pyrovelocity:__subpackages__",
    ],
    deps = all_requirements,
    # imports = [".."],
)

# individual tests can be specified with requirements even if the root
# py_library is defined with deps = []. this makes installation of dependencies
# more efficient but requires manually curating direct and transitive
# dependencies.
#
# py_test(
#     name = "test_compressedpickle",
#     srcs = ["tests/test_compressedpickle.py"],
#     size = "small",
#     deps = [
#         ":pyrovelocity",
#         requirement("numpy"),
#         requirement("pandas"),
#         requirement("pytest"),
#     ],
#     imports = [".."],
# )

# py_test(
#     name = "test_criticality_index",
#     srcs = ["tests/test_criticality_index.py"],
#     size = "small",
#     deps = [
#         ":pyrovelocity",
#         requirement("anndata"),
#         requirement("numpy"),
#         requirement("pytest"),
#         requirement("scvelo"),
#     ],
#     imports = [".."],
# )

# py_test(
#     name = "test_utils",
#     srcs = ["tests/test_utils.py"],
#     size = "small",
#     deps = [
#         ":pyrovelocity",
#         requirement("anndata"),
#         requirement("hypothesis"),
#         requirement("numpy"),
#         requirement("pytest"),
#     ],
#     imports = [".."],
# )
#
# py_library(
#     name = "conftest",
#     srcs = ["tests/conftest.py"],
# )
