[{"name": "Your first Python code", "chapter": "1", "key": "bdc52f0e19", "solution": "# Hit run code to see the output!\nprint(5 / 8)", "sct": "Ex().has_printout(0, not_printed_msg = \"__JINJA__:Have you used `{{sol_call}}` to print out `5 / 8`?\")\nsuccess_msg(\"Great! On to the next one!\")", "pec": ""}, {"name": "Python as a calculator", "chapter": "1", "key": "0f7c039428", "solution": "# Addition and division\nprint(4 + 5)\nprint(10 / 2)\n\n# Subtraction\nprint(5 - 5)\n\n# Multiplication\nprint(3 * 5)", "sct": "Ex().has_printout(0, not_printed_msg = \"Have you used `print(4 + 5)` to print out the result of your sum?\")\n\nEx().has_printout(1, not_printed_msg = \"Have you used `print(5 - 5)` to print out the result of your subtration?\")\n\nEx().has_printout(2, not_printed_msg = \"Have you used `print(3 * 5)` to print out the result of your multiplication?\")\n\nEx().has_printout(3, not_printed_msg = \"Have you used `print(10 / 2)` to print out the result of your division?\")\n\nsuccess_msg(\"That's correct! Python can help you do the math, a characteristic that will be helpful for analysis as we grow our data skills.\")", "pec": ""}, {"name": "Variable Assignment", "chapter": "1", "key": "4bf65ad83e", "solution": "# Create a variable savings\nsavings = 100\n\n# Print out savings\nprint(savings)", "sct": "Ex().check_object(\"savings\").has_equal_value(incorrect_msg=\"Assign `100` to the variable `savings`.\")\nEx().has_printout(0, not_printed_msg = \"Print out `savings`, the variable you created, with `print(savings)`.\")\nsuccess_msg(\"Great! Let's try to do some calculations with this variable now!\")", "pec": ""}, {"name": "Calculations with variables", "chapter": "1", "key": "ff06cedeb4", "solution": "# Create the variables monthly_savings and num_months\nmonthly_savings = 10\nnum_months = 4\n\n# Multiply monthly_savings and num_months\nnew_savings = monthly_savings * num_months\n\n# Print new_savings\nprint(new_savings)", "sct": "Ex().check_object(\"monthly_savings\").has_equal_value(incorrect_msg = \"Did you save `10` to `monthly_savings` using `monthly_savings = 10`?\")\nEx().check_object(\"num_months\").has_equal_value(incorrect_msg = \"Did you save `4` to `num_months` using `num_months = 4`?\")\nEx().check_object(\"new_savings\").has_equal_value(incorrect_msg = \"Did you use the correct variables and symbols to multiply? Expected `monthly_savings * num_months` but got something else.\")\n# Ex().check_object(\"total_savings\").has_equal_value(incorrect_msg = \"Did you use the correct variables and symbols to add? Expected `savings + new_savings` but got something else.\")\n\nEx().has_printout(0, not_printed_msg=\"Remember to print out `new_savings` at the end of your script.\")\n\nsuccess_msg(\"You have $40 in new savings!\")", "pec": ""}, {"name": "Other variable types", "chapter": "1", "key": "006b48561f", "solution": "# Create a variable half\nhalf = 0.5\n\n# Create a variable intro\nintro = \"Hello! How are you?\"\n\n# Create a variable is_good\nis_good = True", "sct": "Ex().check_object(\"half\").has_equal_value(incorrect_msg = \"Did you save the float, `0.5` to `half`?\")\n\nEx().check_object(\"intro\").has_equal_value(incorrect_msg = \"Hmm, something is incorrect in your `intro` variable. Double check the spelling and make sure you've used quotation marks.\")\n\nEx().check_object(\"is_good\").has_equal_value(incorrect_msg = \"Did you capitalize the boolean value? Remember you don't need to use quotation marks here.\")\n\nsuccess_msg(\"Nice!\")", "pec": ""}, {"name": "Operations with other types", "chapter": "1", "key": "f4e91c4ae9", "solution": "savings = 100\nnew_savings = 40\n\n# Calculate total_savings using savings and new_savings\ntotal_savings = savings + new_savings\nprint(total_savings)\n\n# Print the type of total_savings\nprint(type(total_savings))", "sct": "# predefined\nmsg = \"You don't have to change or remove the predefined variables.\"\n\nEx().multi(\n    check_object('savings', missing_msg=msg).has_equal_value(incorrect_msg=msg),\n    check_object('new_savings', missing_msg=msg).has_equal_value(incorrect_msg=msg)\n)\n\nEx().multi(\n    check_object(\"total_savings\").has_equal_value(incorrect_msg=\"Add `savings` and `new_savings` to create the `total_savings` variable.\"),\n    has_printout(1, not_printed_msg = \"__JINJA__:Use `{{sol_call}}` to print out the type of `total_savings`.\")\n)", "pec": ""}, {"name": "Operations with other types", "chapter": "1", "key": "f54fbf9bd9", "solution": "intro = \"Hello! How are you?\"\n\n# Assign sum of intro and intro to doubleintro\ndoubleintro = intro + intro\n\n# Print out doubleintro\nprint(doubleintro)", "sct": "# predefined\nmsg = \"You don't have to change or remove the predefined variables.\"\n\nEx().check_object('intro', missing_msg=msg).has_equal_value(incorrect_msg=msg)\n\nEx().multi(\n    check_object(\"doubleintro\").has_equal_value(incorrect_msg  = \"Have you stored the result of `intro + intro` in `doubleintro`?\"),\n    has_printout(0, not_printed_msg = \"Don't forget to print out `doubleintro`.\")\n)\n\nsuccess_msg(\"Nice. Notice how `intro + intro` causes `\\\"Hello! How are you?\\\"` and `\\\"Hello! How are you?\\\"` to be pasted together.\")", "pec": ""}, {"name": "Create a list", "chapter": "2", "key": "e6c527bf41", "solution": "hall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# Create list areas\nareas = [hall, kit, liv, bed, bath]\n\n# Print areas\nprint(areas)", "sct": "predef_msg = \"Don't remove or edit the predefined variables!\"\nareas_msg = \"Define `areas` as the list containing all the area variables, in the correct order: `[hall, kit, liv, bed, bath]`. Watch out for typos. The list shouldn't contain anything else!\"\n\nEx().check_correct(\n    has_printout(0, not_printed_msg = \"__JINJA__:Have you used `{{sol_call}}` to print out the `areas` list at the end of your script?\"),\n    check_correct(\n        check_object(\"areas\").has_equal_value(incorrect_msg = areas_msg),\n        multi(\n            check_object('hall', missing_msg=predef_msg).has_equal_value(incorrect_msg=predef_msg),\n            check_object('kit', missing_msg=predef_msg).has_equal_value(incorrect_msg=predef_msg),\n            check_object('liv', missing_msg=predef_msg).has_equal_value(incorrect_msg=predef_msg),\n            check_object('bed', missing_msg=predef_msg).has_equal_value(incorrect_msg=predef_msg),\n            check_object('bath', missing_msg=predef_msg).has_equal_value(incorrect_msg=predef_msg)\n        )\n    )\n)\n\nsuccess_msg(\"Nice! A list is way better here, isn't it?\")", "pec": ""}, {"name": "Create lists with different types", "chapter": "2", "key": "1702a8bcdc", "solution": "hall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# Adapt list areas\nareas = [\"hallway\", hall, \"kitchen\", kit, \"living room\", liv, \"bedroom\", bed, \"bathroom\", bath]\n\n# Print areas\nprint(areas)", "sct": "objs = [\"hall\", \"kit\", \"liv\", \"bed\", \"bath\"]\npredef_msg = \"Don't remove or edit the predefined variables!\"\nareas_msg = \"You didn't assign the correct value to `areas`. Have another look at the instructions. Make sure to place the room name before the variable containing the area each time. The order matters here! Watch out for typos.\"\n\nEx().check_correct(\n  check_object(\"areas\").has_equal_value(incorrect_msg = areas_msg),\n  multi([ check_object(obj, missing_msg = predef_msg).has_equal_value(incorrect_msg = predef_msg) for obj in objs])\n)\n\nEx().has_printout(0, not_printed_msg = \"__JINJA__:Have you used `{{sol_call}}` to print out the `areas` list at the end of your script?\")\n\nsuccess_msg(\"Nice! This list contains both strings and floats, but that's not a problem for Python!\")", "pec": ""}, {"name": "List of lists", "chapter": "2", "key": "9158c577b0", "solution": "hall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# House information as list of lists\nhouse = [[\"hallway\", hall],\n         [\"kitchen\", kit],\n         [\"living room\", liv],\n         [\"bedroom\", bed],\n         [\"bathroom\", bath]]\n\n# Print out house\nprint(house)", "sct": "predef_msg = \"Don't remove or edit the predefined variables!\"\nhouse_msg = \"You didn't assign the correct value to `house`. Have another look at the instructions. Extend the list of lists so it incorporates a list for each pair of room name and room area. Mind the order and typos!\"\n\nEx().check_correct(\n    check_object(\"house\").has_equal_value(incorrect_msg = house_msg),\n    multi(\n        check_object('hall', missing_msg=predef_msg).has_equal_value(incorrect_msg=predef_msg),\n        check_object('kit', missing_msg=predef_msg).has_equal_value(incorrect_msg=predef_msg),\n        check_object('liv', missing_msg=predef_msg).has_equal_value(incorrect_msg=predef_msg),\n        check_object('bed', missing_msg=predef_msg).has_equal_value(incorrect_msg=predef_msg),\n        check_object('bath', missing_msg=predef_msg).has_equal_value(incorrect_msg=predef_msg)\n    )\n)\n\nEx().has_printout(0, not_printed_msg = \"__JINJA__:Have you used `{{sol_call}}` to print out the contents of `house`?\")\n\nsuccess_msg(\"Great! Get ready to learn about list subsetting!\")", "pec": ""}, {"name": "Subset and conquer", "chapter": "2", "key": "c3ce582e32", "solution": "# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Print out second element from areas\nprint(areas[1])\n\n# Print out last element from areas\nprint(areas[-1])\n\n# Print out the area of the living room\nprint(areas[5])", "sct": "msg = \"Don't remove or edit the predefined `areas` list.\"\nEx().check_object(\"areas\", missing_msg = msg).has_equal_value(incorrect_msg = msg)\nEx().has_printout(0, not_printed_msg = \"Have another look at your code to print out the second element in `areas`, which is at index `1`.\")\nEx().has_printout(1, not_printed_msg = \"Have another look at your code to print out the last element in `areas`, which is at index `-1`.\")\nEx().has_printout(2, not_printed_msg = \"Have another look at your code to print out the area of the living room. It's at index `5`.\")\nsuccess_msg(\"Good job!\")", "pec": ""}, {"name": "Slicing and dicing", "chapter": "2", "key": "7f08642d18", "solution": "# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Use slicing to create downstairs\ndownstairs = areas[0:6]\n\n# Use slicing to create upstairs\nupstairs = areas[6:]\n\n# Print out downstairs and upstairs\nprint(downstairs)\nprint(upstairs)", "sct": "msg = \"Don't remove or edit the predefined `areas` list.\"\nEx().check_object(\"areas\", missing_msg = msg).has_equal_value(incorrect_msg = msg)\n\npatt = \"`%s` is incorrect. Use `areas[%s]` and slicing to select the elements you want, or something equivalent.\"\nEx().check_object(\"downstairs\").has_equal_value(incorrect_msg = patt % ('downstairs', '0:6'))\nEx().check_object(\"upstairs\").has_equal_value(incorrect_msg = patt % (\"upstairs\",\":6\"))\n\nEx().has_printout(0, not_printed_msg=\"Have you printed out `downstairs` after calculating it?\")\nEx().has_printout(1, not_printed_msg=\"Have you printed out `upstairs` after calculating it?\")\n\nsuccess_msg(\"Great!\")", "pec": ""}, {"name": "Subsetting lists of lists", "chapter": "2", "key": "dbbbd306cf", "solution": "house = [[\"hallway\", 11.25],\n         [\"kitchen\", 18.0],\n         [\"living room\", 20.0],\n         [\"bedroom\", 10.75],\n         [\"bathroom\", 9.50]]\n\n# Subset the house list\nhouse[-1][1]", "sct": "Ex().check_or(\n  has_code(\"house[-1][1]\", pattern=False),\n  has_code(\"house[4][1]\", pattern=False)\n)\n\nsuccess_msg(\"Correctomundo! The last piece of the list puzzle is manipulation.\")", "pec": ""}, {"name": "Replace list elements", "chapter": "2", "key": "4e1bba1b55", "solution": "# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Correct the bathroom area\nareas[-1] = 10.50\n\n# Change \"living room\" to \"chill zone\"\nareas[4] = \"chill zone\"", "sct": "bathroom_msg = 'You can use `areas[-1] = 10.50` to update the bathroom area.'\nchillzone_msg = 'You can use `areas[4] = \"chill zone\"` to update the living room name.'\nEx().check_correct(\n  check_object('areas').has_equal_value(incorrect_msg = 'Your changes to `areas` did not result in the correct list. Are you sure you used the correct subset operations? When in doubt, you can use a hint!'),\n  multi(\n    has_equal_value(expr_code='areas[-1]', override=10.50, incorrect_msg = bathroom_msg),\n    has_equal_value(expr_code='areas[4]', override='chill zone', incorrect_msg = chillzone_msg),\n  )\n)\nsuccess_msg('Sweet! As the code sample showed, you can also slice a list and replace it with another list to update multiple elements in a single command.')", "pec": ""}, {"name": "Extend a list", "chapter": "2", "key": "ff0fe8d967", "solution": "# Create the areas list (updated version)\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"chill zone\", 20.0,\n         \"bedroom\", 10.75, \"bathroom\", 10.50]\n\n# Add poolhouse data to areas, new list is areas_1\nareas_1 = areas + [\"poolhouse\", 24.5]\n\n# Add garage data to areas_1, new list is areas_2\nareas_2 = areas_1 + [\"garage\", 15.45]", "sct": "msg = \"Don't remove or edit the predefined `areas` list.\"\nEx().check_object(\"areas\", missing_msg = msg).has_equal_value(incorrect_msg = msg)\nEx().check_object(\"areas_1\").has_equal_value(incorrect_msg = \"Use `areas + [\\\"poolhouse\\\", 24.5]` to create `areas_1`. Watch out for typos!\")\nEx().check_object(\"areas_2\").has_equal_value(incorrect_msg = \"Use `areas_1 + [\\\"garage\\\", 15.45]` to create `areas_2`. Watch out for typos!\")\nsuccess_msg(\"Cool! The list is shaping up nicely!\")", "pec": ""}, {"name": "Delete list elements", "chapter": "2", "key": "85f792356e", "solution": "areas = [\"hallway\", 11.25, \"kitchen\", 18.0,\n        \"chill zone\", 20.0, \"bedroom\", 10.75,\n         \"bathroom\", 10.50, \"poolhouse\", 24.5,\n         \"garage\", 15.45]\n\n# Delete the poolhouse items from the list\ndel areas[10]\ndel areas[10]\n\n# Print the updated list\nprint(areas)", "sct": "Ex().check_or(\n  multi(\n    has_code(\"del areas[10]\", pattern=False),\n    has_code(\"del areas[10]\", pattern=False)\n  ),\n  has_code(\"del areas[-4:-2]\", pattern=False),\n  has_code(\"del(areas[-4:-2])\", pattern=False),\n  multi(\n    has_code(\"del(areas[10])\", pattern=False),\n    has_code(\"del(areas[10])\", pattern=False)\n  ),\n  has_code(\"del areas[10:12]\", pattern=False),\n  has_code(\"del(areas[10:12])\", pattern=False),\n  multi(\n    has_code(\"del areas[-4]\", pattern=False),\n    has_code(\"del areas[-3]\", pattern=False)\n  ),\n  multi(\n    has_code(\"del(areas[-4])\", pattern=False),\n    has_code(\"del(areas[-3])\", pattern=False)\n  )\n)\n\nEx().has_printout(0, not_printed_msg=\"Have you printed out `areas` after removing the poolhouse string and float?\")\nsuccess_msg(\"Correct! You'll learn about easier ways to remove specific elements from Python lists later on.\")", "pec": ""}, {"name": "Inner workings of lists", "chapter": "2", "key": "af72db9915", "solution": "# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Change this command\nareas_copy = list(areas)\n\n# Change areas_copy\nareas_copy[0] = 5.0\n\n# Print areas\nprint(areas)", "sct": "Ex().check_correct(\n  check_object(\"areas_copy\").has_equal_value(incorrect_msg = \"It seems that `areas_copy` has not been updated correctly.\"),\n  check_function(\"list\", missing_msg = \"Make sure to use `list(areas)` to create an `areas_copy`.\")\n)\n\nmmsg = \"Don't remove the predefined `areas` list.\"\nimsg = \"Be sure to edit ONLY the copy, not the original `areas` list. Have another look at the exercise description if you're unsure how to create a copy.\"\nEx().check_correct(\n  check_object(\"areas\", missing_msg = mmsg).has_equal_value(incorrect_msg = imsg),\n  check_function(\"list\", missing_msg = \"Make sure to use `list(areas)` to create an `areas_copy`.\")\n)\n\nsuccess_msg(\"Nice! The difference between explicit and reference-based copies is subtle, but can be really important. Try to keep in mind how a list is stored in the computer's memory.\")", "pec": ""}, {"name": "Familiar functions", "chapter": "3", "key": "c422ee929b", "solution": "# Create variables var1 and var2\nvar1 = [1, 2, 3, 4]\nvar2 = True\n\n# Print out type of var1\nprint(type(var1))\n\n# Print out length of var1\nprint(len(var1))\n\n# Convert var2 to an integer: out2\nout2 = int(var2)", "sct": "msg = \"You don't have to change or remove the predefined variables.\"\nEx().check_object(\"var1\", missing_msg=msg).has_equal_value(incorrect_msg=msg)\nEx().check_object(\"var2\", missing_msg=msg).has_equal_value(incorrect_msg=msg)\n\npatt = \"__JINJA__:Make sure to print out the %s of `var1` with `{{sol_call}}`.\"\nEx().has_printout(0, not_printed_msg = patt % 'type')\nEx().has_printout(1, not_printed_msg = patt % 'length')\n\nint_miss_msg = \"Have you used `int()` to make an integer of `var2`?\"\nint_incorr_msg = \"Have you passed `var2` to `int()`?\"\nEx().check_correct(\n  check_object(\"out2\").has_equal_value(incorrect_msg=\"You called `int()` correctly; now make sure to assign the result of this call to `out2`.\"),\n  check_function(\"int\", missing_msg=int_miss_msg).has_equal_value(incorrect_msg=int_incorr_msg)\n)\nsuccess_msg(\"Great job! The `len()` function is extremely useful; it also works on strings to count the number of characters!\")", "pec": ""}, {"name": "Multiple arguments", "chapter": "3", "key": "e30486d7c1", "solution": "# Create lists first and second\nfirst = [11.25, 18.0, 20.0]\nsecond = [10.75, 9.50]\n\n# Paste together first and second: full\nfull = first + second\n\n# Sort full in descending order: full_sorted\nfull_sorted = sorted(full, reverse=True)\n\n# Print out full_sorted\nprint(full_sorted)", "sct": "msg = \"You don't have to change or remove the already variables `first` and `second`.\"\nEx().multi(\n  check_object(\"first\", missing_msg=msg).has_equal_value(incorrect_msg=msg),\n  check_object(\"second\", missing_msg=msg).has_equal_value(incorrect_msg=msg)\n)\nEx().check_correct(\n  check_object(\"full_sorted\").has_equal_value(incorrect_msg=\"Make sure you assign the result of calling `sorted()` to `full_sorted`.\"),\n  check_function(\"sorted\").multi(\n    check_args(0).has_equal_value(),\n    check_args('reverse').has_equal_value()\n  )\n)\n\nsuccess_msg(\"Cool! Head over to the video on Python methods.\")", "pec": ""}, {"name": "String Methods", "chapter": "3", "key": "4039302ee0", "solution": "# string to experiment with: place\nplace = \"poolhouse\"\n\n# Use upper() on place\nplace_up = place.upper()\n\n# Print out place and place_up\nprint(place)\nprint(place_up)\n\n# Print out the number of o's in place\nprint(place.count('o'))", "sct": "msg = \"You don't have to change or remove the predefined variables.\"\nEx().check_object(\"place\", missing_msg=msg).has_equal_value(incorrect_msg=msg)\n\npatt = \"Don't forget to print out `%s`.\"\nEx().has_printout(0, not_printed_msg=patt % \"place\")\nEx().check_correct(\n    has_printout(1, not_printed_msg=patt % \"place_up\"),\n    check_correct(\n        check_object(\"place_up\").has_equal_value(incorrect_msg=\"Assign the result of your `place.upper()` call to `place_up`.\"),\n        check_function(\"place.upper\", signature=False)\n    )\n)    \n\n# check count of place\nEx().check_correct(\n  has_printout(2, not_printed_msg = \"You have calculated the number of o's in `place` fine; now make sure to wrap `place.count('o')` call in a `print()` function to print out the result.\"),\n  check_function(\"place.count\", signature=False).check_args(0).has_equal_value()\n)\n\nsuccess_msg(\"Nice! Notice from the printouts that the `upper()` method does not change the object it is called on. This will be different for lists in the next exercise!\")", "pec": ""}, {"name": "List Methods", "chapter": "3", "key": "0dbe8ed695", "solution": "# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Print out the index of the element 20.0\nprint(areas.index(20.0))\n\n# Print out how often 9.50 appears in areas\nprint(areas.count(9.50))", "sct": "predef_msg = \"You don't have to change or remove the predefined list `areas`.\"\n\nEx().check_object(\"areas\", missing_msg=predef_msg).has_equal_value(incorrect_msg=predef_msg)\n\nEx().check_function(\"print\", index=0).check_args(0).check_function('areas.index', signature=False).check_args(0).has_equal_value()\n\n\nEx().check_function(\"print\", index=1).check_args(0).check_function('areas.count', signature=False).has_equal_value()\n\nsuccess_msg(\"Nice! These were examples of `list` methods that did not change the list they were called on.\")", "pec": ""}, {"name": "List Methods (2)", "chapter": "3", "key": "1fbeab82d0", "solution": "# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Use append twice to add poolhouse and garage size\nareas.append(24.5)\nareas.append(15.45)\n\n# Print out areas\nprint(areas)\n\n# Reverse the orders of the elements in areas\nareas.reverse()\n\n# Print out areas\nprint(areas)", "sct": "Ex().multi(\n  check_function(\"areas.append\", index=0, signature=False).check_args(0).has_equal_value(),\n  check_function(\"areas.append\", index=1, signature=False).check_args(0).has_equal_value(),\n  check_function(\"print\", index=0).check_args(0).has_equal_ast(),\n  check_function(\"areas.reverse\", index=0, signature=False),\n  check_function(\"print\", index=1).check_args(0).has_equal_ast()\n)\n\nsuccess_msg(\"Great!\")", "pec": ""}, {"name": "Import package", "chapter": "3", "key": "7432a6376f", "solution": "# Import the math package\nimport math\n\n# Calculate C\nC = 2 * 0.43 * math.pi\n\n# Calculate A\nA = math.pi * 0.43 ** 2\n\nprint(\"Circumference: \" + str(C))\nprint(\"Area: \" + str(A))", "sct": "patt = \"Your calculation of `%s` is not quite correct. Make sure to use `math.pi`.\"\nEx().multi(\n  has_import('math', same_as=False),\n  check_object('C').has_equal_value(incorrect_msg=patt%'C'),\n  check_object('A').has_equal_value(incorrect_msg=patt%'A')\n)\n\nEx().multi(\n  has_printout(0, not_printed_msg = \"__JINJA__:Keep `{{sol_call}}` in there to print out the circumference.\"),\n  has_printout(1, not_printed_msg = \"__JINJA__:Keep `{{sol_call}}` in there to print out the area.\")\n)\n\nsuccess_msg(\"Nice! If you know how to deal with functions from packages, the power of a lot of Python programmers is at your fingertips!\")", "pec": ""}, {"name": "Selective import", "chapter": "3", "key": "fe65eff50a", "solution": "# Import pi function of math package\nfrom math import pi\n\n# Calculate C\nC = 2 * 0.43 * pi\n\n# Calculate A\nA = pi * 0.43 ** 2\n\nprint(\"Circumference: \" + str(C))\nprint(\"Area: \" + str(A))", "sct": "patt = \"Your calculation of `%s` is not quite correct. Make sure to use only `pi`.\"\n\nEx().has_import(\"math.pi\", not_imported_msg = \"Be sure to import `pi` from the `math` package. You should use the `from ___ import ___` notation.\",)\n\nEx().multi(\n  check_object('C').has_equal_value(incorrect_msg=patt%'C'),\n  check_object('A').has_equal_value(incorrect_msg=patt%'A')\n)\n\nEx().multi(\n  has_printout(0, not_printed_msg = \"__JINJA__:Keep `{{sol_call}}` in there to print out the circumference.\"),\n  has_printout(1, not_printed_msg = \"__JINJA__:Keep `{{sol_call}}` in there to print out the area.\")\n)\n\nsuccess_msg(\"Nice! Head over to the next exercise.\")", "pec": ""}, {"name": "Your First NumPy Array", "chapter": "4", "key": "84cab9d170", "solution": "# Import the numpy package as np\nimport numpy as np\n\nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Create a NumPy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out type of np_baseball\nprint(type(np_baseball))", "sct": "predef_msg = \"You don't have to change or remove the predefined variables.\"\nEx().has_import(\"numpy\")\nEx().check_correct(\n  check_object(\"np_baseball\"),\n  multi(\n    check_object(\"baseball\", missing_msg=predef_msg).has_equal_value(incorrect_msg=predef_msg),\n    check_function(\"numpy.array\").check_args(0).has_equal_ast()\n  )\n)\n\nEx().has_printout(0)\nsuccess_msg(\"Great job!\")", "pec": "import numpy as np"}, {"name": "Baseball players' height", "chapter": "4", "key": "e7e25a89ea", "solution": "# Import numpy\nimport numpy as np\n\n# Create a numpy array from height_in: np_height_in\nnp_height_in = np.array(height_in)\n\n# Print out np_height_in\nprint(np_height_in)\n\n# Convert np_height_in to m: np_height_m\nnp_height_m = np_height_in * 0.0254\n\n# Print np_height_m\nprint(np_height_m)", "sct": "Ex().has_import(\"numpy\", same_as = False)\n\nEx().check_correct(\n  has_printout(0),\n  check_correct(\n    check_object('np_height_in').has_equal_value(),\n    check_function('numpy.array').check_args(0).has_equal_ast()\n  )\n)\n\nEx().check_correct(\n  has_printout(1),\n  check_object(\"np_height_m\").has_equal_value(incorrect_msg = \"Use `np_height_in * 0.0254` to calculate `np_height_m`.\")\n)\n\nsuccess_msg(\"Nice! In the blink of an eye, `numpy` performs multiplications on more than 1000 height measurements.\")", "pec": "import pandas as pd\nmlb = pd.read_csv(\"https://assets.datacamp.com/course/intro_to_python/baseball.csv\")\nheight_in = mlb['Height'].tolist()\nimport numpy as np"}, {"name": "Subsetting NumPy Arrays", "chapter": "4", "key": "fcb2a9007b", "solution": "import numpy as np\n\nnp_weight_lb = np.array(weight_lb)\nnp_height_in = np.array(height_in)\n\n# Print out the weight at index 50\nprint(np_weight_lb[50])\n\n# Print out sub-array of np_height_in: index 100 up to and including index 110\nprint(np_height_in[100:111])", "sct": "Ex().has_import(\"numpy\", same_as=False)\nmsg = \"You don't have to change or remove the predefined variables.\"\nEx().multi(\n    check_object(\"np_height_in\", missing_msg=msg).has_equal_value(incorrect_msg = msg),\n    check_object(\"np_weight_lb\", missing_msg=msg).has_equal_value(incorrect_msg = msg)\n)\n\nEx().has_printout(0)\nEx().has_printout(1)\n\nsuccess_msg(\"Nice! Time to learn something new: 2D NumPy arrays!\")", "pec": "import pandas as pd\nmlb = pd.read_csv(\"https://assets.datacamp.com/course/intro_to_python/baseball.csv\")\nheight_in = mlb['Height'].tolist()\nweight_lb = mlb['Weight'].tolist()"}, {"name": "Your First 2D NumPy Array", "chapter": "4", "key": "5cb045bb13", "solution": "import numpy as np\n\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]\n\n# Create a 2D numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)", "sct": "msg = \"You don't have to change or remove the predefined variables.\"\nEx().check_object(\"baseball\", missing_msg=msg).has_equal_value(incorrect_msg = msg)\nEx().has_import(\"numpy\", same_as = False)\n\nEx().check_correct(\n    multi(\n        has_printout(0),\n        has_printout(1)\n    ),\n    check_correct(\n        check_object('np_baseball').has_equal_value(),\n        check_function('numpy.array').check_args(0).has_equal_ast()\n    )\n)\n\nsuccess_msg(\"Great! You're ready to convert the actual MLB data to a 2D `numpy` array now!\")", "pec": ""}, {"name": "Baseball data in 2D form", "chapter": "4", "key": "5df25d0b7b", "solution": "import numpy as np\n\n# Create a 2D numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)", "sct": "Ex().has_import(\"numpy\", same_as = False)\n\nEx().check_correct(\n    has_printout(0),\n    check_correct(\n        check_object('np_baseball').has_equal_value(),\n        check_function('numpy.array').check_args(0).has_equal_ast()\n    )\n)\n\nsuccess_msg(\"Slick! Time to show off some killer features of multi-dimensional `numpy` arrays!\")", "pec": "import pandas as pd\nbaseball = pd.read_csv(\"https://assets.datacamp.com/course/intro_to_python/baseball.csv\")[['Height', 'Weight']].to_numpy().tolist()\nimport numpy as np"}, {"name": "Subsetting 2D NumPy Arrays", "chapter": "4", "key": "aeca4977f0", "solution": "import numpy as np\n\nnp_baseball = np.array(baseball)\n\n# Print out the 50th row of np_baseball\nprint(np_baseball[49,:])\n\n# Select the entire second column of np_baseball: np_weight_lb\nnp_weight_lb = np_baseball[:,1]\n\n# Print out height of 124th player\nprint(np_baseball[123, 0])", "sct": "msg = \"You don't have to change or remove the predefined variables.\"\nEx().multi(\n    has_import(\"numpy\", same_as = False),\n    check_object(\"np_baseball\", missing_msg=msg).has_equal_value(incorrect_msg = msg)\n)\n\nEx().has_printout(0)\n\nEx().check_object('np_weight_lb').has_equal_value(incorrect_msg = \"You can use `np_baseball[:,1]` to define `np_weight_lb`. This will select the entire first column.\")\n\nEx().has_printout(1)\n\nsuccess_msg(\"This is going well!\")", "pec": "import pandas as pd\nbaseball = pd.read_csv(\"https://assets.datacamp.com/course/intro_to_python/baseball.csv\")[['Height', 'Weight']].to_numpy().tolist()\nimport numpy as np"}, {"name": "2D Arithmetic", "chapter": "4", "key": "1c2378b677", "solution": "import numpy as np\n\nnp_baseball = np.array(baseball)\n\n# Print out addition of np_baseball and updated\nprint(np_baseball + updated)\n\n# Create numpy array: conversion\nconversion = np.array([0.0254, 0.453592, 1])\n\n# Print out product of np_baseball and conversion\nprint(np_baseball * conversion)", "sct": "Ex().has_import(\"numpy\")\n\nmsg = \"You don't have to change or remove the predefined variables.\"\nEx().check_object(\"np_baseball\", missing_msg=msg).has_equal_value(incorrect_msg = msg)\n\nEx().has_printout(0)\n\nEx().check_correct(\n    has_printout(1),\n    check_correct(\n        check_object('conversion').has_equal_value(),\n        check_function('numpy.array', index = 1).check_args(0).has_equal_value()\n    )    \n)\n\nsuccess_msg(\"Great job! Notice how with very little code, you can change all values in your `numpy` data structure in a very specific way. This will be very useful in your future as a data scientist!\")", "pec": "import pandas as pd\nimport numpy as np\nbaseball = pd.read_csv(\"https://assets.datacamp.com/course/intro_to_python/baseball.csv\")[['Height', 'Weight', 'Age']].to_numpy().tolist()\nn = len(baseball)\nupdated = np.array(pd.read_csv(\"https://assets.datacamp.com/course/intro_to_python/update.csv\", header = None))\nimport numpy as np"}, {"name": "Average versus median", "chapter": "4", "key": "509c588eb6", "solution": "import numpy as np\n\n# Create np_height_in from np_baseball\nnp_height_in = np_baseball[:,0]\n\n# Print out the mean of np_height_in\nprint(np.mean(np_height_in))\n\n# Print out the median of np_height_in\nprint(np.median(np_height_in))", "sct": "Ex().has_import(\"numpy\", same_as = False)\n\nEx().check_object(\"np_height_in\").has_equal_value(incorrect_msg = \"You can use `np_baseball[:,0]` to select the first column from `np_baseball`\"),\n\nEx().check_correct(\n    has_printout(0),\n    check_function('numpy.mean').has_equal_value()\n)\n\nEx().check_correct(\n    has_printout(1),\n    check_function('numpy.median').has_equal_value()\n)\n\nsuccess_msg(\"An average height of 1586 inches, that doesn't sound right, does it? However, the median does not seem affected by the outliers: 74 inches makes perfect sense. It's always a good idea to check both the median and the mean, to get an idea about the overall distribution of the entire dataset.\")", "pec": "import pandas as pd\nnp_baseball = pd.read_csv(\"https://assets.datacamp.com/course/intro_to_python/baseball.csv\")[['Height', 'Weight', 'Age']].to_numpy()\nnp_baseball[slice(0, 1015, 50), 0] = np_baseball[slice(0, 1015, 50), 0]*1000\nimport numpy as np"}, {"name": "Explore the baseball data", "chapter": "4", "key": "4409948807", "solution": "avg = np.mean(np_baseball[:,0])\nprint(\"Average: \" + str(avg))\n\n# Print median height\nmed = np.median(np_baseball[:,0])\nprint(\"Median: \" + str(med))\n\n# Print out the standard deviation on height\nstddev = np.std(np_baseball[:,0])\nprint(\"Standard Deviation: \" + str(stddev))\n\n# Print out correlation between first and second column\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\nprint(\"Correlation: \" + str(corr))", "sct": "msg = \"You shouldn't change or remove the predefined `avg` variable.\"\nEx().check_object(\"avg\", missing_msg=msg).has_equal_value(incorrect_msg=msg)\n\nmissing = \"Have you used `np.median()` to calculate the median?\"\nincorrect = \"To calculate `med`, pass the first column of `np_baseball` to `numpy.median()`. The example of `np.mean()` shows how it's done.\"\nEx().check_correct(\n  check_object(\"med\").has_equal_value(),\n  check_function(\"numpy.median\", index=0, missing_msg=missing).check_args(0).has_equal_value(incorrect_msg=incorrect)\n)\n\nmissing = \"Have you used `np.std()` to calculate the standard deviation?\"\nincorrect = \"To calculate `stddev`, pass the first column of `np_baseball` to `numpy.std()`. The example of `np.mean()` shows how it's done.\"\nEx().check_correct(\n  check_object(\"stddev\").has_equal_value(),\n  check_function(\"numpy.std\", index=0, missing_msg=missing).check_args(0).has_equal_value(incorrect_msg=incorrect)\n)\n\nmissing = \"Have you used `np.corrcoef()` to calculate the correlation?\"\nincorrect1 = \"To calculate `corr`, the first argument to `np.corrcoef()` should be the first column of `np_baseball`, similar to how did it before.\"\nincorrect2 = \"To calculate `corr`, the second argument to `np.corrcoef()` should be the second column of `np_baseball`. Instead of `[:,0]`, use `[:,1]` this time.\"\nEx().check_correct(\n  check_object(\"corr\").has_equal_value(),\n  check_function(\"numpy.corrcoef\", index=0, missing_msg=missing).multi(\n    check_args(0, missing_msg=incorrect1).has_equal_value(incorrect_msg=incorrect1),\n    check_args(1, missing_msg=incorrect2).has_equal_value(incorrect_msg=incorrect2)\n  )\n)\n\nsuccess_msg(\"Great work! You've built a solid foundation - now it's time to use all of your new data science skills to solve more challenges and make an impact.\")", "pec": "import pandas as pd\nnp_baseball = pd.read_csv(\"https://assets.datacamp.com/course/intro_to_python/baseball.csv\")[['Height', 'Weight', 'Age']].to_numpy()\nimport numpy as np"}]