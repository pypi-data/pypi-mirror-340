# coding: utf-8

"""
    Open Agent API

    API for interacting with AI agents

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from open_agent_api.models.agent_tool import AgentTool
from open_agent_api.models.environment import Environment
from open_agent_api.models.message import Message
from typing import Optional, Set
from typing_extensions import Self

class AgentCompletionRequest(BaseModel):
    """
    AgentCompletionRequest
    """ # noqa: E501
    model: Optional[StrictStr] = Field(default='claude-3-7-sonnet-latest', description="The Claude model to use")
    persona: Optional[StrictStr] = Field(default='coder', description="The persona to use")
    environment: Environment
    tools: Optional[List[AgentTool]] = Field(default=None, description="The tools to use")
    messages: List[Message] = Field(description="The messages to send to the agent")
    __properties: ClassVar[List[str]] = ["model", "persona", "environment", "tools", "messages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentCompletionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item_tools in self.tools:
                if _item_tools:
                    _items.append(_item_tools.to_dict())
            _dict['tools'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentCompletionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model": obj.get("model") if obj.get("model") is not None else 'claude-3-7-sonnet-latest',
            "persona": obj.get("persona") if obj.get("persona") is not None else 'coder',
            "environment": Environment.from_dict(obj["environment"]) if obj.get("environment") is not None else None,
            "tools": [AgentTool.from_dict(_item) for _item in obj["tools"]] if obj.get("tools") is not None else None,
            "messages": [Message.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None
        })
        return _obj


