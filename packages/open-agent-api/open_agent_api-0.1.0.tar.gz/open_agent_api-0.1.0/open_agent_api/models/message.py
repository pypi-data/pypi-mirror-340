# coding: utf-8

"""
    Open Agent API

    API for interacting with AI agents

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from open_agent_api.models.citations import Citations
from open_agent_api.models.message_content import MessageContent
from open_agent_api.models.message_metrics import MessageMetrics
from open_agent_api.models.message_references import MessageReferences
from typing import Optional, Set
from typing_extensions import Self

class Message(BaseModel):
    """
    Message
    """ # noqa: E501
    role: StrictStr = Field(description="The role of the message sender")
    content: MessageContent
    name: Optional[StrictStr] = None
    tool_call_id: Optional[StrictStr] = None
    tool_calls: Optional[List[Dict[str, Any]]] = None
    thinking: Optional[StrictStr] = None
    redacted_thinking: Optional[StrictStr] = None
    provider_data: Optional[Dict[str, Any]] = None
    citations: Optional[Citations] = None
    reasoning_content: Optional[StrictStr] = None
    tool_name: Optional[StrictStr] = None
    tool_args: Optional[Any] = None
    tool_call_error: Optional[StrictBool] = None
    stop_after_tool_call: Optional[StrictBool] = False
    add_to_agent_memory: Optional[StrictBool] = True
    from_history: Optional[StrictBool] = False
    metrics: Optional[MessageMetrics] = None
    references: Optional[MessageReferences] = None
    created_at: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["role", "content", "name", "tool_call_id", "tool_calls", "thinking", "redacted_thinking", "provider_data", "citations", "reasoning_content", "tool_name", "tool_args", "tool_call_error", "stop_after_tool_call", "add_to_agent_memory", "from_history", "metrics", "references", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of citations
        if self.citations:
            _dict['citations'] = self.citations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tool_args
        if self.tool_args:
            _dict['tool_args'] = self.tool_args.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of references
        if self.references:
            _dict['references'] = self.references.to_dict()
        # set to None if tool_args (nullable) is None
        # and model_fields_set contains the field
        if self.tool_args is None and "tool_args" in self.model_fields_set:
            _dict['tool_args'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "role": obj.get("role"),
            "content": MessageContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "name": obj.get("name"),
            "tool_call_id": obj.get("tool_call_id"),
            "tool_calls": obj.get("tool_calls"),
            "thinking": obj.get("thinking"),
            "redacted_thinking": obj.get("redacted_thinking"),
            "provider_data": obj.get("provider_data"),
            "citations": Citations.from_dict(obj["citations"]) if obj.get("citations") is not None else None,
            "reasoning_content": obj.get("reasoning_content"),
            "tool_name": obj.get("tool_name"),
            "tool_args": AnyOf.from_dict(obj["tool_args"]) if obj.get("tool_args") is not None else None,
            "tool_call_error": obj.get("tool_call_error"),
            "stop_after_tool_call": obj.get("stop_after_tool_call") if obj.get("stop_after_tool_call") is not None else False,
            "add_to_agent_memory": obj.get("add_to_agent_memory") if obj.get("add_to_agent_memory") is not None else True,
            "from_history": obj.get("from_history") if obj.get("from_history") is not None else False,
            "metrics": MessageMetrics.from_dict(obj["metrics"]) if obj.get("metrics") is not None else None,
            "references": MessageReferences.from_dict(obj["references"]) if obj.get("references") is not None else None,
            "created_at": obj.get("created_at")
        })
        return _obj


