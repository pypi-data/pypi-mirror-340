[build-system]
requires = ["poetry-core>=1.0.0,<2.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
version = "0.1.0"
name = "sigma-agent-sdk"
description = "A framework for writing Sigma Agents."
authors = ["Sigma <harshith@tegon.ai>"]
license = "MIT"
readme = "README.md"
homepage = "https://mysigma.ai"
repository = "https://github.com/tegonhq/sigma-integrations"
documentation = "https://docs.mysigma.ai/"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
]
keywords = ["sigma", "agent", "sdk"]


[tool.poetry.dependencies]
python = ">=3.10,<3.13"
typer = "0.15.2"
haystack-ai = "2.6.1"
anthropic = "0.37.1"
anthropic-haystack = "1.1.0"

[tool.poetry.group.dev.dependencies]
mypy = "*"
ruff = "^0.7.2"
deptry = "^0.23.0"
poethepoet = "^0.24.2"

[tool.poe.tasks]
# Installation
install = { shell = "poetry install --all-extras" }
lock = { shell = "poetry lock" }


build-package = {cmd = "poetry build", help = "Build the python package: source and wheels archives."}
build = {sequence = ["build-package"], help = "Run all tasks to build the package."}

# Lockfile check task
check-lockfile = {cmd = "poetry check", help = "Check the poetry lock file."}

# Format fix tasks
_format-fix-ruff = {cmd = "ruff format .", help = "Format with Ruff."}
_format-fix-prettier = {cmd = "npx prettier . --write", help = "Format with prettier."}
format-fix = {sequence = ["_format-fix-ruff", "_format-fix-prettier"], help = "Format all file types.", ignore_fail = "return_non_zero"}

# Linting/Typing check tasks
_lint-ruff = {cmd = "poetry run ruff check .", help = "Lint with Ruff."}
type-check = {cmd = "poetry run mypy sigma_agent_sdk", help = "Type check modified files with mypy."}
lint = {sequence = ["_lint-ruff", "type-check"], help = "Lint all code. Includes type checking.", ignore_fail = "return_non_zero"}


# Linting/Typing fix tasks
lint-fix = { cmd = "poetry run ruff check --fix .", help = "Auto-fix any lint issues that Ruff can automatically resolve (excluding 'unsafe' fixes)." }
lint-fix-unsafe = { cmd = "poetry run ruff check --fix --unsafe-fixes .", help = "Lint-fix modified files, including 'unsafe' fixes. It is recommended to first commit any pending changes and then always manually review any unsafe changes applied." }


[tool.deptry]
exclude = []