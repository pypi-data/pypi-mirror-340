from collections.abc import Mapping, Sequence
from typing import Annotated, overload

from numpy.typing import ArrayLike


class AudioCodec:
    @property
    def name(self) -> str: ...

    @property
    def sample_rate(self) -> int: ...

    @property
    def num_channels(self) -> int: ...

    @property
    def time_base(self) -> tuple[int, int]: ...

class AudioDecoder:
    def decode(self, packets: AudioPackets) -> AudioFrames: ...

    def flush(self) -> AudioFrames: ...

class AudioEncodeConfig:
    pass

class AudioFrames:
    @property
    def num_frames(self) -> int: ...

    @property
    def sample_rate(self) -> int: ...

    @property
    def num_channels(self) -> int: ...

    @property
    def sample_fmt(self) -> str: ...

    def __len__(self) -> int: ...

    def __repr__(self) -> str: ...

    def clone(self) -> AudioFrames: ...

class AudioPackets:
    def __repr__(self) -> str: ...

    @property
    def timestamp(self) -> tuple[float, float] | None: ...

    @property
    def sample_rate(self) -> int: ...

    @property
    def num_channels(self) -> int: ...

    @property
    def codec(self) -> AudioCodec: ...

    def clone(self) -> AudioPackets: ...

class CPUBuffer:
    @property
    def __array_interface__(self) -> dict: ...

class CPUStorage:
    pass

class DecodeConfig:
    def __init__(self, decoder: str | None = None, decoder_options: Mapping[str, str] | None = None) -> None: ...

class DemuxConfig:
    def __init__(self, format: str | None = None, format_options: Mapping[str, str] | None = None, buffer_size: int = 8096) -> None: ...

class Demuxer:
    def demux_audio(self, window: tuple[float, float] | None = None, bsf: str | None = None) -> AudioPackets: ...

    def demux_video(self, window: tuple[float, float] | None = None, bsf: str | None = None) -> VideoPackets: ...

    def demux_image(self, bsf: str | None = None) -> ImagePackets: ...

    def has_audio(self) -> bool: ...

    @property
    def audio_codec(self) -> AudioCodec: ...

    @property
    def video_codec(self) -> VideoCodec: ...

    @property
    def image_codec(self) -> ImageCodec: ...

    def streaming_demux_video(self, num_packets: int, bsf: str | None = None) -> StreamingVideoDemuxer: ...

class EncodeConfig:
    def __init__(self, muxer: str | None = None, muxer_options: Mapping[str, str] | None = None, encoder: str | None = None, encoder_options: Mapping[str, str] | None = None, format: str | None = None, width: int = -1, height: int = -1, scale_algo: str | None = None, filter_desc: str | None = None, bit_rate: int = -1, compression_level: int = -1, qscale: int = -1, gop_size: int = -1, max_bframes: int = -1) -> None: ...

class FiilterGraph:
    @overload
    def add_frames(self, arg0: str, arg1: AudioFrames, /) -> None: ...

    @overload
    def add_frames(self, arg0: str, arg1: VideoFrames, /) -> None: ...

    @overload
    def add_frames(self, arg0: str, arg1: ImageFrames, /) -> None: ...

    def flush(self) -> None: ...

    def get_frames(self, arg: str, /) -> AudioFrames | VideoFrames | ImageFrames: ...

    def __repr__(self) -> str: ...

class ImageCodec:
    @property
    def name(self) -> str: ...

    @property
    def width(self) -> int: ...

    @property
    def height(self) -> int: ...

    @property
    def pix_fmt(self) -> str: ...

class ImageDecoder:
    def decode(self, packets: ImagePackets) -> ImageFrames: ...

    def flush(self) -> ImageFrames: ...

class ImageFrames:
    @property
    def num_planes(self) -> int: ...

    @property
    def width(self) -> int: ...

    @property
    def height(self) -> int: ...

    @property
    def pix_fmt(self) -> str: ...

    @property
    def metadata(self) -> dict[str, str]: ...

    def __repr__(self) -> str: ...

    def clone(self) -> ImageFrames: ...

    @property
    def pts(self) -> float: ...

class ImagePackets:
    @property
    def pix_fmt(self) -> str: ...

    @property
    def width(self) -> int: ...

    @property
    def height(self) -> int: ...

    @property
    def codec(self) -> ImageCodec: ...

    def __repr__(self) -> str: ...

    def clone(self) -> ImagePackets: ...

class InternalError(AssertionError):
    pass

class Muxer:
    def open(self, muxer_config: Mapping[str, str] | None = None) -> None: ...

    @overload
    def add_encode_stream(self, codec_config: AudioEncodeConfig, encoder: str | None = None, encoder_config: Mapping[str, str] | None = None) -> "spdl::core::Encoder<(spdl::core::MediaType)0>": ...

    @overload
    def add_encode_stream(self, codec_config: VideoEncodeConfig, encoder: str | None = None, encoder_config: Mapping[str, str] | None = None) -> VideoEncoder: ...

    @overload
    def add_remux_stream(self, codec: AudioCodec) -> None: ...

    @overload
    def add_remux_stream(self, codec: VideoCodec) -> None: ...

    @overload
    def write(self, arg0: int, arg1: AudioPackets, /) -> None: ...

    @overload
    def write(self, arg0: int, arg1: VideoPackets, /) -> None: ...

    def flush(self) -> None: ...

    def close(self) -> None: ...

class StreamingVideoDemuxer:
    def done(self) -> bool: ...

    def next(self) -> AudioPackets | VideoPackets | ImagePackets: ...

class TracingSession:
    def init(self) -> None: ...

    def config(self, arg: str, /) -> None: ...

    def start(self, arg0: int, arg1: int, /) -> None: ...

    def stop(self) -> None: ...

class VideoCodec:
    @property
    def name(self) -> str: ...

    @property
    def width(self) -> int: ...

    @property
    def height(self) -> int: ...

    @property
    def pix_fmt(self) -> str: ...

    @property
    def frame_rate(self) -> tuple[int, int]: ...

    @property
    def time_base(self) -> tuple[int, int]: ...

class VideoDecoder:
    def decode(self, packets: VideoPackets) -> VideoFrames: ...

    def flush(self) -> VideoFrames: ...

class VideoEncodeConfig:
    pass

class VideoEncoder:
    def encode(self, arg: VideoFrames, /) -> VideoPackets: ...

    def flush(self) -> VideoPackets: ...

class VideoFrames:
    @property
    def num_frames(self) -> int: ...

    @property
    def num_planes(self) -> int: ...

    @property
    def width(self) -> int: ...

    @property
    def height(self) -> int: ...

    @property
    def pix_fmt(self) -> str: ...

    def __len__(self) -> int: ...

    @overload
    def __getitem__(self, arg: slice, /) -> VideoFrames: ...

    @overload
    def __getitem__(self, arg: int, /) -> ImageFrames: ...

    @overload
    def __getitem__(self, arg: Sequence[int], /) -> VideoFrames: ...

    def __repr__(self) -> str: ...

    def clone(self) -> VideoFrames: ...

class VideoPackets:
    @property
    def timestamp(self) -> tuple[float, float] | None: ...

    @property
    def pix_fmt(self) -> str: ...

    @property
    def width(self) -> int: ...

    @property
    def height(self) -> int: ...

    @property
    def frame_rate(self) -> tuple[int, int]: ...

    @property
    def codec(self) -> VideoCodec: ...

    def __len__(self) -> int: ...

    def __repr__(self) -> str: ...

    def clone(self) -> VideoPackets: ...

def apply_bsf(packets: VideoPackets, bsf: str) -> VideoPackets: ...

def audio_encode_config(*, num_channels: int, planar: bool = False, sample_fmt: str | None = None, sample_rate: int | None = None, bit_rate: int = -1, compression_level: int = -1, qscale: int = -1) -> AudioEncodeConfig: ...

def convert_array(vals: Annotated[ArrayLike, dict(dtype='int64', order='C', device='cpu')], storage: CPUStorage | None = None) -> CPUBuffer: ...

@overload
def convert_frames(frames: AudioFrames, storage: CPUStorage | None = None) -> CPUBuffer: ...

@overload
def convert_frames(frames: VideoFrames, storage: CPUStorage | None = None) -> CPUBuffer: ...

@overload
def convert_frames(frames: ImageFrames, storage: CPUStorage | None = None) -> CPUBuffer: ...

@overload
def convert_frames(frames: Sequence[AudioFrames], storage: CPUStorage | None = None) -> CPUBuffer: ...

@overload
def convert_frames(frames: Sequence[VideoFrames], storage: CPUStorage | None = None) -> CPUBuffer: ...

@overload
def convert_frames(frames: Sequence[ImageFrames], storage: CPUStorage | None = None) -> CPUBuffer: ...

def convert_rgb_array(array: Annotated[ArrayLike, dict(dtype='uint8', shape=(None, None, None, 3), order='C', device='cpu')], frame_rate: tuple[int, int], pts: int) -> VideoFrames: ...

def cpu_storage(size: int) -> CPUStorage: ...

@overload
def decode_packets(packets: AudioPackets, *, decode_config: DecodeConfig | None = None, filter_desc: str | None = None, num_frames: int = -1) -> AudioFrames: ...

@overload
def decode_packets(packets: VideoPackets, *, decode_config: DecodeConfig | None = None, filter_desc: str | None = None, num_frames: int = -1) -> VideoFrames: ...

@overload
def decode_packets(packets: ImagePackets, *, decode_config: DecodeConfig | None = None, filter_desc: str | None = None, num_frames: int = -1) -> ImageFrames: ...

def encode_image(path: str, data: Annotated[ArrayLike, dict(order='C', device='cpu')], *, pix_fmt: str = 'rgb24', encode_config: EncodeConfig | None = None) -> None: ...

def get_ffmpeg_filters() -> list[str]: ...

def get_ffmpeg_log_level() -> int: ...

def get_ffmpeg_versions() -> dict[str, tuple[int, int, int]]: ...

def init_glog(arg: str, /) -> None: ...

def init_tracing() -> TracingSession: ...

def make_filter_graph(filter_desc: str, input: Sequence[str], output: Sequence[str]) -> FiilterGraph: ...

def muxer(arg0: str, *, format: str | None = None) -> Muxer: ...

def register_avdevices() -> None: ...

def set_ffmpeg_log_level(arg: int, /) -> None: ...

@overload
def trace_counter(arg0: int, arg1: int, /) -> None: ...

@overload
def trace_counter(arg0: int, arg1: float, /) -> None: ...

def trace_event_begin(arg: str, /) -> None: ...

def trace_event_end() -> None: ...

def video_encode_config(*, height: int, width: int, frame_rate: tuple[int, int] | None = None, pix_fmt: str | None = None, bit_rate: int = -1, compression_level: int = -1, qscale: int = -1, gop_size: int = -1, max_b_frames: int = -1, colorspace: str | None = None, color_primaries: str | None = None, color_trc: str | None = None) -> VideoEncodeConfig: ...
