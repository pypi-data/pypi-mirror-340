{"version":3,"sources":["BatchMenuGroup.tsx","index.tsx"],"names":["withStreamlitConnection","props","menu_state","args","state","setState","useState","labelColor","label_color","menuBgColor","menu_bg_color","menuBorderColor","menu_border_color","menuHoverColor","menu_hover_color","menuFocusShadowColor","menu_focus_shadow_color","menuTextColor","menu_text_color","useEffect","element","document","getElementById","Streamlit","setFrameHeight","offsetHeight","React","createElement","id","style","width","display","flexWrap","gap","overflow","Object","entries","map","_ref","menuId","menuData","key","className","label","value","onChange","e","handleChange","newState","setComponentValue","target","options","option","ReactDOM","render","StrictMode","BatchMenuGroup"],"mappings":"6KAgJeA,kBAhISC,IAEtB,MAAMC,EAAaD,EAAME,KAAKD,YAAc,IACrCE,EAAOC,GAAYC,mBAAoBJ,GAGxCK,EAAaN,EAAME,KAAKK,aAAe,QACvCC,EAAcR,EAAME,KAAKO,eAAiB,OAC1CC,EAAkBV,EAAME,KAAKS,mBAAqB,UAClDC,EAAiBZ,EAAME,KAAKW,kBAAoB,UAChDC,EACJd,EAAME,KAAKa,yBAA2B,0BAClCC,EAAgBhB,EAAME,KAAKe,iBAAmB,UAGpDC,oBAAU,KACR,MAAMC,EAAUC,SAASC,eAAe,wBACpCF,GAEFG,IAAUC,eAAeJ,EAAQK,aAAe,IAEjD,CAACrB,IAoBJ,OACEsB,IAAAC,cAAA,OAAKC,GAAG,uBAAuBC,MAAO,CAAEC,MAAO,SAC7CJ,IAAAC,cAAA,aACG,sFAGuBlB,qCACAE,kNAOXM,otBAQWR,0BACXQ,0EAIOJ,sGAKAA,yCACQE,gKAOfR,kWAkBfmB,IAAAC,cAAA,OACEE,MAAO,CACLE,QAAS,OACTC,SAAU,SACVF,MAAO,OACPG,IAAK,MACLC,SAAU,WAGXC,OAAOC,QAAQhC,GAAOiC,IAAIC,IAAA,IAAEC,EAAQC,GAASF,EAAA,OAC5CZ,IAAAC,cAAA,OAAKc,IAAKF,EAAQG,UAAU,kBAC1BhB,IAAAC,cAAA,SAAOe,UAAU,cAAcF,EAASG,OACxCjB,IAAAC,cAAA,UACEiB,MAAOJ,EAASI,MAChBC,SAAWC,GAzFFC,EAACR,EAAgBK,KAEpC,MAAMI,EAAW,IACZ5C,EACH,CAACmC,GAAS,IACLnC,EAAMmC,GACTK,MAAOA,IAKXvC,EAAS2C,GAGTzB,IAAU0B,kBAAkBD,IA2EDD,CAAaR,EAAQO,EAAEI,OAAON,SAE7CJ,EAASW,SAAW,IAAId,IAAKe,GAC7B1B,IAAAC,cAAA,UAAQc,IAAKW,EAAQR,MAAOQ,GACzBA,YChInBC,IAASC,OACP5B,IAAAC,cAACD,IAAM6B,WAAU,KACf7B,IAAAC,cAAC6B,EAAc,OAEjBnC,SAASC,eAAe,U","file":"static/js/main.15b2685f.chunk.js","sourcesContent":["// BatchMenuGroup.tsx with reduced vertical space\nimport React, { useEffect, useState } from \"react\";\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\n\ninterface MenuState {\n  [key: string]: {\n    label: string;\n    options: string[];\n    value: string;\n  };\n}\n\nconst BatchMenuGroup = (props: ComponentProps) => {\n  // Ensure menu_state is defined with a default empty object\n  const menu_state = props.args.menu_state || {};\n  const [state, setState] = useState<MenuState>(menu_state);\n\n  // Get color parameters with defaults\n  const labelColor = props.args.label_color || \"white\";\n  const menuBgColor = props.args.menu_bg_color || \"#fff\";\n  const menuBorderColor = props.args.menu_border_color || \"#d9d9d9\";\n  const menuHoverColor = props.args.menu_hover_color || \"#40a9ff\";\n  const menuFocusShadowColor =\n    props.args.menu_focus_shadow_color || \"rgba(24, 144, 255, 0.2)\";\n  const menuTextColor = props.args.menu_text_color || \"#333333\";\n\n  // Update component height when rendered - reduced height\n  useEffect(() => {\n    const element = document.getElementById(\"batch-menu-container\");\n    if (element) {\n      // Significantly reduced height offset\n      Streamlit.setFrameHeight(element.offsetHeight + 2);\n    }\n  }, [state]);\n\n  // Handle change in any select box\n  const handleChange = (menuId: string, value: string) => {\n    // Create a new state with the updated value\n    const newState = {\n      ...state,\n      [menuId]: {\n        ...state[menuId],\n        value: value,\n      },\n    };\n\n    // Update local state\n    setState(newState);\n\n    // Send the complete state back to Python\n    Streamlit.setComponentValue(newState);\n  };\n\n  return (\n    <div id=\"batch-menu-container\" style={{ width: \"100%\" }}>\n      <style>\n        {`\n          select {\n            appearance: none;\n            background-color: ${menuBgColor};\n            border: 1px solid ${menuBorderColor};\n            border-radius: 4px;\n            padding: 4px 8px;\n            padding-right: 25px;\n            font-size: 14px;\n            cursor: pointer;\n            width: 100%;\n            color: ${menuTextColor};\n            background-image: url(\"data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23131313%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E\");\n            background-repeat: no-repeat;\n            background-position: right 8px top 50%;\n            background-size: 10px auto;\n          }\n\n          option {\n            background-color: ${menuBgColor};\n            color: ${menuTextColor};\n          }\n\n          select:hover {\n            border-color: ${menuHoverColor};\n          }\n\n          select:focus {\n            outline: none;\n            border-color: ${menuHoverColor};\n            box-shadow: 0 0 0 2px ${menuFocusShadowColor};\n          }\n\n          .menu-label {\n            font-weight: 500;\n            font-size: 12px;\n            margin-bottom: 0px;\n            color: ${labelColor};\n          }\n\n          .menu-container {\n            margin-right: 10px;\n            margin-bottom: 2px;\n            min-width: 100px;\n            max-width: none;\n            flex: 1;\n          }\n\n          @media (max-width: 768px) {\n            .menu-container {\n              min-width: 80px;\n            }\n          }\n        `}\n      </style>\n      <div\n        style={{\n          display: \"flex\",\n          flexWrap: \"nowrap\",\n          width: \"100%\",\n          gap: \"4px\",\n          overflow: \"hidden\",\n        }}\n      >\n        {Object.entries(state).map(([menuId, menuData]) => (\n          <div key={menuId} className=\"menu-container\">\n            <label className=\"menu-label\">{menuData.label}</label>\n            <select\n              value={menuData.value}\n              onChange={(e) => handleChange(menuId, e.target.value)}\n            >\n              {(menuData.options || []).map((option) => (\n                <option key={option} value={option}>\n                  {option}\n                </option>\n              ))}\n            </select>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default withStreamlitConnection(BatchMenuGroup);\n","// index.tsx - simplified\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport BatchMenuGroup from \"./BatchMenuGroup\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BatchMenuGroup />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}