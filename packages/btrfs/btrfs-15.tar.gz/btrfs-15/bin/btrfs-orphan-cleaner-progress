#!/usr/bin/python3
#
# Copyright (C) 2017 Hans van Kranenburg <hans@knorrie.org>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import argparse
import btrfs
import errno
import sys
import time


class Bork(Exception):
    pass


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'mountpoint',
        help="Btrfs filesystem mountpoint",
    )
    return parser.parse_args()


def report_cleaner_progress(path):
    report_interval = 120
    zero_key = btrfs.ctree.Key(0, 0, 0)
    prev_amount_orphans_left = -1

    with btrfs.FileSystem(path) as fs:
        while True:
            current_id = None
            orphans = fs.orphan_subvol_ids()
            amount_orphans_left = len(orphans)
            if prev_amount_orphans_left != amount_orphans_left:
                print("{} orphans left to clean".format(amount_orphans_left))
                prev_amount_orphans_left = amount_orphans_left
            for subvol_id in orphans:
                subvolumes = list(fs.subvolumes(min_id=subvol_id, max_id=subvol_id))
                if len(subvolumes) == 0:
                    continue
                subvol = subvolumes[0]
                if subvol.drop_progress != zero_key:
                    current_id, since = subvol_id, int(time.time())
                    break
            if current_id is not None:
                report_after = 0
                while True:
                    subvolumes = list(fs.subvolumes(min_id=current_id, max_id=current_id))
                    duration = int(time.time()) - since
                    if len(subvolumes) == 0:
                        if report_after > 0:
                            print("dropping root {} finished after at least {} sec".format(
                                current_id, duration))
                        break
                    if duration >= report_after:
                        subvol = subvolumes[0]
                        print("dropping root {} for at least {} sec drop_progress {}".format(
                            current_id, duration, subvol.drop_progress))
                        report_after += report_interval
                    time.sleep(1)
            else:
                time.sleep(1)


def main():
    args = parse_args()
    path = args.mountpoint
    try:
        report_cleaner_progress(path)
    except OSError as e:
        if e.errno == errno.EPERM:
            raise Bork("Insufficient permissions to use the btrfs kernel API.\n"
                       "Hint: Try running the script as root user.".format(e))
        elif e.errno == errno.ENOTTY:
            raise Bork("Unable to retrieve data. Hint: Not a mounted btrfs file system?")
        raise


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Exiting...")
        sys.exit(130)  # 128 + SIGINT
    except Bork as e:
        print("Error: {0}".format(e), file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(e)
        sys.exit(1)
