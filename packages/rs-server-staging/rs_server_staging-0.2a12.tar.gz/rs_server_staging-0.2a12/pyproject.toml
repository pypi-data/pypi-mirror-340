[project]
name = "rs-server-staging"
version = "0.0.0" # see: https://github.com/mtkennerly/poetry-dynamic-versioning

[tool.poetry]
name = "rs-server-staging"
version = "0.2a12"
description = "Copernicus Sentinel rs-server, staging service."
license = "Apache-2.0"
authors = ["ESA under contract with Airbus and CS <ops_coprs@airbus.com>"]
readme = "README.md"
homepage = "https://home.rs-python.eu/"
repository = "https://github.com/RS-PYTHON/rs-server"
documentation = "https://home.rs-python.eu/rs-documentation/rs-server/docs/doc/"
keywords = ["stac", "copernicus", "sentinel", "processing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: FastAPI",
    "Framework :: OpenTelemetry",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Image Processing"
]

packages = [
    { include = "rs_server_staging" },
    { include = "tests", format = "sdist" },

    # TEMP: because of the pydantic conflict:
    # Use the rs_server_common source directory instead of using rs-server-common as a dependency.
    # But this doesn't work when building the wheel. So for the whl, copy the rs_server_common
    # directory and remove the from=../common part.
    {include="rs_server_common"},
]

# Add configuration files to the .whl package
include = [
    { path = "config", format = ["wheel"] }
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.115.11"
starlette = ">=0.45.3,<0.46"
pygeoapi = ">=0.19,<0.21"
uvicorn = ">=0.30.6,<0.35.0"
opentelemetry-distro = "^0.53b0" # then run 'poetry run opentelemetry-bootstrap -a install'
opentelemetry-instrumentation-aws-lambda = "^0.53b0"
opentelemetry-test-utils = "^0.53b0"
opentelemetry-exporter-otlp = "^1.32.0"
python-logging-loki = "^0.3.1"
stac-pydantic = "2.0.3"
geoalchemy2 = ">=0.17,<0.18"
SQLAlchemy = "^2.0.37"
jsonpatch = "^1.33"
dask-gateway = "2024.1.0"
# same dask version as in the cluster i.e. same as eopf
dask = {extras = ["distributed"], version = "2024.5.2"}
openapi-core = "^0.19.5"

# TEMP: because of the pydantic conflict
# we also need the rs-server-common dependencies. We duplicate them here
# except duplicates and dependencies on which we have version conflicts.
boto3 = ">=1.35.40"
botocore = ">=1.35.40"
markdown = "^3.6"
python-dotenv = "^1.0.0"
psycopg2 = "^2.9.9"
filelock = "^3.16.1"
httpx = "^0.27.2"
cachetools = ">=5.5.2" # idem as stac-fastapi-pgstac
asyncache = "^0.3.1"
authlib = "^1.5.0"
python-keycloak = "5.5.0"
itsdangerous = "^2.2.0"
pyjwt = {extras = ["crypto"], version = "^2.9.0"}

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
python = "^3.11"
pre-commit = ">=3.7.1,<5.0.0"
pylint = "^3.3.2"
pytest = "^8.3.3"
pytest-asyncio = ">=0.24,<0.25"
pytest-cov = ">=5,<7"
pytest-docker = "^3.1.0"
pytest-error-for-skips = "^2.0.2"
pytest-httpx = ">=0.32,<0.35"
pytest-mock = "^3.14.0"
responses = "^0.25.3"

[tool.black]
line-length = 120

[tool.flake8]
max-line-length = 120

[tool.pylint]
max-line-length = 120

[tool.pytest.ini_options]
markers = [
    "unit", # mark a test as unittest
    "integration", # mark a test as integration test
]
asyncio_mode = "auto"

[tool.mypy]
warn_redundant_casts = true
# Force analyze of partially annotate function signatures
check_untyped_defs = true
ignore_missing_imports = true

[tool.poetry-dynamic-versioning] # needs: poetry self add "poetry-dynamic-versioning[plugin]"
enable = false
metadata = false

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"
