"""NextCloud data view workflow plugin module"""

from collections.abc import Sequence
from typing import Any

from cmem_plugin_base.dataintegration.context import ExecutionContext, PluginContext
from cmem_plugin_base.dataintegration.description import Icon, Plugin, PluginAction, PluginParameter
from cmem_plugin_base.dataintegration.entity import Entities, Entity, EntityPath, EntitySchema
from cmem_plugin_base.dataintegration.parameter.password import Password, PasswordParameterType
from cmem_plugin_base.dataintegration.plugins import WorkflowPlugin
from cmem_plugin_base.dataintegration.ports import (
    FixedNumberOfInputs,
    FixedSchemaPort,
)
from cmem_plugin_base.dataintegration.types import Autocompletion, StringParameterType
from nc_py_api import FsNode, Nextcloud


class NextCloudSearch(StringParameterType):
    """NextCloud Search Type"""

    def __init__(
        self,
        url_expand: str,
        display_name: str,
    ) -> None:
        self.url_expand = url_expand
        self.display_name = display_name

    autocompletion_depends_on_parameters: list[str] = ["nc_url", "user", "token"]  # noqa: RUF012

    allow_only_autocompleted_values: bool = False

    autocomplete_value_with_labels: bool = True

    def autocomplete(
        self,
        query_terms: list[str],
        depend_on_parameter_values: list[Any],
        context: PluginContext,
    ) -> list[Autocompletion]:
        """Autocomplete"""
        _ = context
        if not depend_on_parameter_values:
            raise ValueError("Input url and access token first.")
        result = []
        if len(query_terms) != 0:
            dataset = Nextcloud(
                nextcloud_url=depend_on_parameter_values[0],
                nc_auth_user=depend_on_parameter_values[1],
                nc_auth_pass=depend_on_parameter_values[2].decrypt(),
            )
            folders = [i for i in dataset.files.listdir(depth=-1) if i.is_dir]
            result = [
                Autocompletion(
                    value=folder.user_path,
                    label=folder.user_path,
                )
                for folder in folders
            ]
            result.sort(
                key=lambda x: (not all(term.lower() in x.label.lower() for term in query_terms),)
            )
            return result
        if len(query_terms) == 0:
            result.append(Autocompletion(value="", label=""))
        result.sort(key=lambda x: x.label)
        return result


@Plugin(
    label="NextCloud Data",
    description="Generates data from a given NextCloud users folders and files.",
    documentation="""This workflow task generates a structured output from a specified Nextcloud
    service instance.

    Given the URL of the target Nextcloud instance along with your credentials, you can specify any
    directory from which data should be extracted. Additionally, you may define file patterns to
    include or exclude specific files within the selected directory.

    Important:
    To establish a secure connection, you must generate a dedicated [app-specific password and username](https://docs.nextcloud.com/server/latest/user_manual/de/session_management.html)
    in the Security section of your Nextcloud account settings. Do not use your standard login
    credentials.
    """,
    icon=Icon(file_name="nextcloud.svg", package=__package__),
    actions=[
        PluginAction(
            name="result_preview",
            label="Preview results (max. 10)",
            description="Executes the given instructions to validate its results.",
        )
    ],
    parameters=[
        PluginParameter(
            name="nc_url",
            label="NextCloud URL",
            description="The URL of your NextCloud, e.g. 'https://cloud.example.com'.",
            default_value="",
        ),
        PluginParameter(
            name="user",
            label="API identification",
            description="The identification generated by the app-password function in NextCloud.",
            default_value="admin",
        ),
        PluginParameter(
            name="token",
            label="API token",
            description="The token generated by the app-password function in NextCloud.",
            default_value="admin",
            param_type=PasswordParameterType(),
        ),
        PluginParameter(
            name="path",
            label="File or directory path",
            description="The path of a specific file or directory that needs to be transformed. "
            "Includes all the subdirectories. Leave empty for root directory.",
            default_value="",
            param_type=NextCloudSearch("directories", "Folder"),
        ),
        PluginParameter(
            name="file_expression",
            label="File expression using *",
            description="A filepath for searching specified files through the given path. "
            "E.g. searching for *.txt results in all .txt files under the given "
            "directory and its subdirectories.",
            default_value="",
        ),
    ],
)
class NextCloudPlugin(WorkflowPlugin):
    """NextCloud Workflow Plugin: Data loading"""

    def __init__(
        self,
        nc_url: str,
        user: str,
        token: Password | str,
        path: str,
        file_expression: str,
    ) -> None:
        self.nc_url = nc_url
        self.user = user
        self.token = token if isinstance(token, str) else token.decrypt()
        self.path = path
        self.file_expression = file_expression
        self.input_ports = FixedNumberOfInputs([])
        self.output_port = FixedSchemaPort(schema=self.generate_schema())
        try:
            self.nc = Nextcloud(
                nextcloud_url=self.nc_url, nc_auth_user=self.user, nc_auth_pass=str(self.token)
            )
        except Exception as e:
            raise ConnectionError("Failed to connect to Nextcloud") from e

    def result_preview(self) -> str:
        """Plugin Action to preview the results"""
        files = self.generate_files()
        files = files[:10]
        if len(files) == 0:
            raise ValueError("No results found with the given instructions.")
        return (
            f"Following {len(files)} entities were found: "
            f"{', '.join(file.user_path for file in files)}"
        )

    @staticmethod
    def generate_schema() -> EntitySchema:
        """Provide the schema. Very important that linksTo stays as last argument"""
        return EntitySchema(
            type_uri="",
            paths=[
                EntityPath(path="id"),
                EntityPath(path="type"),
                EntityPath(path="user_path"),
                EntityPath(path="name"),
                EntityPath(path="is_shared"),
                EntityPath(path="full_path"),
                EntityPath(path="is_creatable"),
                EntityPath(path="is_deletable"),
                EntityPath(path="is_mounted"),
                EntityPath(path="is_readable"),
                EntityPath(path="is_shareable"),
                EntityPath(path="is_updatable"),
                EntityPath(path="size"),
                EntityPath(path="content_length"),
                EntityPath(path="creation_date"),
                EntityPath(path="last_modified"),
                EntityPath(path="permissions"),
                EntityPath(path="linksTo"),
            ],
        )

    def execute(self, inputs: Sequence[Entities], context: ExecutionContext) -> Entities:  # noqa: ARG002
        """Run the workflow operator."""
        entities = []
        files = self.generate_files()
        for result in files:
            entity_uri = f"{self.nc_url}/index.php/apps/files?dir={result.user_path}"
            values = [
                [result.file_id],
                ["Folder" if result.is_dir else "File"],
                [result.user_path],
                [result.name],
                ["True" if result.is_shared else "False"],
                [result.full_path],
                ["True" if result.is_creatable else "False"],
                ["True" if result.is_deletable else "False"],
                ["True" if result.is_mounted else "False"],
                ["True" if result.is_readable else "False"],
                ["True" if result.is_shareable else "False"],
                ["True" if result.is_updatable else "False"],
                [result.info.size.__str__()],
                [result.info.content_length.__str__()],
                [result.info.creation_date.__str__()],
                [result.info.last_modified.__str__()],
                [result.info.permissions.__str__()],
                [],
            ]

            all_children = self.nc.files.listdir(path=result.user_path, depth=1)
            for child in all_children:
                values[-1].append(child.user_path)

            entities.append(Entity(uri=entity_uri, values=values))

        return Entities(entities=iter(entities), schema=self.generate_schema())

    def generate_files(self) -> list[FsNode]:
        """Generate the files from NextCloud"""
        files = []
        if self.file_expression == "":
            files = self.nc.files.listdir(path=self.path, depth=-1)
        else:
            op = "like" if self.file_expression.__contains__("*") else "eq"
            new_expression = self.file_expression.replace("*", "%")
            files = self.nc.files.find([op, "name", new_expression], path=self.path)
        return files
