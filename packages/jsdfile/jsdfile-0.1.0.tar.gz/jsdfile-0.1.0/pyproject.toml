[tool.poetry]
name = "jsdfile"
version = "0.1.0"
description = "High-performance JSON serialization and deserialization library with efficient binary storage format. JSDFile combines msgspec speed with LZ4 compression for applications that need to store and retrieve JSON data rapidly while minimizing storage requirements."
authors = ["Alaamer <ahmedmuhamed12@gmail.com>"]
maintainers = ["Alaamer <ahmedmuhamed239@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/alaamer12/jsdfile"
repository = "https://github.com/alaamer12/jsdfile"
documentation = "https://github.com/alaamer12/jsdfile"
keywords = [
    "json",
    "database",
    "serialization",
    "deserialization",
    "compression",
    "performance",
    "msgspec",
    "lz4",
    "binary",
    "file-format",
    "data-storage",
    "msgpack",
    "high-performance",
    "fast-json",
    "io",
    "persistence",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Archiving :: Compression",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: Content Management System",
    "Topic :: Software Development :: Object Brokering",
    "Topic :: System :: Filesystems",
    "Typing :: Typed",
]

packages = [{ include = "jsdfile" }]

include = [
    #"CHANGELOG.md",
    #"CODE_OF_CONDUCT.md",
    "README.md",
    "BENCHMARK.md",
    #"CONTRIBUTING.md",
    "LICENSE",
    "requirements.txt",
    #"SECURITY.md",
]

[tool.poetry.urls]
"Source Code" = "https://github.com/alaamer12/jsdfile"
#"Bug Tracker" = "https://github.com/alaamer12/jsdfile/issues"
#"Changelog" = "https://github.com/alaamer12/jsdfile/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
python = "^3.10"
lz4 = "^4.4.4"
msgspec = "^0.19.0"

[tool.poetry.group.bench]
optional = true

[tool.poetry.group.bench.dependencies]
numpy = "^2.2.4"
pandas = "^2.2.3"
tabulate = "^0.9.0"
psutil = "^7.0.0"

# Candidates for the benchmark, A Group of fastest json libraries
orjson = "^3.10.16"
msgpack = "^1.1.0"
msgspec = "^0.19.0" # Ensure msgpsec is same version as in dependencies

[tool.poetry.group.test]
optional = false

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-benchmark = "^5.1.0"
coverage = "^7.8.0"

[tool.poetry.group.dev.dependencies]
mypy = "^1.15.0"
ruff = "^0.11.5"
coverage = "^7.8.0"

[tool.poetry.group.build]
optional = false

[tool.poetry.group.build.dependencies]
build = "^1.2.2.post1"
twine = "^6.1.0"

[tool.poetry.group.plot]
optional = true

[tool.poetry.group.plot.dependencies]
seaborn = "^0.13.2"
matplotlib = "^3.10.1"
tqdm = "^4.67.1"

[tool.poetry.group.types]
optional = true

[tool.poetry.group.types.dependencies] # Required by Mypy
types-tabulate = "^0.9.0.20241207"
types-tqdm = "^4.67.0.20250404"
pandas-stubs = "^2.2.3.250308"
types-seaborn = "^0.13.2.20250111"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
testpaths = "tests"
addopts = "-ra -q"
markers = [
    "benchmark: marks benchmark tests",
]

[tool.coverage.run]
branch = true
source = ["jsdfile"]
omit = ["**/benchmark/*", "**/plotting/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "    pass",
    "except ImportError:",
    "    pass",
    "except Exception:",
    "    pass",
]
ignore_errors = true
fail_under = 95 # Set minimum coverage percentage
show_missing = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
exclude = ["jsdfile/benchmark/**", "jsdfile/plot/**"]

[tool.ruff]
target-version = "py310"
line-length = 88
indent-width = 4
exclude = ["tests/*"]  # Exclude all files in tests directory

[tool.ruff.lint]
extend-select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "TD",   # flake8-todos
    "FIX",  # flake8-fix-me
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy
    "RUF",  # ruff-specific
]
ignore = [
    "E501",    # line too long - handled by formatter
    "UP007",   # optional-type-checking-imports
    "PGH003",  # specific-string-type-hints
    "G004",    # string-type-hint-for-literal-string
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ANN",  # flake8-annotations
    "S101",  # assert
]
"benchmark/**/*.py" = [
    "T20",  # flake8-print
]

[tool.ruff.lint.isort]
known-first-party = ["jsdfile"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.pydocstyle]
convention = "google"
