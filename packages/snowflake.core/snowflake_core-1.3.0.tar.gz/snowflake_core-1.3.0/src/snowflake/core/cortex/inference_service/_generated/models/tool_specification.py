# coding: utf-8
"""
    Cortex Inference API.

    OpenAPI 3.0 specification for the Cortex REST API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from pydantic import BaseModel, ConfigDict, Field, StrictStr

from typing import Any, ClassVar, Dict, List, Optional


class ToolSpecification(BaseModel):
    """A model object representing the ToolSpecification resource.

    Constructs an object of type ToolSpecification with the provided properties.

    Parameters
    __________
    name : str, optional
        Name of the tool/function that can be called
    description : str, optional
        Description of the tool/function
    input_schema : object, optional
        A JSON Schema describing the input parameters for the tool.
    """

    name: Optional[StrictStr] = None

    description: Optional[StrictStr] = None

    input_schema: Optional[Dict[str, Any]] = Field(default=None,
                                                   alias="inputSchema")

    __properties = ["name", "description", "inputSchema"]

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ToolSpecification:
        """Create an instance of ToolSpecification from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(
        self,
        hide_readonly_properties: bool = False,
    ) -> dict[str, Any]:
        """Returns the dictionary representation of the model using alias."""

        exclude_properties = set()

        if hide_readonly_properties:
            exclude_properties.update({})

        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude=exclude_properties,
                       exclude_none=True))

        return _dict

    def to_dict_without_readonly_properties(self) -> dict[str, Any]:
        """Return the dictionary representation of the model without readonly properties."""
        return self.to_dict(hide_readonly_properties=True)

    @classmethod
    def from_dict(cls, obj: dict) -> ToolSpecification:
        """Create an instance of ToolSpecification from a dict."""

        if obj is None:
            return None

        if type(obj) is not dict:
            return ToolSpecification.parse_obj(obj)

        _obj = ToolSpecification.parse_obj({
            "name":
            obj.get("name"),
            "description":
            obj.get("description"),
            "input_schema":
            obj.get("inputSchema"),
        })

        return _obj


from typing import Optional, List, Dict


class ToolSpecificationModel():

    def __init__(
        self,  # optional properties
        name: Optional[str] = None,
        description: Optional[str] = None,
        input_schema: Optional[object] = None,
    ):
        """A model object representing the ToolSpecification resource.

        Constructs an object of type ToolSpecification with the provided properties.

        Parameters
        __________
        name : str, optional
            Name of the tool/function that can be called
        description : str, optional
            Description of the tool/function
        input_schema : object, optional
            A JSON Schema describing the input parameters for the tool.
        """

        self.name = name
        self.description = description
        self.input_schema = input_schema

    __properties = ["name", "description", "inputSchema"]

    def _to_model(self):
        return ToolSpecification(
            name=self.name,
            description=self.description,
            input_schema=self.input_schema,
        )

    @classmethod
    def _from_model(cls, model) -> ToolSpecificationModel:
        return ToolSpecificationModel(
            name=model.name,
            description=model.description,
            input_schema=model.input_schema,
        )

    def to_dict(self):
        """Creates a dictionary of the properties from a ToolSpecification.

        This method constructs a dictionary with the key-value entries corresponding to the properties of the ToolSpecification object.

        Returns
        _______
        dict
            A dictionary object created using the input model.
        """
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> ToolSpecificationModel:
        """Creates an instance of ToolSpecification from a dict.

        This method constructs a ToolSpecification object from a dictionary with the key-value pairs of its properties.

        Parameters
        ----------
        obj : dict
            A dictionary whose keys and values correspond to the properties of the resource object.

        Returns
        _______
        ToolSpecification
            A ToolSpecification object created using the input dictionary; this will fail if the required properties are missing.
        """
        return cls._from_model(ToolSpecification.from_dict(obj))


ToolSpecification._model_class = ToolSpecificationModel
