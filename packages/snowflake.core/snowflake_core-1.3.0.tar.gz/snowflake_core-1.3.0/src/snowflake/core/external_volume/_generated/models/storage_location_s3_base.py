# coding: utf-8
"""
    Snowflake External Volume API.

    The Snowflake External Volume API is a REST API that you can use to access, update, and perform certain actions on External Volume resource in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

import snowflake.core.external_volume._generated.models
from snowflake.core.external_volume._generated.models import *

from typing import Union

from snowflake.core.external_volume._generated.models.encryption import Encryption

from snowflake.core.external_volume._generated.models.storage_location import StorageLocation

from importlib import import_module

from pydantic import ConfigDict, StrictStr

from typing import Any, ClassVar, Dict, List, Optional, Union


class StorageLocationS3Base(StorageLocation):

    storage_aws_role_arn: StrictStr

    storage_base_url: StrictStr

    storage_aws_external_id: Optional[StrictStr] = None

    encryption: Optional[Encryption] = None

    __properties = ["name", "storage_provider"]

    class Config:
        populate_by_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'storage_provider'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'AZURE': 'StorageLocationAzure',
        'GCS': 'StorageLocationGcs',
        'S3': 'StorageLocationS3',
        'S3GOV': 'StorageLocationS3Gov'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data."""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    __discriminator_value_to_type: ClassVar[Dict[str, str]] = {
        'StorageLocationAzure': 'AZURE',
        'StorageLocationGcs': 'GCS',
        'StorageLocationS3': 'S3',
        'StorageLocationS3Gov': 'S3GOV',
    }

    @classmethod
    def get_child_model_discriminator_value(cls, child_model: str) -> str:
        return cls.__discriminator_value_to_type[child_model]

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
            cls,
            json_str: str) -> Union[StorageLocationS3, StorageLocationS3Gov]:
        """Create an instance of StorageLocationS3Base from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias."""
        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude={},
                       exclude_none=True))

        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()

        _dict[
            'storage_provider'] = StorageLocation.get_child_model_discriminator_value(
                'StorageLocationS3Base')

        return _dict

    @classmethod
    def from_dict(cls,
                  obj: dict) -> Union[StorageLocationS3, StorageLocationS3Gov]:
        """Create an instance of StorageLocationS3Base from a dict."""

        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = getattr(snowflake.core.external_volume._generated.models,
                            object_type)
            return klass.from_dict(obj)
        else:
            raise ValueError(
                "StorageLocationS3Base failed to lookup discriminator value from "
                + json.dumps(obj) + ". Discriminator property name: " +
                cls.__discriminator_property_name + ", mapping: " +
                json.dumps(cls.__discriminator_value_class_map))


from typing import Optional, List, Dict

from snowflake.core.external_volume._generated.models.encryption import Encryption

from snowflake.core.external_volume._generated.models.storage_location import StorageLocation


class StorageLocationS3BaseModel(StorageLocation):

    def __init__(
        self,
        name: str,
        storage_aws_role_arn: str,
        storage_base_url: str,
        # optional properties
        storage_aws_external_id: Optional[str] = None,
        encryption: Optional[Encryption] = None,
    ):
        """Inits a StorageLocationS3Base model object.

        Constructs an object of type StorageLocationS3Base with the provided properties.

        Parameters
        __________

        name : str

        storage_aws_role_arn : str
            Specifies the case-sensitive Amazon Resource Name (ARN) of the AWS identity and access management (IAM) role that grants privileges on the S3 bucket containing your data files.
        storage_base_url : str
            Specifies the base URL for your cloud storage location.
        storage_aws_external_id : str, optional
            Optionally specifies an external ID that Snowflake uses to establish a trust relationship with AWS.
        encryption : Encryption, optional
        """

        super().__init__(name=name, )
        self.storage_aws_role_arn = storage_aws_role_arn
        self.storage_base_url = storage_base_url
        self.storage_aws_external_id = storage_aws_external_id
        self.encryption = encryption

    __properties = ["name", "storage_provider"]

    def _to_model(self):
        return StorageLocationS3Base(
            name=self.name,
            storage_aws_role_arn=self.storage_aws_role_arn,
            storage_base_url=self.storage_base_url,
            storage_aws_external_id=self.storage_aws_external_id,
            encryption=self.encryption._to_model()
            if self.encryption is not None else None,
        )

    @classmethod
    def _from_model(cls, model) -> StorageLocationS3BaseModel:
        return model.__class__._model_class._from_model(model)

    def to_dict(self):
        """Creates a dictionary of the properties from a StorageLocationS3Base.

        This method constructs a dictionary with the key-value entries corresponding to the properties of the StorageLocationS3Base object.

        Returns
        _______
        dict
            A dictionary object created using the input model.
        """
        return self._to_model().to_dict()

    @classmethod
    def from_dict(
            cls, obj: dict
    ) -> Union[StorageLocationS3Model, StorageLocationS3GovModel]:
        """Creates an instance of StorageLocationS3Base from a dict.

        This method constructs a StorageLocationS3Base object from a dictionary with the key-value pairs of its properties.

        Parameters
        ----------
        obj : dict
            A dictionary whose keys and values correspond to the properties of the resource object.

        Returns
        _______
        StorageLocationS3Base
            A StorageLocationS3Base object created using the input dictionary; this will fail if the required properties are missing.
        """
        return cls._from_model(StorageLocationS3Base.from_dict(obj))


StorageLocationS3Base._model_class = StorageLocationS3BaseModel
