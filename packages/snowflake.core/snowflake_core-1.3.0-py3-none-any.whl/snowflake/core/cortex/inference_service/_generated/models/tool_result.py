# coding: utf-8
"""
    Cortex Inference API.

    OpenAPI 3.0 specification for the Cortex REST API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from pydantic import BaseModel, ConfigDict, Field, StrictStr

from typing import Any, ClassVar, Dict, List, Optional


class ToolResult(BaseModel):
    """A model object representing the ToolResult resource.

    Constructs an object of type ToolResult with the provided properties.

    Parameters
    __________
    tool_use_id : str, optional
        The ID of the tool used.
    result_content : List[object], optional
        The results collected by the client by executing this tool
    """

    tool_use_id: Optional[StrictStr] = Field(default=None, alias="toolUseId")

    result_content: Optional[List[Dict[str,
                                       Any]]] = Field(default=None,
                                                      alias="resultContent")

    __properties = ["toolUseId", "resultContent"]

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ToolResult:
        """Create an instance of ToolResult from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(
        self,
        hide_readonly_properties: bool = False,
    ) -> dict[str, Any]:
        """Returns the dictionary representation of the model using alias."""

        exclude_properties = set()

        if hide_readonly_properties:
            exclude_properties.update({})

        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude=exclude_properties,
                       exclude_none=True))

        return _dict

    def to_dict_without_readonly_properties(self) -> dict[str, Any]:
        """Return the dictionary representation of the model without readonly properties."""
        return self.to_dict(hide_readonly_properties=True)

    @classmethod
    def from_dict(cls, obj: dict) -> ToolResult:
        """Create an instance of ToolResult from a dict."""

        if obj is None:
            return None

        if type(obj) is not dict:
            return ToolResult.parse_obj(obj)

        _obj = ToolResult.parse_obj({
            "tool_use_id": obj.get("toolUseId"),
            "result_content": obj.get("resultContent"),
        })

        return _obj


from typing import Optional, List, Dict


class ToolResultModel():

    def __init__(
        self,  # optional properties
        tool_use_id: Optional[str] = None,
        result_content: Optional[List[object]] = None,
    ):
        """A model object representing the ToolResult resource.

        Constructs an object of type ToolResult with the provided properties.

        Parameters
        __________
        tool_use_id : str, optional
            The ID of the tool used.
        result_content : List[object], optional
            The results collected by the client by executing this tool
        """

        self.tool_use_id = tool_use_id
        self.result_content = result_content

    __properties = ["toolUseId", "resultContent"]

    def _to_model(self):
        return ToolResult(
            tool_use_id=self.tool_use_id,
            result_content=self.result_content,
        )

    @classmethod
    def _from_model(cls, model) -> ToolResultModel:
        return ToolResultModel(
            tool_use_id=model.tool_use_id,
            result_content=model.result_content,
        )

    def to_dict(self):
        """Creates a dictionary of the properties from a ToolResult.

        This method constructs a dictionary with the key-value entries corresponding to the properties of the ToolResult object.

        Returns
        _______
        dict
            A dictionary object created using the input model.
        """
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> ToolResultModel:
        """Creates an instance of ToolResult from a dict.

        This method constructs a ToolResult object from a dictionary with the key-value pairs of its properties.

        Parameters
        ----------
        obj : dict
            A dictionary whose keys and values correspond to the properties of the resource object.

        Returns
        _______
        ToolResult
            A ToolResult object created using the input dictionary; this will fail if the required properties are missing.
        """
        return cls._from_model(ToolResult.from_dict(obj))


ToolResult._model_class = ToolResultModel
