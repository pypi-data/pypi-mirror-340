# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from insightproto.proto.datasource.v1 import logsource_pb2 as insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2


class LoggingServiceStub(object):
    """Service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryLogs = channel.unary_unary(
                '/insightproto.proto.datasource.v1.LoggingService/QueryLogs',
                request_serializer=insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2.LogRequest.SerializeToString,
                response_deserializer=insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2.MultipleResponse.FromString,
                )
        self.StreamLogs = channel.unary_stream(
                '/insightproto.proto.datasource.v1.LoggingService/StreamLogs',
                request_serializer=insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2.LogRequest.SerializeToString,
                response_deserializer=insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2.LogResponse.FromString,
                )


class LoggingServiceServicer(object):
    """Service definition
    """

    def QueryLogs(self, request, context):
        """Query logs based on request parameters and return a standardized response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLogs(self, request, context):
        """Stream logs in real-time based on filter criteria
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoggingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryLogs,
                    request_deserializer=insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2.LogRequest.FromString,
                    response_serializer=insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2.MultipleResponse.SerializeToString,
            ),
            'StreamLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamLogs,
                    request_deserializer=insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2.LogRequest.FromString,
                    response_serializer=insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2.LogResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'insightproto.proto.datasource.v1.LoggingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LoggingService(object):
    """Service definition
    """

    @staticmethod
    def QueryLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/insightproto.proto.datasource.v1.LoggingService/QueryLogs',
            insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2.LogRequest.SerializeToString,
            insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2.MultipleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/insightproto.proto.datasource.v1.LoggingService/StreamLogs',
            insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2.LogRequest.SerializeToString,
            insightproto_dot_proto_dot_datasource_dot_v1_dot_logsource__pb2.LogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
