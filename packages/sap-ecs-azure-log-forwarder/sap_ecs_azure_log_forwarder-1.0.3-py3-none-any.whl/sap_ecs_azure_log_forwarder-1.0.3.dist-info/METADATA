Metadata-Version: 2.1
Name: sap-ecs-azure-log-forwarder
Version: 1.0.3
Summary: A package to consume events from an Azure storage queue, process log files, and forward them to a HTTP endpoint or file.
Home-page: https://www.sap.com/
License: SAP DEVELOPER LICENSE AGREEMENT
Keywords: SAP Azure Log Forwarder,SAP Log Forwarder
Author: SAP SE
Requires-Python: >=3.8,<4.0
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: Other/Proprietary License
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Dist: azure-storage-blob (>=12.0.0,<13.0.0)
Requires-Dist: azure-storage-queue (>=12.0.0,<13.0.0)
Requires-Dist: python-dotenv (>=1.0.1,<2.0.0)
Requires-Dist: requests (>=2.25.1,<3.0.0)
Description-Content-Type: text/markdown

# Azure Log Forwarder

Azure Log Forwarder is a Python package that consumes events from an Azure storage queue, processes log files stored in Azure Blob Storage, and forwards the logs either to an HTTP endpoint or writes them to files.

![Image for sap-ecs-azure-log-forwarder](https://raw.githubusercontent.com/sap-ecs-log-forwarders/pypi/main/azure-log-forwarder.png)

## Features

- Consume blob creation events from an Azure storage queue.
- Download and decompress gzipped JSON log files from Azure Blob Storage.
- Forward logs to an HTTP endpoint or write them to files.
- Support for TLS protocol.
- Support for different HTTP authentication methods (Token, API Key).
- Configurable through environment variables.
- Configurable timeout to exit the program if no messages are found for a specified duration.

## Prerequisites

- Python 3.8 or higher.
- An Azure Storage account with a configured storage queue.
- A SAS token with appropriate permissions to access the storage account and queue.

## Installation
### With direct internet access:
```sh
pip install sap-ecs-azure-log-forwarder
pip install sap-ecs-azure-log-forwarder==<version>
```

### Without direct internet access:
- Navigate to the **Download files** section on **pypi.org** for **sap-ecs-azure-log-forwarder** and download the latest .whl (wheel) file. The file will typically have a name that includes details about compatibility (e.g., example_package-1.0-py3-none-any.whl).
- Upload the .whl file to the target machine that does not have direct internet access.
- Move to the directory where your **.whl** file is located or provide the full path when running the pip command.

Run the following command:
```sh
pip install /path/to/your_file.whl
```

**Example**:
```sh
pip install /User/Downloads/sap_ecs_azure_log_forwarder-1.0.2-py3-none-any.whl
```

## Configuration

Set up the following environment variables to configure the Azure Log Forwarder. You can set these environment variables in your shell or in a `.env` file in your working directory.

- `SAS_TOKEN`: The SAS token for Azure Blob Storage.
- `STORAGE_ACCOUNT_NAME`: The name of your Azure Storage account.
- `QUEUE_NAME`: The name of the Azure storage queue to consume events from.
- `TIMEOUT_DURATION`: The time duration in seconds to wait for messages before exiting.
- `OUTPUT_METHOD`: The method to forward logs (`http` or `files`).
- `HTTP_ENDPOINT`: The HTTP endpoint to forward logs to (required if `OUTPUT_METHOD` is `http`).
- `TLS_CERT_PATH`: Path to the TLS certificate for mutual TLS connections.
- `TLS_KEY_PATH`: Path to the TLS key for mutual TLS connections.
- `AUTH_METHOD`: Authentication method (`token`, `api_key`). Default is `token`.
  - **Auth Token**: Set `AUTH_METHOD` to `token` and configure `AUTH_TOKEN`.
    - `AUTH_TOKEN`: Bearer/OAuth token for HTTP endpoint authentication.
  - **API Key**: Set `AUTH_METHOD` to `api_key` and configure `API_KEY`.
    - `API_KEY`: API key for HTTP endpoint API key authentication.
- `OUTPUT_DIR`: The output directory to write log files to (required if `OUTPUT_METHOD` is `files`).
- `LOG_LEVEL`: The log level for the application (default is `INFO`). Options are `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`.

### Example of setting environment variables in a shell:

```sh
export SAS_TOKEN="logserv_storage_account_SAS_token"
export STORAGE_ACCOUNT_NAME="logserv_storage_account_name"
export QUEUE_NAME="logserv_queue_name"
export TIMEOUT_DURATION=120  # Timeout after 120 seconds of inactivity. DO NOT set for indefinite runs.

# For HTTP output
export OUTPUT_METHOD="http"
export HTTP_ENDPOINT="https://your-http-endpoint.com"

# TLS Configuration (Optional)
export TLS_CERT_PATH="/path/to/your/tls_cert.pem"
export TLS_KEY_PATH="/path/to/your/tls_key.pem"

# For Bearer/OAuth Token authentication
export AUTH_METHOD="token"
export AUTH_TOKEN="your_token"

# For API Key authentication
export AUTH_METHOD="api_key"
export API_KEY="your_api_key"

# For file output
export OUTPUT_METHOD="files"
export OUTPUT_DIR="/path/to/your/output/directory/"

# Log level
export LOG_LEVEL="DEBUG" # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL. Default is INFO.
```

### Example of setting environment variables in a `.env` file:
```sh
SAS_TOKEN="logserv_storage_account_SAS_token"
STORAGE_ACCOUNT_NAME="logserv_storage_account_name"
QUEUE_NAME="logserv_queue_name"
TIMEOUT_DURATION=120  # Timeout after 120 seconds of inactivity. DO NOT set for indefinite runs.

# For HTTP output
OUTPUT_METHOD="http"
HTTP_ENDPOINT="https://your-http-endpoint.com"

# TLS Configuration (Optional)
TLS_CERT_PATH="/path/to/your/tls_cert.pem"
TLS_KEY_PATH="/path/to/your/tls_key.pem"

# For Bearer/OAuth Token authentication
AUTH_METHOD="token"
AUTH_TOKEN="your_token"

# For API Key authentication
AUTH_METHOD="api_key"
API_KEY="your_api_key"

# For file output
OUTPUT_METHOD="files"
OUTPUT_DIR="/path/to/your/output/directory/"

# Log level
LOG_LEVEL="DEBUG" # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL. Default is INFO.
```

## Usage

To run the Azure Log Forwarder, use the following command:
```sh
sap-ecs-azure-log-forwarder
```
This will start the process of consuming events from the storage queue, downloading and processing log files, and forwarding them according to the specified method. The program will exit if no messages are found within the specified timeout duration. If not timeout duration is specified, the program will run indefinitely.

## Things to remember
- If `TIMEOUT_DURATION` is not set, the program will run indefinitely.
- The SAS token **must** have these permissions over the storage account and queue:

  - **Blob Storage:**
    - **Allowed services:** `Blob`, `Queue`
    - **Allowed resource types:** `Service`, `Container`, `Object`
    - **Allowed permissions:**
      - Read
      - Delete
      - List
      - Update
      - Process
- The start date of the SAS token should be correctly set to ensure immediate access, and the expiry date should align with SAP's security policies.

## References
1. [Create SAS tokens for your storage containers](https://learn.microsoft.com/en-us/azure/ai-services/translator/document-translation/how-to-guides/create-sas-tokens?tabs=Containers)
2. [Creating a Storage Queue](https://learn.microsoft.com/en-us/azure/storage/queues/storage-quickstart-queues-portal)

## License
This application and its source code are licensed under the terms of the SAP Developer License Agreement. See the LICENSE file for more information.

## Release Notes
### 1.0.1
- First proper release!

### 1.0.2
- Updated README with diagrams and instructions on installing the package without access to the internet.

### 1.0.3
- Added a new configuration option (LOG_LEVEL) to set the log level for the application.
- Updated README with instructions on setting the log level. 
