# .github/workflows/merge-objects.yml
# Workflow for manually merging/aliasing objects in gh-store

name: Merge or Alias Objects

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation type'
        required: true
        type: choice
        options:
          - create-alias
          - deprecate-duplicate
          - deprecate-merged
          - deprecate-replaced
      source_id:
        description: 'Source object ID'
        required: true
        type: string
      target_id:
        description: 'Target object ID'
        required: true
        type: string
      dry_run:
        description: 'Dry run (no changes)'
        type: boolean
        default: false

jobs:
  manage-objects:
    runs-on: ubuntu-latest
    permissions:
      issues: write  # Needed to modify issues
      contents: read  # Needed to read code
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      
      - name: Run object operation
        id: object_operation
        run: |
          echo "Running ${{ github.event.inputs.operation }} on ${{ github.event.inputs.source_id }} -> ${{ github.event.inputs.target_id }}"
          
          # Set up basic command
          CMD="python -m gh_store.tools.canonicalize --token ${{ secrets.GITHUB_TOKEN }} --repo ${{ github.repository }}"
          CMD="$CMD --source-id ${{ github.event.inputs.source_id }} --target-id ${{ github.event.inputs.target_id }}"
          
          # Check if dry run
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            CMD="$CMD --dry-run"
            echo "::notice::Running in dry-run mode - no changes will be made"
          fi
          
          # Map operation type to command
          case "${{ github.event.inputs.operation }}" in
            "create-alias")
              CMD="$CMD --create-alias"
              OPERATION_DESC="Creating alias from ${{ github.event.inputs.source_id }} to ${{ github.event.inputs.target_id }}"
              ;;
              
            "deprecate-duplicate")
              CMD="$CMD --deprecate --reason duplicate"
              OPERATION_DESC="Deprecating ${{ github.event.inputs.source_id }} as duplicate of ${{ github.event.inputs.target_id }}"
              ;;
              
            "deprecate-merged")
              CMD="$CMD --deprecate --reason merged"
              OPERATION_DESC="Deprecating ${{ github.event.inputs.source_id }} as merged into ${{ github.event.inputs.target_id }}"
              ;;
              
            "deprecate-replaced")
              CMD="$CMD --deprecate --reason replaced"
              OPERATION_DESC="Deprecating ${{ github.event.inputs.source_id }} as replaced by ${{ github.event.inputs.target_id }}"
              ;;
              
            *)
              echo "::error::Invalid operation type: ${{ github.event.inputs.operation }}"
              exit 1
              ;;
          esac
          
          echo "$OPERATION_DESC"
          echo "operation_desc=$OPERATION_DESC" >> $GITHUB_OUTPUT
          
          # Execute command
          echo "Executing: $CMD"
          OUTPUT=$(eval "$CMD" 2>&1)
          echo "$OUTPUT"
          
          # Check for success
          if [[ "$OUTPUT" == *"success"*"true"* ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create summary
        run: |
          echo "# Object Operation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "**DRY RUN** - No changes were made" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "Operation: ${{ steps.object_operation.outputs.operation_desc }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.object_operation.outputs.success }}" == "true" ]]; then
            echo "✅ **Success!** The operation was completed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Failed!** The operation encountered an error." >> $GITHUB_STEP_SUMMARY
          fi
