# serializer version: 1
# name: test_load_multiple_files
  dict({
    'definition': dict({
      'mutation': 'Mutation',
      'query': 'Query',
      'subscription': None,
      'types': frozenset({
        'Mutation',
        'Query',
      }),
    }),
    'kind': <Kind.SCHEMA: 'gql_schema'>,
    'members': dict({
      'Annotation': dict({
        'description': 'Interface containing all annotation combinations.',
        'fields': list([
          dict({
            'description': 'Nullable element.',
            'name': 'null',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': False,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Non-nullable element.',
            'name': 'non_null',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Nullable list with nullable elements.',
            'name': 'null_list_null',
            'type': dict({
              'canonical_path': None,
              'is_list': True,
              'name': 'String',
              'non_null': False,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Nullable list with non-nullable elements.',
            'name': 'null_list_non_null',
            'type': dict({
              'canonical_path': None,
              'is_list': True,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Non-nullable list with nullable elements.',
            'name': 'non_null_list_null',
            'type': dict({
              'canonical_path': None,
              'is_list': True,
              'name': 'String',
              'non_null': False,
              'non_null_list': True,
            }),
          }),
          dict({
            'description': 'Non-nullable list with non-nullable elements.',
            'name': 'non_null_list_non_null',
            'type': dict({
              'canonical_path': None,
              'is_list': True,
              'name': 'String',
              'non_null': True,
              'non_null_list': True,
            }),
          }),
        ]),
        'interfaces': list([
        ]),
        'name': 'Annotation',
        'path': 'schemaName.Annotation',
      }),
      'AnnotationErrorImpl': dict({
        'description': 'Object implementing multiple interfaces.',
        'fields': list([
          dict({
            'description': 'Error message.',
            'name': 'message',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Nullable element.',
            'name': 'null',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': False,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Non-nullable element.',
            'name': 'non_null',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Nullable list with nullable elements.',
            'name': 'null_list_null',
            'type': dict({
              'canonical_path': None,
              'is_list': True,
              'name': 'String',
              'non_null': False,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Nullable list with non-nullable elements.',
            'name': 'null_list_non_null',
            'type': dict({
              'canonical_path': None,
              'is_list': True,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Non-nullable list with nullable elements.',
            'name': 'non_null_list_null',
            'type': dict({
              'canonical_path': None,
              'is_list': True,
              'name': 'String',
              'non_null': False,
              'non_null_list': True,
            }),
          }),
          dict({
            'description': 'Non-nullable list with non-nullable elements.',
            'name': 'non_null_list_non_null',
            'type': dict({
              'canonical_path': None,
              'is_list': True,
              'name': 'String',
              'non_null': True,
              'non_null_list': True,
            }),
          }),
          dict({
            'description': 'Custom element.',
            'name': 'custom',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'Int',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
        ]),
        'interfaces': list([
          dict({
            'canonical_path': 'schemaName.Annotation',
            'name': 'Annotation',
          }),
          dict({
            'canonical_path': 'schemaName.Error',
            'name': 'Error',
          }),
        ]),
        'name': 'AnnotationErrorImpl',
        'path': 'schemaName.AnnotationErrorImpl',
      }),
      'AnnotationImpl': dict({
        'description': '',
        'fields': list([
          dict({
            'description': 'Nullable element.',
            'name': 'null',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': False,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Non-nullable element.',
            'name': 'non_null',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Nullable list with nullable elements.',
            'name': 'null_list_null',
            'type': dict({
              'canonical_path': None,
              'is_list': True,
              'name': 'String',
              'non_null': False,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Nullable list with non-nullable elements.',
            'name': 'null_list_non_null',
            'type': dict({
              'canonical_path': None,
              'is_list': True,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Non-nullable list with nullable elements.',
            'name': 'non_null_list_null',
            'type': dict({
              'canonical_path': None,
              'is_list': True,
              'name': 'String',
              'non_null': False,
              'non_null_list': True,
            }),
          }),
          dict({
            'description': 'Non-nullable list with non-nullable elements.',
            'name': 'non_null_list_non_null',
            'type': dict({
              'canonical_path': None,
              'is_list': True,
              'name': 'String',
              'non_null': True,
              'non_null_list': True,
            }),
          }),
          dict({
            'description': 'Custom element.',
            'name': 'custom',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'Int',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
        ]),
        'interfaces': list([
          dict({
            'canonical_path': 'schemaName.Annotation',
            'name': 'Annotation',
          }),
        ]),
        'name': 'AnnotationImpl',
        'path': 'schemaName.AnnotationImpl',
      }),
      'CreatePokemonError': dict({
        'description': '',
        'name': 'CreatePokemonError',
        'path': 'schemaName.CreatePokemonError',
        'types': list([
          dict({
            'canonical_path': 'schemaName.InvalidPokemonNumberError',
            'name': 'InvalidPokemonNumberError',
          }),
          dict({
            'canonical_path': 'schemaName.PokemonExistsError',
            'name': 'PokemonExistsError',
          }),
        ]),
      }),
      'CreatePokemonInput': dict({
        'description': '',
        'fields': list([
          dict({
            'description': '',
            'name': 'no',
            'type': dict({
              'canonical_path': 'schemaName.PokemonNumber',
              'is_list': False,
              'name': 'PokemonNumber',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'name',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'types',
            'type': dict({
              'canonical_path': 'schemaName.Type',
              'is_list': True,
              'name': 'Type',
              'non_null': True,
              'non_null_list': True,
            }),
          }),
          dict({
            'description': '',
            'name': 'prevEvolutionNumbers',
            'type': dict({
              'canonical_path': 'schemaName.PokemonNumber',
              'is_list': True,
              'name': 'PokemonNumber',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'nextEvolutionNumbers',
            'type': dict({
              'canonical_path': 'schemaName.PokemonNumber',
              'is_list': True,
              'name': 'PokemonNumber',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
        ]),
        'name': 'CreatePokemonInput',
        'path': 'schemaName.CreatePokemonInput',
      }),
      'CreatePokemonResponse': dict({
        'description': '',
        'fields': list([
          dict({
            'description': '',
            'name': 'data',
            'type': dict({
              'canonical_path': 'schemaName.PokemonNode',
              'is_list': False,
              'name': 'PokemonNode',
              'non_null': False,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'error',
            'type': dict({
              'canonical_path': 'schemaName.CreatePokemonError',
              'is_list': False,
              'name': 'CreatePokemonError',
              'non_null': False,
              'non_null_list': False,
            }),
          }),
        ]),
        'interfaces': list([
        ]),
        'name': 'CreatePokemonResponse',
        'path': 'schemaName.CreatePokemonResponse',
      }),
      'Error': dict({
        'description': 'Generic error interface.',
        'fields': list([
          dict({
            'description': 'Error message.',
            'name': 'message',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
        ]),
        'interfaces': list([
        ]),
        'name': 'Error',
        'path': 'schemaName.Error',
      }),
      'ErrorInterface': dict({
        'description': 'Generic error interface.',
        'fields': list([
          dict({
            'description': 'Error message.',
            'name': 'message',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'code',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'Int',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
        ]),
        'interfaces': list([
          dict({
            'canonical_path': 'schemaName.Error',
            'name': 'Error',
          }),
        ]),
        'name': 'ErrorInterface',
        'path': 'schemaName.ErrorInterface',
      }),
      'EvolutionNode': dict({
        'description': '',
        'fields': list([
          dict({
            'description': '',
            'name': 'no',
            'type': dict({
              'canonical_path': 'schemaName.PokemonNumber',
              'is_list': False,
              'name': 'PokemonNumber',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'name',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
        ]),
        'interfaces': list([
        ]),
        'name': 'EvolutionNode',
        'path': 'schemaName.EvolutionNode',
      }),
      'InvalidPokemonNumberError': dict({
        'description': '',
        'fields': list([
          dict({
            'description': '',
            'name': 'message',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'no',
            'type': dict({
              'canonical_path': 'schemaName.PokemonNumber',
              'is_list': False,
              'name': 'PokemonNumber',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
        ]),
        'interfaces': list([
          dict({
            'canonical_path': 'schemaName.Error',
            'name': 'Error',
          }),
        ]),
        'name': 'InvalidPokemonNumberError',
        'path': 'schemaName.InvalidPokemonNumberError',
      }),
      'Mutation.createPokemon': dict({
        'arguments': list([
          dict({
            'description': 'Parameters which determines to Pokemon to be created.',
            'name': 'input',
            'type': dict({
              'canonical_path': 'schemaName.CreatePokemonInput',
              'is_list': False,
              'name': 'CreatePokemonInput',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '''
              If we should the existing Pokemon if a duplicate with the same
              ``no`` exists.
            ''',
            'name': 'overwrite',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'Boolean',
              'non_null': False,
              'non_null_list': False,
            }),
          }),
        ]),
        'description': '''
          Creates a Pokemon. If ``overwrite`` is true, overwrite the existing
          Pokemon if a duplicate with the same ``input.no`` exists.
        ''',
        'name': 'createPokemon',
        'path': 'schemaName.Mutation.createPokemon',
        'type': dict({
          'canonical_path': 'schemaName.CreatePokemonResponse',
          'is_list': False,
          'name': 'CreatePokemonResponse',
          'non_null': True,
          'non_null_list': False,
        }),
      }),
      'PokemonError': dict({
        'description': '',
        'name': 'PokemonError',
        'path': 'schemaName.PokemonError',
        'types': list([
          dict({
            'canonical_path': 'schemaName.InvalidPokemonNumberError',
            'name': 'InvalidPokemonNumberError',
          }),
          dict({
            'canonical_path': 'schemaName.PokemonNotFoundError',
            'name': 'PokemonNotFoundError',
          }),
        ]),
      }),
      'PokemonExistsError': dict({
        'description': '',
        'fields': list([
          dict({
            'description': '',
            'name': 'message',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'no',
            'type': dict({
              'canonical_path': 'schemaName.PokemonNumber',
              'is_list': False,
              'name': 'PokemonNumber',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
        ]),
        'interfaces': list([
          dict({
            'canonical_path': 'schemaName.Error',
            'name': 'Error',
          }),
        ]),
        'name': 'PokemonExistsError',
        'path': 'schemaName.PokemonExistsError',
      }),
      'PokemonNode': dict({
        'description': '',
        'fields': list([
          dict({
            'description': '',
            'name': 'no',
            'type': dict({
              'canonical_path': 'schemaName.PokemonNumber',
              'is_list': False,
              'name': 'PokemonNumber',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'name',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'types',
            'type': dict({
              'canonical_path': 'schemaName.TypeNode',
              'is_list': True,
              'name': 'TypeNode',
              'non_null': True,
              'non_null_list': True,
            }),
          }),
          dict({
            'description': '',
            'name': 'prevEvolutions',
            'type': dict({
              'canonical_path': 'schemaName.EvolutionNode',
              'is_list': True,
              'name': 'EvolutionNode',
              'non_null': True,
              'non_null_list': True,
            }),
          }),
          dict({
            'description': '',
            'name': 'nextEvolutions',
            'type': dict({
              'canonical_path': 'schemaName.EvolutionNode',
              'is_list': True,
              'name': 'EvolutionNode',
              'non_null': True,
              'non_null_list': True,
            }),
          }),
        ]),
        'interfaces': list([
        ]),
        'name': 'PokemonNode',
        'path': 'schemaName.PokemonNode',
      }),
      'PokemonNotFoundError': dict({
        'description': '',
        'fields': list([
          dict({
            'description': '',
            'name': 'message',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'String',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'no',
            'type': dict({
              'canonical_path': 'schemaName.PokemonNumber',
              'is_list': False,
              'name': 'PokemonNumber',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
        ]),
        'interfaces': list([
          dict({
            'canonical_path': 'schemaName.Error',
            'name': 'Error',
          }),
        ]),
        'name': 'PokemonNotFoundError',
        'path': 'schemaName.PokemonNotFoundError',
      }),
      'PokemonNumber': dict({
        'description': 'The Pokemon number, in the range of "0001" to "9999".',
        'name': 'PokemonNumber',
        'path': 'schemaName.PokemonNumber',
      }),
      'PokemonResponse': dict({
        'description': 'Response object for Query.pokemon.',
        'fields': list([
          dict({
            'description': 'The Pokemon specified by the query.',
            'name': 'data',
            'type': dict({
              'canonical_path': 'schemaName.PokemonNode',
              'is_list': False,
              'name': 'PokemonNode',
              'non_null': False,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': 'Errors encountered during the query.',
            'name': 'error',
            'type': dict({
              'canonical_path': 'schemaName.PokemonError',
              'is_list': False,
              'name': 'PokemonError',
              'non_null': False,
              'non_null_list': False,
            }),
          }),
        ]),
        'interfaces': list([
        ]),
        'name': 'PokemonResponse',
        'path': 'schemaName.PokemonResponse',
      }),
      'Query.pokemon': dict({
        'arguments': list([
          dict({
            'description': "The Pokemon number, in the range of '0001' and '9999'.",
            'name': 'no',
            'type': dict({
              'canonical_path': 'schemaName.PokemonNumber',
              'is_list': False,
              'name': 'PokemonNumber',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
        ]),
        'description': 'Queries for a Pokemon specified by ``no``.',
        'name': 'pokemon',
        'path': 'schemaName.Query.pokemon',
        'type': dict({
          'canonical_path': 'schemaName.PokemonResponse',
          'is_list': False,
          'name': 'PokemonResponse',
          'non_null': True,
          'non_null_list': False,
        }),
      }),
      'Query.weakness': dict({
        'arguments': list([
          dict({
            'description': 'The Pokemon number.',
            'name': 'no',
            'type': dict({
              'canonical_path': 'schemaName.PokemonNumber',
              'is_list': False,
              'name': 'PokemonNumber',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
        ]),
        'description': 'Queries the weaknesses of the Pokemon specified by ``no``.',
        'name': 'weakness',
        'path': 'schemaName.Query.weakness',
        'type': dict({
          'canonical_path': 'schemaName.WeaknessResponse',
          'is_list': False,
          'name': 'WeaknessResponse',
          'non_null': True,
          'non_null_list': False,
        }),
      }),
      'Type': dict({
        'description': 'Generation I Pokemon types.',
        'name': 'Type',
        'path': 'schemaName.Type',
        'values': list([
          dict({
            'description': 'Bug type.',
            'name': 'BUG',
          }),
          dict({
            'description': 'Dragon type.',
            'name': 'DRAGON',
          }),
          dict({
            'description': 'Electric type.',
            'name': 'ELECTRIC',
          }),
          dict({
            'description': 'Fighting type.',
            'name': 'FIGHTING',
          }),
          dict({
            'description': 'Fire type.',
            'name': 'FIRE',
          }),
          dict({
            'description': 'Flying type.',
            'name': 'FLYING',
          }),
          dict({
            'description': 'Ghost type.',
            'name': 'GHOST',
          }),
          dict({
            'description': 'Grass type.',
            'name': 'GRASS',
          }),
          dict({
            'description': 'Ground type.',
            'name': 'GROUND',
          }),
          dict({
            'description': 'Ice type.',
            'name': 'ICE',
          }),
          dict({
            'description': 'Normal type.',
            'name': 'NORMAL',
          }),
          dict({
            'description': 'Poison type.',
            'name': 'POISON',
          }),
          dict({
            'description': 'Psychic type.',
            'name': 'PSYCHIC',
          }),
          dict({
            'description': 'Rock type.',
            'name': 'ROCK',
          }),
          dict({
            'description': 'Water type.',
            'name': 'WATER',
          }),
        ]),
      }),
      'TypeNode': dict({
        'description': '',
        'fields': list([
          dict({
            'description': '',
            'name': 'id',
            'type': dict({
              'canonical_path': None,
              'is_list': False,
              'name': 'ID',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'type',
            'type': dict({
              'canonical_path': 'schemaName.Type',
              'is_list': False,
              'name': 'Type',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
        ]),
        'interfaces': list([
        ]),
        'name': 'TypeNode',
        'path': 'schemaName.TypeNode',
      }),
      'WeaknessError': dict({
        'description': '',
        'name': 'WeaknessError',
        'path': 'schemaName.WeaknessError',
        'types': list([
          dict({
            'canonical_path': 'schemaName.InvalidPokemonNumberError',
            'name': 'InvalidPokemonNumberError',
          }),
          dict({
            'canonical_path': 'schemaName.PokemonNotFoundError',
            'name': 'PokemonNotFoundError',
          }),
        ]),
      }),
      'WeaknessResponse': dict({
        'description': '',
        'fields': list([
          dict({
            'description': '',
            'name': 'data',
            'type': dict({
              'canonical_path': 'schemaName.Type',
              'is_list': True,
              'name': 'Type',
              'non_null': True,
              'non_null_list': False,
            }),
          }),
          dict({
            'description': '',
            'name': 'error',
            'type': dict({
              'canonical_path': 'schemaName.WeaknessError',
              'is_list': False,
              'name': 'WeaknessError',
              'non_null': False,
              'non_null_list': False,
            }),
          }),
        ]),
        'interfaces': list([
        ]),
        'name': 'WeaknessResponse',
        'path': 'schemaName.WeaknessResponse',
      }),
    }),
  })
# ---
