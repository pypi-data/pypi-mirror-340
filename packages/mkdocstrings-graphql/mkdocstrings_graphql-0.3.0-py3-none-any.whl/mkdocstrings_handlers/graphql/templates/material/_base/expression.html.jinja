{#- Template for expressions.

Renders an expression which is a tree-like structure representing a GraphQL
expression.
-#}

{% block logs scoped %}
    {#- Logging block. -#}
{% endblock logs %}

{%- macro crossref(annotation, backlink_type="") -%}
    {#- Outputs a cross-reference.

    Args:
        annotation (Annotation): The annotation to cross-reference.

    Returns:
        Either a cross-reference (using an autoref element) or the annotation
        itself.
    -#}
    <autoref identifier="{{ annotation.canonical_path }}"{% if backlink_type %} backlink-type="{{ backlink_type }}" backlink-anchor="{{ html_id }}"{% endif %} optional>{{ annotation.render }}</autoref>
{%- endmacro -%}

{%- macro render(expression, backlink_type="") -%}
    {#- Renders an expression.

    Args:
        expression: The expression to render.

    Returns:
        The rendered expression.
    -#}
    {%- if expression is string -%}
        {%- if signature -%}{{ expression|safe }}{%- else -%}{{ expression }}{%- endif -%}
    {%- elif expression.class_name == "Annotation" or expression.class_name == "TypeName" -%}
        {{ crossref(expression, backlink_type) }}
    {% else %}
        {{ expression.render }}
    {%- endif -%}
{%- endmacro -%}

{{ render(expression, backlink_type|default("")) }}
