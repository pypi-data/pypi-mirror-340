{#- Template for GraphQL enums.

Renders a GraphQL enum.

Context:
    gql_enum (EnumTypeNode): The enum to render.
    root (bool): Whether this is the root object, injected with `:::` in a
        Markdown page.
    heading_level (int): The HTML heading level to use.
    config (dict): The configuration options.
-#}

{% block logs scoped %}
    {#- Logging block. -#}
    {{ log.debug("Rendering " + gql_enum.path) }}
{% endblock logs %}

<div class="doc doc-node doc-gql-enum">
    {% with obj = gql_enum, html_id = gql_enum.path %}
        {% if root %}
            {% set show_full_path = config.show_root_full_path %}
        {% else %}
            {% set show_full_path = config.show_node_full_path %}
        {% endif %}

        {% set gql_enum_name = gql_enum.path if show_full_path else gql_enum.name %}

        {% filter heading(
                heading_level,
                role="gql_enum",
                id=html_id,
                class="doc doc-heading",
                toc_label=gql_enum.name,
            ) %}
            {% block heading scoped %}
                {#- Heading block -#}
                <span class="doc doc-object-name doc-gql-enum-name">{{ config.heading if config.heading and root else gql_enum_name }}</span>
            {% endblock heading %}
        {% endfilter %}

        <div class="doc doc-contents {% if root %}first{% endif %}">
            {% block docstring scoped %}
                {#- Docstring block. -#}
                {% with docstring_sections = gql_enum.docstring %}
                    {% include "docstring.html.jinja" %}
                {% endwith %}
            {% endblock docstring %}
        </div>
    {% endwith %}
</div>
