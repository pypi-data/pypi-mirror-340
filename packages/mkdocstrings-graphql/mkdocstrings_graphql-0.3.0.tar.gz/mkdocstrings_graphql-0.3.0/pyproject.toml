[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[project]
name = "mkdocstrings-graphql"
dynamic = []
description = "A GraphQL handler for mkdocstrings."
authors = [
    { name = "mmb L" },
]
license = "MIT"
license-files = [
    "LICENSE",
]
readme = "README.md"
keywords = []
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Documentation",
    "Topic :: Software Development",
    "Topic :: Utilities",
    "Typing :: Typed",
]
requires-python = ">=3.9"
dependencies = [
    "backports-strenum>=1.3.1 ; python_full_version < '3.11'",
    "graphql-core~=3.2.0",
    "griffe>=1.6.0",
    "mkdocs-autorefs~=1.4.0",
    "mkdocstrings>=0.18",
    "typing-extensions~=4.13.0",
]
version = "0.3.0"

[project.urls]
Repository = "https://github.com/mammothb/mkdocstrings-graphql"
Issues = "https://github.com/mammothb/mkdocstrings-graphql/issues"
Funding = "https://github.com/sponsors/mammothb"

[tool.basedpyright]
include = [
    "src",
    "tests",
]
exclude = [
    "tests/fixtures",
]
typeCheckingMode = "recommended"
reportAny = "none"
reportExplicitAny = "none"
reportUnusedCallResult = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUntypedClassDecorator = "none"
executionEnvironments = [
    { root = "src" },
    { root = "tests", reportAttributeAccessIssue = "none", reportPrivateUsage = "none" },
]

[tool.coverage.report]
omit = [
    "src/**/__init__.py",
]
exclude_also = [
    "if TYPE_CHECKING",
    "raise NotImplementedError",
]

[tool.coverage.run]
branch = true
parallel = true
source = [
    "src",
]

[tool.pdm.build]
package-dir = "src"
includes = [
    "src/mkdocstrings_handlers",
]
editable-backend = "editables"
excludes = [
    "**/.pytest_cache",
]
source-includes = [
    "config",
    "tests",
    "*.md",
    "LICENSE",
]

[tool.pdm.version]
source = "scm"

[tool.pytest.ini_options]
addopts = [
    "--cov",
    "--cov-report=xml",
    "--cov-report=html",
]
python_files = [
    "test_*.py",
]
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore:.*rsyncdir:DeprecationWarning:xdist",
]

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.format]
exclude = [
    "tests/fixtures/*.py",
]
docstring-code-format = true
docstring-code-line-length = 80

[tool.ruff.lint]
exclude = [
    "tests/fixtures/*.py",
]
select = [
    "ALL",
]
ignore = [
    "A001",
    "ANN204",
    "ANN401",
    "ARG005",
    "C901",
    "COM812",
    "D105",
    "D205",
    "D417",
    "E501",
    "ERA001",
    "G004",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PTH",
    "SLF001",
    "TRY003",
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = [
    "mkdocstrings_handlers.graphql",
]
known-third-party = [
    "graphql",
]

[tool.ruff.lint.per-file-ignores]
"!src/*/*.py" = [
    "D100",
]
"!src/**.py" = [
    "D101",
    "D102",
    "D103",
]
"tests/**.py" = [
    "EM101",
    "PLR2004",
    "S101",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.uv]
default-groups = [
    "maintain",
    "ci",
]

[dependency-groups]
maintain = [
    "build>=1.2",
    "twine>=5.1",
]
ci = [
    "basedpyright>=1.28",
    "pytest-cov>=5.0",
    "pytest-randomly>=3.15",
    "pytest-xdist>=3.6",
    "pytest>=8.2",
    "ruff>=0.11",
    "types-markdown>=3.6",
    "types-pyyaml>=6.0",
    "syrupy>=4.9.1",
]
