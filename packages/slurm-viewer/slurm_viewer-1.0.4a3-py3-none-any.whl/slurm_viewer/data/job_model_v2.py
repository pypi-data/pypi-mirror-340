# generated by datamodel-codegen:
#   filename:  sacct_tst.json

from __future__ import annotations

from pydantic import BaseModel, Field

from slurm_viewer.data.common_types import Number


class Comment(BaseModel):
    administrator: str | None = None
    job: str | None = None
    system: str | None = None


class Running(BaseModel):
    tasks: int | None = None


class Limits(BaseModel):
    max: Running


class Array(BaseModel):
    job_id: int | None = None
    limits: Limits
    task_id: Number | None = None
    task: str | None = None


class Association(BaseModel):
    account: str | None = None
    cluster: str | None = None
    partition: str | None = None
    user: str | None = None


class DerivedExitCode(BaseModel):
    status: str | None = None
    return_code: int


class System(BaseModel):
    seconds: int | None = None
    microseconds: int | None = None


class Time(BaseModel):
    elapsed: int | None = None
    end: int | None = None
    start: int | None = None
    suspended: int | None = None
    system: System | None = None
    total: System | None = None
    user: System | None = None
    eligible: int | None = None
    submission: int | None = None
    limit: Number | int | None = None


class Het(BaseModel):
    job_id: int
    job_offset: Number | None = None


class Mcs(BaseModel):
    label: str


class Required(BaseModel):
    CPUs: int = -1
    memory_per_cpu: Number = Number()
    memory_per_node: Number = Number()
    memory: int = -1


class Reservation(BaseModel):
    id: int = -1
    name: str | int = 'N/A'


class State(BaseModel):
    current: str
    reason: str


class Nodes(BaseModel):
    count: int
    range: str
    list: list[str]


class Tasks(BaseModel):
    count: int


class RequestedFrequency(BaseModel):
    min: Number | int | None = None
    max: Number | int | None = None


class CPU(BaseModel):
    requested_frequency: RequestedFrequency | int | None = None
    governor: str | list[str] = 'N/A'


class CPU1(BaseModel):
    actual_frequency: int


class Energy(BaseModel):
    consumed: Number | int = Number()


class Statistics(BaseModel):
    CPU: CPU1
    energy: Energy


class Id(BaseModel):
    job_id: int = -1
    step_id: str = 'N/A'


class Task(BaseModel):
    distribution: str


class Item(BaseModel):
    type: str
    name: str
    id: int
    count: int
    task: int
    node: str


class Resources(BaseModel):
    type: str | None = None
    name: str | None = None
    id: int | None = None
    count: int | None = None


class Requested(BaseModel):
    max: list[Item]
    min: list[Item]
    average: list[Resources]
    total: list[Resources]


class Tres(BaseModel):
    requested: Requested
    consumed: Requested
    allocated: list[Resources]


class Step1(BaseModel):
    id: Id | str = 'N/A'
    name: str = 'N/A'


class Step(BaseModel):
    time: Time
    exit_code: DerivedExitCode
    nodes: Nodes
    tasks: Tasks
    pid: str | None = None
    CPU: CPU
    kill_request_user: str | None = None
    state: str
    statistics: Statistics
    step: Step1
    task: Task
    tres: Tres


class Tres1(BaseModel):
    allocated: list[Resources]
    requested: list[Resources]


class Wckey(BaseModel):
    wckey: str
    flags: list


class JobModel(BaseModel):
    account: str | None = None
    allocation_nodes: int | None = None
    array: Array | None = None
    association: Association | None = None
    block: str | None = None
    cluster: str | None = None
    comment: Comment | None = None
    constraints: str | None = None
    container: str | None = None
    derived_exit_code: DerivedExitCode | None = None
    exit_code: DerivedExitCode | None = None
    extra: str | None = None
    failed_node: str | None = None
    flags: list[str] = Field(default_factory=list)
    group: str | None = None
    het: Het | None = None
    hold: bool | None = None
    job_id: int | None = None
    kill_request_user: str | None = None
    licenses: str | None = None
    mcs: Mcs | None = None
    name: str | None = None
    nodes: str | None = None
    partition: str | None = None
    priority: Number | int | None = None
    qos: str | None = None
    required: Required | None = None
    reservation: Reservation | None = None
    script: str | None = None
    state: State | None = None
    steps: list[Step] = Field(default_factory=list)
    submit_line: str | None = None
    time: Time | None = None
    tres: Tres1 | None = None
    used_gres: str | None = None
    user: str | None = None
    wckey: Wckey | None = None
    working_directory: str | None = None
