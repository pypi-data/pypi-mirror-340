name: Vjer Build and Release
run-name: Vjer Build and Release - ${{ github.run_id }}

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feature/*
      - release/*
  pull_request:
    branches:
      - main
      - feature/*
      - release/*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ARTIFACTS_DIR: artifacts
  GH_TOKEN: ${{ github.token }}
  VJER_ENV: development
  VJER_PYPROJECT_BUILD: true

jobs:
  test:
    uses: arisilon/shared-actions/.github/workflows/vjer.yml@released
    with:
      action: test
      os: ${{ matrix.os }}
      pyproject-build: "true"
      python-version: ${{ matrix.python-version }}
      vjer-local: true
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - "3.12"
          - "3.13"

  build:
    needs: test
    uses: arisilon/shared-actions/.github/workflows/vjer.yml@released
    with:
      action: build
      os: ubuntu-latest
      pyproject-build: "true"
      python-version: "3.12"
      vjer-local: true

  install-test:
    needs: build
    uses: arisilon/shared-actions/.github/workflows/install-test.yml@released
    with:
      os: ${{ matrix.os }}
      python-version: ${{ matrix.python-version }}
      test-action: "vjer test build release"
      test-dir: tests
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - "3.12"
          - "3.13"

  pre_release:
    needs: install-test
    if: (github.event_name != 'pull_request') && ((github.ref_name == 'main') || startsWith(github.ref_name, 'release/'))
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    environment: pre_release
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Install vjer
        run: pip install .
      - name: Prepare Git
        run: |
          git config user.name "${{ github.triggering_actor }}"
          git config user.email "${{ github.triggering_actor }}@users.noreply.github.com"
          git pull
      - name: Publish to Test PyPi
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: ${{ env.ARTIFACTS_DIR }}
      - name: Run post-publish steps
        run: vjer pre_release

  release:
    needs: pre_release
    if: (github.event_name != 'pull_request') && ((github.ref_name == 'main') || startsWith(github.ref_name, 'release/'))
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install vjer
        run: pip install .
      - name: Prepare Git
        run: |
          git config user.name "${{ github.triggering_actor }}"
          git config user.email "${{ github.triggering_actor }}@users.noreply.github.com"
          git pull
      - name: Run post-publish steps
        run: vjer release
      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          packages-dir: ${{ env.ARTIFACTS_DIR }}
      - name: Upload released artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACTS_DIR }}-released
          path: ${{ env.ARTIFACTS_DIR }}

# cSpell:ignore pypa pyproject
