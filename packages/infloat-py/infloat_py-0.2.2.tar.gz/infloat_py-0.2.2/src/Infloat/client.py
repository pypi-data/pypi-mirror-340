# This file was auto-generated by Fern from our API Definition.

import typing
import httpx
from .core.client_wrapper import SyncClientWrapper
from .core.request_options import RequestOptions
from .types.user_response import UserResponse
from .core.pydantic_utilities import parse_obj_as
from .errors.unprocessable_entity_error import UnprocessableEntityError
from .types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from .core.api_error import ApiError
from .types.token import Token
from .types.project_response import ProjectResponse
from .core.jsonable_encoder import jsonable_encoder
from .types.model_response import ModelResponse
from . import core
from .types.client_response import ClientResponse
from .types.client_config import ClientConfig
from .types.training_status import TrainingStatus
from .types.training_result_response import TrainingResultResponse
from .core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InfloatApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from Infloat import InfloatApi

    client = InfloatApi(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    def register_user_auth_register_post(
        self, *, name: str, email: str, password: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UserResponse:
        """
        Parameters
        ----------
        name : str

        email : str

        password : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.register_user_auth_register_post(
            name="name",
            email="email",
            password="password",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "auth/register",
            method="POST",
            json={
                "name": name,
                "email": email,
                "password": password,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UserResponse,
                    parse_obj_as(
                        type_=UserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def login_auth_login_post(
        self, *, email: str, password: str, request_options: typing.Optional[RequestOptions] = None
    ) -> Token:
        """
        Parameters
        ----------
        email : str

        password : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Token
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.login_auth_login_post(
            email="email",
            password="password",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "auth/login",
            method="POST",
            json={
                "email": email,
                "password": password,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Token,
                    parse_obj_as(
                        type_=Token,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_user_me_auth_me_get(
        self, *, authorization: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> UserResponse:
        """
        Parameters
        ----------
        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_user_me_auth_me_get()
        """
        _response = self._client_wrapper.httpx_client.request(
            "auth/me",
            method="GET",
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UserResponse,
                    parse_obj_as(
                        type_=UserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_projects_projects_get(
        self,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ProjectResponse]:
        """
        Parameters
        ----------
        skip : typing.Optional[int]

        limit : typing.Optional[int]

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ProjectResponse]
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_projects_projects_get()
        """
        _response = self._client_wrapper.httpx_client.request(
            "projects",
            method="GET",
            params={
                "skip": skip,
                "limit": limit,
            },
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ProjectResponse],
                    parse_obj_as(
                        type_=typing.List[ProjectResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_project_projects_post(
        self,
        *,
        name: str,
        authorization: typing.Optional[str] = None,
        description: typing.Optional[str] = OMIT,
        is_public: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProjectResponse:
        """
        Parameters
        ----------
        name : str

        authorization : typing.Optional[str]

        description : typing.Optional[str]

        is_public : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectResponse
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.create_project_projects_post(
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "projects",
            method="POST",
            json={
                "name": name,
                "description": description,
                "is_public": is_public,
            },
            headers={
                "content-type": "application/json",
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProjectResponse,
                    parse_obj_as(
                        type_=ProjectResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_project_projects_project_id_get(
        self,
        project_id: str,
        *,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProjectResponse:
        """
        Parameters
        ----------
        project_id : str

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectResponse
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_project_projects_project_id_get(
            project_id="project_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}",
            method="GET",
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProjectResponse,
                    parse_obj_as(
                        type_=ProjectResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_models_projects_project_id_models_get(
        self,
        project_id: str,
        *,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ModelResponse]:
        """
        Parameters
        ----------
        project_id : str

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ModelResponse]
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_models_projects_project_id_models_get(
            project_id="project_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}/models",
            method="GET",
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ModelResponse],
                    parse_obj_as(
                        type_=typing.List[ModelResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def upload_model_projects_project_id_models_post(
        self,
        project_id: str,
        *,
        file: core.File,
        model_type: typing.Optional[str] = None,
        version: typing.Optional[str] = None,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ModelResponse:
        """
        Parameters
        ----------
        project_id : str

        file : core.File
            See core.File for more documentation

        model_type : typing.Optional[str]

        version : typing.Optional[str]

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelResponse
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.upload_model_projects_project_id_models_post(
            project_id="project_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}/models",
            method="POST",
            params={
                "model_type": model_type,
                "version": version,
            },
            data={},
            files={
                "file": file,
            },
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ModelResponse,
                    parse_obj_as(
                        type_=ModelResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_clients_projects_project_id_clients_get(
        self,
        project_id: str,
        *,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ClientResponse]:
        """
        Parameters
        ----------
        project_id : str

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ClientResponse]
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_clients_projects_project_id_clients_get(
            project_id="project_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}/clients",
            method="GET",
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ClientResponse],
                    parse_obj_as(
                        type_=typing.List[ClientResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def register_client_projects_project_id_clients_post(
        self,
        project_id: str,
        *,
        name: typing.Optional[str] = None,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ClientResponse:
        """
        Parameters
        ----------
        project_id : str

        name : typing.Optional[str]

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ClientResponse
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.register_client_projects_project_id_clients_post(
            project_id="project_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}/clients",
            method="POST",
            params={
                "name": name,
            },
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ClientResponse,
                    parse_obj_as(
                        type_=ClientResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_client_config_client_config_get(
        self, *, api_key: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> ClientConfig:
        """
        Parameters
        ----------
        api_key : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ClientConfig
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_client_config_client_config_get()
        """
        _response = self._client_wrapper.httpx_client.request(
            "client/config",
            method="GET",
            headers={
                "X-API-Key": str(api_key) if api_key is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ClientConfig,
                    parse_obj_as(
                        type_=ClientConfig,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_trainings_projects_project_id_trainings_get(
        self,
        project_id: str,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[TrainingStatus]:
        """
        Parameters
        ----------
        project_id : str

        skip : typing.Optional[int]

        limit : typing.Optional[int]

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TrainingStatus]
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_trainings_projects_project_id_trainings_get(
            project_id="project_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}/trainings",
            method="GET",
            params={
                "skip": skip,
                "limit": limit,
            },
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[TrainingStatus],
                    parse_obj_as(
                        type_=typing.List[TrainingStatus],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def start_training_projects_project_id_trainings_post(
        self,
        project_id: str,
        *,
        model_id: str,
        authorization: typing.Optional[str] = None,
        target_rounds: typing.Optional[int] = OMIT,
        min_clients: typing.Optional[int] = OMIT,
        max_clients: typing.Optional[int] = OMIT,
        aggregation_strategy: typing.Optional[str] = OMIT,
        config: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TrainingStatus:
        """
        Parameters
        ----------
        project_id : str

        model_id : str

        authorization : typing.Optional[str]

        target_rounds : typing.Optional[int]

        min_clients : typing.Optional[int]

        max_clients : typing.Optional[int]

        aggregation_strategy : typing.Optional[str]

        config : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TrainingStatus
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.start_training_projects_project_id_trainings_post(
            project_id="project_id",
            model_id="model_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}/trainings",
            method="POST",
            json={
                "model_id": model_id,
                "target_rounds": target_rounds,
                "min_clients": min_clients,
                "max_clients": max_clients,
                "aggregation_strategy": aggregation_strategy,
                "config": config,
            },
            headers={
                "content-type": "application/json",
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TrainingStatus,
                    parse_obj_as(
                        type_=TrainingStatus,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_training_status_trainings_training_id_get(
        self,
        training_id: str,
        *,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TrainingStatus:
        """
        Parameters
        ----------
        training_id : str

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TrainingStatus
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_training_status_trainings_training_id_get(
            training_id="training_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"trainings/{jsonable_encoder(training_id)}",
            method="GET",
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TrainingStatus,
                    parse_obj_as(
                        type_=TrainingStatus,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_training_results_trainings_training_id_results_get(
        self,
        training_id: str,
        *,
        round_num: typing.Optional[int] = None,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[TrainingResultResponse]:
        """
        Parameters
        ----------
        training_id : str

        round_num : typing.Optional[int]

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TrainingResultResponse]
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_training_results_trainings_training_id_results_get(
            training_id="training_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"trainings/{jsonable_encoder(training_id)}/results",
            method="GET",
            params={
                "round_num": round_num,
            },
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[TrainingResultResponse],
                    parse_obj_as(
                        type_=typing.List[TrainingResultResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def submit_metrics_client_submit_metrics_post(
        self,
        *,
        client_id: str,
        round: int,
        loss: float,
        accuracy: float,
        training_samples: int,
        training_time: float,
        api_key: typing.Optional[str] = None,
        additional_metrics: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        client_id : str

        round : int

        loss : float

        accuracy : float

        training_samples : int

        training_time : float

        api_key : typing.Optional[str]

        additional_metrics : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.submit_metrics_client_submit_metrics_post(
            client_id="client_id",
            round=1,
            loss=1.1,
            accuracy=1.1,
            training_samples=1,
            training_time=1.1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "client/submit-metrics",
            method="POST",
            json={
                "client_id": client_id,
                "round": round,
                "loss": loss,
                "accuracy": accuracy,
                "training_samples": training_samples,
                "training_time": training_time,
                "additional_metrics": additional_metrics,
            },
            headers={
                "content-type": "application/json",
                "X-API-Key": str(api_key) if api_key is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def health_check_health_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from Infloat import InfloatApi

        client = InfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.health_check_health_get()
        """
        _response = self._client_wrapper.httpx_client.request(
            "health",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncInfloatApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from Infloat import AsyncInfloatApi

    client = AsyncInfloatApi(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    async def register_user_auth_register_post(
        self, *, name: str, email: str, password: str, request_options: typing.Optional[RequestOptions] = None
    ) -> UserResponse:
        """
        Parameters
        ----------
        name : str

        email : str

        password : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.register_user_auth_register_post(
                name="name",
                email="email",
                password="password",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "auth/register",
            method="POST",
            json={
                "name": name,
                "email": email,
                "password": password,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UserResponse,
                    parse_obj_as(
                        type_=UserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def login_auth_login_post(
        self, *, email: str, password: str, request_options: typing.Optional[RequestOptions] = None
    ) -> Token:
        """
        Parameters
        ----------
        email : str

        password : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Token
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.login_auth_login_post(
                email="email",
                password="password",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "auth/login",
            method="POST",
            json={
                "email": email,
                "password": password,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Token,
                    parse_obj_as(
                        type_=Token,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_user_me_auth_me_get(
        self, *, authorization: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> UserResponse:
        """
        Parameters
        ----------
        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_user_me_auth_me_get()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "auth/me",
            method="GET",
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UserResponse,
                    parse_obj_as(
                        type_=UserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_projects_projects_get(
        self,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ProjectResponse]:
        """
        Parameters
        ----------
        skip : typing.Optional[int]

        limit : typing.Optional[int]

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ProjectResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_projects_projects_get()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "projects",
            method="GET",
            params={
                "skip": skip,
                "limit": limit,
            },
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ProjectResponse],
                    parse_obj_as(
                        type_=typing.List[ProjectResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_project_projects_post(
        self,
        *,
        name: str,
        authorization: typing.Optional[str] = None,
        description: typing.Optional[str] = OMIT,
        is_public: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProjectResponse:
        """
        Parameters
        ----------
        name : str

        authorization : typing.Optional[str]

        description : typing.Optional[str]

        is_public : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectResponse
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.create_project_projects_post(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "projects",
            method="POST",
            json={
                "name": name,
                "description": description,
                "is_public": is_public,
            },
            headers={
                "content-type": "application/json",
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProjectResponse,
                    parse_obj_as(
                        type_=ProjectResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_project_projects_project_id_get(
        self,
        project_id: str,
        *,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProjectResponse:
        """
        Parameters
        ----------
        project_id : str

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectResponse
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_project_projects_project_id_get(
                project_id="project_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}",
            method="GET",
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProjectResponse,
                    parse_obj_as(
                        type_=ProjectResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_models_projects_project_id_models_get(
        self,
        project_id: str,
        *,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ModelResponse]:
        """
        Parameters
        ----------
        project_id : str

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ModelResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_models_projects_project_id_models_get(
                project_id="project_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}/models",
            method="GET",
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ModelResponse],
                    parse_obj_as(
                        type_=typing.List[ModelResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def upload_model_projects_project_id_models_post(
        self,
        project_id: str,
        *,
        file: core.File,
        model_type: typing.Optional[str] = None,
        version: typing.Optional[str] = None,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ModelResponse:
        """
        Parameters
        ----------
        project_id : str

        file : core.File
            See core.File for more documentation

        model_type : typing.Optional[str]

        version : typing.Optional[str]

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelResponse
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.upload_model_projects_project_id_models_post(
                project_id="project_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}/models",
            method="POST",
            params={
                "model_type": model_type,
                "version": version,
            },
            data={},
            files={
                "file": file,
            },
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ModelResponse,
                    parse_obj_as(
                        type_=ModelResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_clients_projects_project_id_clients_get(
        self,
        project_id: str,
        *,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ClientResponse]:
        """
        Parameters
        ----------
        project_id : str

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ClientResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_clients_projects_project_id_clients_get(
                project_id="project_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}/clients",
            method="GET",
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ClientResponse],
                    parse_obj_as(
                        type_=typing.List[ClientResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def register_client_projects_project_id_clients_post(
        self,
        project_id: str,
        *,
        name: typing.Optional[str] = None,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ClientResponse:
        """
        Parameters
        ----------
        project_id : str

        name : typing.Optional[str]

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ClientResponse
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.register_client_projects_project_id_clients_post(
                project_id="project_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}/clients",
            method="POST",
            params={
                "name": name,
            },
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ClientResponse,
                    parse_obj_as(
                        type_=ClientResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_client_config_client_config_get(
        self, *, api_key: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> ClientConfig:
        """
        Parameters
        ----------
        api_key : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ClientConfig
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_client_config_client_config_get()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "client/config",
            method="GET",
            headers={
                "X-API-Key": str(api_key) if api_key is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ClientConfig,
                    parse_obj_as(
                        type_=ClientConfig,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_trainings_projects_project_id_trainings_get(
        self,
        project_id: str,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[TrainingStatus]:
        """
        Parameters
        ----------
        project_id : str

        skip : typing.Optional[int]

        limit : typing.Optional[int]

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TrainingStatus]
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_trainings_projects_project_id_trainings_get(
                project_id="project_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}/trainings",
            method="GET",
            params={
                "skip": skip,
                "limit": limit,
            },
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[TrainingStatus],
                    parse_obj_as(
                        type_=typing.List[TrainingStatus],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def start_training_projects_project_id_trainings_post(
        self,
        project_id: str,
        *,
        model_id: str,
        authorization: typing.Optional[str] = None,
        target_rounds: typing.Optional[int] = OMIT,
        min_clients: typing.Optional[int] = OMIT,
        max_clients: typing.Optional[int] = OMIT,
        aggregation_strategy: typing.Optional[str] = OMIT,
        config: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TrainingStatus:
        """
        Parameters
        ----------
        project_id : str

        model_id : str

        authorization : typing.Optional[str]

        target_rounds : typing.Optional[int]

        min_clients : typing.Optional[int]

        max_clients : typing.Optional[int]

        aggregation_strategy : typing.Optional[str]

        config : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TrainingStatus
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.start_training_projects_project_id_trainings_post(
                project_id="project_id",
                model_id="model_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"projects/{jsonable_encoder(project_id)}/trainings",
            method="POST",
            json={
                "model_id": model_id,
                "target_rounds": target_rounds,
                "min_clients": min_clients,
                "max_clients": max_clients,
                "aggregation_strategy": aggregation_strategy,
                "config": config,
            },
            headers={
                "content-type": "application/json",
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TrainingStatus,
                    parse_obj_as(
                        type_=TrainingStatus,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_training_status_trainings_training_id_get(
        self,
        training_id: str,
        *,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TrainingStatus:
        """
        Parameters
        ----------
        training_id : str

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TrainingStatus
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_training_status_trainings_training_id_get(
                training_id="training_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"trainings/{jsonable_encoder(training_id)}",
            method="GET",
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TrainingStatus,
                    parse_obj_as(
                        type_=TrainingStatus,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_training_results_trainings_training_id_results_get(
        self,
        training_id: str,
        *,
        round_num: typing.Optional[int] = None,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[TrainingResultResponse]:
        """
        Parameters
        ----------
        training_id : str

        round_num : typing.Optional[int]

        authorization : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TrainingResultResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_training_results_trainings_training_id_results_get(
                training_id="training_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"trainings/{jsonable_encoder(training_id)}/results",
            method="GET",
            params={
                "round_num": round_num,
            },
            headers={
                "authorization": str(authorization) if authorization is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[TrainingResultResponse],
                    parse_obj_as(
                        type_=typing.List[TrainingResultResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def submit_metrics_client_submit_metrics_post(
        self,
        *,
        client_id: str,
        round: int,
        loss: float,
        accuracy: float,
        training_samples: int,
        training_time: float,
        api_key: typing.Optional[str] = None,
        additional_metrics: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        client_id : str

        round : int

        loss : float

        accuracy : float

        training_samples : int

        training_time : float

        api_key : typing.Optional[str]

        additional_metrics : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.submit_metrics_client_submit_metrics_post(
                client_id="client_id",
                round=1,
                loss=1.1,
                accuracy=1.1,
                training_samples=1,
                training_time=1.1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "client/submit-metrics",
            method="POST",
            json={
                "client_id": client_id,
                "round": round,
                "loss": loss,
                "accuracy": accuracy,
                "training_samples": training_samples,
                "training_time": training_time,
                "additional_metrics": additional_metrics,
            },
            headers={
                "content-type": "application/json",
                "X-API-Key": str(api_key) if api_key is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def health_check_health_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from Infloat import AsyncInfloatApi

        client = AsyncInfloatApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.health_check_health_get()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "health",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
