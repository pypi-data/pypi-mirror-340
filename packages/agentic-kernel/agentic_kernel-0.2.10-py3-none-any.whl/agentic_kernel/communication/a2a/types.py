"""A2A Protocol Data Types

This module defines the data types for the A2A protocol based on the A2A specification.
These types are used by the other components of the A2A protocol implementation.
"""

from enum import Enum
from typing import Any, Union

from pydantic import BaseModel, Field, root_validator


# JSON-RPC 2.0 Message Types
class JSONRPCMessage(BaseModel):
    """Base class for JSON-RPC 2.0 messages."""
    
    jsonrpc: str = Field("2.0", const=True)
    id: str | int | None = None


class JSONRPCRequest(JSONRPCMessage):
    """JSON-RPC 2.0 request message."""
    
    method: str
    params: dict[str, Any] | list[Any]


class JSONRPCError(BaseModel):
    """JSON-RPC 2.0 error object."""
    
    code: int
    message: str
    data: Any | None = None


class JSONRPCResponse(JSONRPCMessage):
    """JSON-RPC 2.0 response message."""
    
    result: Any | None = None
    error: JSONRPCError | None = None
    
    @root_validator
    def check_result_or_error(cls, values):
        """Validate that either result or error is present, but not both."""
        result = values.get("result")
        error = values.get("error")
        if (result is None and error is None) or (result is not None and error is not None):
            raise ValueError("Either result or error must be present, but not both")
        return values


# A2A Task State
class TaskState(str, Enum):
    """Task lifecycle states as defined in the A2A protocol."""
    
    SUBMITTED = "submitted"
    WORKING = "working"
    INPUT_REQUIRED = "input-required"
    COMPLETED = "completed"
    CANCELED = "canceled"
    FAILED = "failed"
    UNKNOWN = "unknown"


# A2A Data Objects
class FileContent(BaseModel):
    """File content representation in the A2A protocol."""
    
    name: str | None = None
    mime_type: str | None = None
    bytes: str | None = None  # Base64 encoded
    uri: str | None = None
    
    @root_validator
    def check_bytes_or_uri(cls, values):
        """Validate that either bytes or uri is present, but not both."""
        bytes_val = values.get("bytes")
        uri = values.get("uri")
        if (bytes_val is not None and uri is not None):
            raise ValueError("bytes and uri are mutually exclusive")
        return values


class TextPart(BaseModel):
    """Text content part in the A2A protocol."""
    
    type: str = Field("text", const=True)
    text: str
    metadata: dict[str, Any] | None = None


class FilePart(BaseModel):
    """File content part in the A2A protocol."""
    
    type: str = Field("file", const=True)
    file: FileContent
    metadata: dict[str, Any] | None = None


class DataPart(BaseModel):
    """Structured data part in the A2A protocol."""
    
    type: str = Field("data", const=True)
    data: dict[str, Any]
    metadata: dict[str, Any] | None = None


Part = Union[TextPart, FilePart, DataPart]


class Message(BaseModel):
    """Message between user and agent in the A2A protocol."""
    
    role: str  # "user" or "agent"
    parts: list[Part]
    metadata: dict[str, Any] | None = None


class Artifact(BaseModel):
    """Output generated by a task in the A2A protocol."""
    
    name: str | None = None
    description: str | None = None
    parts: list[Part]
    index: int = 0
    append: bool | None = None
    last_chunk: bool | None = None
    metadata: dict[str, Any] | None = None


class TaskStatus(BaseModel):
    """Status of a task in the A2A protocol."""
    
    state: TaskState
    message: Message | None = None
    timestamp: str  # ISO 8601 timestamp


class Task(BaseModel):
    """Task representation in the A2A protocol."""
    
    id: str
    session_id: str | None = None
    status: TaskStatus
    artifacts: list[Artifact] | None = None
    history: list[Message] | None = None
    metadata: dict[str, Any] | None = None


class AgentProvider(BaseModel):
    """Provider information in the A2A protocol."""
    
    name: str
    url: str | None = None
    logo_url: str | None = None


class AgentCapabilities(BaseModel):
    """Agent capabilities in the A2A protocol."""
    
    streaming: bool = False
    push_notifications: bool = False
    state_transition_history: bool = False


class AgentAuthentication(BaseModel):
    """Authentication information in the A2A protocol."""
    
    type: str  # e.g., "api_key", "oauth", "jwt"
    description: str | None = None
    required: bool = True
    configuration: dict[str, Any] | None = None


class AgentSkill(BaseModel):
    """Skill information in the A2A protocol."""
    
    id: str
    name: str
    description: str | None = None
    tags: list[str] | None = None
    examples: list[str] | None = None
    input_modes: list[str] | None = None
    output_modes: list[str] | None = None


class AgentCard(BaseModel):
    """Agent metadata in the A2A protocol."""
    
    name: str
    description: str | None = None
    url: str
    provider: AgentProvider | None = None
    version: str
    documentation_url: str | None = None
    capabilities: AgentCapabilities
    authentication: AgentAuthentication | None = None
    default_input_modes: list[str]
    default_output_modes: list[str]
    skills: list[AgentSkill]


class PushNotificationConfig(BaseModel):
    """Configuration for push notifications in the A2A protocol."""
    
    url: str
    token: str | None = None
    authentication: dict[str, Any] | None = None


class TaskPushNotificationConfig(BaseModel):
    """Task-specific push notification configuration in the A2A protocol."""
    
    id: str
    push_notification: PushNotificationConfig


# A2A Event Types
class TaskStatusUpdateEvent(BaseModel):
    """Event for task status updates in the A2A protocol."""
    
    id: str
    status: TaskStatus
    final: bool = False
    metadata: dict[str, Any] | None = None


class TaskArtifactUpdateEvent(BaseModel):
    """Event for task artifact updates in the A2A protocol."""
    
    id: str
    artifact: Artifact
    final: bool = False
    metadata: dict[str, Any] | None = None


# A2A Error Codes
class A2AErrorCode(int, Enum):
    """Error codes for the A2A protocol."""
    
    # Standard JSON-RPC error codes
    PARSE_ERROR = -32700
    INVALID_REQUEST = -32600
    METHOD_NOT_FOUND = -32601
    INVALID_PARAMS = -32602
    INTERNAL_ERROR = -32603
    
    # A2A-specific error codes
    TASK_NOT_FOUND = -32001
    TASK_NOT_CANCELABLE = -32002
    PUSH_NOTIFICATION_NOT_SUPPORTED = -32003
    UNSUPPORTED_OPERATION = -32004
    CONTENT_TYPE_NOT_SUPPORTED = -32005


# A2A RPC Method Parameters
class TaskSendParams(BaseModel):
    """Parameters for the tasks/send and tasks/sendSubscribe methods."""
    
    id: str | None = None  # If not provided, a new task is created
    session_id: str | None = None
    message: Message
    push_notification: PushNotificationConfig | None = None
    history_length: int | None = None
    metadata: dict[str, Any] | None = None


class TaskQueryParams(BaseModel):
    """Parameters for the tasks/get and tasks/resubscribe methods."""
    
    id: str
    history_length: int | None = None


class TaskIdParams(BaseModel):
    """Parameters for the tasks/cancel method."""
    
    id: str