# coding: utf-8

"""
    Zedblock Apis

    API documentation for the Zedblock

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateBoardDTO(BaseModel):
    """
    UpdateBoardDTO
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description of the board")
    status: Optional[StrictStr] = Field(default=None, description="Status of the board")
    assignees: Optional[List[StrictStr]] = Field(default=None, description="List of assignees for the board")
    coordinator: Optional[StrictStr] = Field(default=None, description="Coordinator of the board")
    title: Optional[StrictStr] = Field(default=None, description="Title of board")
    __properties: ClassVar[List[str]] = ["description", "status", "assignees", "coordinator", "title"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Prospecting', 'Negotiation', 'Agreement Signed', 'Active Partnership', 'Ended', 'Not Started', 'In Progress', 'Pending Review', 'Compliant', 'Non-Compliant', 'Planning', 'Testing', 'Launched', 'Completed', 'Draft', 'In Review', 'Approved', 'Published', 'Archived', 'Recruitment', 'Onboarding', 'Active', 'Leave of Absence', 'Terminated', 'New', 'Engaged', 'Inactive', 'VIP', 'Churned', 'Awaiting Approval', 'Paid', 'Overdue', 'Cancelled', 'Idea', 'In Design', 'In Development', 'Ready for Launch', 'Discontinued', 'Pending', 'Processing', 'Shipped', 'Delivered', 'Returned', 'Contacted', 'Qualified', 'Proposal Sent', 'Won', 'Lost', 'Open', 'Escalated', 'Pending Customer Response', 'Resolved', 'Closed']):
            raise ValueError("must be one of enum values ('Prospecting', 'Negotiation', 'Agreement Signed', 'Active Partnership', 'Ended', 'Not Started', 'In Progress', 'Pending Review', 'Compliant', 'Non-Compliant', 'Planning', 'Testing', 'Launched', 'Completed', 'Draft', 'In Review', 'Approved', 'Published', 'Archived', 'Recruitment', 'Onboarding', 'Active', 'Leave of Absence', 'Terminated', 'New', 'Engaged', 'Inactive', 'VIP', 'Churned', 'Awaiting Approval', 'Paid', 'Overdue', 'Cancelled', 'Idea', 'In Design', 'In Development', 'Ready for Launch', 'Discontinued', 'Pending', 'Processing', 'Shipped', 'Delivered', 'Returned', 'Contacted', 'Qualified', 'Proposal Sent', 'Won', 'Lost', 'Open', 'Escalated', 'Pending Customer Response', 'Resolved', 'Closed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateBoardDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateBoardDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "status": obj.get("status"),
            "assignees": obj.get("assignees"),
            "coordinator": obj.get("coordinator"),
            "title": obj.get("title")
        })
        return _obj


