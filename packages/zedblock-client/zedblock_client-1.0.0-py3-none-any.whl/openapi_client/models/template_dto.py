# coding: utf-8

"""
    Zedblock Apis

    API documentation for the Zedblock

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.component_dto import ComponentDto
from openapi_client.models.status_dto import StatusDto
from typing import Optional, Set
from typing_extensions import Self

class TemplateDto(BaseModel):
    """
    TemplateDto
    """ # noqa: E501
    id: StrictStr = Field(description="ID of the template")
    title: StrictStr = Field(description="Title of the template")
    description: StrictStr = Field(description="Description of the template")
    accent_color: StrictStr = Field(description="Accent color of the template", alias="accentColor")
    statuses: Optional[List[StatusDto]] = Field(default=None, description="Statuses associated with the template")
    components: Optional[List[ComponentDto]] = Field(default=None, description="Components associated with the template")
    __properties: ClassVar[List[str]] = ["id", "title", "description", "accentColor", "statuses", "components"]

    @field_validator('id')
    def id_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['support_tickets', 'leads', 'orders', 'products', 'finance', 'customers', 'human_resources', 'reports', 'marketing', 'compliance', 'partnerships']):
            raise ValueError("must be one of enum values ('support_tickets', 'leads', 'orders', 'products', 'finance', 'customers', 'human_resources', 'reports', 'marketing', 'compliance', 'partnerships')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in statuses (list)
        _items = []
        if self.statuses:
            for _item_statuses in self.statuses:
                if _item_statuses:
                    _items.append(_item_statuses.to_dict())
            _dict['statuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in components (list)
        _items = []
        if self.components:
            for _item_components in self.components:
                if _item_components:
                    _items.append(_item_components.to_dict())
            _dict['components'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "accentColor": obj.get("accentColor"),
            "statuses": [StatusDto.from_dict(_item) for _item in obj["statuses"]] if obj.get("statuses") is not None else None,
            "components": [ComponentDto.from_dict(_item) for _item in obj["components"]] if obj.get("components") is not None else None
        })
        return _obj


