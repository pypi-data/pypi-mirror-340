# https://pro.coinmarketcap.com/account
# [-1] - –æ—Ç—Å–µ—á—å —Å–ø—Ä–∞–≤–∞ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É
import json
import time
from datetime import datetime
from functools import wraps
from typing import Optional, Union

from coinmarketcapapi import CoinMarketCapAPI
from secret import secret
from helpers.constants import *
from logger import log
from notify import Telega
from notify.modules.interfaces.isender import ISender
from prettytable import PrettyTable



def api_except(func):
    @wraps(func)
    def inner(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            instance = args[0]
            current_key = instance._current_apikey
            log.error(f'{current_key} is limit ?, {e}')
            return None

    return inner


class MarketCapMonitor:
    def __init__(self, notification: ISender):
        self.apikeys = secret.coinmarketcap.apikeys
        self.data = self._load_db()
        self.notify = notification
        self.api = self._api_generator()
        self._current_apikey: Optional[str] = None

    def _api_generator(self):
        while True:
            for apikey in self.apikeys:
                self._current_apikey = apikey
                yield CoinMarketCapAPI(apikey)

    @staticmethod
    def _load_db() -> dict:
        if not os.path.exists(DBFILE):
            with open(DBFILE, 'w') as f:
                f.write('{}')

        with open(DBFILE) as f:
            return json.load(f)

    def _update_db(self) -> None:
        with open(DBFILE, 'w') as f:
            json.dump(self.data, f)

    @api_except
    def _get_price(self, symbol, money) -> Optional[Union[float, int]]:  # –∏–ª–∏ Optional[float | int]
        api = next(self.api)
        r = api.cryptocurrency_quotes_latest(symbol=symbol, convert=money)
        price = r.data[symbol][0]['quote'][money]['price']
        if money == 'BTC':
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
            result = int(price * SATOSHIS_PER_BTC)
        elif money == 'USD':
            result = round(price, 4)
        else:
            raise ValueError(f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {money}, —Ç–æ–ª—å–∫–æ BTC –∏ USD')
        return result

    # –£–±—Ä–∞–ª–∏ coins –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ —á–∏—Ç–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞/–∞—Ç—Ä–∏–±—É—Ç–∞ –∫–ª–∞—Å—Å–∞
    def start(self):
        t = PrettyTable()
        t.field_names = ['–ú–æ–Ω–µ—Ç–∞', "–¢–µ–∫—É—â—è—è —Ü–µ–Ω–∞", "–†–æ—Å—Ç", "–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞"]
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        coins_to_monitor = MONITOR_COINS  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ config, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        percent_threshold = PERCENT  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ config, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        data_updated = False  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ë–î

        for pair_config in coins_to_monitor:
            msg = ''
            notify_status = False
            symbol, money, crop, pair_key = None, None, None, None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

            try:
                # --- –õ–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
                if '[' in pair_config:
                    base_pair, crop_str = pair_config.split('[')
                    crop = int(crop_str.replace(']', ''))
                    pair_key = base_pair  # –ö–ª—é—á –¥–ª—è –ë–î –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
                    symbol, money = base_pair.split('/')
                else:
                    pair_key = pair_config  # –ö–ª—é—á –¥–ª—è –ë–î - –ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                    symbol, money = pair_config.split('/')
                    crop = None
                # --- –ö–æ–Ω–µ—Ü –ø–∞—Ä—Å–∏–Ω–≥–∞ ---

                cur_price_raw = self._get_price(symbol, money)

                # *** –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—à–∏–±–∫–∏ API (–≤–æ–∑–≤—Ä–∞—Ç None) ***
                if cur_price_raw is None:
                    log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {pair_key}. –ü—Ä–æ–ø—É—Å–∫ —ç—Ç–æ–≥–æ —Ü–∏–∫–ª–∞.")
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É-–∑–∞–≥–ª—É—à–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
                    t.add_row([pair_key, "–û—à–∏–±–∫–∞ API", "N/A", self.data.get(pair_key, "N/A")])
                    continue  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–Ω–µ—Ç–µ

                # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±—Ä–µ–∑–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                cur_price = cur_price_raw
                if crop:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º isinstance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞
                    cur_price = float(str(cur_price_raw)[:crop]) if isinstance(cur_price_raw, float) else int(
                        str(cur_price_raw)[:crop])

                if pair_key == 'BTC/USD':
                    try:
                        # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –¥–ª—è BTC/USD
                        cur_price = int(cur_price)
                    except (ValueError, TypeError):
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ cur_price –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ int
                        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É BTC/USD ({cur_price}) –≤ int.")
                        t.add_row([pair_key, "–û—à–∏–±–∫–∞ —Ç–∏–ø–∞", "N/A", self.data.get(pair_key, "N/A")])
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø–∞—Ä—É, –µ—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î, –µ—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ –Ω–æ–≤–∞—è
                if pair_key not in self.data:
                    log.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã –¥–ª—è {pair_key}: {cur_price}")
                    self.data[pair_key] = cur_price
                    # self._update_db() # –ü–µ—Ä–µ–º–µ—Å—Ç–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞
                    data_updated = True
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç %
                    t.add_row([pair_key, cur_price, "+0%", cur_price])
                    continue

                old_price = self.data[pair_key]

                # *** –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ ZeroDivisionError ***
                if old_price == 0:
                    if cur_price == 0:
                        raw_change_percent = 0.0
                    else:
                        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç 0 –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                        log.warning(f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ –¥–ª—è {pair_key} –±—ã–ª–∞ 0. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.")
                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∏ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ
                        t.add_row([pair_key, cur_price, "N/A (–°—Ç–∞—Ä–∞—è=0)", old_price])
                        continue
                else:
                    # –†–∞—Å—á–µ—Ç "—Å—ã—Ä–æ–≥–æ" –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    raw_change_percent = ((cur_price - old_price) / old_price) * 100

                # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                change_percent_display = round(raw_change_percent)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –ø–æ "—Å—ã—Ä–æ–º—É" –∑–Ω–∞—á–µ–Ω–∏—é
                if raw_change_percent <= -percent_threshold:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º emoji –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    msg = f"üîª {pair_key} —É–ø–∞–ª–∞ –Ω–∞ {abs(change_percent_display)}% [{cur_price}] (–ë—ã–ª–æ: {old_price})"
                    notify_status = True
                elif raw_change_percent >= percent_threshold:
                    msg = f"üîº {pair_key} –ø–æ–≤—ã—Å–∏–ª–∞—Å—å –Ω–∞ {change_percent_display}% [{cur_price}] (–ë—ã–ª–æ: {old_price})"
                    notify_status = True

                if notify_status:
                    log.info(msg)
                    self.notify.send(msg)
                    self.data[pair_key] = cur_price  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
                    # self._update_db() # –ü–µ—Ä–µ–º–µ—Å—Ç–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞
                    data_updated = True

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É, –∏—Å–ø–æ–ª—å–∑—É—è —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                percent_str = f"{change_percent_display:+}%"  # –ó–Ω–∞–∫ + –¥–æ–±–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                t.add_row([pair_key, cur_price, percent_str, old_price])

            except Exception as e:
                # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
                log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–Ω–µ—Ç—ã '{pair_config}': {e}", exc_info=True)
                t.add_row([pair_config, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", "N/A", "N/A"])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –ë–î –æ–¥–∏–Ω —Ä–∞–∑ –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if data_updated:
            self._update_db()

        # –í—ã–≤–æ–¥
        # os.system('cls' if os.name == 'nt' else 'clear') # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        print("\n" * 5)  # –ú–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        print(t)
        log.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now()}")
        time.sleep(SLEEP)  # –ü–∞—É–∑–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, —Ç.–∫. start –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–∏–∫–ª–µ


def main():
    telega = Telega(secret.telegram.chat_crypto)
    monitor = MarketCapMonitor(telega)
    while True:
        monitor.start()


if __name__ == '__main__':
    while True:
        try:
            main()
        except Exception as e:
            log.error(e)
            time.sleep(10)
