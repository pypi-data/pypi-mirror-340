---
description: 
globs: 
alwaysApply: false
---
# Best Practices for Environment Variables with direnv

**Description:** Guidelines for effectively managing environment variables using `.env` files and the `direnv` tool to ensure security and streamline development workflows.

## Core Principles

1.  **Automatic Loading:** Use `direnv` to automatically load environment variables specific to a project when you navigate into its directory and unload them when you leave. This avoids manual sourcing and polluting the global environment.
2.  **Security First:** Never commit sensitive information (API keys, passwords, secret tokens) in `.env` files to version control (e.g., Git).
3.  **Simplicity:** Keep `.envrc` files simple and focused primarily on loading variables from `.env`.
4. avoid inline comment in .env file
## Setup and Configuration

1.  **Installation & Hooking:** Ensure `direnv` is installed and correctly hooked into your shell (`.bashrc`, `.zshrc`, etc.). Refer to the main project `README.md` or the [official direnv documentation](mdc:https:/direnv.net/docs/installation.html) for setup instructions. An incorrect hook is a common source of issues.
2.  **`.gitignore`:** **Immediately** add `.env` to your project's `.gitignore` file to prevent accidental commits of secrets.
3.  **`.env.example`:** Create and commit a `.env.example` file. This file should list all the *required* environment variables for the project, possibly with placeholder or non-sensitive default values, but **without any real secrets**. This serves as documentation for other developers.
4.  **`.envrc` File:**
    *   In your project root, create a `.envrc` file.
    *   For standard use where your secrets are in a `.env` file in the same directory, the content should simply be:
        ```bash
        dotenv
        ```
    *   Use `source_up` if you need `direnv` to search parent directories for a `.env` file, but prefer `dotenv` for clarity when possible.
    *   Avoid putting complex shell logic directly into `.envrc`. If needed, script it separately and call the script from `.envrc`.
    *   **Crucially:** After creating or modifying `.envrc`, you **must** run `direnv allow .` in that directory to explicitly trust and enable it.

## Usage

1.  **Activation:** Simply `cd` into the project directory. If `direnv` is set up correctly and you've run `direnv allow .`, it will automatically load variables from `.env`. You should see a message from `direnv` indicating it loaded the environment.
2.  **Deactivation:** `cd` out of the project directory. `direnv` will automatically unload the variables loaded for that project.
3.  **Reloading:** If you change the `.env` file while inside the directory, `direnv` *won't* automatically reload it. You can force a reload by running `direnv reload` or simply `cd ..` and `cd` back into the directory.

## Interaction with Virtual Environments (e.g., `uv venv`)

*   `direnv` and Python virtual environments (like those managed by `uv venv`) serve different but complementary purposes.
*   **Virtual Environment:** Isolates Python packages and dependencies (`uv sync` installs packages *inside* `.venv`).
*   **`direnv`:** Manages *shell* environment variables (like `OPENAI_API_KEY`, `DATABASE_URL`) needed by your application or development tools *within* that shell session.
*   Activate your virtual environment (`source .venv/bin/activate`) *and* let `direnv` manage your shell variables for the best development experience.

## Troubleshooting

*   **"direnv: command not found"**: `direnv` is not installed or not in your shell's `PATH`. Revisit installation.
*   **Variables not loading**:
    *   Check if `direnv` is hooked correctly into your shell config (`eval "$(direnv hook your_shell)"`). Restart your shell after changes.
    *   Ensure you ran `direnv allow .` in the project directory.
    *   Verify the `.envrc` file exists and contains the correct command (`dotenv`).
    *   Verify the `.env` file exists in the same directory (if using `dotenv`).
*   **Security Warning:** If `direnv` shows a security warning, it means `.envrc` has changed or hasn't been allowed yet. Run `direnv allow .` if you trust the changes.

By following these practices, you can maintain a clean, secure, and efficient way to handle environment variables across different projects.
 
