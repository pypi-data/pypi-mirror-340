\chapter{The \texttt{utils freerooms} subcommands and the \texttt{cli.utils.freerooms} module}%
\label{cli.utils.freerooms}

In this chapter we introduce the subommands found under [[nytid utils 
freerooms]],
it's the [[cli.utils.freerooms]] module.
We want to add tools to easily filter and find free rooms that we're interested 
in for our courses.

The overall structure is like this.
<<freerooms.py>>=
import logging
import typer
import typerconf
from typing_extensions import Annotated

<<imports>>

cli = typer.Typer(name="freerooms",
                  help="Finding free rooms for courses")

<<constants>>
<<helper functions>>
<<argument and option definitions>>
<<subcommands>>

if __name__ == "__main__":
  cli()
@


\section{Setting the URL to free rooms CSV}

We want a command that sets the URL to the free rooms CSV file in the config.
Something like this:
\begin{center}
[[nytid utils freerooms set-url https://cloud.timeedit.net/.../xyz.csv]]
\end{center}
So that we don't have to set it manually.

We want to add a helpful description of how to find the right URL to add.
This is another reason to make this a command.
<<[[set-url]] doc>>=
Search for all the rooms that you're interested in in TimeEdit.
Set the relevant time intervals to something future proof: you
don't want it to be too short, then you have to update the URL
too often. Get the URL for downloading the schedule in CSV
format.
@

Then the command itself simply sets the given URL in the config.
<<subcommands>>=
@cli.command(name="set-url")
def set_url_cmd(<<arg [[url]] for URL to CSV file>>):
  """
  <<[[set-url]] doc>>
  """
  try:
    typerconf.set(FREEROOMS_URL, url)
  except Exception as err:
    logging.error(f"Can't set URL: {err}")
    raise typer.Exit(1)
<<constants>>=
FREEROOMS_URL = "utils.freerooms.url"
<<arg [[url]] for URL to CSV file>>=
url: Annotated[str, typer.Argument(help="URL to CSV file with "
                                        "TimeEdit export")]
@


\section{The format of the CSV file we get}

The CSV file that we get from TimeEdit looks like in 
\cref{fig:TimeEditCSVexport}.
We can see that the rooms sought for are listed as a comma separated list in 
cell A3 (the highlighted cell in \cref{fig:TimeEditCSVexport}).
However, we see that those names differ slightly from the room names in the 
last column (the rightmost column in \cref{fig:TimeEditCSVexport}).
There are some extra characters that we must filter out.
Otherwise, the dates and times are in ISO format.

\begin{figure}
  \centering
  \begin{fullwidth}
  \includegraphics[width=\columnwidth]{figs/timeedit-csv-export.png}
  \caption{The CSV file we get from TimeEdit.}
  \label{fig:TimeEditCSVexport}
  \end{fullwidth}
\end{figure}

We only need columns A, B, C, D and F (the rightmost) and the cell A3 for our 
purposes.
We get the date and time from columns A--D, we get all rooms from cell A3 and 
the booked ones from column F.
This way we can compute which of the rooms we're interested in are free.

Let's write a function that given such a file gives us a CSV (list of tuples) 
with the free rooms at the different dates and times.
<<helper functions>>=
def free_rooms(csv_url: str) -> list[tuple]:
  """
  Given a URL or path to a TimeEdit CSV file ([[csv_url]]),
  return a CSV (list of tuples) of the free rooms:

  [(start, end, unbooked_rooms), ...]

  where start and end are datetime objects and unbooked_rooms is a set of 
  strings.
  """
  results = []

  <<let [[csv_file]] be the opened CSV file we get from [[csv_url]]>>
  with csv_file:
    reader = csv.reader(csv_file)

    # Skip the first two rows
    next(reader)
    next(reader)
    # Get the row containing the sought for rooms
    rooms_row = next(reader)
    <<let [[all_rooms]] be the set of all rooms based on [[rooms_row]]>>

    # skip the header row
    next(reader)

    # read the data
    for row in reader:
      # Get the date and time from the first four columns
      start_date = datetime.date.fromisoformat(row[0])
      start_time = datetime.time.fromisoformat(row[1])
      start = datetime.datetime.combine(start_date, start_time)

      end_date = datetime.date.fromisoformat(row[2])
      end_time = datetime.time.fromisoformat(row[3])
      end = datetime.datetime.combine(end_date, end_time)

      # Get the booked rooms from the last column,
      # these are already clean.
      booked_rooms = set(row[7].split(","))
      unbooked_rooms = all_rooms - booked_rooms

      results.append((start, end, unbooked_rooms))

  return results
<<imports>>=
import csv
import datetime
@

We want to extract the rooms from the first column.
This is a comma separated list of the rooms sought for, but unfortunately with 
extra characters.
We can use the [[str.split()]] method to split the string into a list of 
strings.
Then we can use the [[str.strip()]] method to remove the extra characters---as 
they're only at the start.
<<let [[all_rooms]] be the set of all rooms based on [[rooms_row]]>>=
all_rooms = rooms_row[0].split(",")
extra_chars = " $-ยง"
all_rooms = set([room.strip(extra_chars) for room in all_rooms])
@

Finally, let's turn our attention to how to open the file.
We want to be able to open the file from a URL or a local path.
So we must test for this.
We can use the [[urlparse]] function from the [[urllib.parse]] module to 
determine if the given URL is a local path or a URL.
If the scheme is empty, then it's a local file.
Otherwise, it's a URL.
<<let [[csv_file]] be the opened CSV file we get from [[csv_url]]>>=
parsed_url = urllib.parse.urlparse(csv_url)
if parsed_url.scheme == "":
  csv_file = open(csv_url, "r")
else:
  csv_file = urllib.request.urlopen(csv_url)
<<imports>>=
import urllib.parse
import urllib.request
@


\section{The \texttt{show} command}

We want a command that shows the free rooms in a human readable format.
\begin{center}
[[nytid utils freerooms show]]
\end{center}
This function will simply call the [[free_rooms]] function and print the CSV 
data that it returns.
<<[[show]] doc>>=
Shows date and time and which rooms are free.
<<subcommands>>=
@cli.command(name="show")
def show_cmd(delimiter: delimiter_opt = "\t"):
  """
  <<[[show]] doc>>
  """
  try:
    rooms_url = typerconf.get(FREEROOMS_URL)
  except Exception as err:
    logging.error(f"Can't get URL from config: {err}")
    logging.info("Please set it with "
                 "'nytid utils freerooms set-url <url>'")
    raise typer.Exit(1)

  try:
    csv_out = csv.writer(sys.stdout, delimiter=delimiter)

    for start, end, rooms in free_rooms(rooms_url):
      csv_out.writerow([start, end, ", ".join(sorted(rooms))])
  except Exception as err:
    logging.error(f"Can't get free rooms: {err}")
    raise typer.Exit(1)
<<imports>>=
import sys
<<argument and option definitions>>=
delimiter_opt = Annotated[str,
                          typer.Option("-d", "--delimiter",
                          help="CSV delimiter, default tab.",
                          show_default=False)]
