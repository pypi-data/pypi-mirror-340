# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: oaas_sdk2_py/pb/oprc-data.proto, oaas_sdk2_py/pb/oprc-invoke.proto
# plugin: python-betterproto
# This file has been @generated

from typing import TYPE_CHECKING


if TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from pydantic.dataclasses import dataclass

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase
from pydantic import model_validator
from pydantic.dataclasses import rebuild_dataclass


class ResponseStatus(betterproto.Enum):
    OKAY = 0
    INVALID_REQUEST = 1
    APP_ERROR = 2
    SYSTEM_ERROR = 3

    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        from pydantic_core import core_schema

        return core_schema.int_schema(ge=0)


@dataclass(eq=False, repr=False)
class EmptyResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StatsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StatsResponse(betterproto.Message):
    shards: "list[ShardStats]" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ShardStats(betterproto.Message):
    collection: str = betterproto.string_field(1)
    partition_id: int = betterproto.uint32_field(2)
    shard_id: int = betterproto.uint64_field(3)
    count: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class ValueResponse(betterproto.Message):
    value: "ValData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ObjectResponse(betterproto.Message):
    obj: "ObjData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ObjData(betterproto.Message):
    metadata: "ObjMeta | None" = betterproto.message_field(1, optional=True)
    entries: "dict[int, ValData]" = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ObjMeta(betterproto.Message):
    cls_id: str = betterproto.string_field(1)
    partition_id: int = betterproto.uint32_field(2)
    object_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class ValData(betterproto.Message):
    byte: "bytes | None" = betterproto.bytes_field(1, optional=True, group="data")
    crdt_map: "bytes | None" = betterproto.bytes_field(2, optional=True, group="data")


@dataclass(eq=False, repr=False)
class SingleObjectRequest(betterproto.Message):
    cls_id: str = betterproto.string_field(1)
    partition_id: int = betterproto.uint32_field(2)
    object_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class SingleKeyRequest(betterproto.Message):
    cls_id: str = betterproto.string_field(1)
    partition_id: int = betterproto.uint32_field(2)
    object_id: int = betterproto.uint64_field(3)
    key: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SetKeyRequest(betterproto.Message):
    cls_id: str = betterproto.string_field(1)
    partition_id: int = betterproto.int32_field(2)
    object_id: int = betterproto.uint64_field(3)
    key: int = betterproto.uint32_field(4)
    value: "ValData" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class SetObjectRequest(betterproto.Message):
    cls_id: str = betterproto.string_field(1)
    partition_id: int = betterproto.int32_field(2)
    object_id: int = betterproto.uint64_field(3)
    object: "ObjData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CreateCollectionRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    partition_count: int = betterproto.int32_field(2)
    replica_count: int = betterproto.int32_field(3)
    shard_assignments: "list[ShardAssignment]" = betterproto.message_field(4)
    shard_type: str = betterproto.string_field(6)
    options: "dict[str, str]" = betterproto.map_field(
        7, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    invocations: "InvocationRoute | None" = betterproto.message_field(8, optional=True)


@dataclass(eq=False, repr=False)
class ShardAssignment(betterproto.Message):
    primary: "int | None" = betterproto.uint64_field(1, optional=True)
    replica: "list[int]" = betterproto.uint64_field(2)
    shard_ids: "list[int]" = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class InvocationRoute(betterproto.Message):
    fn_routes: "dict[str, FuncInvokeRoute]" = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class FuncInvokeRoute(betterproto.Message):
    url: str = betterproto.string_field(1)
    stateless: bool = betterproto.bool_field(2)
    standby: bool = betterproto.bool_field(3)
    active_group: "list[int]" = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class CreateCollectionResponse(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ShardGroup(betterproto.Message):
    shard_ids: "list[int]" = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class ObjectInvocationRequest(betterproto.Message):
    partition_id: int = betterproto.uint32_field(1)
    object_id: int = betterproto.uint64_field(2)
    cls_id: str = betterproto.string_field(3)
    fn_id: str = betterproto.string_field(4)
    options: "dict[str, str]" = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    payload: bytes = betterproto.bytes_field(6)


@dataclass(eq=False, repr=False)
class InvocationRequest(betterproto.Message):
    partition_id: int = betterproto.uint32_field(1)
    cls_id: str = betterproto.string_field(3)
    fn_id: str = betterproto.string_field(4)
    options: "dict[str, str]" = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    payload: bytes = betterproto.bytes_field(6)


@dataclass(eq=False, repr=False)
class InvocationResponse(betterproto.Message):
    payload: "bytes | None" = betterproto.bytes_field(1, optional=True)
    status: "ResponseStatus" = betterproto.enum_field(2)


class DataServiceStub(betterproto.ServiceStub):
    async def get(
        self,
        single_object_request: "SingleObjectRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "ObjectResponse":
        return await self._unary_unary(
            "/oprc.DataService/Get",
            single_object_request,
            ObjectResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_value(
        self,
        single_key_request: "SingleKeyRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "ValueResponse":
        return await self._unary_unary(
            "/oprc.DataService/GetValue",
            single_key_request,
            ValueResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete(
        self,
        single_object_request: "SingleObjectRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "EmptyResponse":
        return await self._unary_unary(
            "/oprc.DataService/Delete",
            single_object_request,
            EmptyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set(
        self,
        set_object_request: "SetObjectRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "EmptyResponse":
        return await self._unary_unary(
            "/oprc.DataService/Set",
            set_object_request,
            EmptyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_value(
        self,
        set_key_request: "SetKeyRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "EmptyResponse":
        return await self._unary_unary(
            "/oprc.DataService/SetValue",
            set_key_request,
            EmptyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def merge(
        self,
        set_object_request: "SetObjectRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "ObjectResponse":
        return await self._unary_unary(
            "/oprc.DataService/Merge",
            set_object_request,
            ObjectResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stats(
        self,
        stats_request: "StatsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "StatsResponse":
        return await self._unary_unary(
            "/oprc.DataService/Stats",
            stats_request,
            StatsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class OprcFunctionStub(betterproto.ServiceStub):
    async def invoke_fn(
        self,
        invocation_request: "InvocationRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "InvocationResponse":
        return await self._unary_unary(
            "/oprc.OprcFunction/InvokeFn",
            invocation_request,
            InvocationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def invoke_obj(
        self,
        object_invocation_request: "ObjectInvocationRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "InvocationResponse":
        return await self._unary_unary(
            "/oprc.OprcFunction/InvokeObj",
            object_invocation_request,
            InvocationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class DataServiceBase(ServiceBase):

    async def get(
        self, single_object_request: "SingleObjectRequest"
    ) -> "ObjectResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_value(
        self, single_key_request: "SingleKeyRequest"
    ) -> "ValueResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete(
        self, single_object_request: "SingleObjectRequest"
    ) -> "EmptyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set(self, set_object_request: "SetObjectRequest") -> "EmptyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_value(self, set_key_request: "SetKeyRequest") -> "EmptyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def merge(self, set_object_request: "SetObjectRequest") -> "ObjectResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stats(self, stats_request: "StatsRequest") -> "StatsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get(
        self, stream: "grpclib.server.Stream[SingleObjectRequest, ObjectResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get(request)
        await stream.send_message(response)

    async def __rpc_get_value(
        self, stream: "grpclib.server.Stream[SingleKeyRequest, ValueResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_value(request)
        await stream.send_message(response)

    async def __rpc_delete(
        self, stream: "grpclib.server.Stream[SingleObjectRequest, EmptyResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete(request)
        await stream.send_message(response)

    async def __rpc_set(
        self, stream: "grpclib.server.Stream[SetObjectRequest, EmptyResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set(request)
        await stream.send_message(response)

    async def __rpc_set_value(
        self, stream: "grpclib.server.Stream[SetKeyRequest, EmptyResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_value(request)
        await stream.send_message(response)

    async def __rpc_merge(
        self, stream: "grpclib.server.Stream[SetObjectRequest, ObjectResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.merge(request)
        await stream.send_message(response)

    async def __rpc_stats(
        self, stream: "grpclib.server.Stream[StatsRequest, StatsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.stats(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/oprc.DataService/Get": grpclib.const.Handler(
                self.__rpc_get,
                grpclib.const.Cardinality.UNARY_UNARY,
                SingleObjectRequest,
                ObjectResponse,
            ),
            "/oprc.DataService/GetValue": grpclib.const.Handler(
                self.__rpc_get_value,
                grpclib.const.Cardinality.UNARY_UNARY,
                SingleKeyRequest,
                ValueResponse,
            ),
            "/oprc.DataService/Delete": grpclib.const.Handler(
                self.__rpc_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                SingleObjectRequest,
                EmptyResponse,
            ),
            "/oprc.DataService/Set": grpclib.const.Handler(
                self.__rpc_set,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetObjectRequest,
                EmptyResponse,
            ),
            "/oprc.DataService/SetValue": grpclib.const.Handler(
                self.__rpc_set_value,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetKeyRequest,
                EmptyResponse,
            ),
            "/oprc.DataService/Merge": grpclib.const.Handler(
                self.__rpc_merge,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetObjectRequest,
                ObjectResponse,
            ),
            "/oprc.DataService/Stats": grpclib.const.Handler(
                self.__rpc_stats,
                grpclib.const.Cardinality.UNARY_UNARY,
                StatsRequest,
                StatsResponse,
            ),
        }


class OprcFunctionBase(ServiceBase):

    async def invoke_fn(
        self, invocation_request: "InvocationRequest"
    ) -> "InvocationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def invoke_obj(
        self, object_invocation_request: "ObjectInvocationRequest"
    ) -> "InvocationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_invoke_fn(
        self, stream: "grpclib.server.Stream[InvocationRequest, InvocationResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.invoke_fn(request)
        await stream.send_message(response)

    async def __rpc_invoke_obj(
        self,
        stream: "grpclib.server.Stream[ObjectInvocationRequest, InvocationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.invoke_obj(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/oprc.OprcFunction/InvokeFn": grpclib.const.Handler(
                self.__rpc_invoke_fn,
                grpclib.const.Cardinality.UNARY_UNARY,
                InvocationRequest,
                InvocationResponse,
            ),
            "/oprc.OprcFunction/InvokeObj": grpclib.const.Handler(
                self.__rpc_invoke_obj,
                grpclib.const.Cardinality.UNARY_UNARY,
                ObjectInvocationRequest,
                InvocationResponse,
            ),
        }


rebuild_dataclass(StatsResponse)  # type: ignore
rebuild_dataclass(ValueResponse)  # type: ignore
rebuild_dataclass(ObjectResponse)  # type: ignore
rebuild_dataclass(ObjData)  # type: ignore
rebuild_dataclass(SetKeyRequest)  # type: ignore
rebuild_dataclass(SetObjectRequest)  # type: ignore
rebuild_dataclass(CreateCollectionRequest)  # type: ignore
rebuild_dataclass(InvocationRoute)  # type: ignore
rebuild_dataclass(ObjectInvocationRequest)  # type: ignore
rebuild_dataclass(InvocationRequest)  # type: ignore
rebuild_dataclass(InvocationResponse)  # type: ignore
