{"version":3,"file":"lib_index_js.2f47bbb591bdce29a215.js","mappings":"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","sources":["webpack://nbdotrun/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nimport { INotebookTracker, NotebookPanel } from '@jupyterlab/notebook';\n\nimport { CodeCellModel, CodeCell, ICellModel } from '@jupyterlab/cells';\n\nconst PLUGIN_NAME = 'nbdotrun';\nconst PLUGIN_ID = `${PLUGIN_NAME}:plugin`;\n\nfunction throttle(fn: () => void, delay: number) {\n  let timeout: number | null = null;\n  return () => {\n    if (timeout) {\n      return;\n    }\n    timeout = window.setTimeout(() => {\n      fn();\n      timeout = null;\n    }, delay);\n  };\n}\n\nfunction escapeRegExp(s: string): string {\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction shouldAutoExecute(text: string, triggerSymbol: string) {\n  const lines = text.trimEnd().split('\\n');\n  const last = lines[lines.length - 1];\n  const regex = new RegExp(`^\\\\s*${escapeRegExp(triggerSymbol)}\\\\s*$`);\n  return regex.test(last);\n}\n\nfunction attachNotebookListener(panel: NotebookPanel, triggerSymbol: string) {\n  // track which cells have been connected\n  const connectedCells = new WeakSet<ICellModel>();\n\n  panel.context.ready.then(() => {\n    const notebook = panel.content;\n    const model = notebook.model;\n\n    if (!model) {\n      console.error(`${PLUGIN_NAME} Failed to retrieve notebook model`);\n      return;\n    }\n\n    const throttledScan = throttle(() => {\n      for (let i = 0; i < model.cells.length; i++) {\n        const cellWidget = notebook.widgets[i];\n        const cellModel = model.cells.get(i);\n\n        if (cellModel?.type === 'code' && cellWidget instanceof CodeCell) {\n          const codeModel = cellModel as CodeCellModel;\n          const source = codeModel.sharedModel.getSource();\n\n          if (shouldAutoExecute(source, triggerSymbol)) {\n            console.log(\n              `${PLUGIN_NAME} Executing cell ${i} due to terminal symbol match: \"${triggerSymbol}\"`\n            );\n\n            // remove the trigger line\n            const newSource = source\n              .trimEnd()\n              .split('\\n')\n              .slice(0, -1)\n              .join('\\n');\n\n            codeModel.sharedModel.setSource(newSource);\n\n            void CodeCell.execute(cellWidget, panel.sessionContext);\n          }\n        }\n      }\n    }, 300); // debounce time in ms\n\n    // Initial hookup for existing cells\n    for (let i = 0; i < model.cells.length; i++) {\n      const cellModel = model.cells.get(i);\n      if (!connectedCells.has(cellModel) && cellModel.type === 'code') {\n        const codeModel = cellModel as CodeCellModel;\n        codeModel.contentChanged.connect(throttledScan);\n        connectedCells.add(codeModel);\n      }\n    }\n\n    model.cells.changed.connect((_, changes) => {\n      throttledScan();\n\n      if (changes.type === 'add') {\n        changes.newValues.forEach(cell => {\n          if (!connectedCells.has(cell) && cell.type === 'code') {\n            const codeModel = cell as CodeCellModel;\n            codeModel.contentChanged.connect(throttledScan);\n            connectedCells.add(codeModel);\n          }\n        });\n      }\n    });\n  });\n}\n\nfunction activateNbdotrun(\n  app: JupyterFrontEnd,\n  notebooks: INotebookTracker,\n  settings?: ISettingRegistry\n) {\n  console.log(`JupyterLab extension ${PLUGIN_NAME} is activated!`);\n\n  let triggerSymbol = '.';\n\n  if (settings) {\n    settings\n      .load(PLUGIN_ID)\n      .then(settings => {\n        triggerSymbol = settings.get('triggerSymbol').composite as string;\n      })\n      .catch(reason => {\n        console.error(`${PLUGIN_NAME} Failed to load settings`, reason);\n      });\n  }\n\n  notebooks.widgetAdded.connect((_, panel) => {\n    attachNotebookListener(panel, triggerSymbol);\n  });\n\n  notebooks.forEach(panel => attachNotebookListener(panel, triggerSymbol));\n}\n\n/**\n * Initialization data for the nbdotrun extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: PLUGIN_ID,\n  description:\n    'A JupyterLab extension that will listen for code cell changes and run if ending in dot (`.`).',\n  autoStart: true,\n  requires: [INotebookTracker],\n  optional: [ISettingRegistry],\n  activate: activateNbdotrun\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}