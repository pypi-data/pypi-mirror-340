# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from .types.create_access_token_request_scope import CreateAccessTokenRequestScope
from ...core.request_options import RequestOptions
from ..types.access_token import AccessToken
from ...core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AuthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_access_token(
        self,
        *,
        scope: typing.Optional[CreateAccessTokenRequestScope] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccessToken:
        """
        Create a new API token for the logged in user

        Parameters
        ----------
        scope : typing.Optional[CreateAccessTokenRequestScope]
            The scope, or a space-delimited list of scopes the token is requested for
            in: body

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccessToken
            Contains the details of the token which can be used by the user to access the API

        Examples
        --------
        from speechify import Speechify

        client = Speechify(
            token="YOUR_TOKEN",
        )
        client.tts.auth.create_access_token()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/auth/token",
            method="POST",
            json={
                "scope": scope,
                "grant_type": "client_credentials",
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AccessToken,
                    parse_obj_as(
                        type_=AccessToken,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAuthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_access_token(
        self,
        *,
        scope: typing.Optional[CreateAccessTokenRequestScope] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccessToken:
        """
        Create a new API token for the logged in user

        Parameters
        ----------
        scope : typing.Optional[CreateAccessTokenRequestScope]
            The scope, or a space-delimited list of scopes the token is requested for
            in: body

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccessToken
            Contains the details of the token which can be used by the user to access the API

        Examples
        --------
        import asyncio

        from speechify import AsyncSpeechify

        client = AsyncSpeechify(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.tts.auth.create_access_token()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/auth/token",
            method="POST",
            json={
                "scope": scope,
                "grant_type": "client_credentials",
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AccessToken,
                    parse_obj_as(
                        type_=AccessToken,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
