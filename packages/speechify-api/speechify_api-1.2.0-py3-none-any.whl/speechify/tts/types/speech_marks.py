# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .nested_chunk import NestedChunk
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class SpeechMarks(UniversalBaseModel):
    """
    It is used to annotate the audio data with metadata about the synthesis process, like word timing or phoneme details.
    """

    chunks: typing.Optional[typing.List[NestedChunk]] = pydantic.Field(default=None)
    """
    Array of NestedChunk, each providing detailed segment information within the synthesized speech.
    """

    end: typing.Optional[int] = None
    end_time: typing.Optional[float] = None
    start: typing.Optional[int] = None
    start_time: typing.Optional[float] = None
    type: typing.Optional[str] = None
    value: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
