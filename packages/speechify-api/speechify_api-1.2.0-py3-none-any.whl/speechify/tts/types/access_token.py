# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .access_token_scope import AccessTokenScope
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class AccessToken(UniversalBaseModel):
    access_token: typing.Optional[str] = None
    expires_in: typing.Optional[int] = pydantic.Field(default=None)
    """
    Expiration time, in seconds from the issue time
    """

    scope: typing.Optional[AccessTokenScope] = pydantic.Field(default=None)
    """
    The scope, or a space-delimited list of scopes the token is issued for
    """

    token_type: typing.Optional[typing.Literal["bearer"]] = pydantic.Field(default=None)
    """
    Token type
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
