# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .experimental_stream_request_model import ExperimentalStreamRequestModel
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ExperimentalStreamRequest(UniversalBaseModel):
    """
    ExperimentalStreamRequest is the wrapper for request parameters to the client
    """

    input: str = pydantic.Field()
    """
    Plain text or SSML to be synthesized to speech.
    Refer to https://docs.sws.speechify.com/docs/api-limits for the input size limits.
    Emotion, Pitch and Speed Rate are configured in the ssml input, please refer to the ssml documentation for more information: https://docs.sws.speechify.com/docs/ssml#prosody
    """

    language: typing.Optional[str] = pydantic.Field(default=None)
    """
    Language of the input. Follow the format of an ISO 639-1 language code and an ISO 3166-1 region code, separated by a hyphen, e.g. en-US.
    Please refer to the list of the supported languages and recommendations regarding this parameter: https://docs.sws.speechify.com/docs/language-support.
    """

    model: typing.Optional[ExperimentalStreamRequestModel] = pydantic.Field(default=None)
    """
    Model used for audio synthesis
    simba-base ModelBase  ModelBase is deprecated. Use simba-english or simba-multilingual instead.  @deprecated
    simba-english ModelEnglish
    simba-multilingual ModelMultilingual
    simba-turbo ModelTurbo
    """

    voice_id: str = pydantic.Field()
    """
    Id of the voice to be used for synthesizing speech. Refer to /v1/voices endpoint for available voices
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
