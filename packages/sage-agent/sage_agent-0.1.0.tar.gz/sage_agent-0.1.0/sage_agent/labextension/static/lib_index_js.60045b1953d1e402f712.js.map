{"version":3,"file":"lib_index_js.60045b1953d1e402f712.js","mappings":"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","sources":["webpack://sage-agent/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ICommandPalette, WidgetTracker } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\nimport { PanelLayout } from '@lumino/widgets';\nimport { Message } from '@lumino/messaging';\n\n/**\n * ChatBoxWidget: A widget for interacting with OpenAI via a chat interface\n */\nclass ChatBoxWidget extends Widget {\n  private chatHistory: HTMLDivElement;\n  private chatInput: HTMLInputElement;\n  private sendButton: HTMLButtonElement;\n  private apiKey: string = '';\n  private inferenceUrl: string = 'https://api.alpinex.ai/v1/chat/completions';\n  private modelName: string = 'Meta-Llama-3.1-405B-Instruct-Turbo';\n  private messageHistory: Array<{ role: string; content: string }> = [];\n\n  constructor() {\n    super();\n    this.id = 'sage-agent-chat';\n    this.title.label = 'AI Chat';\n    this.title.closable = true;\n    this.addClass('sage-agent-chatbox');\n\n    // Create layout for the chat box\n    const layout = new PanelLayout();\n    this.layout = layout;\n\n    // Create chat history container\n    const historyContainer = document.createElement('div');\n    historyContainer.className = 'sage-agent-history-container';\n    this.chatHistory = document.createElement('div');\n    this.chatHistory.className = 'sage-agent-chat-history';\n    historyContainer.appendChild(this.chatHistory);\n\n    // Create input container with text input and send button\n    const inputContainer = document.createElement('div');\n    inputContainer.className = 'sage-agent-input-container';\n\n    this.chatInput = document.createElement('input');\n    this.chatInput.className = 'sage-agent-chat-input';\n    this.chatInput.placeholder = 'Ask your question...';\n    this.chatInput.addEventListener('keydown', event => {\n      if (event.key === 'Enter' && this.chatInput.value.trim() !== '') {\n        this.sendMessage();\n      }\n    });\n\n    this.sendButton = document.createElement('button');\n    this.sendButton.className = 'sage-agent-send-button';\n    this.sendButton.textContent = 'Send';\n    this.sendButton.addEventListener('click', () => {\n      if (this.chatInput.value.trim() !== '') {\n        this.sendMessage();\n      }\n    });\n\n    inputContainer.appendChild(this.chatInput);\n    inputContainer.appendChild(this.sendButton);\n\n    // Add history and input containers to the layout\n    layout.addWidget(new Widget({ node: historyContainer }));\n    layout.addWidget(new Widget({ node: inputContainer }));\n\n    // Add welcome message\n    this.addSystemMessage(`Welcome to AI Chat! Using model: ${this.modelName}`);\n  }\n\n  /**\n   * Handle a message after the widget is shown.\n   */\n  protected onAfterShow(msg: Message): void {\n    this.chatInput.focus();\n  }\n\n  /**\n   * Set the OpenAI API key\n   */\n  setApiKey(apiKey: string): void {\n    this.apiKey = apiKey;\n    if (!apiKey) {\n      this.addSystemMessage(\n        '⚠️ No API key set. Please configure it in the settings.'\n      );\n    } else {\n      this.addSystemMessage('API key configured successfully.');\n    }\n  }\n\n  /**\n   * Set the inference URL\n   */\n  setInferenceUrl(url: string): void {\n    this.inferenceUrl = url || 'https://api.alpinex.ai/v1/chat/completions';\n    this.addSystemMessage(`Inference URL set to: ${this.inferenceUrl}`);\n  }\n\n  /**\n   * Set the model name\n   */\n  setModelName(model: string): void {\n    if (model && model !== this.modelName) {\n      this.modelName = model;\n      this.addSystemMessage(`Model changed to: ${this.modelName}`);\n    }\n  }\n\n  /**\n   * Add a user message to the chat history\n   */\n  private addUserMessage(message: string): void {\n    const messageElement = document.createElement('div');\n    messageElement.className = 'sage-agent-message sage-agent-user-message';\n    messageElement.innerHTML = `<strong>You:</strong> ${message}`;\n    this.chatHistory.appendChild(messageElement);\n    this.chatHistory.scrollTop = this.chatHistory.scrollHeight;\n\n    // Add to message history for context\n    this.messageHistory.push({ role: 'user', content: message });\n  }\n\n  /**\n   * Add an AI response to the chat history\n   */\n  private addAIResponse(message: string): void {\n    const messageElement = document.createElement('div');\n    messageElement.className = 'sage-agent-message sage-agent-ai-message';\n    messageElement.innerHTML = `<strong>AI:</strong> ${message}`;\n    this.chatHistory.appendChild(messageElement);\n    this.chatHistory.scrollTop = this.chatHistory.scrollHeight;\n\n    // Add to message history for context\n    this.messageHistory.push({ role: 'assistant', content: message });\n  }\n\n  /**\n   * Add a system message to the chat history\n   */\n  private addSystemMessage(message: string): void {\n    const messageElement = document.createElement('div');\n    messageElement.className = 'sage-agent-message sage-agent-system-message';\n    messageElement.textContent = message;\n    this.chatHistory.appendChild(messageElement);\n    this.chatHistory.scrollTop = this.chatHistory.scrollHeight;\n  }\n\n  /**\n   * Send a message to the OpenAI API\n   */\n  private async sendMessage(): Promise<void> {\n    const message = this.chatInput.value.trim();\n    if (!message) {\n      return;\n    }\n\n    this.addUserMessage(message);\n    this.chatInput.value = '';\n\n    if (!this.apiKey) {\n      this.addSystemMessage(\n        '❌ API key is not set. Please configure it in the settings.'\n      );\n      return;\n    }\n\n    // Add a loading indicator\n    const loadingElement = document.createElement('div');\n    loadingElement.className = 'sage-agent-message sage-agent-loading';\n    loadingElement.textContent = 'AI is thinking...';\n    this.chatHistory.appendChild(loadingElement);\n    this.chatHistory.scrollTop = this.chatHistory.scrollHeight;\n\n    try {\n      // Prepare the messages for the API, including context\n      const messages = [...this.messageHistory];\n\n      // Make API call\n      const response = await fetch(this.inferenceUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          model: this.modelName,\n          messages: messages.slice(-10) // Only send last 10 messages to avoid token limits\n        })\n      });\n\n      // Remove loading indicator\n      this.chatHistory.removeChild(loadingElement);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.error?.message || `Error: ${response.statusText}`\n        );\n      }\n\n      const data = await response.json();\n      const reply = data.choices[0].message.content;\n      this.addAIResponse(reply);\n    } catch (error) {\n      // Remove loading indicator\n      if (loadingElement.parentNode === this.chatHistory) {\n        this.chatHistory.removeChild(loadingElement);\n      }\n\n      // Show error message\n      this.addSystemMessage(\n        `❌ ${error instanceof Error ? error.message : 'An error occurred while communicating with the AI service.'}`\n      );\n    }\n  }\n}\n\n/**\n * Initialization data for the sage-agent extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'sage-agent:plugin',\n  description: 'Sage AI - Your AI Data Partner',\n  autoStart: true,\n  requires: [ICommandPalette],\n  optional: [ISettingRegistry],\n  activate: (\n    app: JupyterFrontEnd,\n    palette: ICommandPalette,\n    settingRegistry: ISettingRegistry | null\n  ) => {\n    console.log('JupyterLab extension sage-agent is activated!');\n\n    // Create a widget tracker to keep track of the chat widgets\n    const tracker = new WidgetTracker<ChatBoxWidget>({\n      namespace: 'sage-agent-chat'\n    });\n\n    // Create a new chat widget\n    const createChatWidget = () => {\n      const chatWidget = new ChatBoxWidget();\n      tracker.add(chatWidget);\n\n      // Add the chat widget to the right side panel\n      app.shell.add(chatWidget, 'right', { rank: 1000 });\n\n      return chatWidget;\n    };\n\n    // Create the initial chat widget\n    let chatWidget = createChatWidget();\n\n    // Function to load settings\n    const loadSettings = (settings: ISettingRegistry.ISettings) => {\n      // Get the API key from the settings\n      const apiKey = settings.get('apiKey').composite as string;\n      chatWidget.setApiKey(apiKey);\n\n      // Get the inference URL from the settings\n      const inferenceUrl = settings.get('inferenceUrl').composite as string;\n      chatWidget.setInferenceUrl(inferenceUrl);\n\n      // Get the model name from the settings\n      const modelName = settings.get('modelName').composite as string;\n      chatWidget.setModelName(modelName);\n\n      // Listen for setting changes\n      settings.changed.connect(() => {\n        const updatedApiKey = settings.get('apiKey').composite as string;\n        const updatedInferenceUrl = settings.get('inferenceUrl')\n          .composite as string;\n        const updatedModelName = settings.get('modelName').composite as string;\n\n        chatWidget.setApiKey(updatedApiKey);\n        chatWidget.setInferenceUrl(updatedInferenceUrl);\n        chatWidget.setModelName(updatedModelName);\n      });\n    };\n\n    // Load settings if available\n    if (settingRegistry) {\n      Promise.all([settingRegistry.load(plugin.id), app.restored])\n        .then(([settings]) => {\n          loadSettings(settings);\n        })\n        .catch(error => {\n          console.error('Failed to load sage-agent settings', error);\n        });\n    }\n\n    // Add an application command to open the chat widget\n    const command: string = 'sage-agent:open-chat';\n    app.commands.addCommand(command, {\n      label: 'Open AI Chat',\n      execute: () => {\n        // If the widget is disposed, create a new one\n        if (chatWidget.isDisposed) {\n          chatWidget = createChatWidget();\n        }\n\n        // If the widget is not attached to the DOM, add it\n        if (!chatWidget.isAttached) {\n          app.shell.add(chatWidget, 'right', { rank: 1000 });\n        }\n\n        // Activate the widget\n        app.shell.activateById(chatWidget.id);\n      }\n    });\n\n    // Add the command to the command palette\n    palette.addItem({ command, category: 'AI Tools' });\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}