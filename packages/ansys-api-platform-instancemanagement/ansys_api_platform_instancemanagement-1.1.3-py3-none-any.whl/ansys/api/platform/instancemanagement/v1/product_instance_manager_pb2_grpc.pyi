"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2
import google.protobuf.empty_pb2
import grpc

class ProductInstanceManagerStub:
    """Manages the creation and deletion of product instances.
    Note: product instance is the name given to a stateful process starting one or several services.
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateInstance: grpc.UnaryUnaryMultiCallable[
        ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.CreateInstanceRequest,
        ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.Instance] = ...
    """Creates a new instance of a product."""

    DeleteInstance: grpc.UnaryUnaryMultiCallable[
        ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.DeleteInstanceRequest,
        google.protobuf.empty_pb2.Empty] = ...
    """Removes a running instance of a product."""

    ListInstances: grpc.UnaryUnaryMultiCallable[
        ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.ListInstancesRequest,
        ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.ListInstancesResponse] = ...
    """Lists all running product instances."""

    GetInstance: grpc.UnaryUnaryMultiCallable[
        ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.GetInstanceRequest,
        ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.Instance] = ...
    """Gets an instance of a product.
    The caller must check that the instance is ready
    from the return before using it.
    Returns an error if the instance failed
    to start, crashed, or does not exist.
    """

    ListDefinitions: grpc.UnaryUnaryMultiCallable[
        ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.ListDefinitionsRequest,
        ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.ListDefinitionsResponse] = ...
    """Lists all available products that can be started using this product instance manager."""

    GetDefinition: grpc.UnaryUnaryMultiCallable[
        ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.GetDefinitionRequest,
        ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.Definition] = ...
    """Gets a product definition."""


class ProductInstanceManagerServicer(metaclass=abc.ABCMeta):
    """Manages the creation and deletion of product instances.
    Note: product instance is the name given to a stateful process starting one or several services.
    """
    @abc.abstractmethod
    def CreateInstance(self,
        request: ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.CreateInstanceRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.Instance:
        """Creates a new instance of a product."""
        pass

    @abc.abstractmethod
    def DeleteInstance(self,
        request: ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.DeleteInstanceRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Removes a running instance of a product."""
        pass

    @abc.abstractmethod
    def ListInstances(self,
        request: ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.ListInstancesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.ListInstancesResponse:
        """Lists all running product instances."""
        pass

    @abc.abstractmethod
    def GetInstance(self,
        request: ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.GetInstanceRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.Instance:
        """Gets an instance of a product.
        The caller must check that the instance is ready
        from the return before using it.
        Returns an error if the instance failed
        to start, crashed, or does not exist.
        """
        pass

    @abc.abstractmethod
    def ListDefinitions(self,
        request: ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.ListDefinitionsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.ListDefinitionsResponse:
        """Lists all available products that can be started using this product instance manager."""
        pass

    @abc.abstractmethod
    def GetDefinition(self,
        request: ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.GetDefinitionRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.platform.instancemanagement.v1.product_instance_manager_pb2.Definition:
        """Gets a product definition."""
        pass


def add_ProductInstanceManagerServicer_to_server(servicer: ProductInstanceManagerServicer, server: grpc.Server) -> None: ...
