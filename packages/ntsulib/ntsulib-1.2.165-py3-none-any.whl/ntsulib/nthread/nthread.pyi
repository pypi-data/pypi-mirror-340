import enum
from _typeshed import Incomplete
from typing import Any, Callable, Iterator, List, Union

class ThreadPoolStatus(enum.Enum):
    unstarted: int
    running: int
    finished: int
    terminated: int

class n_ThreadPool:
    max_workers: Incomplete
    daemon: Incomplete
    status: Incomplete
    task_count: int
    task_finished_count: int
    task_unfinished_count: int
    def __init__(self, max_workers: int = ..., daemon: bool = ...) -> None: ...
    def setGroupExecInterval(self, group: int, time_interval: float): ...
    def put(self, func: Callable, *args, **kwargs): ...
    def start(self) -> None: ...
    def startAndWait(self) -> List[Any]: ...
    def map(self, func: Callable, *iterables, timeout: Union[float, None] = ...) -> Iterator: ...
    def clear(self) -> None: ...
    def stopAnyWay(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...
