# This file was generated by Nuitka

# Stubs included by default
import psycopg2
import threading
from typing_extensions import Self
import re
from dataclasses import dataclass
import time
from psycopg2 import pool, sql
from dstatus import *

@dataclass
class n_postgresql:
    @classmethod
    def set_pool_debug(cls, debug: bool) -> None: ...
    def set_connect_debug(self: Self, debug: bool) -> None: ...
    @classmethod
    def initialize_pool(cls, minconn: int, maxconn: int) -> typing.Any: ...
    @classmethod
    def start_healthcheckthread(cls, interval: float) -> typing.Any: ...
    @classmethod
    def stop_healthcheckthread(cls, ) -> typing.Any: ...
    @classmethod
    def close_pool(cls, ) -> typing.Any: ...
    def __init__(self: Self, host: str | None, port: int | None, user: str | None, password: str | None, charset: str, debug: bool, use_pool: bool) -> None: ...
    @classmethod
    def getInstance(cls, connect: psycopg2.extensions.connection | None) -> 'n_postgresql | None': ...
    def connect_server(self: Self, commit_status: Commit_Status) -> typing.Any: ...
    def setup(self: Self, db_name: str, is_start_transaction: bool) -> None: ...
    def use_database(self: Self, db_name: str) -> None: ...
    def exec_cmd(self: Self, cmd: str) -> str | list[tuple[any, ...]] | None: ...
    def exec_language(self: Self, sql_language: str, params: typing.Any, fetch: typing.Any) -> list[tuple[any, ...]] | None: ...
    def isolation(self: Self) -> Isolation_Status | None: ...
    def isolation(self: Self, iso_status: Isolation_Status) -> typing.Any: ...
    def quick_select(self: Self, name: str, limit: int | None) -> list | None: ...
    def _handle_psql_meta_command(self: Self, cmd: str) -> str | list[tuple[any, ...]] | None: ...
    def _handle_mysql_show_command(self: Self, cmd: str) -> str | list[tuple[any, ...]] | None: ...
    def commit_status(self: Self) -> Commit_Status: ...
    def commit_status(self: Self, status: Commit_Status) -> typing.Any: ...
    def current_db(self: Self) -> str | None: ...
    def current_db(self: Self, db_name: str) -> typing.Any: ...
    def startTransAction(self: Self) -> None: ...
    def commit(self: Self) -> None: ...
    def rollback(self: Self) -> None: ...
    def connect_status(self: Self) -> Sql_Status: ...
    def exists_db(self: Self, database_name: str) -> bool: ...
    def create_database(self: Self, database_name: str) -> None: ...
    def exists_table(self: Self, tb_name: str, schema: str) -> bool: ...
    def showDatabases(self: Self) -> list[str]: ...
    def showViews(self: Self) -> list[str]: ...
    def showTables(self: Self) -> list[str]: ...
    def exists_view(self: Self, view_name: str, schema: str) -> bool: ...
    def drop_table(self: Self, tb_name: str) -> typing.Any: ...
    def drop_database(self: Self, db_name: str) -> None: ...
    def drop_view(self: Self, view_name: str) -> typing.Any: ...
    def getEncryAccountPassword(self: Self, username: str) -> str: ...
    def resetPassword(self: Self, new_password: str, username: str, require_old_password: bool, old_password: str) -> typing.Any: ...
    def createAdminAccount(self: Self, username: str, password: str) -> bool: ...
    def createOnlyReadAccount(self: Self, username: str, password: str) -> bool: ...
    def createDefaultAccount(self: Self, username: str, password: str) -> bool: ...
    def deleteAccountAnyWay(self: Self, account_name: str) -> bool: ...
    def showAllAccountWithPermission(self: Self) -> list: ...
    @staticmethod
    def print_as_table(data: list, headers: typing.Any) -> typing.Any: ...
    def disconnect_server(self: Self) -> typing.Any: ...
    def __enter__(self: Self) -> typing.Any: ...
    def __exit__(self: Self, exc_type: typing.Any, exc_val: typing.Any, exc_tb: typing.Any) -> typing.Any: ...
    def _safe_disconnect(self: Self) -> typing.Any: ...
    def __del__(self: Self) -> typing.Any: ...

__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import re
import threading
import time
import psycopg2
import psycopg2.sql
import psycopg2.pool
import 