import psycopg2
from .dstatus import Commit_Status, Isolation_Status, Sql_Status
from _typeshed import Incomplete
from typing import Any, List, Optional, Tuple, Union

class n_postgresql:
    debug: bool
    @classmethod
    def set_pool_debug(cls, debug: bool) -> None: ...
    def set_connect_debug(self, debug: bool) -> None: ...
    @classmethod
    def initialize_pool(cls, minconn: int = ..., maxconn: int = ..., **kwargs): ...
    @classmethod
    def start_healthcheckthread(cls, interval: float = ...): ...
    @classmethod
    def stop_healthcheckthread(cls) -> None: ...
    @classmethod
    def close_pool(cls) -> None: ...
    host: Incomplete
    port: Incomplete
    user: Incomplete
    password: Incomplete
    charset: Incomplete
    connection: Incomplete
    use_pool: Incomplete
    def __init__(self, host: Union[str, None] = ..., port: Union[int, None] = ..., user: Union[str, None] = ..., password: Union[str, None] = ..., charset: str = ..., debug: bool = ..., use_pool: bool = ...) -> None: ...
    @classmethod
    def getInstance(cls, connect: Union[psycopg2.extensions.connection, None] = ..., *, host: str = ..., port: int = ..., user: str = ..., password: str = ..., charset: str = ..., debug: bool = ...) -> n_postgresql | None: ...
    def connect_server(self, commit_status: Commit_Status = ...): ...
    def setup(self, db_name: str, is_start_transaction: bool = ...) -> None: ...
    def use_database(self, db_name: str) -> None: ...
    def exec_cmd(self, cmd: str) -> Union[str, List[Tuple[Any, ...]], None]: ...
    def exec_language(self, sql_language: str, params: Incomplete | None = ..., fetch: Incomplete | None = ...) -> Union[Tuple[Tuple[Any, ...], ...], None]: ...
    @property
    def isolation(self) -> Union[Isolation_Status, None]: ...
    def quick_select(self, name: str, limit: Union[int, None] = ...) -> Union[list, None]: ...
    @property
    def commit_status(self) -> Commit_Status: ...
    @property
    def current_db(self) -> Union[str, None]: ...
    def startTransAction(self) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    @property
    def connect_status(self) -> Sql_Status: ...
    def exists_db(self, database_name: str) -> bool: ...
    def create_database(self, database_name: str) -> None: ...
    def exists_table(self, tb_name: str, schema: str = ...) -> bool: ...
    def showDatabases(self) -> list[str]: ...
    def showViews(self) -> list[str]: ...
    def showTables(self) -> list[str]: ...
    def exists_view(self, view_name: str, schema: str = ...) -> bool: ...
    def drop_table(self, tb_name: str): ...
    def drop_database(self, db_name: str) -> None: ...
    def drop_view(self, view_name: str): ...
    def getEncryAccountPassword(self, username: str) -> str: ...
    def resetPassword(self, new_password: str, username: Optional[str] = ..., require_old_password: bool = ..., old_password: Optional[str] = ...): ...
    def createAdminAccount(self, username: str, password: str) -> bool: ...
    def createOnlyReadAccount(self, username: str, password: str) -> bool: ...
    def createDefaultAccount(self, username: str, password: str) -> bool: ...
    def deleteAccountAnyWay(self, account_name: str) -> bool: ...
    def showAllAccountWithPermission(self) -> list: ...
    @staticmethod
    def print_as_table(data: list, headers: Incomplete | None = ...): ...
    def disconnect_server(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def __del__(self) -> None: ...
